// $ANTLR 3.x E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g 2013-04-04 17:28:35

  package com.seekon.mars.sqlscript.parser;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;


@SuppressWarnings("all")
public class SQLParser extends Parser {
	public static final String[] tokenNames = new String[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ABS", "ACCESSIBLE_SYM", "ACOS", 
		"ACTION", "ADDDATE", "ADDTIME", "ADD_SYM", "AES_DECRYPT", "AES_ENCRYPT", 
		"AFTER_SYM", "AGAINST", "AGGREGATE_SYM", "ALGORITHM_SYM", "ALL", "ALL_FIELDS", 
		"ALTER", "ANALYZE_SYM", "AND_SYM", "ANY", "ARMSCII8", "ARROW", "ASC", 
		"ASCII_SYM", "ASENSITIVE_SYM", "ASIN", "ASTERISK", "AS_SYM", "ATAN", "ATAN2", 
		"AT_SYM", "AUTHORS_SYM", "AUTOEXTEND_SIZE_SYM", "AUTO_INCREMENT", "AVG", 
		"AVG_ROW_LENGTH", "A_", "BACKUP_SYM", "BEFORE_SYM", "BEGIN_SYM", "BENCHMARK", 
		"BETWEEN", "BIG5", "BIGINT", "BIN", "BINARY", "BINLOG_SYM", "BITAND", 
		"BIT_AND", "BIT_LENGTH", "BIT_NUM", "BIT_OR", "BIT_SYM", "BIT_XOR", "BLOB_SYM", 
		"BLOCK_SYM", "BOOLEAN_SYM", "BOOL_SYM", "BOTH", "BTREE_SYM", "BYTE_SYM", 
		"BY_SYM", "B_", "CACHE_SYM", "CALL_SYM", "CASCADE", "CASCADED", "CASE_SYM", 
		"CAST_SYM", "CEIL", "CEILING", "CHAIN_SYM", "CHANGE", "CHANGED", "CHAR", 
		"CHARACTER_SYM", "CHARSET", "CHAR_LENGTH", "CHECKSUM_SYM", "CHECK_SYM", 
		"CIPHER_SYM", "CLIENT_SYM", "CLOSE_SYM", "COALESCE", "CODE_SYM", "COERCIBILITY", 
		"COLLATE_SYM", "COLLATION", "COLON", "COLUMNS_SYM", "COLUMN_FORMAT", "COLUMN_SYM", 
		"COMMA", "COMMENT_SYM", "COMMITTED_SYM", "COMMIT_SYM", "COMPACT_SYM", 
		"COMPLETION_SYM", "COMPRESS", "COMPRESSED_SYM", "CONCAT", "CONCAT_WS", 
		"CONCURRENT", "CONDITION_SYM", "CONNECTION_ID", "CONNECTION_SYM", "CONSISTENT_SYM", 
		"CONSTRAINT", "CONTAINS_SYM", "CONTEXT_SYM", "CONTINUE_SYM", "CONTRIBUTORS_SYM", 
		"CONV", "CONVERT_SYM", "CONVERT_TZ", "COPY_SYM", "COS", "COT", "COUNT", 
		"CP1250", "CP1251", "CP1256", "CP1257", "CP850", "CP852", "CP866", "CP932", 
		"CPU_SYM", "CRC32", "CREATE", "CROSECOND", "CROSS", "CUBE_SYM", "CURDATE", 
		"CURRENT_TIMESTAMP", "CURRENT_USER", "CURSOR_SYM", "CURTIME", "C_", "DATABASE", 
		"DATAFILE_SYM", "DATA_SYM", "DATEDIFF", "DATETIME", "DATE_ADD", "DATE_FORMAT", 
		"DATE_SUB", "DATE_SYM", "DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", 
		"DAY_HOUR", "DAY_MICROSECOND", "DAY_MINUTE", "DAY_SECOND", "DAY_SYM", 
		"DEALLOCATE_SYM", "DEC8", "DECIMAL_SYM", "DECLARE_SYM", "DECODE", "DEFAULT", 
		"DEFINER", "DEGREES", "DELAYED_SYM", "DELAY_KEY_WRITE_SYM", "DELETE_SYM", 
		"DESC", "DES_DECRYPT", "DES_ENCRYPT", "DES_KEY_FILE", "DETERMINISTIC_SYM", 
		"DIRECTORY_SYM", "DISABLE_SYM", "DISCARD", "DISK_SYM", "DISTINCT", "DISTINCTROW", 
		"DIVIDE", "DOT", "DOUBLE_SYM", "DO_SYM", "DROP", "DUAL_SYM", "DUMPFILE", 
		"DUPLICATE_SYM", "DYNAMIC_SYM", "D_", "EACH_SYM", "ELSE_SYM", "ELSIF_SYM", 
		"ELT", "ENABLE_SYM", "ENCLOSED", "ENCODE", "ENCRYPT", "ENDS_SYM", "END_SYM", 
		"ENGINES_SYM", "ENGINE_SYM", "ENUM", "EQ_SYM", "ERRORS", "ESCAPED", "ESCAPE_SYM", 
		"EUCJPMS", "EUCKR", "EVENTS_SYM", "EVENT_SYM", "EVERY_SYM", "EXCHANGE_SYM", 
		"EXCLUSIVE_SYM", "EXECUTE_SYM", "EXISTS", "EXIT_SYM", "EXP", "EXPANSION_SYM", 
		"EXPORT_SET", "EXTENDED_SYM", "EXTENT_SIZE_SYM", "EXTRACT", "E_", "FALSE_SYM", 
		"FAST_SYM", "FAULTS_SYM", "FETCH_SYM", "FIELD", "FIELDS_SYM", "FILE_SYM", 
		"FIND_IN_SET", "FIRST_SYM", "FIXED_SYM", "FLOAT_SYM", "FLOOR", "FLUSH_SYM", 
		"FORCE_SYM", "FOREIGN", "FORMAT", "FOR_SYM", "FOUND_ROWS", "FOUND_SYM", 
		"FROM", "FROM_BASE64", "FROM_DAYS", "FROM_UNIXTIME", "FULL", "FULLTEXT_SYM", 
		"FUNCTION_SYM", "F_", "GB2312", "GBK", "GEOMETRYCOLLECTION", "GEOMETRY_SYM", 
		"GEOSTD8", "GET", "GET_FORMAT", "GET_LOCK", "GLOBAL_SYM", "GRANT", "GRANTS", 
		"GREEK", "GROUP_CONCAT", "GROUP_SYM", "GTH", "G_", "HANDLER_SYM", "HASH_SYM", 
		"HAVING", "HEBREW", "HELP_SYM", "HEX", "HEX_DIGIT", "HEX_DIGIT_FRAGMENT", 
		"HIGH_PRIORITY", "HOSTS_SYM", "HOST_SYM", "HOUR", "HOUR_MICROSECOND", 
		"HOUR_MINUTE", "HOUR_SECOND", "HP8", "H_", "ID", "IDENTIFIED_SYM", "IF", 
		"IFNULL", "IGNORE_SYM", "IMPORT", "INDEXES", "INDEX_SYM", "INET_ATON", 
		"INET_NTOA", "INFILE", "INITIAL_SIZE_SYM", "INNER_SYM", "INOUT_SYM", "INPLACE_SYM", 
		"INSENSITIVE_SYM", "INSERT", "INSERT_METHOD", "INSTALL_SYM", "INSTR", 
		"INTEGER_NUM", "INTEGER_SYM", "INTERVAL_SYM", "INTO", "INT_SYM", "INVOKER_SYM", 
		"IN_SYM", "IO_SYM", "IPC_SYM", "ISOLATION", "ISSUER_SYM", "IS_FREE_LOCK", 
		"IS_SYM", "IS_USED_LOCK", "ITERATE_SYM", "I_", "JOIN_SYM", "J_", "KEYBCS2", 
		"KEYS", "KEY_BLOCK_SIZE", "KEY_SYM", "KILL_SYM", "KOI8R", "KOI8U", "K_", 
		"LANGUAGE", "LAST_DAY", "LAST_INSERT_ID", "LAST_SYM", "LATIN1", "LATIN1_BIN", 
		"LATIN1_GENERAL_CS", "LATIN2", "LATIN5", "LATIN7", "LBRACK", "LEADING", 
		"LEAVES", "LEAVE_SYM", "LEFT", "LENGTH", "LESS_SYM", "LET", "LEVEL_SYM", 
		"LIKE_SYM", "LIMIT", "LINEAR_SYM", "LINES", "LINESTRING", "LIST_SYM", 
		"LN", "LOAD", "LOAD_FILE", "LOCAL_SYM", "LOCATE", "LOCK", "LOCKS_SYM", 
		"LOG", "LOG10", "LOG2", "LOGFILE_SYM", "LOGS_SYM", "LONGBLOB", "LONGTEXT", 
		"LONG_SYM", "LOOP_SYM", "LOWER", "LOW_PRIORITY", "LPAD", "LPAREN", "LTH", 
		"LTRIM", "L_", "MACCE", "MACROMAN", "MAKEDATE", "MAKETIME", "MAKE_SET", 
		"MASTER_CONNECT_RETRY", "MASTER_HOST_SYM", "MASTER_LOG_FILE_SYM", "MASTER_LOG_POS_SYM", 
		"MASTER_PASSWORD_SYM", "MASTER_PORT_SYM", "MASTER_POS_WAIT", "MASTER_SERVER_ID_SYM", 
		"MASTER_SSL_CAPATH_SYM", "MASTER_SSL_CA_SYM", "MASTER_SSL_CERT_SYM", "MASTER_SSL_CIPHER_SYM", 
		"MASTER_SSL_KEY_SYM", "MASTER_SSL_SYM", "MASTER_SSL_VERIFY_SERVER_CERT", 
		"MASTER_SYM", "MASTER_USER_SYM", "MATCH", "MAXVALUE_SYM", "MAX_CONNECTIONS_PER_HOUR", 
		"MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE_SYM", "MAX_SYM", "MAX_UPDATES_PER_HOUR", 
		"MAX_USER_CONNECTIONS_SYM", "MD5", "MEDIUMBLOB", "MEDIUMINT", "MEDIUMTEXT", 
		"MEDIUM_SYM", "MEMORY_SYM", "MERGE_SYM", "MICROSECOND", "MID", "MIGRATE_SYM", 
		"MINUS", "MINUTE", "MINUTE_MICROSECOND", "MINUTE_SECOND", "MIN_ROWS", 
		"MIN_SYM", "ML_COMMENT", "MOD", "MODE_SYM", "MODIFIES_SYM", "MODIFY_SYM", 
		"MOD_SYM", "MONTH", "MONTHNAME", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON", 
		"MUTEX_SYM", "M_", "NAMES_SYM", "NAME_CONST", "NAME_SYM", "NATIONAL_SYM", 
		"NATURAL", "NCHAR_SYM", "NEGATION", "NEW_SYM", "NEXT_SYM", "NODEGROUP_SYM", 
		"NONE_SYM", "NOT_EQ", "NOT_SYM", "NOW", "NO_SYM", "NO_WAIT_SYM", "NO_WRITE_TO_BINLOG", 
		"NULL_SYM", "NUMERIC_SYM", "NVARCHAR_SYM", "N_", "OCT", "OFFSET_SYM", 
		"OJ_SYM", "OLD_PASSWORD", "ON", "ONE_SHOT_SYM", "ONE_SYM", "OPEN_SYM", 
		"OPTIMIZE", "OPTION", "OPTIONALLY", "OPTIONS_SYM", "ORD", "ORDER_SYM", 
		"OR_SYM", "OUTER", "OUTFILE", "OUT_SYM", "OWNER_SYM", "O_", "PACK_KEYS_SYM", 
		"PAGE_CHECKSUM_SYM", "PAGE_SYM", "PARSER_SYM", "PARTIAL", "PARTITIONING_SYM", 
		"PARTITIONS_SYM", "PARTITION_SYM", "PASSWORD", "PERIOD_ADD", "PERIOD_DIFF", 
		"PHASE_SYM", "PI", "PLUGINS_SYM", "PLUGIN_SYM", "PLUS", "POINT_SYM", "POLYGON", 
		"PORT_SYM", "POW", "POWER", "POWER_OP", "PRECISION", "PREPARE_SYM", "PRESERVE_SYM", 
		"PREV_SYM", "PRIMARY_SYM", "PRIVILEGES", "PROCEDURE", "PROCESS", "PROCESSLIST_SYM", 
		"PROFILES_SYM", "PROFILE_SYM", "PURGE", "P_", "QUARTER", "QUERY_SYM", 
		"QUICK", "QUOTE", "Q_", "RADIANS", "RAND", "RANGE_SYM", "RBRACK", "READS_SYM", 
		"READ_ONLY_SYM", "READ_SYM", "READ_WRITE_SYM", "REAL", "REAL_NUMBER", 
		"REBUILD_SYM", "RECOVER_SYM", "REDOFILE_SYM", "REDO_BUFFER_SIZE_SYM", 
		"REDUNDANT_SYM", "REFERENCES", "REGEXP", "RELAY_LOG_FILE_SYM", "RELAY_LOG_POS_SYM", 
		"RELEASE_LOCK", "RELEASE_SYM", "RELOAD", "REMOVE_SYM", "RENAME", "REORGANIZE_SYM", 
		"REPAIR", "REPEAT", "REPEATABLE_SYM", "REPLACE", "REPLICATION", "REQUIRE_SYM", 
		"RESET_SYM", "RESOURCES", "RESTORE_SYM", "RESTRICT", "RESUME_SYM", "RETURNS_SYM", 
		"RETURN_SYM", "REVERSE", "REVOKE", "RIGHT", "ROLLBACK", "ROLLUP_SYM", 
		"ROUND", "ROUTINE_SYM", "ROWS_SYM", "ROW_FORMAT_SYM", "ROW_SYM", "RPAD", 
		"RPAREN", "RTREE_SYM", "RTRIM", "R_", "SAVEPOINT", "SCHEDULE_SYM", "SCHEMA", 
		"SECOND", "SECOND_MICROSECOND", "SECURITY_SYM", "SEC_TO_TIME", "SELECT", 
		"SEMI", "SENSITIVE_SYM", "SEPARATOR_SYM", "SERIALIZABLE_SYM", "SERIAL_SYM", 
		"SERVER_SYM", "SESSION_SYM", "SESSION_USER", "SET_SYM", "SET_VAR", "SHARED_SYM", 
		"SHARE_SYM", "SHIFT_LEFT", "SHIFT_RIGHT", "SHOW", "SHUTDOWN", "SIGN", 
		"SIGNED_SYM", "SIMPLE_SYM", "SIN", "SJIS", "SLAVE", "SLEEP", "SL_COMMENT", 
		"SMALLINT", "SNAPSHOT_SYM", "SOCKET_SYM", "SONAME_SYM", "SOUNDEX", "SOUNDS_SYM", 
		"SOURCE_SYM", "SPACE", "SPATIAL_SYM", "SPECIFIC_SYM", "SQLEXCEPTION_SYM", 
		"SQLSTATE_SYM", "SQLWARNING_SYM", "SQL_BIG_RESULT", "SQL_BUFFER_RESULT", 
		"SQL_CACHE_SYM", "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE_SYM", "SQL_SMALL_RESULT", 
		"SQL_SYM", "SQL_THREAD", "SQRT", "SSL_SYM", "STARTING", "STARTS_SYM", 
		"START_SYM", "STATS_AUTO_RECALC", "STATS_PERSISTENT", "STATUS_SYM", "STD", 
		"STDDEV", "STDDEV_POP", "STDDEV_SAMP", "STOP_SYM", "STORAGE_SYM", "STRAIGHT_JOIN", 
		"STRCMP", "STRING_SYM", "STR_TO_DATE", "SUBJECT_SYM", "SUBPARTITIONS_SYM", 
		"SUBPARTITION_SYM", "SUBSTRING", "SUBSTRING_INDEX", "SUBTIME", "SUM", 
		"SUPER_SYM", "SUSPEND_SYM", "SWAPS_SYM", "SWE7", "SWITCHES_SYM", "SYSDATE", 
		"SYSTEM_USER", "S_", "TABLE", "TABLES", "TABLESPACE", "TABLE_CHECKSUM_SYM", 
		"TAN", "TEMPORARY", "TEMPTABLE_SYM", "TERMINATED", "TEXT_STRING", "TEXT_SYM", 
		"THAN_SYM", "THEN_SYM", "TIMEDIFF", "TIMESTAMP", "TIMESTAMPADD", "TIMESTAMPDIFF", 
		"TIME_FORMAT", "TIME_SYM", "TIME_TO_SEC", "TINYBLOB", "TINYINT", "TINYTEXT", 
		"TIS620", "TO_BASE64", "TO_DAYS", "TO_SECONDS", "TO_SYM", "TRAILING", 
		"TRANSACTION", "TRANSACTIONAL_SYM", "TRIGGERS_SYM", "TRIGGER_SYM", "TRIM", 
		"TRUE_SYM", "TRUNCATE", "TYPES_SYM", "TYPE_SYM", "T_", "UCS2", "UJIS", 
		"UNCOMMITTED_SYM", "UNCOMPRESS", "UNCOMPRESSED_LENGTH", "UNDEFINED_SYM", 
		"UNDOFILE_SYM", "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM", "UNHEX", "UNICODE_SYM", 
		"UNINSTALL_SYM", "UNION_SYM", "UNIQUE_SYM", "UNIX_TIMESTAMP", "UNKNOWN_SYM", 
		"UNLOCK_SYM", "UNSIGNED_SYM", "UNTIL_SYM", "UPDATE", "UPGRADE_SYM", "UPPER", 
		"USAGE", "USER", "USER_VAR", "USER_VAR_SUBFIX1", "USER_VAR_SUBFIX2", "USER_VAR_SUBFIX3", 
		"USER_VAR_SUBFIX4", "USE_FRM", "USE_SYM", "USING_SYM", "UTC_DATE", "UTC_TIME", 
		"UTC_TIMESTAMP", "UTF16", "UTF16LE", "UTF32", "UTF8", "UUID", "U_", "VALUES", 
		"VALUE_SYM", "VARBINARY", "VARCHAR", "VARIABLES", "VARIANCE", "VARYING", 
		"VAR_POP", "VAR_SAMP", "VERSION_SYM", "VERTBAR", "VIEW_SYM", "V_", "WAIT_SYM", 
		"WARNINGS", "WEEK", "WEEKDAY", "WEEKOFYEAR", "WEIGHT_STRING", "WHEN_SYM", 
		"WHERE", "WHILE_SYM", "WHITE_SPACE", "WITH", "WORK_SYM", "WRAPPER_SYM", 
		"WRITE_SYM", "W_", "X509_SYM", "XA_SYM", "XML_SYM", "XOR", "X_", "YEAR", 
		"YEARWEEK", "YEAR_MONTH", "Y_", "ZEROFILL", "Z_"
	};
	public static final int EOF=-1;
	public static final int ABS=4;
	public static final int ACCESSIBLE_SYM=5;
	public static final int ACOS=6;
	public static final int ACTION=7;
	public static final int ADDDATE=8;
	public static final int ADDTIME=9;
	public static final int ADD_SYM=10;
	public static final int AES_DECRYPT=11;
	public static final int AES_ENCRYPT=12;
	public static final int AFTER_SYM=13;
	public static final int AGAINST=14;
	public static final int AGGREGATE_SYM=15;
	public static final int ALGORITHM_SYM=16;
	public static final int ALL=17;
	public static final int ALL_FIELDS=18;
	public static final int ALTER=19;
	public static final int ANALYZE_SYM=20;
	public static final int AND_SYM=21;
	public static final int ANY=22;
	public static final int ARMSCII8=23;
	public static final int ARROW=24;
	public static final int ASC=25;
	public static final int ASCII_SYM=26;
	public static final int ASENSITIVE_SYM=27;
	public static final int ASIN=28;
	public static final int ASTERISK=29;
	public static final int AS_SYM=30;
	public static final int ATAN=31;
	public static final int ATAN2=32;
	public static final int AT_SYM=33;
	public static final int AUTHORS_SYM=34;
	public static final int AUTOEXTEND_SIZE_SYM=35;
	public static final int AUTO_INCREMENT=36;
	public static final int AVG=37;
	public static final int AVG_ROW_LENGTH=38;
	public static final int A_=39;
	public static final int BACKUP_SYM=40;
	public static final int BEFORE_SYM=41;
	public static final int BEGIN_SYM=42;
	public static final int BENCHMARK=43;
	public static final int BETWEEN=44;
	public static final int BIG5=45;
	public static final int BIGINT=46;
	public static final int BIN=47;
	public static final int BINARY=48;
	public static final int BINLOG_SYM=49;
	public static final int BITAND=50;
	public static final int BIT_AND=51;
	public static final int BIT_LENGTH=52;
	public static final int BIT_NUM=53;
	public static final int BIT_OR=54;
	public static final int BIT_SYM=55;
	public static final int BIT_XOR=56;
	public static final int BLOB_SYM=57;
	public static final int BLOCK_SYM=58;
	public static final int BOOLEAN_SYM=59;
	public static final int BOOL_SYM=60;
	public static final int BOTH=61;
	public static final int BTREE_SYM=62;
	public static final int BYTE_SYM=63;
	public static final int BY_SYM=64;
	public static final int B_=65;
	public static final int CACHE_SYM=66;
	public static final int CALL_SYM=67;
	public static final int CASCADE=68;
	public static final int CASCADED=69;
	public static final int CASE_SYM=70;
	public static final int CAST_SYM=71;
	public static final int CEIL=72;
	public static final int CEILING=73;
	public static final int CHAIN_SYM=74;
	public static final int CHANGE=75;
	public static final int CHANGED=76;
	public static final int CHAR=77;
	public static final int CHARACTER_SYM=78;
	public static final int CHARSET=79;
	public static final int CHAR_LENGTH=80;
	public static final int CHECKSUM_SYM=81;
	public static final int CHECK_SYM=82;
	public static final int CIPHER_SYM=83;
	public static final int CLIENT_SYM=84;
	public static final int CLOSE_SYM=85;
	public static final int COALESCE=86;
	public static final int CODE_SYM=87;
	public static final int COERCIBILITY=88;
	public static final int COLLATE_SYM=89;
	public static final int COLLATION=90;
	public static final int COLON=91;
	public static final int COLUMNS_SYM=92;
	public static final int COLUMN_FORMAT=93;
	public static final int COLUMN_SYM=94;
	public static final int COMMA=95;
	public static final int COMMENT_SYM=96;
	public static final int COMMITTED_SYM=97;
	public static final int COMMIT_SYM=98;
	public static final int COMPACT_SYM=99;
	public static final int COMPLETION_SYM=100;
	public static final int COMPRESS=101;
	public static final int COMPRESSED_SYM=102;
	public static final int CONCAT=103;
	public static final int CONCAT_WS=104;
	public static final int CONCURRENT=105;
	public static final int CONDITION_SYM=106;
	public static final int CONNECTION_ID=107;
	public static final int CONNECTION_SYM=108;
	public static final int CONSISTENT_SYM=109;
	public static final int CONSTRAINT=110;
	public static final int CONTAINS_SYM=111;
	public static final int CONTEXT_SYM=112;
	public static final int CONTINUE_SYM=113;
	public static final int CONTRIBUTORS_SYM=114;
	public static final int CONV=115;
	public static final int CONVERT_SYM=116;
	public static final int CONVERT_TZ=117;
	public static final int COPY_SYM=118;
	public static final int COS=119;
	public static final int COT=120;
	public static final int COUNT=121;
	public static final int CP1250=122;
	public static final int CP1251=123;
	public static final int CP1256=124;
	public static final int CP1257=125;
	public static final int CP850=126;
	public static final int CP852=127;
	public static final int CP866=128;
	public static final int CP932=129;
	public static final int CPU_SYM=130;
	public static final int CRC32=131;
	public static final int CREATE=132;
	public static final int CROSECOND=133;
	public static final int CROSS=134;
	public static final int CUBE_SYM=135;
	public static final int CURDATE=136;
	public static final int CURRENT_TIMESTAMP=137;
	public static final int CURRENT_USER=138;
	public static final int CURSOR_SYM=139;
	public static final int CURTIME=140;
	public static final int C_=141;
	public static final int DATABASE=142;
	public static final int DATAFILE_SYM=143;
	public static final int DATA_SYM=144;
	public static final int DATEDIFF=145;
	public static final int DATETIME=146;
	public static final int DATE_ADD=147;
	public static final int DATE_FORMAT=148;
	public static final int DATE_SUB=149;
	public static final int DATE_SYM=150;
	public static final int DAYNAME=151;
	public static final int DAYOFMONTH=152;
	public static final int DAYOFWEEK=153;
	public static final int DAYOFYEAR=154;
	public static final int DAY_HOUR=155;
	public static final int DAY_MICROSECOND=156;
	public static final int DAY_MINUTE=157;
	public static final int DAY_SECOND=158;
	public static final int DAY_SYM=159;
	public static final int DEALLOCATE_SYM=160;
	public static final int DEC8=161;
	public static final int DECIMAL_SYM=162;
	public static final int DECLARE_SYM=163;
	public static final int DECODE=164;
	public static final int DEFAULT=165;
	public static final int DEFINER=166;
	public static final int DEGREES=167;
	public static final int DELAYED_SYM=168;
	public static final int DELAY_KEY_WRITE_SYM=169;
	public static final int DELETE_SYM=170;
	public static final int DESC=171;
	public static final int DES_DECRYPT=172;
	public static final int DES_ENCRYPT=173;
	public static final int DES_KEY_FILE=174;
	public static final int DETERMINISTIC_SYM=175;
	public static final int DIRECTORY_SYM=176;
	public static final int DISABLE_SYM=177;
	public static final int DISCARD=178;
	public static final int DISK_SYM=179;
	public static final int DISTINCT=180;
	public static final int DISTINCTROW=181;
	public static final int DIVIDE=182;
	public static final int DOT=183;
	public static final int DOUBLE_SYM=184;
	public static final int DO_SYM=185;
	public static final int DROP=186;
	public static final int DUAL_SYM=187;
	public static final int DUMPFILE=188;
	public static final int DUPLICATE_SYM=189;
	public static final int DYNAMIC_SYM=190;
	public static final int D_=191;
	public static final int EACH_SYM=192;
	public static final int ELSE_SYM=193;
	public static final int ELSIF_SYM=194;
	public static final int ELT=195;
	public static final int ENABLE_SYM=196;
	public static final int ENCLOSED=197;
	public static final int ENCODE=198;
	public static final int ENCRYPT=199;
	public static final int ENDS_SYM=200;
	public static final int END_SYM=201;
	public static final int ENGINES_SYM=202;
	public static final int ENGINE_SYM=203;
	public static final int ENUM=204;
	public static final int EQ_SYM=205;
	public static final int ERRORS=206;
	public static final int ESCAPED=207;
	public static final int ESCAPE_SYM=208;
	public static final int EUCJPMS=209;
	public static final int EUCKR=210;
	public static final int EVENTS_SYM=211;
	public static final int EVENT_SYM=212;
	public static final int EVERY_SYM=213;
	public static final int EXCHANGE_SYM=214;
	public static final int EXCLUSIVE_SYM=215;
	public static final int EXECUTE_SYM=216;
	public static final int EXISTS=217;
	public static final int EXIT_SYM=218;
	public static final int EXP=219;
	public static final int EXPANSION_SYM=220;
	public static final int EXPORT_SET=221;
	public static final int EXTENDED_SYM=222;
	public static final int EXTENT_SIZE_SYM=223;
	public static final int EXTRACT=224;
	public static final int E_=225;
	public static final int FALSE_SYM=226;
	public static final int FAST_SYM=227;
	public static final int FAULTS_SYM=228;
	public static final int FETCH_SYM=229;
	public static final int FIELD=230;
	public static final int FIELDS_SYM=231;
	public static final int FILE_SYM=232;
	public static final int FIND_IN_SET=233;
	public static final int FIRST_SYM=234;
	public static final int FIXED_SYM=235;
	public static final int FLOAT_SYM=236;
	public static final int FLOOR=237;
	public static final int FLUSH_SYM=238;
	public static final int FORCE_SYM=239;
	public static final int FOREIGN=240;
	public static final int FORMAT=241;
	public static final int FOR_SYM=242;
	public static final int FOUND_ROWS=243;
	public static final int FOUND_SYM=244;
	public static final int FROM=245;
	public static final int FROM_BASE64=246;
	public static final int FROM_DAYS=247;
	public static final int FROM_UNIXTIME=248;
	public static final int FULL=249;
	public static final int FULLTEXT_SYM=250;
	public static final int FUNCTION_SYM=251;
	public static final int F_=252;
	public static final int GB2312=253;
	public static final int GBK=254;
	public static final int GEOMETRYCOLLECTION=255;
	public static final int GEOMETRY_SYM=256;
	public static final int GEOSTD8=257;
	public static final int GET=258;
	public static final int GET_FORMAT=259;
	public static final int GET_LOCK=260;
	public static final int GLOBAL_SYM=261;
	public static final int GRANT=262;
	public static final int GRANTS=263;
	public static final int GREEK=264;
	public static final int GROUP_CONCAT=265;
	public static final int GROUP_SYM=266;
	public static final int GTH=267;
	public static final int G_=268;
	public static final int HANDLER_SYM=269;
	public static final int HASH_SYM=270;
	public static final int HAVING=271;
	public static final int HEBREW=272;
	public static final int HELP_SYM=273;
	public static final int HEX=274;
	public static final int HEX_DIGIT=275;
	public static final int HEX_DIGIT_FRAGMENT=276;
	public static final int HIGH_PRIORITY=277;
	public static final int HOSTS_SYM=278;
	public static final int HOST_SYM=279;
	public static final int HOUR=280;
	public static final int HOUR_MICROSECOND=281;
	public static final int HOUR_MINUTE=282;
	public static final int HOUR_SECOND=283;
	public static final int HP8=284;
	public static final int H_=285;
	public static final int ID=286;
	public static final int IDENTIFIED_SYM=287;
	public static final int IF=288;
	public static final int IFNULL=289;
	public static final int IGNORE_SYM=290;
	public static final int IMPORT=291;
	public static final int INDEXES=292;
	public static final int INDEX_SYM=293;
	public static final int INET_ATON=294;
	public static final int INET_NTOA=295;
	public static final int INFILE=296;
	public static final int INITIAL_SIZE_SYM=297;
	public static final int INNER_SYM=298;
	public static final int INOUT_SYM=299;
	public static final int INPLACE_SYM=300;
	public static final int INSENSITIVE_SYM=301;
	public static final int INSERT=302;
	public static final int INSERT_METHOD=303;
	public static final int INSTALL_SYM=304;
	public static final int INSTR=305;
	public static final int INTEGER_NUM=306;
	public static final int INTEGER_SYM=307;
	public static final int INTERVAL_SYM=308;
	public static final int INTO=309;
	public static final int INT_SYM=310;
	public static final int INVOKER_SYM=311;
	public static final int IN_SYM=312;
	public static final int IO_SYM=313;
	public static final int IPC_SYM=314;
	public static final int ISOLATION=315;
	public static final int ISSUER_SYM=316;
	public static final int IS_FREE_LOCK=317;
	public static final int IS_SYM=318;
	public static final int IS_USED_LOCK=319;
	public static final int ITERATE_SYM=320;
	public static final int I_=321;
	public static final int JOIN_SYM=322;
	public static final int J_=323;
	public static final int KEYBCS2=324;
	public static final int KEYS=325;
	public static final int KEY_BLOCK_SIZE=326;
	public static final int KEY_SYM=327;
	public static final int KILL_SYM=328;
	public static final int KOI8R=329;
	public static final int KOI8U=330;
	public static final int K_=331;
	public static final int LANGUAGE=332;
	public static final int LAST_DAY=333;
	public static final int LAST_INSERT_ID=334;
	public static final int LAST_SYM=335;
	public static final int LATIN1=336;
	public static final int LATIN1_BIN=337;
	public static final int LATIN1_GENERAL_CS=338;
	public static final int LATIN2=339;
	public static final int LATIN5=340;
	public static final int LATIN7=341;
	public static final int LBRACK=342;
	public static final int LEADING=343;
	public static final int LEAVES=344;
	public static final int LEAVE_SYM=345;
	public static final int LEFT=346;
	public static final int LENGTH=347;
	public static final int LESS_SYM=348;
	public static final int LET=349;
	public static final int LEVEL_SYM=350;
	public static final int LIKE_SYM=351;
	public static final int LIMIT=352;
	public static final int LINEAR_SYM=353;
	public static final int LINES=354;
	public static final int LINESTRING=355;
	public static final int LIST_SYM=356;
	public static final int LN=357;
	public static final int LOAD=358;
	public static final int LOAD_FILE=359;
	public static final int LOCAL_SYM=360;
	public static final int LOCATE=361;
	public static final int LOCK=362;
	public static final int LOCKS_SYM=363;
	public static final int LOG=364;
	public static final int LOG10=365;
	public static final int LOG2=366;
	public static final int LOGFILE_SYM=367;
	public static final int LOGS_SYM=368;
	public static final int LONGBLOB=369;
	public static final int LONGTEXT=370;
	public static final int LONG_SYM=371;
	public static final int LOOP_SYM=372;
	public static final int LOWER=373;
	public static final int LOW_PRIORITY=374;
	public static final int LPAD=375;
	public static final int LPAREN=376;
	public static final int LTH=377;
	public static final int LTRIM=378;
	public static final int L_=379;
	public static final int MACCE=380;
	public static final int MACROMAN=381;
	public static final int MAKEDATE=382;
	public static final int MAKETIME=383;
	public static final int MAKE_SET=384;
	public static final int MASTER_CONNECT_RETRY=385;
	public static final int MASTER_HOST_SYM=386;
	public static final int MASTER_LOG_FILE_SYM=387;
	public static final int MASTER_LOG_POS_SYM=388;
	public static final int MASTER_PASSWORD_SYM=389;
	public static final int MASTER_PORT_SYM=390;
	public static final int MASTER_POS_WAIT=391;
	public static final int MASTER_SERVER_ID_SYM=392;
	public static final int MASTER_SSL_CAPATH_SYM=393;
	public static final int MASTER_SSL_CA_SYM=394;
	public static final int MASTER_SSL_CERT_SYM=395;
	public static final int MASTER_SSL_CIPHER_SYM=396;
	public static final int MASTER_SSL_KEY_SYM=397;
	public static final int MASTER_SSL_SYM=398;
	public static final int MASTER_SSL_VERIFY_SERVER_CERT=399;
	public static final int MASTER_SYM=400;
	public static final int MASTER_USER_SYM=401;
	public static final int MATCH=402;
	public static final int MAXVALUE_SYM=403;
	public static final int MAX_CONNECTIONS_PER_HOUR=404;
	public static final int MAX_QUERIES_PER_HOUR=405;
	public static final int MAX_ROWS=406;
	public static final int MAX_SIZE_SYM=407;
	public static final int MAX_SYM=408;
	public static final int MAX_UPDATES_PER_HOUR=409;
	public static final int MAX_USER_CONNECTIONS_SYM=410;
	public static final int MD5=411;
	public static final int MEDIUMBLOB=412;
	public static final int MEDIUMINT=413;
	public static final int MEDIUMTEXT=414;
	public static final int MEDIUM_SYM=415;
	public static final int MEMORY_SYM=416;
	public static final int MERGE_SYM=417;
	public static final int MICROSECOND=418;
	public static final int MID=419;
	public static final int MIGRATE_SYM=420;
	public static final int MINUS=421;
	public static final int MINUTE=422;
	public static final int MINUTE_MICROSECOND=423;
	public static final int MINUTE_SECOND=424;
	public static final int MIN_ROWS=425;
	public static final int MIN_SYM=426;
	public static final int ML_COMMENT=427;
	public static final int MOD=428;
	public static final int MODE_SYM=429;
	public static final int MODIFIES_SYM=430;
	public static final int MODIFY_SYM=431;
	public static final int MOD_SYM=432;
	public static final int MONTH=433;
	public static final int MONTHNAME=434;
	public static final int MULTILINESTRING=435;
	public static final int MULTIPOINT=436;
	public static final int MULTIPOLYGON=437;
	public static final int MUTEX_SYM=438;
	public static final int M_=439;
	public static final int NAMES_SYM=440;
	public static final int NAME_CONST=441;
	public static final int NAME_SYM=442;
	public static final int NATIONAL_SYM=443;
	public static final int NATURAL=444;
	public static final int NCHAR_SYM=445;
	public static final int NEGATION=446;
	public static final int NEW_SYM=447;
	public static final int NEXT_SYM=448;
	public static final int NODEGROUP_SYM=449;
	public static final int NONE_SYM=450;
	public static final int NOT_EQ=451;
	public static final int NOT_SYM=452;
	public static final int NOW=453;
	public static final int NO_SYM=454;
	public static final int NO_WAIT_SYM=455;
	public static final int NO_WRITE_TO_BINLOG=456;
	public static final int NULL_SYM=457;
	public static final int NUMERIC_SYM=458;
	public static final int NVARCHAR_SYM=459;
	public static final int N_=460;
	public static final int OCT=461;
	public static final int OFFSET_SYM=462;
	public static final int OJ_SYM=463;
	public static final int OLD_PASSWORD=464;
	public static final int ON=465;
	public static final int ONE_SHOT_SYM=466;
	public static final int ONE_SYM=467;
	public static final int OPEN_SYM=468;
	public static final int OPTIMIZE=469;
	public static final int OPTION=470;
	public static final int OPTIONALLY=471;
	public static final int OPTIONS_SYM=472;
	public static final int ORD=473;
	public static final int ORDER_SYM=474;
	public static final int OR_SYM=475;
	public static final int OUTER=476;
	public static final int OUTFILE=477;
	public static final int OUT_SYM=478;
	public static final int OWNER_SYM=479;
	public static final int O_=480;
	public static final int PACK_KEYS_SYM=481;
	public static final int PAGE_CHECKSUM_SYM=482;
	public static final int PAGE_SYM=483;
	public static final int PARSER_SYM=484;
	public static final int PARTIAL=485;
	public static final int PARTITIONING_SYM=486;
	public static final int PARTITIONS_SYM=487;
	public static final int PARTITION_SYM=488;
	public static final int PASSWORD=489;
	public static final int PERIOD_ADD=490;
	public static final int PERIOD_DIFF=491;
	public static final int PHASE_SYM=492;
	public static final int PI=493;
	public static final int PLUGINS_SYM=494;
	public static final int PLUGIN_SYM=495;
	public static final int PLUS=496;
	public static final int POINT_SYM=497;
	public static final int POLYGON=498;
	public static final int PORT_SYM=499;
	public static final int POW=500;
	public static final int POWER=501;
	public static final int POWER_OP=502;
	public static final int PRECISION=503;
	public static final int PREPARE_SYM=504;
	public static final int PRESERVE_SYM=505;
	public static final int PREV_SYM=506;
	public static final int PRIMARY_SYM=507;
	public static final int PRIVILEGES=508;
	public static final int PROCEDURE=509;
	public static final int PROCESS=510;
	public static final int PROCESSLIST_SYM=511;
	public static final int PROFILES_SYM=512;
	public static final int PROFILE_SYM=513;
	public static final int PURGE=514;
	public static final int P_=515;
	public static final int QUARTER=516;
	public static final int QUERY_SYM=517;
	public static final int QUICK=518;
	public static final int QUOTE=519;
	public static final int Q_=520;
	public static final int RADIANS=521;
	public static final int RAND=522;
	public static final int RANGE_SYM=523;
	public static final int RBRACK=524;
	public static final int READS_SYM=525;
	public static final int READ_ONLY_SYM=526;
	public static final int READ_SYM=527;
	public static final int READ_WRITE_SYM=528;
	public static final int REAL=529;
	public static final int REAL_NUMBER=530;
	public static final int REBUILD_SYM=531;
	public static final int RECOVER_SYM=532;
	public static final int REDOFILE_SYM=533;
	public static final int REDO_BUFFER_SIZE_SYM=534;
	public static final int REDUNDANT_SYM=535;
	public static final int REFERENCES=536;
	public static final int REGEXP=537;
	public static final int RELAY_LOG_FILE_SYM=538;
	public static final int RELAY_LOG_POS_SYM=539;
	public static final int RELEASE_LOCK=540;
	public static final int RELEASE_SYM=541;
	public static final int RELOAD=542;
	public static final int REMOVE_SYM=543;
	public static final int RENAME=544;
	public static final int REORGANIZE_SYM=545;
	public static final int REPAIR=546;
	public static final int REPEAT=547;
	public static final int REPEATABLE_SYM=548;
	public static final int REPLACE=549;
	public static final int REPLICATION=550;
	public static final int REQUIRE_SYM=551;
	public static final int RESET_SYM=552;
	public static final int RESOURCES=553;
	public static final int RESTORE_SYM=554;
	public static final int RESTRICT=555;
	public static final int RESUME_SYM=556;
	public static final int RETURNS_SYM=557;
	public static final int RETURN_SYM=558;
	public static final int REVERSE=559;
	public static final int REVOKE=560;
	public static final int RIGHT=561;
	public static final int ROLLBACK=562;
	public static final int ROLLUP_SYM=563;
	public static final int ROUND=564;
	public static final int ROUTINE_SYM=565;
	public static final int ROWS_SYM=566;
	public static final int ROW_FORMAT_SYM=567;
	public static final int ROW_SYM=568;
	public static final int RPAD=569;
	public static final int RPAREN=570;
	public static final int RTREE_SYM=571;
	public static final int RTRIM=572;
	public static final int R_=573;
	public static final int SAVEPOINT=574;
	public static final int SCHEDULE_SYM=575;
	public static final int SCHEMA=576;
	public static final int SECOND=577;
	public static final int SECOND_MICROSECOND=578;
	public static final int SECURITY_SYM=579;
	public static final int SEC_TO_TIME=580;
	public static final int SELECT=581;
	public static final int SEMI=582;
	public static final int SENSITIVE_SYM=583;
	public static final int SEPARATOR_SYM=584;
	public static final int SERIALIZABLE_SYM=585;
	public static final int SERIAL_SYM=586;
	public static final int SERVER_SYM=587;
	public static final int SESSION_SYM=588;
	public static final int SESSION_USER=589;
	public static final int SET_SYM=590;
	public static final int SET_VAR=591;
	public static final int SHARED_SYM=592;
	public static final int SHARE_SYM=593;
	public static final int SHIFT_LEFT=594;
	public static final int SHIFT_RIGHT=595;
	public static final int SHOW=596;
	public static final int SHUTDOWN=597;
	public static final int SIGN=598;
	public static final int SIGNED_SYM=599;
	public static final int SIMPLE_SYM=600;
	public static final int SIN=601;
	public static final int SJIS=602;
	public static final int SLAVE=603;
	public static final int SLEEP=604;
	public static final int SL_COMMENT=605;
	public static final int SMALLINT=606;
	public static final int SNAPSHOT_SYM=607;
	public static final int SOCKET_SYM=608;
	public static final int SONAME_SYM=609;
	public static final int SOUNDEX=610;
	public static final int SOUNDS_SYM=611;
	public static final int SOURCE_SYM=612;
	public static final int SPACE=613;
	public static final int SPATIAL_SYM=614;
	public static final int SPECIFIC_SYM=615;
	public static final int SQLEXCEPTION_SYM=616;
	public static final int SQLSTATE_SYM=617;
	public static final int SQLWARNING_SYM=618;
	public static final int SQL_BIG_RESULT=619;
	public static final int SQL_BUFFER_RESULT=620;
	public static final int SQL_CACHE_SYM=621;
	public static final int SQL_CALC_FOUND_ROWS=622;
	public static final int SQL_NO_CACHE_SYM=623;
	public static final int SQL_SMALL_RESULT=624;
	public static final int SQL_SYM=625;
	public static final int SQL_THREAD=626;
	public static final int SQRT=627;
	public static final int SSL_SYM=628;
	public static final int STARTING=629;
	public static final int STARTS_SYM=630;
	public static final int START_SYM=631;
	public static final int STATS_AUTO_RECALC=632;
	public static final int STATS_PERSISTENT=633;
	public static final int STATUS_SYM=634;
	public static final int STD=635;
	public static final int STDDEV=636;
	public static final int STDDEV_POP=637;
	public static final int STDDEV_SAMP=638;
	public static final int STOP_SYM=639;
	public static final int STORAGE_SYM=640;
	public static final int STRAIGHT_JOIN=641;
	public static final int STRCMP=642;
	public static final int STRING_SYM=643;
	public static final int STR_TO_DATE=644;
	public static final int SUBJECT_SYM=645;
	public static final int SUBPARTITIONS_SYM=646;
	public static final int SUBPARTITION_SYM=647;
	public static final int SUBSTRING=648;
	public static final int SUBSTRING_INDEX=649;
	public static final int SUBTIME=650;
	public static final int SUM=651;
	public static final int SUPER_SYM=652;
	public static final int SUSPEND_SYM=653;
	public static final int SWAPS_SYM=654;
	public static final int SWE7=655;
	public static final int SWITCHES_SYM=656;
	public static final int SYSDATE=657;
	public static final int SYSTEM_USER=658;
	public static final int S_=659;
	public static final int TABLE=660;
	public static final int TABLES=661;
	public static final int TABLESPACE=662;
	public static final int TABLE_CHECKSUM_SYM=663;
	public static final int TAN=664;
	public static final int TEMPORARY=665;
	public static final int TEMPTABLE_SYM=666;
	public static final int TERMINATED=667;
	public static final int TEXT_STRING=668;
	public static final int TEXT_SYM=669;
	public static final int THAN_SYM=670;
	public static final int THEN_SYM=671;
	public static final int TIMEDIFF=672;
	public static final int TIMESTAMP=673;
	public static final int TIMESTAMPADD=674;
	public static final int TIMESTAMPDIFF=675;
	public static final int TIME_FORMAT=676;
	public static final int TIME_SYM=677;
	public static final int TIME_TO_SEC=678;
	public static final int TINYBLOB=679;
	public static final int TINYINT=680;
	public static final int TINYTEXT=681;
	public static final int TIS620=682;
	public static final int TO_BASE64=683;
	public static final int TO_DAYS=684;
	public static final int TO_SECONDS=685;
	public static final int TO_SYM=686;
	public static final int TRAILING=687;
	public static final int TRANSACTION=688;
	public static final int TRANSACTIONAL_SYM=689;
	public static final int TRIGGERS_SYM=690;
	public static final int TRIGGER_SYM=691;
	public static final int TRIM=692;
	public static final int TRUE_SYM=693;
	public static final int TRUNCATE=694;
	public static final int TYPES_SYM=695;
	public static final int TYPE_SYM=696;
	public static final int T_=697;
	public static final int UCS2=698;
	public static final int UJIS=699;
	public static final int UNCOMMITTED_SYM=700;
	public static final int UNCOMPRESS=701;
	public static final int UNCOMPRESSED_LENGTH=702;
	public static final int UNDEFINED_SYM=703;
	public static final int UNDOFILE_SYM=704;
	public static final int UNDO_BUFFER_SIZE_SYM=705;
	public static final int UNDO_SYM=706;
	public static final int UNHEX=707;
	public static final int UNICODE_SYM=708;
	public static final int UNINSTALL_SYM=709;
	public static final int UNION_SYM=710;
	public static final int UNIQUE_SYM=711;
	public static final int UNIX_TIMESTAMP=712;
	public static final int UNKNOWN_SYM=713;
	public static final int UNLOCK_SYM=714;
	public static final int UNSIGNED_SYM=715;
	public static final int UNTIL_SYM=716;
	public static final int UPDATE=717;
	public static final int UPGRADE_SYM=718;
	public static final int UPPER=719;
	public static final int USAGE=720;
	public static final int USER=721;
	public static final int USER_VAR=722;
	public static final int USER_VAR_SUBFIX1=723;
	public static final int USER_VAR_SUBFIX2=724;
	public static final int USER_VAR_SUBFIX3=725;
	public static final int USER_VAR_SUBFIX4=726;
	public static final int USE_FRM=727;
	public static final int USE_SYM=728;
	public static final int USING_SYM=729;
	public static final int UTC_DATE=730;
	public static final int UTC_TIME=731;
	public static final int UTC_TIMESTAMP=732;
	public static final int UTF16=733;
	public static final int UTF16LE=734;
	public static final int UTF32=735;
	public static final int UTF8=736;
	public static final int UUID=737;
	public static final int U_=738;
	public static final int VALUES=739;
	public static final int VALUE_SYM=740;
	public static final int VARBINARY=741;
	public static final int VARCHAR=742;
	public static final int VARIABLES=743;
	public static final int VARIANCE=744;
	public static final int VARYING=745;
	public static final int VAR_POP=746;
	public static final int VAR_SAMP=747;
	public static final int VERSION_SYM=748;
	public static final int VERTBAR=749;
	public static final int VIEW_SYM=750;
	public static final int V_=751;
	public static final int WAIT_SYM=752;
	public static final int WARNINGS=753;
	public static final int WEEK=754;
	public static final int WEEKDAY=755;
	public static final int WEEKOFYEAR=756;
	public static final int WEIGHT_STRING=757;
	public static final int WHEN_SYM=758;
	public static final int WHERE=759;
	public static final int WHILE_SYM=760;
	public static final int WHITE_SPACE=761;
	public static final int WITH=762;
	public static final int WORK_SYM=763;
	public static final int WRAPPER_SYM=764;
	public static final int WRITE_SYM=765;
	public static final int W_=766;
	public static final int X509_SYM=767;
	public static final int XA_SYM=768;
	public static final int XML_SYM=769;
	public static final int XOR=770;
	public static final int X_=771;
	public static final int YEAR=772;
	public static final int YEARWEEK=773;
	public static final int YEAR_MONTH=774;
	public static final int Y_=775;
	public static final int ZEROFILL=776;
	public static final int Z_=777;

	// delegates
	public Parser[] getDelegates() {
		return new Parser[] {};
	}

	// delegators


	public SQLParser(TokenStream input) {
		this(input, new RecognizerSharedState());
	}
	public SQLParser(TokenStream input, RecognizerSharedState state) {
		super(input, state);
	}

	protected TreeAdaptor adaptor = new CommonTreeAdaptor();

	public void setTreeAdaptor(TreeAdaptor adaptor) {
		this.adaptor = adaptor;
	}
	public TreeAdaptor getTreeAdaptor() {
		return adaptor;
	}
	@Override public String[] getTokenNames() { return SQLParser.tokenNames; }
	@Override public String getGrammarFileName() { return "E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g"; }


	//protected TreeAdaptor adaptor = new SQLTreeAdaptor();


	public static class relational_op_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "relational_op"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:925:1: relational_op : ( EQ_SYM | LTH | GTH | NOT_EQ | LET | GET ) ^;
	public final SQLParser.relational_op_return relational_op() throws RecognitionException {
		SQLParser.relational_op_return retval = new SQLParser.relational_op_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set1=null;

		Object set1_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:925:14: ( ( EQ_SYM | LTH | GTH | NOT_EQ | LET | GET ) ^)
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:926:3: ( EQ_SYM | LTH | GTH | NOT_EQ | LET | GET ) ^
			{
			root_0 = (Object)adaptor.nil();


			set1=input.LT(1);
			set1=input.LT(1);
			if ( input.LA(1)==EQ_SYM||input.LA(1)==GET||input.LA(1)==GTH||input.LA(1)==LET||input.LA(1)==LTH||input.LA(1)==NOT_EQ ) {
				input.consume();
				if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot((Object)adaptor.create(set1), root_0);
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "relational_op"


	public static class charset_name_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "charset_name"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:928:1: charset_name : ( ARMSCII8 | ASCII_SYM | BIG5 | BINARY | CP1250 | CP1251 | CP1256 | CP1257 | CP850 | CP852 | CP866 | CP932 | DEC8 | EUCJPMS | EUCKR | GB2312 | GBK | GEOSTD8 | GREEK | HEBREW | HP8 | KEYBCS2 | KOI8R | KOI8U | LATIN1 | LATIN2 | LATIN5 | LATIN7 | MACCE | MACROMAN | SJIS | SWE7 | TIS620 | UCS2 | UJIS | UTF8 );
	public final SQLParser.charset_name_return charset_name() throws RecognitionException {
		SQLParser.charset_name_return retval = new SQLParser.charset_name_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set2=null;

		Object set2_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:928:13: ( ARMSCII8 | ASCII_SYM | BIG5 | BINARY | CP1250 | CP1251 | CP1256 | CP1257 | CP850 | CP852 | CP866 | CP932 | DEC8 | EUCJPMS | EUCKR | GB2312 | GBK | GEOSTD8 | GREEK | HEBREW | HP8 | KEYBCS2 | KOI8R | KOI8U | LATIN1 | LATIN2 | LATIN5 | LATIN7 | MACCE | MACROMAN | SJIS | SWE7 | TIS620 | UCS2 | UJIS | UTF8 )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
			{
			root_0 = (Object)adaptor.nil();


			set2=input.LT(1);
			if ( input.LA(1)==ARMSCII8||input.LA(1)==ASCII_SYM||input.LA(1)==BIG5||input.LA(1)==BINARY||(input.LA(1) >= CP1250 && input.LA(1) <= CP932)||input.LA(1)==DEC8||(input.LA(1) >= EUCJPMS && input.LA(1) <= EUCKR)||(input.LA(1) >= GB2312 && input.LA(1) <= GBK)||input.LA(1)==GEOSTD8||input.LA(1)==GREEK||input.LA(1)==HEBREW||input.LA(1)==HP8||input.LA(1)==KEYBCS2||(input.LA(1) >= KOI8R && input.LA(1) <= KOI8U)||input.LA(1)==LATIN1||(input.LA(1) >= LATIN2 && input.LA(1) <= LATIN7)||(input.LA(1) >= MACCE && input.LA(1) <= MACROMAN)||input.LA(1)==SJIS||input.LA(1)==SWE7||input.LA(1)==TIS620||(input.LA(1) >= UCS2 && input.LA(1) <= UJIS)||input.LA(1)==UTF8 ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set2));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "charset_name"


	public static class cast_data_type_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "cast_data_type"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:966:1: cast_data_type : ( BINARY ( INTEGER_NUM )? | CHAR ( INTEGER_NUM )? | DATE_SYM | DATETIME | DECIMAL_SYM ( INTEGER_NUM ( COMMA INTEGER_NUM )? )? | SIGNED_SYM ( INTEGER_SYM )? | TIME_SYM | UNSIGNED_SYM ( INTEGER_SYM )? );
	public final SQLParser.cast_data_type_return cast_data_type() throws RecognitionException {
		SQLParser.cast_data_type_return retval = new SQLParser.cast_data_type_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token BINARY3=null;
		Token INTEGER_NUM4=null;
		Token CHAR5=null;
		Token INTEGER_NUM6=null;
		Token DATE_SYM7=null;
		Token DATETIME8=null;
		Token DECIMAL_SYM9=null;
		Token INTEGER_NUM10=null;
		Token COMMA11=null;
		Token INTEGER_NUM12=null;
		Token SIGNED_SYM13=null;
		Token INTEGER_SYM14=null;
		Token TIME_SYM15=null;
		Token UNSIGNED_SYM16=null;
		Token INTEGER_SYM17=null;

		Object BINARY3_tree=null;
		Object INTEGER_NUM4_tree=null;
		Object CHAR5_tree=null;
		Object INTEGER_NUM6_tree=null;
		Object DATE_SYM7_tree=null;
		Object DATETIME8_tree=null;
		Object DECIMAL_SYM9_tree=null;
		Object INTEGER_NUM10_tree=null;
		Object COMMA11_tree=null;
		Object INTEGER_NUM12_tree=null;
		Object SIGNED_SYM13_tree=null;
		Object INTEGER_SYM14_tree=null;
		Object TIME_SYM15_tree=null;
		Object UNSIGNED_SYM16_tree=null;
		Object INTEGER_SYM17_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:966:15: ( BINARY ( INTEGER_NUM )? | CHAR ( INTEGER_NUM )? | DATE_SYM | DATETIME | DECIMAL_SYM ( INTEGER_NUM ( COMMA INTEGER_NUM )? )? | SIGNED_SYM ( INTEGER_SYM )? | TIME_SYM | UNSIGNED_SYM ( INTEGER_SYM )? )
			int alt7=8;
			switch ( input.LA(1) ) {
			case BINARY:
				{
				alt7=1;
				}
				break;
			case CHAR:
				{
				alt7=2;
				}
				break;
			case DATE_SYM:
				{
				alt7=3;
				}
				break;
			case DATETIME:
				{
				alt7=4;
				}
				break;
			case DECIMAL_SYM:
				{
				alt7=5;
				}
				break;
			case SIGNED_SYM:
				{
				alt7=6;
				}
				break;
			case TIME_SYM:
				{
				alt7=7;
				}
				break;
			case UNSIGNED_SYM:
				{
				alt7=8;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 7, 0, input);
				throw nvae;
			}
			switch (alt7) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:967:3: BINARY ( INTEGER_NUM )?
					{
					root_0 = (Object)adaptor.nil();


					BINARY3=(Token)match(input,BINARY,FOLLOW_BINARY_in_cast_data_type20625); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BINARY3_tree = (Object)adaptor.create(BINARY3);
					adaptor.addChild(root_0, BINARY3_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:967:10: ( INTEGER_NUM )?
					int alt1=2;
					int LA1_0 = input.LA(1);
					if ( (LA1_0==INTEGER_NUM) ) {
						alt1=1;
					}
					switch (alt1) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:967:11: INTEGER_NUM
							{
							INTEGER_NUM4=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_cast_data_type20628); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							INTEGER_NUM4_tree = (Object)adaptor.create(INTEGER_NUM4);
							adaptor.addChild(root_0, INTEGER_NUM4_tree);
							}

							}
							break;

					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:968:5: CHAR ( INTEGER_NUM )?
					{
					root_0 = (Object)adaptor.nil();


					CHAR5=(Token)match(input,CHAR,FOLLOW_CHAR_in_cast_data_type20637); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CHAR5_tree = (Object)adaptor.create(CHAR5);
					adaptor.addChild(root_0, CHAR5_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:968:10: ( INTEGER_NUM )?
					int alt2=2;
					int LA2_0 = input.LA(1);
					if ( (LA2_0==INTEGER_NUM) ) {
						alt2=1;
					}
					switch (alt2) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:968:11: INTEGER_NUM
							{
							INTEGER_NUM6=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_cast_data_type20640); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							INTEGER_NUM6_tree = (Object)adaptor.create(INTEGER_NUM6);
							adaptor.addChild(root_0, INTEGER_NUM6_tree);
							}

							}
							break;

					}

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:969:5: DATE_SYM
					{
					root_0 = (Object)adaptor.nil();


					DATE_SYM7=(Token)match(input,DATE_SYM,FOLLOW_DATE_SYM_in_cast_data_type20649); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DATE_SYM7_tree = (Object)adaptor.create(DATE_SYM7);
					adaptor.addChild(root_0, DATE_SYM7_tree);
					}

					}
					break;
				case 4 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:970:5: DATETIME
					{
					root_0 = (Object)adaptor.nil();


					DATETIME8=(Token)match(input,DATETIME,FOLLOW_DATETIME_in_cast_data_type20655); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DATETIME8_tree = (Object)adaptor.create(DATETIME8);
					adaptor.addChild(root_0, DATETIME8_tree);
					}

					}
					break;
				case 5 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:971:5: DECIMAL_SYM ( INTEGER_NUM ( COMMA INTEGER_NUM )? )?
					{
					root_0 = (Object)adaptor.nil();


					DECIMAL_SYM9=(Token)match(input,DECIMAL_SYM,FOLLOW_DECIMAL_SYM_in_cast_data_type20662); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DECIMAL_SYM9_tree = (Object)adaptor.create(DECIMAL_SYM9);
					adaptor.addChild(root_0, DECIMAL_SYM9_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:971:17: ( INTEGER_NUM ( COMMA INTEGER_NUM )? )?
					int alt4=2;
					int LA4_0 = input.LA(1);
					if ( (LA4_0==INTEGER_NUM) ) {
						alt4=1;
					}
					switch (alt4) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:971:19: INTEGER_NUM ( COMMA INTEGER_NUM )?
							{
							INTEGER_NUM10=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_cast_data_type20666); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							INTEGER_NUM10_tree = (Object)adaptor.create(INTEGER_NUM10);
							adaptor.addChild(root_0, INTEGER_NUM10_tree);
							}

							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:971:31: ( COMMA INTEGER_NUM )?
							int alt3=2;
							int LA3_0 = input.LA(1);
							if ( (LA3_0==COMMA) ) {
								alt3=1;
							}
							switch (alt3) {
								case 1 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:971:32: COMMA INTEGER_NUM
									{
									COMMA11=(Token)match(input,COMMA,FOLLOW_COMMA_in_cast_data_type20669); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									COMMA11_tree = (Object)adaptor.create(COMMA11);
									adaptor.addChild(root_0, COMMA11_tree);
									}

									INTEGER_NUM12=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_cast_data_type20671); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									INTEGER_NUM12_tree = (Object)adaptor.create(INTEGER_NUM12);
									adaptor.addChild(root_0, INTEGER_NUM12_tree);
									}

									}
									break;

							}

							}
							break;

					}

					}
					break;
				case 6 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:972:5: SIGNED_SYM ( INTEGER_SYM )?
					{
					root_0 = (Object)adaptor.nil();


					SIGNED_SYM13=(Token)match(input,SIGNED_SYM,FOLLOW_SIGNED_SYM_in_cast_data_type20682); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SIGNED_SYM13_tree = (Object)adaptor.create(SIGNED_SYM13);
					adaptor.addChild(root_0, SIGNED_SYM13_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:972:16: ( INTEGER_SYM )?
					int alt5=2;
					int LA5_0 = input.LA(1);
					if ( (LA5_0==INTEGER_SYM) ) {
						alt5=1;
					}
					switch (alt5) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:972:17: INTEGER_SYM
							{
							INTEGER_SYM14=(Token)match(input,INTEGER_SYM,FOLLOW_INTEGER_SYM_in_cast_data_type20685); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							INTEGER_SYM14_tree = (Object)adaptor.create(INTEGER_SYM14);
							adaptor.addChild(root_0, INTEGER_SYM14_tree);
							}

							}
							break;

					}

					}
					break;
				case 7 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:973:5: TIME_SYM
					{
					root_0 = (Object)adaptor.nil();


					TIME_SYM15=(Token)match(input,TIME_SYM,FOLLOW_TIME_SYM_in_cast_data_type20693); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TIME_SYM15_tree = (Object)adaptor.create(TIME_SYM15);
					adaptor.addChild(root_0, TIME_SYM15_tree);
					}

					}
					break;
				case 8 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:974:5: UNSIGNED_SYM ( INTEGER_SYM )?
					{
					root_0 = (Object)adaptor.nil();


					UNSIGNED_SYM16=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_cast_data_type20699); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					UNSIGNED_SYM16_tree = (Object)adaptor.create(UNSIGNED_SYM16);
					adaptor.addChild(root_0, UNSIGNED_SYM16_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:974:18: ( INTEGER_SYM )?
					int alt6=2;
					int LA6_0 = input.LA(1);
					if ( (LA6_0==INTEGER_SYM) ) {
						alt6=1;
					}
					switch (alt6) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:974:19: INTEGER_SYM
							{
							INTEGER_SYM17=(Token)match(input,INTEGER_SYM,FOLLOW_INTEGER_SYM_in_cast_data_type20702); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							INTEGER_SYM17_tree = (Object)adaptor.create(INTEGER_SYM17);
							adaptor.addChild(root_0, INTEGER_SYM17_tree);
							}

							}
							break;

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cast_data_type"


	public static class search_modifier_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "search_modifier"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:977:1: search_modifier : ( ( IN_SYM NATURAL LANGUAGE MODE_SYM ) | ( IN_SYM NATURAL LANGUAGE MODE_SYM WITH QUERY_SYM EXPANSION_SYM ) | ( IN_SYM BOOLEAN_SYM MODE_SYM ) | ( WITH QUERY_SYM EXPANSION_SYM ) );
	public final SQLParser.search_modifier_return search_modifier() throws RecognitionException {
		SQLParser.search_modifier_return retval = new SQLParser.search_modifier_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token IN_SYM18=null;
		Token NATURAL19=null;
		Token LANGUAGE20=null;
		Token MODE_SYM21=null;
		Token IN_SYM22=null;
		Token NATURAL23=null;
		Token LANGUAGE24=null;
		Token MODE_SYM25=null;
		Token WITH26=null;
		Token QUERY_SYM27=null;
		Token EXPANSION_SYM28=null;
		Token IN_SYM29=null;
		Token BOOLEAN_SYM30=null;
		Token MODE_SYM31=null;
		Token WITH32=null;
		Token QUERY_SYM33=null;
		Token EXPANSION_SYM34=null;

		Object IN_SYM18_tree=null;
		Object NATURAL19_tree=null;
		Object LANGUAGE20_tree=null;
		Object MODE_SYM21_tree=null;
		Object IN_SYM22_tree=null;
		Object NATURAL23_tree=null;
		Object LANGUAGE24_tree=null;
		Object MODE_SYM25_tree=null;
		Object WITH26_tree=null;
		Object QUERY_SYM27_tree=null;
		Object EXPANSION_SYM28_tree=null;
		Object IN_SYM29_tree=null;
		Object BOOLEAN_SYM30_tree=null;
		Object MODE_SYM31_tree=null;
		Object WITH32_tree=null;
		Object QUERY_SYM33_tree=null;
		Object EXPANSION_SYM34_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:977:16: ( ( IN_SYM NATURAL LANGUAGE MODE_SYM ) | ( IN_SYM NATURAL LANGUAGE MODE_SYM WITH QUERY_SYM EXPANSION_SYM ) | ( IN_SYM BOOLEAN_SYM MODE_SYM ) | ( WITH QUERY_SYM EXPANSION_SYM ) )
			int alt8=4;
			int LA8_0 = input.LA(1);
			if ( (LA8_0==IN_SYM) ) {
				int LA8_1 = input.LA(2);
				if ( (LA8_1==NATURAL) ) {
					int LA8_3 = input.LA(3);
					if ( (LA8_3==LANGUAGE) ) {
						int LA8_5 = input.LA(4);
						if ( (LA8_5==MODE_SYM) ) {
							int LA8_6 = input.LA(5);
							if ( (LA8_6==WITH) ) {
								int LA8_7 = input.LA(6);
								if ( (LA8_7==QUERY_SYM) ) {
									int LA8_9 = input.LA(7);
									if ( (LA8_9==EXPANSION_SYM) ) {
										int LA8_10 = input.LA(8);
										if ( (synpred54_SQL()) ) {
											alt8=1;
										}
										else if ( (synpred55_SQL()) ) {
											alt8=2;
										}

										else {
											if (state.backtracking>0) {state.failed=true; return retval;}
											int nvaeMark = input.mark();
											try {
												for (int nvaeConsume = 0; nvaeConsume < 8 - 1; nvaeConsume++) {
													input.consume();
												}
												NoViableAltException nvae =
													new NoViableAltException("", 8, 10, input);
												throw nvae;
											} finally {
												input.rewind(nvaeMark);
											}
										}

									}

									else {
										if (state.backtracking>0) {state.failed=true; return retval;}
										int nvaeMark = input.mark();
										try {
											for (int nvaeConsume = 0; nvaeConsume < 7 - 1; nvaeConsume++) {
												input.consume();
											}
											NoViableAltException nvae =
												new NoViableAltException("", 8, 9, input);
											throw nvae;
										} finally {
											input.rewind(nvaeMark);
										}
									}

								}
								else if ( (LA8_7==CASCADED||LA8_7==CHECK_SYM||LA8_7==LOCAL_SYM||LA8_7==ROLLUP_SYM) ) {
									alt8=1;
								}

								else {
									if (state.backtracking>0) {state.failed=true; return retval;}
									int nvaeMark = input.mark();
									try {
										for (int nvaeConsume = 0; nvaeConsume < 6 - 1; nvaeConsume++) {
											input.consume();
										}
										NoViableAltException nvae =
											new NoViableAltException("", 8, 7, input);
										throw nvae;
									} finally {
										input.rewind(nvaeMark);
									}
								}

							}
							else if ( (LA8_6==EOF||LA8_6==AND_SYM||LA8_6==ASC||(LA8_6 >= ASTERISK && LA8_6 <= AS_SYM)||LA8_6==BETWEEN||LA8_6==BITAND||LA8_6==COLLATE_SYM||LA8_6==COMMA||LA8_6==CROSS||(LA8_6 >= DAY_HOUR && LA8_6 <= DAY_SYM)||LA8_6==DESC||LA8_6==DIVIDE||LA8_6==ELSE_SYM||LA8_6==END_SYM||LA8_6==EQ_SYM||LA8_6==ESCAPE_SYM||LA8_6==FOR_SYM||LA8_6==FROM||LA8_6==GET||(LA8_6 >= GROUP_SYM && LA8_6 <= GTH)||LA8_6==HAVING||(LA8_6 >= HOUR && LA8_6 <= HOUR_SECOND)||LA8_6==ID||LA8_6==INNER_SYM||LA8_6==INTEGER_NUM||LA8_6==IN_SYM||LA8_6==IS_SYM||LA8_6==JOIN_SYM||LA8_6==LEFT||LA8_6==LET||(LA8_6 >= LIKE_SYM && LA8_6 <= LIMIT)||LA8_6==LOCK||LA8_6==LTH||(LA8_6 >= MINUS && LA8_6 <= MINUTE_SECOND)||(LA8_6 >= MOD_SYM && LA8_6 <= MONTH)||LA8_6==NATURAL||(LA8_6 >= NOT_EQ && LA8_6 <= NOT_SYM)||LA8_6==ON||(LA8_6 >= ORDER_SYM && LA8_6 <= OR_SYM)||LA8_6==PARTITION_SYM||LA8_6==PLUS||LA8_6==POWER_OP||LA8_6==QUARTER||LA8_6==REGEXP||LA8_6==RIGHT||LA8_6==RPAREN||(LA8_6 >= SECOND && LA8_6 <= SECOND_MICROSECOND)||LA8_6==SEMI||LA8_6==SET_SYM||(LA8_6 >= SHIFT_LEFT && LA8_6 <= SHIFT_RIGHT)||LA8_6==SOUNDS_SYM||LA8_6==STRAIGHT_JOIN||LA8_6==THEN_SYM||LA8_6==UNION_SYM||LA8_6==USING_SYM||LA8_6==VERTBAR||LA8_6==WEEK||(LA8_6 >= WHEN_SYM && LA8_6 <= WHERE)||LA8_6==XOR||LA8_6==YEAR||LA8_6==YEAR_MONTH) ) {
								alt8=1;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 8, 6, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}

						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 8, 5, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 8, 3, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}
				else if ( (LA8_1==BOOLEAN_SYM) ) {
					alt8=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 8, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA8_0==WITH) ) {
				alt8=4;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 8, 0, input);
				throw nvae;
			}

			switch (alt8) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:978:3: ( IN_SYM NATURAL LANGUAGE MODE_SYM )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:978:3: ( IN_SYM NATURAL LANGUAGE MODE_SYM )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:978:4: IN_SYM NATURAL LANGUAGE MODE_SYM
					{
					IN_SYM18=(Token)match(input,IN_SYM,FOLLOW_IN_SYM_in_search_modifier20717); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IN_SYM18_tree = (Object)adaptor.create(IN_SYM18);
					adaptor.addChild(root_0, IN_SYM18_tree);
					}

					NATURAL19=(Token)match(input,NATURAL,FOLLOW_NATURAL_in_search_modifier20719); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NATURAL19_tree = (Object)adaptor.create(NATURAL19);
					adaptor.addChild(root_0, NATURAL19_tree);
					}

					LANGUAGE20=(Token)match(input,LANGUAGE,FOLLOW_LANGUAGE_in_search_modifier20721); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LANGUAGE20_tree = (Object)adaptor.create(LANGUAGE20);
					adaptor.addChild(root_0, LANGUAGE20_tree);
					}

					MODE_SYM21=(Token)match(input,MODE_SYM,FOLLOW_MODE_SYM_in_search_modifier20723); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MODE_SYM21_tree = (Object)adaptor.create(MODE_SYM21);
					adaptor.addChild(root_0, MODE_SYM21_tree);
					}

					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:979:5: ( IN_SYM NATURAL LANGUAGE MODE_SYM WITH QUERY_SYM EXPANSION_SYM )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:979:5: ( IN_SYM NATURAL LANGUAGE MODE_SYM WITH QUERY_SYM EXPANSION_SYM )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:979:6: IN_SYM NATURAL LANGUAGE MODE_SYM WITH QUERY_SYM EXPANSION_SYM
					{
					IN_SYM22=(Token)match(input,IN_SYM,FOLLOW_IN_SYM_in_search_modifier20731); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IN_SYM22_tree = (Object)adaptor.create(IN_SYM22);
					adaptor.addChild(root_0, IN_SYM22_tree);
					}

					NATURAL23=(Token)match(input,NATURAL,FOLLOW_NATURAL_in_search_modifier20733); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NATURAL23_tree = (Object)adaptor.create(NATURAL23);
					adaptor.addChild(root_0, NATURAL23_tree);
					}

					LANGUAGE24=(Token)match(input,LANGUAGE,FOLLOW_LANGUAGE_in_search_modifier20735); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LANGUAGE24_tree = (Object)adaptor.create(LANGUAGE24);
					adaptor.addChild(root_0, LANGUAGE24_tree);
					}

					MODE_SYM25=(Token)match(input,MODE_SYM,FOLLOW_MODE_SYM_in_search_modifier20737); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MODE_SYM25_tree = (Object)adaptor.create(MODE_SYM25);
					adaptor.addChild(root_0, MODE_SYM25_tree);
					}

					WITH26=(Token)match(input,WITH,FOLLOW_WITH_in_search_modifier20739); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					WITH26_tree = (Object)adaptor.create(WITH26);
					adaptor.addChild(root_0, WITH26_tree);
					}

					QUERY_SYM27=(Token)match(input,QUERY_SYM,FOLLOW_QUERY_SYM_in_search_modifier20741); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					QUERY_SYM27_tree = (Object)adaptor.create(QUERY_SYM27);
					adaptor.addChild(root_0, QUERY_SYM27_tree);
					}

					EXPANSION_SYM28=(Token)match(input,EXPANSION_SYM,FOLLOW_EXPANSION_SYM_in_search_modifier20743); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXPANSION_SYM28_tree = (Object)adaptor.create(EXPANSION_SYM28);
					adaptor.addChild(root_0, EXPANSION_SYM28_tree);
					}

					}

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:980:5: ( IN_SYM BOOLEAN_SYM MODE_SYM )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:980:5: ( IN_SYM BOOLEAN_SYM MODE_SYM )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:980:6: IN_SYM BOOLEAN_SYM MODE_SYM
					{
					IN_SYM29=(Token)match(input,IN_SYM,FOLLOW_IN_SYM_in_search_modifier20751); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IN_SYM29_tree = (Object)adaptor.create(IN_SYM29);
					adaptor.addChild(root_0, IN_SYM29_tree);
					}

					BOOLEAN_SYM30=(Token)match(input,BOOLEAN_SYM,FOLLOW_BOOLEAN_SYM_in_search_modifier20753); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BOOLEAN_SYM30_tree = (Object)adaptor.create(BOOLEAN_SYM30);
					adaptor.addChild(root_0, BOOLEAN_SYM30_tree);
					}

					MODE_SYM31=(Token)match(input,MODE_SYM,FOLLOW_MODE_SYM_in_search_modifier20755); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MODE_SYM31_tree = (Object)adaptor.create(MODE_SYM31);
					adaptor.addChild(root_0, MODE_SYM31_tree);
					}

					}

					}
					break;
				case 4 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:981:5: ( WITH QUERY_SYM EXPANSION_SYM )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:981:5: ( WITH QUERY_SYM EXPANSION_SYM )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:981:6: WITH QUERY_SYM EXPANSION_SYM
					{
					WITH32=(Token)match(input,WITH,FOLLOW_WITH_in_search_modifier20763); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					WITH32_tree = (Object)adaptor.create(WITH32);
					adaptor.addChild(root_0, WITH32_tree);
					}

					QUERY_SYM33=(Token)match(input,QUERY_SYM,FOLLOW_QUERY_SYM_in_search_modifier20765); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					QUERY_SYM33_tree = (Object)adaptor.create(QUERY_SYM33);
					adaptor.addChild(root_0, QUERY_SYM33_tree);
					}

					EXPANSION_SYM34=(Token)match(input,EXPANSION_SYM,FOLLOW_EXPANSION_SYM_in_search_modifier20767); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXPANSION_SYM34_tree = (Object)adaptor.create(EXPANSION_SYM34);
					adaptor.addChild(root_0, EXPANSION_SYM34_tree);
					}

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "search_modifier"


	public static class transcoding_name_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "transcoding_name"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:984:1: transcoding_name : ( LATIN1 | UTF8 );
	public final SQLParser.transcoding_name_return transcoding_name() throws RecognitionException {
		SQLParser.transcoding_name_return retval = new SQLParser.transcoding_name_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set35=null;

		Object set35_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:984:17: ( LATIN1 | UTF8 )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
			{
			root_0 = (Object)adaptor.nil();


			set35=input.LT(1);
			if ( input.LA(1)==LATIN1||input.LA(1)==UTF8 ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set35));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "transcoding_name"


	public static class interval_unit_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "interval_unit"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:989:1: interval_unit : ( SECOND | MINUTE | HOUR | DAY_SYM | WEEK | MONTH | QUARTER | YEAR | SECOND_MICROSECOND | MINUTE_MICROSECOND | MINUTE_SECOND | HOUR_MICROSECOND | HOUR_SECOND | HOUR_MINUTE | DAY_MICROSECOND | DAY_SECOND | DAY_MINUTE | DAY_HOUR | YEAR_MONTH );
	public final SQLParser.interval_unit_return interval_unit() throws RecognitionException {
		SQLParser.interval_unit_return retval = new SQLParser.interval_unit_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set36=null;

		Object set36_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:989:14: ( SECOND | MINUTE | HOUR | DAY_SYM | WEEK | MONTH | QUARTER | YEAR | SECOND_MICROSECOND | MINUTE_MICROSECOND | MINUTE_SECOND | HOUR_MICROSECOND | HOUR_SECOND | HOUR_MINUTE | DAY_MICROSECOND | DAY_SECOND | DAY_MINUTE | DAY_HOUR | YEAR_MONTH )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
			{
			root_0 = (Object)adaptor.nil();


			set36=input.LT(1);
			if ( (input.LA(1) >= DAY_HOUR && input.LA(1) <= DAY_SYM)||(input.LA(1) >= HOUR && input.LA(1) <= HOUR_SECOND)||(input.LA(1) >= MINUTE && input.LA(1) <= MINUTE_SECOND)||input.LA(1)==MONTH||input.LA(1)==QUARTER||(input.LA(1) >= SECOND && input.LA(1) <= SECOND_MICROSECOND)||input.LA(1)==WEEK||input.LA(1)==YEAR||input.LA(1)==YEAR_MONTH ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set36));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "interval_unit"


	public static class collation_names_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "collation_names"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1011:1: collation_names : ( LATIN1_GENERAL_CS | LATIN1_BIN );
	public final SQLParser.collation_names_return collation_names() throws RecognitionException {
		SQLParser.collation_names_return retval = new SQLParser.collation_names_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set37=null;

		Object set37_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1011:16: ( LATIN1_GENERAL_CS | LATIN1_BIN )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
			{
			root_0 = (Object)adaptor.nil();


			set37=input.LT(1);
			if ( (input.LA(1) >= LATIN1_BIN && input.LA(1) <= LATIN1_GENERAL_CS) ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set37));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "collation_names"


	public static class string_literal_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "string_literal"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1021:1: string_literal : TEXT_STRING ;
	public final SQLParser.string_literal_return string_literal() throws RecognitionException {
		SQLParser.string_literal_return retval = new SQLParser.string_literal_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token TEXT_STRING38=null;

		Object TEXT_STRING38_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1021:15: ( TEXT_STRING )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1021:19: TEXT_STRING
			{
			root_0 = (Object)adaptor.nil();


			TEXT_STRING38=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_string_literal20936); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			TEXT_STRING38_tree = (Object)adaptor.create(TEXT_STRING38);
			adaptor.addChild(root_0, TEXT_STRING38_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "string_literal"


	public static class number_literal_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "number_literal"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1022:1: number_literal : ( PLUS | MINUS )? ( INTEGER_NUM | REAL_NUMBER ) ;
	public final SQLParser.number_literal_return number_literal() throws RecognitionException {
		SQLParser.number_literal_return retval = new SQLParser.number_literal_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set39=null;
		Token set40=null;

		Object set39_tree=null;
		Object set40_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1022:15: ( ( PLUS | MINUS )? ( INTEGER_NUM | REAL_NUMBER ) )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1022:19: ( PLUS | MINUS )? ( INTEGER_NUM | REAL_NUMBER )
			{
			root_0 = (Object)adaptor.nil();


			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1022:19: ( PLUS | MINUS )?
			int alt9=2;
			int LA9_0 = input.LA(1);
			if ( (LA9_0==MINUS||LA9_0==PLUS) ) {
				alt9=1;
			}
			switch (alt9) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
					{
					set39=input.LT(1);
					if ( input.LA(1)==MINUS||input.LA(1)==PLUS ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set39));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			set40=input.LT(1);
			if ( input.LA(1)==INTEGER_NUM||input.LA(1)==REAL_NUMBER ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set40));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "number_literal"


	public static class hex_literal_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "hex_literal"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1024:1: hex_literal : HEX_DIGIT ;
	public final SQLParser.hex_literal_return hex_literal() throws RecognitionException {
		SQLParser.hex_literal_return retval = new SQLParser.hex_literal_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token HEX_DIGIT41=null;

		Object HEX_DIGIT41_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1024:12: ( HEX_DIGIT )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1024:17: HEX_DIGIT
			{
			root_0 = (Object)adaptor.nil();


			HEX_DIGIT41=(Token)match(input,HEX_DIGIT,FOLLOW_HEX_DIGIT_in_hex_literal20971); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			HEX_DIGIT41_tree = (Object)adaptor.create(HEX_DIGIT41);
			adaptor.addChild(root_0, HEX_DIGIT41_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "hex_literal"


	public static class boolean_literal_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "boolean_literal"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1025:1: boolean_literal : ( TRUE_SYM | FALSE_SYM );
	public final SQLParser.boolean_literal_return boolean_literal() throws RecognitionException {
		SQLParser.boolean_literal_return retval = new SQLParser.boolean_literal_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set42=null;

		Object set42_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1025:16: ( TRUE_SYM | FALSE_SYM )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
			{
			root_0 = (Object)adaptor.nil();


			set42=input.LT(1);
			if ( input.LA(1)==FALSE_SYM||input.LA(1)==TRUE_SYM ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set42));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "boolean_literal"


	public static class bit_literal_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "bit_literal"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1026:1: bit_literal : BIT_NUM ;
	public final SQLParser.bit_literal_return bit_literal() throws RecognitionException {
		SQLParser.bit_literal_return retval = new SQLParser.bit_literal_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token BIT_NUM43=null;

		Object BIT_NUM43_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1026:12: ( BIT_NUM )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1026:17: BIT_NUM
			{
			root_0 = (Object)adaptor.nil();


			BIT_NUM43=(Token)match(input,BIT_NUM,FOLLOW_BIT_NUM_in_bit_literal20992); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			BIT_NUM43_tree = (Object)adaptor.create(BIT_NUM43);
			adaptor.addChild(root_0, BIT_NUM43_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "bit_literal"


	public static class literal_value_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "literal_value"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1029:1: literal_value : ( string_literal | number_literal | hex_literal | boolean_literal | bit_literal | NULL_SYM ) ;
	public final SQLParser.literal_value_return literal_value() throws RecognitionException {
		SQLParser.literal_value_return retval = new SQLParser.literal_value_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token NULL_SYM49=null;
		ParserRuleReturnScope string_literal44 =null;
		ParserRuleReturnScope number_literal45 =null;
		ParserRuleReturnScope hex_literal46 =null;
		ParserRuleReturnScope boolean_literal47 =null;
		ParserRuleReturnScope bit_literal48 =null;

		Object NULL_SYM49_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1029:14: ( ( string_literal | number_literal | hex_literal | boolean_literal | bit_literal | NULL_SYM ) )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1030:9: ( string_literal | number_literal | hex_literal | boolean_literal | bit_literal | NULL_SYM )
			{
			root_0 = (Object)adaptor.nil();


			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1030:9: ( string_literal | number_literal | hex_literal | boolean_literal | bit_literal | NULL_SYM )
			int alt10=6;
			switch ( input.LA(1) ) {
			case TEXT_STRING:
				{
				alt10=1;
				}
				break;
			case INTEGER_NUM:
			case MINUS:
			case PLUS:
			case REAL_NUMBER:
				{
				alt10=2;
				}
				break;
			case HEX_DIGIT:
				{
				alt10=3;
				}
				break;
			case FALSE_SYM:
			case TRUE_SYM:
				{
				alt10=4;
				}
				break;
			case BIT_NUM:
				{
				alt10=5;
				}
				break;
			case NULL_SYM:
				{
				alt10=6;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 10, 0, input);
				throw nvae;
			}
			switch (alt10) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1030:11: string_literal
					{
					pushFollow(FOLLOW_string_literal_in_literal_value21010);
					string_literal44=string_literal();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, string_literal44.getTree());

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1030:28: number_literal
					{
					pushFollow(FOLLOW_number_literal_in_literal_value21014);
					number_literal45=number_literal();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal45.getTree());

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1030:45: hex_literal
					{
					pushFollow(FOLLOW_hex_literal_in_literal_value21018);
					hex_literal46=hex_literal();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, hex_literal46.getTree());

					}
					break;
				case 4 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1030:59: boolean_literal
					{
					pushFollow(FOLLOW_boolean_literal_in_literal_value21022);
					boolean_literal47=boolean_literal();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, boolean_literal47.getTree());

					}
					break;
				case 5 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1030:77: bit_literal
					{
					pushFollow(FOLLOW_bit_literal_in_literal_value21026);
					bit_literal48=bit_literal();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_literal48.getTree());

					}
					break;
				case 6 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1030:91: NULL_SYM
					{
					NULL_SYM49=(Token)match(input,NULL_SYM,FOLLOW_NULL_SYM_in_literal_value21030); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NULL_SYM49_tree = (Object)adaptor.create(NULL_SYM49);
					adaptor.addChild(root_0, NULL_SYM49_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "literal_value"


	public static class functionList_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "functionList"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1037:1: functionList : ( number_functions | char_functions | time_functions | other_functions );
	public final SQLParser.functionList_return functionList() throws RecognitionException {
		SQLParser.functionList_return retval = new SQLParser.functionList_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope number_functions50 =null;
		ParserRuleReturnScope char_functions51 =null;
		ParserRuleReturnScope time_functions52 =null;
		ParserRuleReturnScope other_functions53 =null;


		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1037:13: ( number_functions | char_functions | time_functions | other_functions )
			int alt11=4;
			switch ( input.LA(1) ) {
			case ABS:
			case ACOS:
			case ASIN:
			case ATAN:
			case ATAN2:
			case CEIL:
			case CEILING:
			case CONV:
			case COS:
			case COT:
			case CRC32:
			case DEGREES:
			case EXP:
			case FLOOR:
			case LN:
			case LOG:
			case LOG10:
			case LOG2:
			case MOD:
			case PI:
			case POW:
			case POWER:
			case RADIANS:
			case RAND:
			case ROUND:
			case SIGN:
			case SIN:
			case SQRT:
			case TAN:
			case TRUNCATE:
				{
				alt11=1;
				}
				break;
			case LOAD_FILE:
			case MAKE_SET:
				{
				int LA11_2 = input.LA(2);
				if ( (synpred87_SQL()) ) {
					alt11=2;
				}
				else if ( (true) ) {
					alt11=4;
				}

				}
				break;
			case ADDDATE:
			case ADDTIME:
			case CONVERT_TZ:
			case CURDATE:
			case CURTIME:
			case DATEDIFF:
			case DATE_ADD:
			case DATE_FORMAT:
			case DATE_SUB:
			case DATE_SYM:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case EXTRACT:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GET_FORMAT:
			case HOUR:
			case LAST_DAY:
			case MAKEDATE:
			case MAKETIME:
			case MICROSECOND:
			case MINUTE:
			case MONTH:
			case MONTHNAME:
			case NOW:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case QUARTER:
			case SECOND:
			case SEC_TO_TIME:
			case STR_TO_DATE:
			case SUBTIME:
			case SYSDATE:
			case TIMEDIFF:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_SYM:
			case TIME_TO_SEC:
			case TO_DAYS:
			case TO_SECONDS:
			case UNIX_TIMESTAMP:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case WEEK:
			case WEEKDAY:
			case WEEKOFYEAR:
			case YEAR:
			case YEARWEEK:
				{
				alt11=3;
				}
				break;
			case ASCII_SYM:
			case BIN:
			case BIT_LENGTH:
			case CHAR:
			case CHAR_LENGTH:
			case CONCAT:
			case CONCAT_WS:
			case ELT:
			case EXPORT_SET:
			case FIELD:
			case FIND_IN_SET:
			case FORMAT:
			case FROM_BASE64:
			case HEX:
			case INSERT:
			case INSTR:
			case LEFT:
			case LENGTH:
			case LOCATE:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MID:
			case OCT:
			case ORD:
			case QUOTE:
			case REPEAT:
			case REPLACE:
			case REVERSE:
			case RIGHT:
			case RPAD:
			case RTRIM:
			case SOUNDEX:
			case SPACE:
			case STRCMP:
			case SUBSTRING:
			case SUBSTRING_INDEX:
			case TO_BASE64:
			case TRIM:
			case UNHEX:
			case UPPER:
			case WEIGHT_STRING:
				{
				alt11=2;
				}
				break;
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case BENCHMARK:
			case CHARSET:
			case COERCIBILITY:
			case COLLATION:
			case CONNECTION_ID:
			case CURRENT_USER:
			case DATABASE:
			case DECODE:
			case DEFAULT:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case ENCODE:
			case ENCRYPT:
			case FOUND_ROWS:
			case GET_LOCK:
			case IF:
			case IFNULL:
			case INET_ATON:
			case INET_NTOA:
			case IS_FREE_LOCK:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case MASTER_POS_WAIT:
			case MD5:
			case NAME_CONST:
			case OLD_PASSWORD:
			case PASSWORD:
			case RELEASE_LOCK:
			case SCHEMA:
			case SESSION_USER:
			case SLEEP:
			case SYSTEM_USER:
			case USER:
			case UUID:
			case VALUES:
			case VERSION_SYM:
				{
				alt11=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 11, 0, input);
				throw nvae;
			}
			switch (alt11) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1038:5: number_functions
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_number_functions_in_functionList21049);
					number_functions50=number_functions();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, number_functions50.getTree());

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1039:5: char_functions
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_char_functions_in_functionList21056);
					char_functions51=char_functions();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, char_functions51.getTree());

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1040:5: time_functions
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_time_functions_in_functionList21063);
					time_functions52=time_functions();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, time_functions52.getTree());

					}
					break;
				case 4 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1041:5: other_functions
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_other_functions_in_functionList21069);
					other_functions53=other_functions();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, other_functions53.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "functionList"


	public static class number_functions_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "number_functions"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1044:1: number_functions : ( ABS | ACOS | ASIN | ATAN2 | ATAN | CEIL | CEILING | CONV | COS | COT | CRC32 | DEGREES | EXP | FLOOR | LN | LOG10 | LOG2 | LOG | MOD | PI | POW | POWER | RADIANS | RAND | ROUND | SIGN | SIN | SQRT | TAN | TRUNCATE );
	public final SQLParser.number_functions_return number_functions() throws RecognitionException {
		SQLParser.number_functions_return retval = new SQLParser.number_functions_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set54=null;

		Object set54_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1044:17: ( ABS | ACOS | ASIN | ATAN2 | ATAN | CEIL | CEILING | CONV | COS | COT | CRC32 | DEGREES | EXP | FLOOR | LN | LOG10 | LOG2 | LOG | MOD | PI | POW | POWER | RADIANS | RAND | ROUND | SIGN | SIN | SQRT | TAN | TRUNCATE )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
			{
			root_0 = (Object)adaptor.nil();


			set54=input.LT(1);
			if ( input.LA(1)==ABS||input.LA(1)==ACOS||input.LA(1)==ASIN||(input.LA(1) >= ATAN && input.LA(1) <= ATAN2)||(input.LA(1) >= CEIL && input.LA(1) <= CEILING)||input.LA(1)==CONV||(input.LA(1) >= COS && input.LA(1) <= COT)||input.LA(1)==CRC32||input.LA(1)==DEGREES||input.LA(1)==EXP||input.LA(1)==FLOOR||input.LA(1)==LN||(input.LA(1) >= LOG && input.LA(1) <= LOG2)||input.LA(1)==MOD||input.LA(1)==PI||(input.LA(1) >= POW && input.LA(1) <= POWER)||(input.LA(1) >= RADIANS && input.LA(1) <= RAND)||input.LA(1)==ROUND||input.LA(1)==SIGN||input.LA(1)==SIN||input.LA(1)==SQRT||input.LA(1)==TAN||input.LA(1)==TRUNCATE ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set54));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "number_functions"


	public static class char_functions_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "char_functions"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1077:1: char_functions : ( ASCII_SYM | BIN | BIT_LENGTH | CHAR_LENGTH | CHAR | CONCAT_WS | CONCAT | ELT | EXPORT_SET | FIELD | FIND_IN_SET | FORMAT | FROM_BASE64 | HEX | INSERT | INSTR | LEFT | LENGTH | LOAD_FILE | LOCATE | LOWER | LPAD | LTRIM | MAKE_SET | MID | OCT | ORD | QUOTE | REPEAT | REPLACE | REVERSE | RIGHT | RPAD | RTRIM | SOUNDEX | SPACE | STRCMP | SUBSTRING_INDEX | SUBSTRING | TO_BASE64 | TRIM | UNHEX | UPPER | WEIGHT_STRING );
	public final SQLParser.char_functions_return char_functions() throws RecognitionException {
		SQLParser.char_functions_return retval = new SQLParser.char_functions_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set55=null;

		Object set55_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1077:15: ( ASCII_SYM | BIN | BIT_LENGTH | CHAR_LENGTH | CHAR | CONCAT_WS | CONCAT | ELT | EXPORT_SET | FIELD | FIND_IN_SET | FORMAT | FROM_BASE64 | HEX | INSERT | INSTR | LEFT | LENGTH | LOAD_FILE | LOCATE | LOWER | LPAD | LTRIM | MAKE_SET | MID | OCT | ORD | QUOTE | REPEAT | REPLACE | REVERSE | RIGHT | RPAD | RTRIM | SOUNDEX | SPACE | STRCMP | SUBSTRING_INDEX | SUBSTRING | TO_BASE64 | TRIM | UNHEX | UPPER | WEIGHT_STRING )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
			{
			root_0 = (Object)adaptor.nil();


			set55=input.LT(1);
			if ( input.LA(1)==ASCII_SYM||input.LA(1)==BIN||input.LA(1)==BIT_LENGTH||input.LA(1)==CHAR||input.LA(1)==CHAR_LENGTH||(input.LA(1) >= CONCAT && input.LA(1) <= CONCAT_WS)||input.LA(1)==ELT||input.LA(1)==EXPORT_SET||input.LA(1)==FIELD||input.LA(1)==FIND_IN_SET||input.LA(1)==FORMAT||input.LA(1)==FROM_BASE64||input.LA(1)==HEX||input.LA(1)==INSERT||input.LA(1)==INSTR||(input.LA(1) >= LEFT && input.LA(1) <= LENGTH)||input.LA(1)==LOAD_FILE||input.LA(1)==LOCATE||input.LA(1)==LOWER||input.LA(1)==LPAD||input.LA(1)==LTRIM||input.LA(1)==MAKE_SET||input.LA(1)==MID||input.LA(1)==OCT||input.LA(1)==ORD||input.LA(1)==QUOTE||input.LA(1)==REPEAT||input.LA(1)==REPLACE||input.LA(1)==REVERSE||input.LA(1)==RIGHT||input.LA(1)==RPAD||input.LA(1)==RTRIM||input.LA(1)==SOUNDEX||input.LA(1)==SPACE||input.LA(1)==STRCMP||(input.LA(1) >= SUBSTRING && input.LA(1) <= SUBSTRING_INDEX)||input.LA(1)==TO_BASE64||input.LA(1)==TRIM||input.LA(1)==UNHEX||input.LA(1)==UPPER||input.LA(1)==WEIGHT_STRING ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set55));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "char_functions"


	public static class time_functions_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "time_functions"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1124:1: time_functions : ( ADDDATE | ADDTIME | CONVERT_TZ | CURDATE | CURTIME | DATE_ADD | DATE_FORMAT | DATE_SUB | DATE_SYM | DATEDIFF | DAYNAME | DAYOFMONTH | DAYOFWEEK | DAYOFYEAR | EXTRACT | FROM_DAYS | FROM_UNIXTIME | GET_FORMAT | HOUR | LAST_DAY | MAKEDATE | MAKETIME | MICROSECOND | MINUTE | MONTH | MONTHNAME | NOW | PERIOD_ADD | PERIOD_DIFF | QUARTER | SEC_TO_TIME | SECOND | STR_TO_DATE | SUBTIME | SYSDATE | TIME_FORMAT | TIME_TO_SEC | TIME_SYM | TIMEDIFF | TIMESTAMP | TIMESTAMPADD | TIMESTAMPDIFF | TO_DAYS | TO_SECONDS | UNIX_TIMESTAMP | UTC_DATE | UTC_TIME | UTC_TIMESTAMP | WEEK | WEEKDAY | WEEKOFYEAR | YEAR | YEARWEEK );
	public final SQLParser.time_functions_return time_functions() throws RecognitionException {
		SQLParser.time_functions_return retval = new SQLParser.time_functions_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set56=null;

		Object set56_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1124:15: ( ADDDATE | ADDTIME | CONVERT_TZ | CURDATE | CURTIME | DATE_ADD | DATE_FORMAT | DATE_SUB | DATE_SYM | DATEDIFF | DAYNAME | DAYOFMONTH | DAYOFWEEK | DAYOFYEAR | EXTRACT | FROM_DAYS | FROM_UNIXTIME | GET_FORMAT | HOUR | LAST_DAY | MAKEDATE | MAKETIME | MICROSECOND | MINUTE | MONTH | MONTHNAME | NOW | PERIOD_ADD | PERIOD_DIFF | QUARTER | SEC_TO_TIME | SECOND | STR_TO_DATE | SUBTIME | SYSDATE | TIME_FORMAT | TIME_TO_SEC | TIME_SYM | TIMEDIFF | TIMESTAMP | TIMESTAMPADD | TIMESTAMPDIFF | TO_DAYS | TO_SECONDS | UNIX_TIMESTAMP | UTC_DATE | UTC_TIME | UTC_TIMESTAMP | WEEK | WEEKDAY | WEEKOFYEAR | YEAR | YEARWEEK )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
			{
			root_0 = (Object)adaptor.nil();


			set56=input.LT(1);
			if ( (input.LA(1) >= ADDDATE && input.LA(1) <= ADDTIME)||input.LA(1)==CONVERT_TZ||input.LA(1)==CURDATE||input.LA(1)==CURTIME||input.LA(1)==DATEDIFF||(input.LA(1) >= DATE_ADD && input.LA(1) <= DAYOFYEAR)||input.LA(1)==EXTRACT||(input.LA(1) >= FROM_DAYS && input.LA(1) <= FROM_UNIXTIME)||input.LA(1)==GET_FORMAT||input.LA(1)==HOUR||input.LA(1)==LAST_DAY||(input.LA(1) >= MAKEDATE && input.LA(1) <= MAKETIME)||input.LA(1)==MICROSECOND||input.LA(1)==MINUTE||(input.LA(1) >= MONTH && input.LA(1) <= MONTHNAME)||input.LA(1)==NOW||(input.LA(1) >= PERIOD_ADD && input.LA(1) <= PERIOD_DIFF)||input.LA(1)==QUARTER||input.LA(1)==SECOND||input.LA(1)==SEC_TO_TIME||input.LA(1)==STR_TO_DATE||input.LA(1)==SUBTIME||input.LA(1)==SYSDATE||(input.LA(1) >= TIMEDIFF && input.LA(1) <= TIME_TO_SEC)||(input.LA(1) >= TO_DAYS && input.LA(1) <= TO_SECONDS)||input.LA(1)==UNIX_TIMESTAMP||(input.LA(1) >= UTC_DATE && input.LA(1) <= UTC_TIMESTAMP)||(input.LA(1) >= WEEK && input.LA(1) <= WEEKOFYEAR)||(input.LA(1) >= YEAR && input.LA(1) <= YEARWEEK) ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set56));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "time_functions"


	public static class other_functions_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "other_functions"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1180:1: other_functions : ( MAKE_SET | LOAD_FILE | IF | IFNULL | AES_ENCRYPT | AES_DECRYPT | DECODE | ENCODE | DES_DECRYPT | DES_ENCRYPT | ENCRYPT | MD5 | OLD_PASSWORD | PASSWORD | BENCHMARK | CHARSET | COERCIBILITY | COLLATION | CONNECTION_ID | CURRENT_USER | DATABASE | SCHEMA | USER | SESSION_USER | SYSTEM_USER | VERSION_SYM | FOUND_ROWS | LAST_INSERT_ID | DEFAULT | GET_LOCK | RELEASE_LOCK | IS_FREE_LOCK | IS_USED_LOCK | MASTER_POS_WAIT | INET_ATON | INET_NTOA | NAME_CONST | SLEEP | UUID | VALUES );
	public final SQLParser.other_functions_return other_functions() throws RecognitionException {
		SQLParser.other_functions_return retval = new SQLParser.other_functions_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set57=null;

		Object set57_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1180:16: ( MAKE_SET | LOAD_FILE | IF | IFNULL | AES_ENCRYPT | AES_DECRYPT | DECODE | ENCODE | DES_DECRYPT | DES_ENCRYPT | ENCRYPT | MD5 | OLD_PASSWORD | PASSWORD | BENCHMARK | CHARSET | COERCIBILITY | COLLATION | CONNECTION_ID | CURRENT_USER | DATABASE | SCHEMA | USER | SESSION_USER | SYSTEM_USER | VERSION_SYM | FOUND_ROWS | LAST_INSERT_ID | DEFAULT | GET_LOCK | RELEASE_LOCK | IS_FREE_LOCK | IS_USED_LOCK | MASTER_POS_WAIT | INET_ATON | INET_NTOA | NAME_CONST | SLEEP | UUID | VALUES )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
			{
			root_0 = (Object)adaptor.nil();


			set57=input.LT(1);
			if ( (input.LA(1) >= AES_DECRYPT && input.LA(1) <= AES_ENCRYPT)||input.LA(1)==BENCHMARK||input.LA(1)==CHARSET||input.LA(1)==COERCIBILITY||input.LA(1)==COLLATION||input.LA(1)==CONNECTION_ID||input.LA(1)==CURRENT_USER||input.LA(1)==DATABASE||(input.LA(1) >= DECODE && input.LA(1) <= DEFAULT)||(input.LA(1) >= DES_DECRYPT && input.LA(1) <= DES_ENCRYPT)||(input.LA(1) >= ENCODE && input.LA(1) <= ENCRYPT)||input.LA(1)==FOUND_ROWS||input.LA(1)==GET_LOCK||(input.LA(1) >= IF && input.LA(1) <= IFNULL)||(input.LA(1) >= INET_ATON && input.LA(1) <= INET_NTOA)||input.LA(1)==IS_FREE_LOCK||input.LA(1)==IS_USED_LOCK||input.LA(1)==LAST_INSERT_ID||input.LA(1)==LOAD_FILE||input.LA(1)==MAKE_SET||input.LA(1)==MASTER_POS_WAIT||input.LA(1)==MD5||input.LA(1)==NAME_CONST||input.LA(1)==OLD_PASSWORD||input.LA(1)==PASSWORD||input.LA(1)==RELEASE_LOCK||input.LA(1)==SCHEMA||input.LA(1)==SESSION_USER||input.LA(1)==SLEEP||input.LA(1)==SYSTEM_USER||input.LA(1)==USER||input.LA(1)==UUID||input.LA(1)==VALUES||input.LA(1)==VERSION_SYM ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set57));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "other_functions"


	public static class group_functions_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "group_functions"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1200:1: group_functions : ( AVG | COUNT | MAX_SYM | MIN_SYM | SUM | BIT_AND | BIT_OR | BIT_XOR | GROUP_CONCAT | STD | STDDEV | STDDEV_POP | STDDEV_SAMP | VAR_POP | VAR_SAMP | VARIANCE );
	public final SQLParser.group_functions_return group_functions() throws RecognitionException {
		SQLParser.group_functions_return retval = new SQLParser.group_functions_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set58=null;

		Object set58_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1200:16: ( AVG | COUNT | MAX_SYM | MIN_SYM | SUM | BIT_AND | BIT_OR | BIT_XOR | GROUP_CONCAT | STD | STDDEV | STDDEV_POP | STDDEV_SAMP | VAR_POP | VAR_SAMP | VARIANCE )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
			{
			root_0 = (Object)adaptor.nil();


			set58=input.LT(1);
			if ( input.LA(1)==AVG||input.LA(1)==BIT_AND||input.LA(1)==BIT_OR||input.LA(1)==BIT_XOR||input.LA(1)==COUNT||input.LA(1)==GROUP_CONCAT||input.LA(1)==MAX_SYM||input.LA(1)==MIN_SYM||(input.LA(1) >= STD && input.LA(1) <= STDDEV_SAMP)||input.LA(1)==SUM||input.LA(1)==VARIANCE||(input.LA(1) >= VAR_POP && input.LA(1) <= VAR_SAMP) ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set58));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "group_functions"


	public static class schema_name_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "schema_name"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1214:1: schema_name : tmpName= ID {...}?;
	public final SQLParser.schema_name_return schema_name() throws RecognitionException {
		SQLParser.schema_name_return retval = new SQLParser.schema_name_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token tmpName=null;

		Object tmpName_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1214:17: (tmpName= ID {...}?)
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1214:19: tmpName= ID {...}?
			{
			root_0 = (Object)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_schema_name22149); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (Object)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if ( !((((tmpName!=null?tmpName.getText():null).length()) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "schema_name", "($tmpName.text.length()) <= 64");
			}
			if ( state.backtracking==0 ) {System.out.println("schema name = " + ((tmpName!=null?tmpName.getText():null)));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "schema_name"


	public static class table_name_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "table_name"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1215:1: table_name : tmpName= ID {...}?;
	public final SQLParser.table_name_return table_name() throws RecognitionException {
		SQLParser.table_name_return retval = new SQLParser.table_name_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token tmpName=null;

		Object tmpName_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1215:17: (tmpName= ID {...}?)
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1215:19: tmpName= ID {...}?
			{
			root_0 = (Object)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_table_name22167); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (Object)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if ( !((((tmpName!=null?tmpName.getText():null).length()) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "table_name", "($tmpName.text.length()) <= 64");
			}
			if ( state.backtracking==0 ) {System.out.println("table name = " + ((tmpName!=null?tmpName.getText():null)));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_name"


	public static class engine_name_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "engine_name"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1216:1: engine_name : tmpName= ID {...}?;
	public final SQLParser.engine_name_return engine_name() throws RecognitionException {
		SQLParser.engine_name_return retval = new SQLParser.engine_name_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token tmpName=null;

		Object tmpName_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1216:17: (tmpName= ID {...}?)
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1216:19: tmpName= ID {...}?
			{
			root_0 = (Object)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_engine_name22184); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (Object)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if ( !((((tmpName!=null?tmpName.getText():null).length()) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "engine_name", "($tmpName.text.length()) <= 64");
			}
			if ( state.backtracking==0 ) {System.out.println("engine name = " + ((tmpName!=null?tmpName.getText():null)));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "engine_name"


	public static class column_name_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "column_name"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1217:1: column_name : tmpName= ID {...}?;
	public final SQLParser.column_name_return column_name() throws RecognitionException {
		SQLParser.column_name_return retval = new SQLParser.column_name_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token tmpName=null;

		Object tmpName_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1217:17: (tmpName= ID {...}?)
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1217:19: tmpName= ID {...}?
			{
			root_0 = (Object)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_column_name22201); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (Object)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if ( !((((tmpName!=null?tmpName.getText():null).length()) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "column_name", "($tmpName.text.length()) <= 64");
			}
			if ( state.backtracking==0 ) {System.out.println("column name = " + ((tmpName!=null?tmpName.getText():null)));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "column_name"


	public static class view_name_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "view_name"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1218:1: view_name : tmpName= ID {...}?;
	public final SQLParser.view_name_return view_name() throws RecognitionException {
		SQLParser.view_name_return retval = new SQLParser.view_name_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token tmpName=null;

		Object tmpName_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1218:15: (tmpName= ID {...}?)
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1218:17: tmpName= ID {...}?
			{
			root_0 = (Object)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_view_name22218); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (Object)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if ( !((((tmpName!=null?tmpName.getText():null).length()) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "view_name", "($tmpName.text.length()) <= 64");
			}
			if ( state.backtracking==0 ) {System.out.println("view name = " + ((tmpName!=null?tmpName.getText():null)));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "view_name"


	public static class parser_name_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "parser_name"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1219:1: parser_name : tmpName= ID {...}?;
	public final SQLParser.parser_name_return parser_name() throws RecognitionException {
		SQLParser.parser_name_return retval = new SQLParser.parser_name_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token tmpName=null;

		Object tmpName_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1219:17: (tmpName= ID {...}?)
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1219:19: tmpName= ID {...}?
			{
			root_0 = (Object)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_parser_name22235); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (Object)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if ( !((((tmpName!=null?tmpName.getText():null).length()) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "parser_name", "($tmpName.text.length()) <= 64");
			}
			if ( state.backtracking==0 ) {System.out.println("parser name = " + ((tmpName!=null?tmpName.getText():null)));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "parser_name"


	public static class index_name_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "index_name"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1220:1: index_name : tmpName= ID {...}?;
	public final SQLParser.index_name_return index_name() throws RecognitionException {
		SQLParser.index_name_return retval = new SQLParser.index_name_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token tmpName=null;

		Object tmpName_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1220:17: (tmpName= ID {...}?)
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1220:19: tmpName= ID {...}?
			{
			root_0 = (Object)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_index_name22253); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (Object)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if ( !((((tmpName!=null?tmpName.getText():null).length()) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "index_name", "($tmpName.text.length()) <= 64");
			}
			if ( state.backtracking==0 ) {System.out.println("index name = " + ((tmpName!=null?tmpName.getText():null)));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "index_name"


	public static class partition_name_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "partition_name"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1221:1: partition_name : tmpName= ID {...}?;
	public final SQLParser.partition_name_return partition_name() throws RecognitionException {
		SQLParser.partition_name_return retval = new SQLParser.partition_name_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token tmpName=null;

		Object tmpName_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1221:21: (tmpName= ID {...}?)
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1221:23: tmpName= ID {...}?
			{
			root_0 = (Object)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_partition_name22271); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (Object)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if ( !((((tmpName!=null?tmpName.getText():null).length()) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "partition_name", "($tmpName.text.length()) <= 64");
			}
			if ( state.backtracking==0 ) {System.out.println("partition name = " + ((tmpName!=null?tmpName.getText():null)));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "partition_name"


	public static class partition_logical_name_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "partition_logical_name"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1222:1: partition_logical_name : tmpName= ID {...}?;
	public final SQLParser.partition_logical_name_return partition_logical_name() throws RecognitionException {
		SQLParser.partition_logical_name_return retval = new SQLParser.partition_logical_name_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token tmpName=null;

		Object tmpName_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1222:27: (tmpName= ID {...}?)
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1222:29: tmpName= ID {...}?
			{
			root_0 = (Object)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_partition_logical_name22287); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (Object)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if ( !((((tmpName!=null?tmpName.getText():null).length()) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "partition_logical_name", "($tmpName.text.length()) <= 64");
			}
			if ( state.backtracking==0 ) {System.out.println("partition_logical name = " + ((tmpName!=null?tmpName.getText():null)));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "partition_logical_name"


	public static class constraint_symbol_name_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "constraint_symbol_name"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1223:1: constraint_symbol_name : tmpName= ID {...}?;
	public final SQLParser.constraint_symbol_name_return constraint_symbol_name() throws RecognitionException {
		SQLParser.constraint_symbol_name_return retval = new SQLParser.constraint_symbol_name_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token tmpName=null;

		Object tmpName_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1223:27: (tmpName= ID {...}?)
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1223:29: tmpName= ID {...}?
			{
			root_0 = (Object)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_constraint_symbol_name22303); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (Object)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if ( !((((tmpName!=null?tmpName.getText():null).length()) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "constraint_symbol_name", "($tmpName.text.length()) <= 64");
			}
			if ( state.backtracking==0 ) {System.out.println("constraint_symbol name = " + ((tmpName!=null?tmpName.getText():null)));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "constraint_symbol_name"


	public static class foreign_key_symbol_name_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "foreign_key_symbol_name"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1224:1: foreign_key_symbol_name : tmpName= ID {...}?;
	public final SQLParser.foreign_key_symbol_name_return foreign_key_symbol_name() throws RecognitionException {
		SQLParser.foreign_key_symbol_name_return retval = new SQLParser.foreign_key_symbol_name_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token tmpName=null;

		Object tmpName_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1224:27: (tmpName= ID {...}?)
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1224:29: tmpName= ID {...}?
			{
			root_0 = (Object)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_foreign_key_symbol_name22318); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (Object)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if ( !((((tmpName!=null?tmpName.getText():null).length()) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "foreign_key_symbol_name", "($tmpName.text.length()) <= 64");
			}
			if ( state.backtracking==0 ) {System.out.println("foreign_key_symbol name = " + ((tmpName!=null?tmpName.getText():null)));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "foreign_key_symbol_name"


	public static class collation_name_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "collation_name"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1225:1: collation_name : tmpName= ID {...}?;
	public final SQLParser.collation_name_return collation_name() throws RecognitionException {
		SQLParser.collation_name_return retval = new SQLParser.collation_name_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token tmpName=null;

		Object tmpName_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1225:21: (tmpName= ID {...}?)
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1225:23: tmpName= ID {...}?
			{
			root_0 = (Object)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_collation_name22336); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (Object)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if ( !((((tmpName!=null?tmpName.getText():null).length()) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "collation_name", "($tmpName.text.length()) <= 64");
			}
			if ( state.backtracking==0 ) {System.out.println("collation name = " + ((tmpName!=null?tmpName.getText():null)));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "collation_name"


	public static class event_name_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "event_name"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1226:1: event_name : tmpName= ID {...}?;
	public final SQLParser.event_name_return event_name() throws RecognitionException {
		SQLParser.event_name_return retval = new SQLParser.event_name_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token tmpName=null;

		Object tmpName_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1226:17: (tmpName= ID {...}?)
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1226:19: tmpName= ID {...}?
			{
			root_0 = (Object)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_event_name22354); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (Object)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if ( !((((tmpName!=null?tmpName.getText():null).length()) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "event_name", "($tmpName.text.length()) <= 64");
			}
			if ( state.backtracking==0 ) {System.out.println("event name = " + ((tmpName!=null?tmpName.getText():null)));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "event_name"


	public static class user_name_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "user_name"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1227:1: user_name : tmpName= ID {...}?;
	public final SQLParser.user_name_return user_name() throws RecognitionException {
		SQLParser.user_name_return retval = new SQLParser.user_name_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token tmpName=null;

		Object tmpName_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1227:15: (tmpName= ID {...}?)
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1227:17: tmpName= ID {...}?
			{
			root_0 = (Object)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_user_name22371); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (Object)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if ( !((((tmpName!=null?tmpName.getText():null).length()) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "user_name", "($tmpName.text.length()) <= 64");
			}
			if ( state.backtracking==0 ) {System.out.println("user name = " + ((tmpName!=null?tmpName.getText():null)));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "user_name"


	public static class function_name_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "function_name"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1228:1: function_name : tmpName= ID {...}?;
	public final SQLParser.function_name_return function_name() throws RecognitionException {
		SQLParser.function_name_return retval = new SQLParser.function_name_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token tmpName=null;

		Object tmpName_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1228:19: (tmpName= ID {...}?)
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1228:21: tmpName= ID {...}?
			{
			root_0 = (Object)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_function_name22388); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (Object)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if ( !((((tmpName!=null?tmpName.getText():null).length()) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "function_name", "($tmpName.text.length()) <= 64");
			}
			if ( state.backtracking==0 ) {System.out.println("function name = " + ((tmpName!=null?tmpName.getText():null)));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "function_name"


	public static class procedure_name_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "procedure_name"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1229:1: procedure_name : tmpName= ID {...}?;
	public final SQLParser.procedure_name_return procedure_name() throws RecognitionException {
		SQLParser.procedure_name_return retval = new SQLParser.procedure_name_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token tmpName=null;

		Object tmpName_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1229:21: (tmpName= ID {...}?)
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1229:23: tmpName= ID {...}?
			{
			root_0 = (Object)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_procedure_name22406); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (Object)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if ( !((((tmpName!=null?tmpName.getText():null).length()) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "procedure_name", "($tmpName.text.length()) <= 64");
			}
			if ( state.backtracking==0 ) {System.out.println("procedure name = " + ((tmpName!=null?tmpName.getText():null)));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "procedure_name"


	public static class server_name_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "server_name"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1230:1: server_name : tmpName= ID {...}?;
	public final SQLParser.server_name_return server_name() throws RecognitionException {
		SQLParser.server_name_return retval = new SQLParser.server_name_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token tmpName=null;

		Object tmpName_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1230:17: (tmpName= ID {...}?)
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1230:19: tmpName= ID {...}?
			{
			root_0 = (Object)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_server_name22423); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (Object)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if ( !((((tmpName!=null?tmpName.getText():null).length()) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "server_name", "($tmpName.text.length()) <= 64");
			}
			if ( state.backtracking==0 ) {System.out.println("server name = " + ((tmpName!=null?tmpName.getText():null)));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "server_name"


	public static class wrapper_name_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "wrapper_name"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1231:1: wrapper_name : tmpName= ID {...}?;
	public final SQLParser.wrapper_name_return wrapper_name() throws RecognitionException {
		SQLParser.wrapper_name_return retval = new SQLParser.wrapper_name_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token tmpName=null;

		Object tmpName_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1231:19: (tmpName= ID {...}?)
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1231:21: tmpName= ID {...}?
			{
			root_0 = (Object)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_wrapper_name22441); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (Object)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if ( !((((tmpName!=null?tmpName.getText():null).length()) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "wrapper_name", "($tmpName.text.length()) <= 64");
			}
			if ( state.backtracking==0 ) {System.out.println("wrapper name = " + ((tmpName!=null?tmpName.getText():null)));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "wrapper_name"


	public static class alias_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "alias"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1232:1: alias : ( AS_SYM )? tmpName= ID {...}?;
	public final SQLParser.alias_return alias() throws RecognitionException {
		SQLParser.alias_return retval = new SQLParser.alias_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token tmpName=null;
		Token AS_SYM59=null;

		Object tmpName_tree=null;
		Object AS_SYM59_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1232:13: ( ( AS_SYM )? tmpName= ID {...}?)
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1232:15: ( AS_SYM )? tmpName= ID {...}?
			{
			root_0 = (Object)adaptor.nil();


			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1232:15: ( AS_SYM )?
			int alt12=2;
			int LA12_0 = input.LA(1);
			if ( (LA12_0==AS_SYM) ) {
				alt12=1;
			}
			switch (alt12) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1232:17: AS_SYM
					{
					AS_SYM59=(Token)match(input,AS_SYM,FOLLOW_AS_SYM_in_alias22460); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					AS_SYM59_tree = (Object)adaptor.create(AS_SYM59);
					adaptor.addChild(root_0, AS_SYM59_tree);
					}

					}
					break;

			}

			tmpName=(Token)match(input,ID,FOLLOW_ID_in_alias22467); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (Object)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if ( !((((tmpName!=null?tmpName.getText():null).length()) <= 256)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "alias", "($tmpName.text.length()) <= 256");
			}
			if ( state.backtracking==0 ) {System.out.println("alias name = " + ((tmpName!=null?tmpName.getText():null)));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alias"


	public static class expression_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "expression"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1240:1: expression : exp_factor1 ( OR_SYM ^ exp_factor1 )* ;
	public final SQLParser.expression_return expression() throws RecognitionException {
		SQLParser.expression_return retval = new SQLParser.expression_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token OR_SYM61=null;
		ParserRuleReturnScope exp_factor160 =null;
		ParserRuleReturnScope exp_factor162 =null;

		Object OR_SYM61_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1240:11: ( exp_factor1 ( OR_SYM ^ exp_factor1 )* )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1240:13: exp_factor1 ( OR_SYM ^ exp_factor1 )*
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_exp_factor1_in_expression22484);
			exp_factor160=exp_factor1();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, exp_factor160.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1240:25: ( OR_SYM ^ exp_factor1 )*
			loop13:
			while (true) {
				int alt13=2;
				int LA13_0 = input.LA(1);
				if ( (LA13_0==OR_SYM) ) {
					int LA13_2 = input.LA(2);
					if ( (synpred268_SQL()) ) {
						alt13=1;
					}

				}

				switch (alt13) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1240:27: OR_SYM ^ exp_factor1
					{
					OR_SYM61=(Token)match(input,OR_SYM,FOLLOW_OR_SYM_in_expression22488); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					OR_SYM61_tree = (Object)adaptor.create(OR_SYM61);
					root_0 = (Object)adaptor.becomeRoot(OR_SYM61_tree, root_0);
					}

					pushFollow(FOLLOW_exp_factor1_in_expression22492);
					exp_factor162=exp_factor1();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, exp_factor162.getTree());

					}
					break;

				default :
					break loop13;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "expression"


	public static class exp_factor1_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "exp_factor1"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1241:1: exp_factor1 : exp_factor2 ( XOR ^ exp_factor2 )* ;
	public final SQLParser.exp_factor1_return exp_factor1() throws RecognitionException {
		SQLParser.exp_factor1_return retval = new SQLParser.exp_factor1_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token XOR64=null;
		ParserRuleReturnScope exp_factor263 =null;
		ParserRuleReturnScope exp_factor265 =null;

		Object XOR64_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1241:12: ( exp_factor2 ( XOR ^ exp_factor2 )* )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1241:15: exp_factor2 ( XOR ^ exp_factor2 )*
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_exp_factor2_in_exp_factor122503);
			exp_factor263=exp_factor2();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, exp_factor263.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1241:27: ( XOR ^ exp_factor2 )*
			loop14:
			while (true) {
				int alt14=2;
				int LA14_0 = input.LA(1);
				if ( (LA14_0==XOR) ) {
					int LA14_2 = input.LA(2);
					if ( (synpred269_SQL()) ) {
						alt14=1;
					}

				}

				switch (alt14) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1241:29: XOR ^ exp_factor2
					{
					XOR64=(Token)match(input,XOR,FOLLOW_XOR_in_exp_factor122507); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					XOR64_tree = (Object)adaptor.create(XOR64);
					root_0 = (Object)adaptor.becomeRoot(XOR64_tree, root_0);
					}

					pushFollow(FOLLOW_exp_factor2_in_exp_factor122511);
					exp_factor265=exp_factor2();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, exp_factor265.getTree());

					}
					break;

				default :
					break loop14;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exp_factor1"


	public static class exp_factor2_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "exp_factor2"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1242:1: exp_factor2 : exp_factor3 ( AND_SYM ^ exp_factor3 )* ;
	public final SQLParser.exp_factor2_return exp_factor2() throws RecognitionException {
		SQLParser.exp_factor2_return retval = new SQLParser.exp_factor2_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token AND_SYM67=null;
		ParserRuleReturnScope exp_factor366 =null;
		ParserRuleReturnScope exp_factor368 =null;

		Object AND_SYM67_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1242:12: ( exp_factor3 ( AND_SYM ^ exp_factor3 )* )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1242:15: exp_factor3 ( AND_SYM ^ exp_factor3 )*
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_exp_factor3_in_exp_factor222522);
			exp_factor366=exp_factor3();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, exp_factor366.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1242:27: ( AND_SYM ^ exp_factor3 )*
			loop15:
			while (true) {
				int alt15=2;
				int LA15_0 = input.LA(1);
				if ( (LA15_0==AND_SYM) ) {
					int LA15_2 = input.LA(2);
					if ( (synpred270_SQL()) ) {
						alt15=1;
					}

				}

				switch (alt15) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1242:29: AND_SYM ^ exp_factor3
					{
					AND_SYM67=(Token)match(input,AND_SYM,FOLLOW_AND_SYM_in_exp_factor222526); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					AND_SYM67_tree = (Object)adaptor.create(AND_SYM67);
					root_0 = (Object)adaptor.becomeRoot(AND_SYM67_tree, root_0);
					}

					pushFollow(FOLLOW_exp_factor3_in_exp_factor222530);
					exp_factor368=exp_factor3();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, exp_factor368.getTree());

					}
					break;

				default :
					break loop15;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exp_factor2"


	public static class exp_factor3_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "exp_factor3"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1243:1: exp_factor3 : ( NOT_SYM ^)? exp_factor4 ;
	public final SQLParser.exp_factor3_return exp_factor3() throws RecognitionException {
		SQLParser.exp_factor3_return retval = new SQLParser.exp_factor3_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token NOT_SYM69=null;
		ParserRuleReturnScope exp_factor470 =null;

		Object NOT_SYM69_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1243:12: ( ( NOT_SYM ^)? exp_factor4 )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1243:15: ( NOT_SYM ^)? exp_factor4
			{
			root_0 = (Object)adaptor.nil();


			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1243:15: ( NOT_SYM ^)?
			int alt16=2;
			int LA16_0 = input.LA(1);
			if ( (LA16_0==NOT_SYM) ) {
				int LA16_1 = input.LA(2);
				if ( (synpred271_SQL()) ) {
					alt16=1;
				}
			}
			switch (alt16) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1243:16: NOT_SYM ^
					{
					NOT_SYM69=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_exp_factor322542); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NOT_SYM69_tree = (Object)adaptor.create(NOT_SYM69);
					root_0 = (Object)adaptor.becomeRoot(NOT_SYM69_tree, root_0);
					}

					}
					break;

			}

			pushFollow(FOLLOW_exp_factor4_in_exp_factor322548);
			exp_factor470=exp_factor4();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, exp_factor470.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exp_factor3"


	public static class exp_factor4_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "exp_factor4"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1244:1: exp_factor4 : bool_primary ( IS_SYM ^ ( NOT_SYM ^)? ( boolean_literal | NULL_SYM ) )? ;
	public final SQLParser.exp_factor4_return exp_factor4() throws RecognitionException {
		SQLParser.exp_factor4_return retval = new SQLParser.exp_factor4_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token IS_SYM72=null;
		Token NOT_SYM73=null;
		Token NULL_SYM75=null;
		ParserRuleReturnScope bool_primary71 =null;
		ParserRuleReturnScope boolean_literal74 =null;

		Object IS_SYM72_tree=null;
		Object NOT_SYM73_tree=null;
		Object NULL_SYM75_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1244:12: ( bool_primary ( IS_SYM ^ ( NOT_SYM ^)? ( boolean_literal | NULL_SYM ) )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1244:15: bool_primary ( IS_SYM ^ ( NOT_SYM ^)? ( boolean_literal | NULL_SYM ) )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_bool_primary_in_exp_factor422556);
			bool_primary71=bool_primary();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_primary71.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1244:28: ( IS_SYM ^ ( NOT_SYM ^)? ( boolean_literal | NULL_SYM ) )?
			int alt19=2;
			int LA19_0 = input.LA(1);
			if ( (LA19_0==IS_SYM) ) {
				int LA19_1 = input.LA(2);
				if ( (synpred274_SQL()) ) {
					alt19=1;
				}
			}
			switch (alt19) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1244:30: IS_SYM ^ ( NOT_SYM ^)? ( boolean_literal | NULL_SYM )
					{
					IS_SYM72=(Token)match(input,IS_SYM,FOLLOW_IS_SYM_in_exp_factor422560); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IS_SYM72_tree = (Object)adaptor.create(IS_SYM72);
					root_0 = (Object)adaptor.becomeRoot(IS_SYM72_tree, root_0);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1244:39: ( NOT_SYM ^)?
					int alt17=2;
					int LA17_0 = input.LA(1);
					if ( (LA17_0==NOT_SYM) ) {
						alt17=1;
					}
					switch (alt17) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1244:40: NOT_SYM ^
							{
							NOT_SYM73=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_exp_factor422565); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							NOT_SYM73_tree = (Object)adaptor.create(NOT_SYM73);
							root_0 = (Object)adaptor.becomeRoot(NOT_SYM73_tree, root_0);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1244:52: ( boolean_literal | NULL_SYM )
					int alt18=2;
					int LA18_0 = input.LA(1);
					if ( (LA18_0==FALSE_SYM||LA18_0==TRUE_SYM) ) {
						alt18=1;
					}
					else if ( (LA18_0==NULL_SYM) ) {
						alt18=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 18, 0, input);
						throw nvae;
					}

					switch (alt18) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1244:53: boolean_literal
							{
							pushFollow(FOLLOW_boolean_literal_in_exp_factor422572);
							boolean_literal74=boolean_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, boolean_literal74.getTree());

							}
							break;
						case 2 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1244:69: NULL_SYM
							{
							NULL_SYM75=(Token)match(input,NULL_SYM,FOLLOW_NULL_SYM_in_exp_factor422574); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							NULL_SYM75_tree = (Object)adaptor.create(NULL_SYM75);
							adaptor.addChild(root_0, NULL_SYM75_tree);
							}

							}
							break;

					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exp_factor4"


	public static class bool_primary_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "bool_primary"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1245:1: bool_primary : ( ( predicate relational_op predicate ) -> ^( relational_op predicate predicate ) | ( predicate relational_op ( ALL | ANY )? subquery ) | ( ( NOT_SYM )? EXISTS ^ subquery ) | predicate );
	public final SQLParser.bool_primary_return bool_primary() throws RecognitionException {
		SQLParser.bool_primary_return retval = new SQLParser.bool_primary_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set81=null;
		Token NOT_SYM83=null;
		Token EXISTS84=null;
		ParserRuleReturnScope predicate76 =null;
		ParserRuleReturnScope relational_op77 =null;
		ParserRuleReturnScope predicate78 =null;
		ParserRuleReturnScope predicate79 =null;
		ParserRuleReturnScope relational_op80 =null;
		ParserRuleReturnScope subquery82 =null;
		ParserRuleReturnScope subquery85 =null;
		ParserRuleReturnScope predicate86 =null;

		Object set81_tree=null;
		Object NOT_SYM83_tree=null;
		Object EXISTS84_tree=null;
		RewriteRuleSubtreeStream stream_predicate=new RewriteRuleSubtreeStream(adaptor,"rule predicate");
		RewriteRuleSubtreeStream stream_relational_op=new RewriteRuleSubtreeStream(adaptor,"rule relational_op");

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1245:13: ( ( predicate relational_op predicate ) -> ^( relational_op predicate predicate ) | ( predicate relational_op ( ALL | ANY )? subquery ) | ( ( NOT_SYM )? EXISTS ^ subquery ) | predicate )
			int alt22=4;
			switch ( input.LA(1) ) {
			case MINUS:
			case PLUS:
				{
				int LA22_1 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case TEXT_STRING:
				{
				int LA22_2 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case BINARY:
			case NEGATION:
				{
				int LA22_3 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case INTEGER_NUM:
			case REAL_NUMBER:
				{
				int LA22_4 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case HEX_DIGIT:
				{
				int LA22_5 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case FALSE_SYM:
			case TRUE_SYM:
				{
				int LA22_6 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case BIT_NUM:
				{
				int LA22_7 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case NULL_SYM:
				{
				int LA22_8 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case ID:
				{
				int LA22_9 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case ABS:
			case ACOS:
			case ASIN:
			case ATAN:
			case ATAN2:
			case CEIL:
			case CEILING:
			case CONV:
			case COS:
			case COT:
			case CRC32:
			case DEGREES:
			case EXP:
			case FLOOR:
			case LN:
			case LOG:
			case LOG10:
			case LOG2:
			case MOD:
			case PI:
			case POW:
			case POWER:
			case RADIANS:
			case RAND:
			case ROUND:
			case SIGN:
			case SIN:
			case SQRT:
			case TAN:
			case TRUNCATE:
				{
				int LA22_10 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case LOAD_FILE:
			case MAKE_SET:
				{
				int LA22_11 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case ADDDATE:
			case ADDTIME:
			case CONVERT_TZ:
			case CURDATE:
			case CURTIME:
			case DATEDIFF:
			case DATE_ADD:
			case DATE_FORMAT:
			case DATE_SUB:
			case DATE_SYM:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case EXTRACT:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GET_FORMAT:
			case HOUR:
			case LAST_DAY:
			case MAKEDATE:
			case MAKETIME:
			case MICROSECOND:
			case MINUTE:
			case MONTH:
			case MONTHNAME:
			case NOW:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case QUARTER:
			case SECOND:
			case SEC_TO_TIME:
			case STR_TO_DATE:
			case SUBTIME:
			case SYSDATE:
			case TIMEDIFF:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_SYM:
			case TIME_TO_SEC:
			case TO_DAYS:
			case TO_SECONDS:
			case UNIX_TIMESTAMP:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case WEEK:
			case WEEKDAY:
			case WEEKOFYEAR:
			case YEAR:
			case YEARWEEK:
				{
				int LA22_12 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case ASCII_SYM:
			case BIN:
			case BIT_LENGTH:
			case CHAR:
			case CHAR_LENGTH:
			case CONCAT:
			case CONCAT_WS:
			case ELT:
			case EXPORT_SET:
			case FIELD:
			case FIND_IN_SET:
			case FORMAT:
			case FROM_BASE64:
			case HEX:
			case INSERT:
			case INSTR:
			case LEFT:
			case LENGTH:
			case LOCATE:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MID:
			case OCT:
			case ORD:
			case QUOTE:
			case REPEAT:
			case REPLACE:
			case REVERSE:
			case RIGHT:
			case RPAD:
			case RTRIM:
			case SOUNDEX:
			case SPACE:
			case STRCMP:
			case SUBSTRING:
			case SUBSTRING_INDEX:
			case TO_BASE64:
			case TRIM:
			case UNHEX:
			case UPPER:
			case WEIGHT_STRING:
				{
				int LA22_13 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case BENCHMARK:
			case CHARSET:
			case COERCIBILITY:
			case COLLATION:
			case CONNECTION_ID:
			case CURRENT_USER:
			case DATABASE:
			case DECODE:
			case DEFAULT:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case ENCODE:
			case ENCRYPT:
			case FOUND_ROWS:
			case GET_LOCK:
			case IF:
			case IFNULL:
			case INET_ATON:
			case INET_NTOA:
			case IS_FREE_LOCK:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case MASTER_POS_WAIT:
			case MD5:
			case NAME_CONST:
			case OLD_PASSWORD:
			case PASSWORD:
			case RELEASE_LOCK:
			case SCHEMA:
			case SESSION_USER:
			case SLEEP:
			case SYSTEM_USER:
			case USER:
			case UUID:
			case VALUES:
			case VERSION_SYM:
				{
				int LA22_14 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case CAST_SYM:
				{
				int LA22_15 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case CONVERT_SYM:
				{
				int LA22_16 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX_SYM:
			case MIN_SYM:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VARIANCE:
			case VAR_POP:
			case VAR_SAMP:
				{
				int LA22_17 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case USER_VAR:
				{
				int LA22_18 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case LPAREN:
				{
				int LA22_19 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case ROW_SYM:
				{
				int LA22_20 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case EXISTS:
				{
				int LA22_21 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (synpred280_SQL()) ) {
					alt22=3;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case MATCH:
				{
				int LA22_22 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case CASE_SYM:
				{
				int LA22_23 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case INTERVAL_SYM:
				{
				int LA22_24 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case NOT_SYM:
				{
				alt22=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 22, 0, input);
				throw nvae;
			}
			switch (alt22) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1246:5: ( predicate relational_op predicate )
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1246:5: ( predicate relational_op predicate )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1246:7: predicate relational_op predicate
					{
					pushFollow(FOLLOW_predicate_in_bool_primary22591);
					predicate76=predicate();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_predicate.add(predicate76.getTree());
					pushFollow(FOLLOW_relational_op_in_bool_primary22593);
					relational_op77=relational_op();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_relational_op.add(relational_op77.getTree());
					pushFollow(FOLLOW_predicate_in_bool_primary22595);
					predicate78=predicate();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_predicate.add(predicate78.getTree());
					}

					// AST REWRITE
					// elements: predicate, predicate, relational_op
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 1246:43: -> ^( relational_op predicate predicate )
					{
						// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1246:46: ^( relational_op predicate predicate )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_relational_op.nextNode(), root_1);
						adaptor.addChild(root_1, stream_predicate.nextTree());
						adaptor.addChild(root_1, stream_predicate.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1247:5: ( predicate relational_op ( ALL | ANY )? subquery )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1247:5: ( predicate relational_op ( ALL | ANY )? subquery )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1247:7: predicate relational_op ( ALL | ANY )? subquery
					{
					pushFollow(FOLLOW_predicate_in_bool_primary22617);
					predicate79=predicate();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, predicate79.getTree());

					pushFollow(FOLLOW_relational_op_in_bool_primary22619);
					relational_op80=relational_op();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, relational_op80.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1247:31: ( ALL | ANY )?
					int alt20=2;
					int LA20_0 = input.LA(1);
					if ( (LA20_0==ALL||LA20_0==ANY) ) {
						alt20=1;
					}
					switch (alt20) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
							{
							set81=input.LT(1);
							if ( input.LA(1)==ALL||input.LA(1)==ANY ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set81));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					pushFollow(FOLLOW_subquery_in_bool_primary22632);
					subquery82=subquery();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery82.getTree());

					}

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1248:5: ( ( NOT_SYM )? EXISTS ^ subquery )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1248:5: ( ( NOT_SYM )? EXISTS ^ subquery )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1248:7: ( NOT_SYM )? EXISTS ^ subquery
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1248:7: ( NOT_SYM )?
					int alt21=2;
					int LA21_0 = input.LA(1);
					if ( (LA21_0==NOT_SYM) ) {
						alt21=1;
					}
					switch (alt21) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1248:7: NOT_SYM
							{
							NOT_SYM83=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_bool_primary22643); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							NOT_SYM83_tree = (Object)adaptor.create(NOT_SYM83);
							adaptor.addChild(root_0, NOT_SYM83_tree);
							}

							}
							break;

					}

					EXISTS84=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_bool_primary22646); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXISTS84_tree = (Object)adaptor.create(EXISTS84);
					root_0 = (Object)adaptor.becomeRoot(EXISTS84_tree, root_0);
					}

					pushFollow(FOLLOW_subquery_in_bool_primary22650);
					subquery85=subquery();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery85.getTree());

					}

					}
					break;
				case 4 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1249:5: predicate
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_predicate_in_bool_primary22658);
					predicate86=predicate();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, predicate86.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "bool_primary"


	public static class predicate_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "predicate"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1251:1: predicate : ( ( bit_expr ( NOT_SYM )? IN_SYM ^ ( subquery | expression_list ) ) | ( bit_expr ( NOT_SYM )? BETWEEN ^ bit_expr AND_SYM ^ predicate ) | ( bit_expr SOUNDS_SYM LIKE_SYM ^ bit_expr ) | ( bit_expr ( NOT_SYM )? LIKE_SYM ^ simple_expr ( ESCAPE_SYM ^ simple_expr )? ) | ( bit_expr ( NOT_SYM )? REGEXP ^ bit_expr ) | ( bit_expr ) );
	public final SQLParser.predicate_return predicate() throws RecognitionException {
		SQLParser.predicate_return retval = new SQLParser.predicate_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token NOT_SYM88=null;
		Token IN_SYM89=null;
		Token NOT_SYM93=null;
		Token BETWEEN94=null;
		Token AND_SYM96=null;
		Token SOUNDS_SYM99=null;
		Token LIKE_SYM100=null;
		Token NOT_SYM103=null;
		Token LIKE_SYM104=null;
		Token ESCAPE_SYM106=null;
		Token NOT_SYM109=null;
		Token REGEXP110=null;
		ParserRuleReturnScope bit_expr87 =null;
		ParserRuleReturnScope subquery90 =null;
		ParserRuleReturnScope expression_list91 =null;
		ParserRuleReturnScope bit_expr92 =null;
		ParserRuleReturnScope bit_expr95 =null;
		ParserRuleReturnScope predicate97 =null;
		ParserRuleReturnScope bit_expr98 =null;
		ParserRuleReturnScope bit_expr101 =null;
		ParserRuleReturnScope bit_expr102 =null;
		ParserRuleReturnScope simple_expr105 =null;
		ParserRuleReturnScope simple_expr107 =null;
		ParserRuleReturnScope bit_expr108 =null;
		ParserRuleReturnScope bit_expr111 =null;
		ParserRuleReturnScope bit_expr112 =null;

		Object NOT_SYM88_tree=null;
		Object IN_SYM89_tree=null;
		Object NOT_SYM93_tree=null;
		Object BETWEEN94_tree=null;
		Object AND_SYM96_tree=null;
		Object SOUNDS_SYM99_tree=null;
		Object LIKE_SYM100_tree=null;
		Object NOT_SYM103_tree=null;
		Object LIKE_SYM104_tree=null;
		Object ESCAPE_SYM106_tree=null;
		Object NOT_SYM109_tree=null;
		Object REGEXP110_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1251:10: ( ( bit_expr ( NOT_SYM )? IN_SYM ^ ( subquery | expression_list ) ) | ( bit_expr ( NOT_SYM )? BETWEEN ^ bit_expr AND_SYM ^ predicate ) | ( bit_expr SOUNDS_SYM LIKE_SYM ^ bit_expr ) | ( bit_expr ( NOT_SYM )? LIKE_SYM ^ simple_expr ( ESCAPE_SYM ^ simple_expr )? ) | ( bit_expr ( NOT_SYM )? REGEXP ^ bit_expr ) | ( bit_expr ) )
			int alt29=6;
			switch ( input.LA(1) ) {
			case MINUS:
			case PLUS:
				{
				int LA29_1 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case TEXT_STRING:
				{
				int LA29_2 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case BINARY:
			case NEGATION:
				{
				int LA29_3 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case INTEGER_NUM:
			case REAL_NUMBER:
				{
				int LA29_4 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case HEX_DIGIT:
				{
				int LA29_5 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case FALSE_SYM:
			case TRUE_SYM:
				{
				int LA29_6 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case BIT_NUM:
				{
				int LA29_7 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case NULL_SYM:
				{
				int LA29_8 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case ID:
				{
				int LA29_9 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case ABS:
			case ACOS:
			case ASIN:
			case ATAN:
			case ATAN2:
			case CEIL:
			case CEILING:
			case CONV:
			case COS:
			case COT:
			case CRC32:
			case DEGREES:
			case EXP:
			case FLOOR:
			case LN:
			case LOG:
			case LOG10:
			case LOG2:
			case MOD:
			case PI:
			case POW:
			case POWER:
			case RADIANS:
			case RAND:
			case ROUND:
			case SIGN:
			case SIN:
			case SQRT:
			case TAN:
			case TRUNCATE:
				{
				int LA29_10 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case LOAD_FILE:
			case MAKE_SET:
				{
				int LA29_11 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case ADDDATE:
			case ADDTIME:
			case CONVERT_TZ:
			case CURDATE:
			case CURTIME:
			case DATEDIFF:
			case DATE_ADD:
			case DATE_FORMAT:
			case DATE_SUB:
			case DATE_SYM:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case EXTRACT:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GET_FORMAT:
			case HOUR:
			case LAST_DAY:
			case MAKEDATE:
			case MAKETIME:
			case MICROSECOND:
			case MINUTE:
			case MONTH:
			case MONTHNAME:
			case NOW:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case QUARTER:
			case SECOND:
			case SEC_TO_TIME:
			case STR_TO_DATE:
			case SUBTIME:
			case SYSDATE:
			case TIMEDIFF:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_SYM:
			case TIME_TO_SEC:
			case TO_DAYS:
			case TO_SECONDS:
			case UNIX_TIMESTAMP:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case WEEK:
			case WEEKDAY:
			case WEEKOFYEAR:
			case YEAR:
			case YEARWEEK:
				{
				int LA29_12 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case ASCII_SYM:
			case BIN:
			case BIT_LENGTH:
			case CHAR:
			case CHAR_LENGTH:
			case CONCAT:
			case CONCAT_WS:
			case ELT:
			case EXPORT_SET:
			case FIELD:
			case FIND_IN_SET:
			case FORMAT:
			case FROM_BASE64:
			case HEX:
			case INSERT:
			case INSTR:
			case LEFT:
			case LENGTH:
			case LOCATE:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MID:
			case OCT:
			case ORD:
			case QUOTE:
			case REPEAT:
			case REPLACE:
			case REVERSE:
			case RIGHT:
			case RPAD:
			case RTRIM:
			case SOUNDEX:
			case SPACE:
			case STRCMP:
			case SUBSTRING:
			case SUBSTRING_INDEX:
			case TO_BASE64:
			case TRIM:
			case UNHEX:
			case UPPER:
			case WEIGHT_STRING:
				{
				int LA29_13 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case BENCHMARK:
			case CHARSET:
			case COERCIBILITY:
			case COLLATION:
			case CONNECTION_ID:
			case CURRENT_USER:
			case DATABASE:
			case DECODE:
			case DEFAULT:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case ENCODE:
			case ENCRYPT:
			case FOUND_ROWS:
			case GET_LOCK:
			case IF:
			case IFNULL:
			case INET_ATON:
			case INET_NTOA:
			case IS_FREE_LOCK:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case MASTER_POS_WAIT:
			case MD5:
			case NAME_CONST:
			case OLD_PASSWORD:
			case PASSWORD:
			case RELEASE_LOCK:
			case SCHEMA:
			case SESSION_USER:
			case SLEEP:
			case SYSTEM_USER:
			case USER:
			case UUID:
			case VALUES:
			case VERSION_SYM:
				{
				int LA29_14 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case CAST_SYM:
				{
				int LA29_15 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case CONVERT_SYM:
				{
				int LA29_16 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX_SYM:
			case MIN_SYM:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VARIANCE:
			case VAR_POP:
			case VAR_SAMP:
				{
				int LA29_17 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case USER_VAR:
				{
				int LA29_18 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case LPAREN:
				{
				int LA29_19 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case ROW_SYM:
				{
				int LA29_20 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case EXISTS:
				{
				int LA29_21 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case MATCH:
				{
				int LA29_22 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case CASE_SYM:
				{
				int LA29_23 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case INTERVAL_SYM:
				{
				int LA29_24 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 29, 0, input);
				throw nvae;
			}
			switch (alt29) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1252:5: ( bit_expr ( NOT_SYM )? IN_SYM ^ ( subquery | expression_list ) )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1252:5: ( bit_expr ( NOT_SYM )? IN_SYM ^ ( subquery | expression_list ) )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1252:7: bit_expr ( NOT_SYM )? IN_SYM ^ ( subquery | expression_list )
					{
					pushFollow(FOLLOW_bit_expr_in_predicate22671);
					bit_expr87=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr87.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1252:16: ( NOT_SYM )?
					int alt23=2;
					int LA23_0 = input.LA(1);
					if ( (LA23_0==NOT_SYM) ) {
						alt23=1;
					}
					switch (alt23) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1252:17: NOT_SYM
							{
							NOT_SYM88=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_predicate22674); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							NOT_SYM88_tree = (Object)adaptor.create(NOT_SYM88);
							adaptor.addChild(root_0, NOT_SYM88_tree);
							}

							}
							break;

					}

					IN_SYM89=(Token)match(input,IN_SYM,FOLLOW_IN_SYM_in_predicate22678); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IN_SYM89_tree = (Object)adaptor.create(IN_SYM89);
					root_0 = (Object)adaptor.becomeRoot(IN_SYM89_tree, root_0);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1252:36: ( subquery | expression_list )
					int alt24=2;
					int LA24_0 = input.LA(1);
					if ( (LA24_0==LPAREN) ) {
						int LA24_1 = input.LA(2);
						if ( (LA24_1==SELECT) ) {
							alt24=1;
						}
						else if ( (LA24_1==ABS||LA24_1==ACOS||(LA24_1 >= ADDDATE && LA24_1 <= ADDTIME)||(LA24_1 >= AES_DECRYPT && LA24_1 <= AES_ENCRYPT)||LA24_1==ASCII_SYM||LA24_1==ASIN||(LA24_1 >= ATAN && LA24_1 <= ATAN2)||LA24_1==AVG||LA24_1==BENCHMARK||(LA24_1 >= BIN && LA24_1 <= BINARY)||(LA24_1 >= BIT_AND && LA24_1 <= BIT_OR)||LA24_1==BIT_XOR||(LA24_1 >= CASE_SYM && LA24_1 <= CEILING)||LA24_1==CHAR||(LA24_1 >= CHARSET && LA24_1 <= CHAR_LENGTH)||LA24_1==COERCIBILITY||LA24_1==COLLATION||(LA24_1 >= CONCAT && LA24_1 <= CONCAT_WS)||LA24_1==CONNECTION_ID||(LA24_1 >= CONV && LA24_1 <= CONVERT_TZ)||(LA24_1 >= COS && LA24_1 <= COUNT)||LA24_1==CRC32||LA24_1==CURDATE||LA24_1==CURRENT_USER||LA24_1==CURTIME||LA24_1==DATABASE||LA24_1==DATEDIFF||(LA24_1 >= DATE_ADD && LA24_1 <= DAYOFYEAR)||(LA24_1 >= DECODE && LA24_1 <= DEFAULT)||LA24_1==DEGREES||(LA24_1 >= DES_DECRYPT && LA24_1 <= DES_ENCRYPT)||LA24_1==ELT||(LA24_1 >= ENCODE && LA24_1 <= ENCRYPT)||LA24_1==EXISTS||LA24_1==EXP||LA24_1==EXPORT_SET||LA24_1==EXTRACT||LA24_1==FALSE_SYM||LA24_1==FIELD||LA24_1==FIND_IN_SET||LA24_1==FLOOR||LA24_1==FORMAT||LA24_1==FOUND_ROWS||(LA24_1 >= FROM_BASE64 && LA24_1 <= FROM_UNIXTIME)||(LA24_1 >= GET_FORMAT && LA24_1 <= GET_LOCK)||LA24_1==GROUP_CONCAT||(LA24_1 >= HEX && LA24_1 <= HEX_DIGIT)||LA24_1==HOUR||LA24_1==ID||(LA24_1 >= IF && LA24_1 <= IFNULL)||(LA24_1 >= INET_ATON && LA24_1 <= INET_NTOA)||LA24_1==INSERT||(LA24_1 >= INSTR && LA24_1 <= INTEGER_NUM)||LA24_1==INTERVAL_SYM||LA24_1==IS_FREE_LOCK||LA24_1==IS_USED_LOCK||(LA24_1 >= LAST_DAY && LA24_1 <= LAST_INSERT_ID)||(LA24_1 >= LEFT && LA24_1 <= LENGTH)||LA24_1==LN||LA24_1==LOAD_FILE||LA24_1==LOCATE||(LA24_1 >= LOG && LA24_1 <= LOG2)||LA24_1==LOWER||(LA24_1 >= LPAD && LA24_1 <= LPAREN)||LA24_1==LTRIM||(LA24_1 >= MAKEDATE && LA24_1 <= MAKE_SET)||LA24_1==MASTER_POS_WAIT||LA24_1==MATCH||LA24_1==MAX_SYM||LA24_1==MD5||(LA24_1 >= MICROSECOND && LA24_1 <= MID)||(LA24_1 >= MINUS && LA24_1 <= MINUTE)||LA24_1==MIN_SYM||LA24_1==MOD||(LA24_1 >= MONTH && LA24_1 <= MONTHNAME)||LA24_1==NAME_CONST||LA24_1==NEGATION||(LA24_1 >= NOT_SYM && LA24_1 <= NOW)||LA24_1==NULL_SYM||LA24_1==OCT||LA24_1==OLD_PASSWORD||LA24_1==ORD||(LA24_1 >= PASSWORD && LA24_1 <= PERIOD_DIFF)||LA24_1==PI||LA24_1==PLUS||(LA24_1 >= POW && LA24_1 <= POWER)||LA24_1==QUARTER||LA24_1==QUOTE||(LA24_1 >= RADIANS && LA24_1 <= RAND)||LA24_1==REAL_NUMBER||LA24_1==RELEASE_LOCK||LA24_1==REPEAT||LA24_1==REPLACE||LA24_1==REVERSE||LA24_1==RIGHT||LA24_1==ROUND||(LA24_1 >= ROW_SYM && LA24_1 <= RPAD)||LA24_1==RTRIM||(LA24_1 >= SCHEMA && LA24_1 <= SECOND)||LA24_1==SEC_TO_TIME||LA24_1==SESSION_USER||LA24_1==SIGN||LA24_1==SIN||LA24_1==SLEEP||LA24_1==SOUNDEX||LA24_1==SPACE||LA24_1==SQRT||(LA24_1 >= STD && LA24_1 <= STDDEV_SAMP)||LA24_1==STRCMP||LA24_1==STR_TO_DATE||(LA24_1 >= SUBSTRING && LA24_1 <= SUM)||(LA24_1 >= SYSDATE && LA24_1 <= SYSTEM_USER)||LA24_1==TAN||LA24_1==TEXT_STRING||(LA24_1 >= TIMEDIFF && LA24_1 <= TIME_TO_SEC)||(LA24_1 >= TO_BASE64 && LA24_1 <= TO_SECONDS)||(LA24_1 >= TRIM && LA24_1 <= TRUNCATE)||LA24_1==UNHEX||LA24_1==UNIX_TIMESTAMP||LA24_1==UPPER||(LA24_1 >= USER && LA24_1 <= USER_VAR)||(LA24_1 >= UTC_DATE && LA24_1 <= UTC_TIMESTAMP)||LA24_1==UUID||LA24_1==VALUES||LA24_1==VARIANCE||(LA24_1 >= VAR_POP && LA24_1 <= VERSION_SYM)||(LA24_1 >= WEEK && LA24_1 <= WEIGHT_STRING)||(LA24_1 >= YEAR && LA24_1 <= YEARWEEK)) ) {
							alt24=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 24, 1, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 24, 0, input);
						throw nvae;
					}

					switch (alt24) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1252:37: subquery
							{
							pushFollow(FOLLOW_subquery_in_predicate22683);
							subquery90=subquery();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery90.getTree());

							}
							break;
						case 2 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1252:48: expression_list
							{
							pushFollow(FOLLOW_expression_list_in_predicate22687);
							expression_list91=expression_list();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list91.getTree());

							}
							break;

					}

					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1253:5: ( bit_expr ( NOT_SYM )? BETWEEN ^ bit_expr AND_SYM ^ predicate )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1253:5: ( bit_expr ( NOT_SYM )? BETWEEN ^ bit_expr AND_SYM ^ predicate )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1253:7: bit_expr ( NOT_SYM )? BETWEEN ^ bit_expr AND_SYM ^ predicate
					{
					pushFollow(FOLLOW_bit_expr_in_predicate22698);
					bit_expr92=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr92.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1253:16: ( NOT_SYM )?
					int alt25=2;
					int LA25_0 = input.LA(1);
					if ( (LA25_0==NOT_SYM) ) {
						alt25=1;
					}
					switch (alt25) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1253:17: NOT_SYM
							{
							NOT_SYM93=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_predicate22701); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							NOT_SYM93_tree = (Object)adaptor.create(NOT_SYM93);
							adaptor.addChild(root_0, NOT_SYM93_tree);
							}

							}
							break;

					}

					BETWEEN94=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_predicate22705); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BETWEEN94_tree = (Object)adaptor.create(BETWEEN94);
					root_0 = (Object)adaptor.becomeRoot(BETWEEN94_tree, root_0);
					}

					pushFollow(FOLLOW_bit_expr_in_predicate22709);
					bit_expr95=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr95.getTree());

					AND_SYM96=(Token)match(input,AND_SYM,FOLLOW_AND_SYM_in_predicate22711); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					AND_SYM96_tree = (Object)adaptor.create(AND_SYM96);
					root_0 = (Object)adaptor.becomeRoot(AND_SYM96_tree, root_0);
					}

					pushFollow(FOLLOW_predicate_in_predicate22715);
					predicate97=predicate();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, predicate97.getTree());

					}

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1254:5: ( bit_expr SOUNDS_SYM LIKE_SYM ^ bit_expr )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1254:5: ( bit_expr SOUNDS_SYM LIKE_SYM ^ bit_expr )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1254:7: bit_expr SOUNDS_SYM LIKE_SYM ^ bit_expr
					{
					pushFollow(FOLLOW_bit_expr_in_predicate22726);
					bit_expr98=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr98.getTree());

					SOUNDS_SYM99=(Token)match(input,SOUNDS_SYM,FOLLOW_SOUNDS_SYM_in_predicate22728); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SOUNDS_SYM99_tree = (Object)adaptor.create(SOUNDS_SYM99);
					adaptor.addChild(root_0, SOUNDS_SYM99_tree);
					}

					LIKE_SYM100=(Token)match(input,LIKE_SYM,FOLLOW_LIKE_SYM_in_predicate22730); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LIKE_SYM100_tree = (Object)adaptor.create(LIKE_SYM100);
					root_0 = (Object)adaptor.becomeRoot(LIKE_SYM100_tree, root_0);
					}

					pushFollow(FOLLOW_bit_expr_in_predicate22734);
					bit_expr101=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr101.getTree());

					}

					}
					break;
				case 4 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1255:5: ( bit_expr ( NOT_SYM )? LIKE_SYM ^ simple_expr ( ESCAPE_SYM ^ simple_expr )? )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1255:5: ( bit_expr ( NOT_SYM )? LIKE_SYM ^ simple_expr ( ESCAPE_SYM ^ simple_expr )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1255:7: bit_expr ( NOT_SYM )? LIKE_SYM ^ simple_expr ( ESCAPE_SYM ^ simple_expr )?
					{
					pushFollow(FOLLOW_bit_expr_in_predicate22745);
					bit_expr102=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr102.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1255:16: ( NOT_SYM )?
					int alt26=2;
					int LA26_0 = input.LA(1);
					if ( (LA26_0==NOT_SYM) ) {
						alt26=1;
					}
					switch (alt26) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1255:17: NOT_SYM
							{
							NOT_SYM103=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_predicate22748); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							NOT_SYM103_tree = (Object)adaptor.create(NOT_SYM103);
							adaptor.addChild(root_0, NOT_SYM103_tree);
							}

							}
							break;

					}

					LIKE_SYM104=(Token)match(input,LIKE_SYM,FOLLOW_LIKE_SYM_in_predicate22752); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LIKE_SYM104_tree = (Object)adaptor.create(LIKE_SYM104);
					root_0 = (Object)adaptor.becomeRoot(LIKE_SYM104_tree, root_0);
					}

					pushFollow(FOLLOW_simple_expr_in_predicate22756);
					simple_expr105=simple_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expr105.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1255:50: ( ESCAPE_SYM ^ simple_expr )?
					int alt27=2;
					int LA27_0 = input.LA(1);
					if ( (LA27_0==ESCAPE_SYM) ) {
						int LA27_1 = input.LA(2);
						if ( (synpred288_SQL()) ) {
							alt27=1;
						}
					}
					switch (alt27) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1255:51: ESCAPE_SYM ^ simple_expr
							{
							ESCAPE_SYM106=(Token)match(input,ESCAPE_SYM,FOLLOW_ESCAPE_SYM_in_predicate22759); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ESCAPE_SYM106_tree = (Object)adaptor.create(ESCAPE_SYM106);
							root_0 = (Object)adaptor.becomeRoot(ESCAPE_SYM106_tree, root_0);
							}

							pushFollow(FOLLOW_simple_expr_in_predicate22763);
							simple_expr107=simple_expr();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expr107.getTree());

							}
							break;

					}

					}

					}
					break;
				case 5 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1256:5: ( bit_expr ( NOT_SYM )? REGEXP ^ bit_expr )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1256:5: ( bit_expr ( NOT_SYM )? REGEXP ^ bit_expr )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1256:7: bit_expr ( NOT_SYM )? REGEXP ^ bit_expr
					{
					pushFollow(FOLLOW_bit_expr_in_predicate22775);
					bit_expr108=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr108.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1256:16: ( NOT_SYM )?
					int alt28=2;
					int LA28_0 = input.LA(1);
					if ( (LA28_0==NOT_SYM) ) {
						alt28=1;
					}
					switch (alt28) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1256:17: NOT_SYM
							{
							NOT_SYM109=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_predicate22778); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							NOT_SYM109_tree = (Object)adaptor.create(NOT_SYM109);
							adaptor.addChild(root_0, NOT_SYM109_tree);
							}

							}
							break;

					}

					REGEXP110=(Token)match(input,REGEXP,FOLLOW_REGEXP_in_predicate22782); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					REGEXP110_tree = (Object)adaptor.create(REGEXP110);
					root_0 = (Object)adaptor.becomeRoot(REGEXP110_tree, root_0);
					}

					pushFollow(FOLLOW_bit_expr_in_predicate22786);
					bit_expr111=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr111.getTree());

					}

					}
					break;
				case 6 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1257:5: ( bit_expr )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1257:5: ( bit_expr )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1257:7: bit_expr
					{
					pushFollow(FOLLOW_bit_expr_in_predicate22797);
					bit_expr112=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr112.getTree());

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "predicate"


	public static class bit_expr_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "bit_expr"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1259:1: bit_expr : factor1 ( VERTBAR ^ factor1 )? ;
	public final SQLParser.bit_expr_return bit_expr() throws RecognitionException {
		SQLParser.bit_expr_return retval = new SQLParser.bit_expr_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token VERTBAR114=null;
		ParserRuleReturnScope factor1113 =null;
		ParserRuleReturnScope factor1115 =null;

		Object VERTBAR114_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1259:9: ( factor1 ( VERTBAR ^ factor1 )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1260:3: factor1 ( VERTBAR ^ factor1 )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_factor1_in_bit_expr22810);
			factor1113=factor1();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, factor1113.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1260:11: ( VERTBAR ^ factor1 )?
			int alt30=2;
			int LA30_0 = input.LA(1);
			if ( (LA30_0==VERTBAR) ) {
				int LA30_1 = input.LA(2);
				if ( (synpred292_SQL()) ) {
					alt30=1;
				}
			}
			switch (alt30) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1260:13: VERTBAR ^ factor1
					{
					VERTBAR114=(Token)match(input,VERTBAR,FOLLOW_VERTBAR_in_bit_expr22814); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					VERTBAR114_tree = (Object)adaptor.create(VERTBAR114);
					root_0 = (Object)adaptor.becomeRoot(VERTBAR114_tree, root_0);
					}

					pushFollow(FOLLOW_factor1_in_bit_expr22818);
					factor1115=factor1();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, factor1115.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "bit_expr"


	public static class factor1_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "factor1"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1261:1: factor1 : factor2 ( BITAND ^ factor2 )? ;
	public final SQLParser.factor1_return factor1() throws RecognitionException {
		SQLParser.factor1_return retval = new SQLParser.factor1_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token BITAND117=null;
		ParserRuleReturnScope factor2116 =null;
		ParserRuleReturnScope factor2118 =null;

		Object BITAND117_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1261:8: ( factor2 ( BITAND ^ factor2 )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1262:3: factor2 ( BITAND ^ factor2 )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_factor2_in_factor122830);
			factor2116=factor2();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, factor2116.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1262:11: ( BITAND ^ factor2 )?
			int alt31=2;
			int LA31_0 = input.LA(1);
			if ( (LA31_0==BITAND) ) {
				int LA31_1 = input.LA(2);
				if ( (synpred293_SQL()) ) {
					alt31=1;
				}
			}
			switch (alt31) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1262:13: BITAND ^ factor2
					{
					BITAND117=(Token)match(input,BITAND,FOLLOW_BITAND_in_factor122834); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BITAND117_tree = (Object)adaptor.create(BITAND117);
					root_0 = (Object)adaptor.becomeRoot(BITAND117_tree, root_0);
					}

					pushFollow(FOLLOW_factor2_in_factor122838);
					factor2118=factor2();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, factor2118.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "factor1"


	public static class factor2_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "factor2"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1263:1: factor2 : factor3 ( ( SHIFT_LEFT | SHIFT_RIGHT ) ^ factor3 )? ;
	public final SQLParser.factor2_return factor2() throws RecognitionException {
		SQLParser.factor2_return retval = new SQLParser.factor2_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set120=null;
		ParserRuleReturnScope factor3119 =null;
		ParserRuleReturnScope factor3121 =null;

		Object set120_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1263:8: ( factor3 ( ( SHIFT_LEFT | SHIFT_RIGHT ) ^ factor3 )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1264:3: factor3 ( ( SHIFT_LEFT | SHIFT_RIGHT ) ^ factor3 )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_factor3_in_factor222850);
			factor3119=factor3();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, factor3119.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1264:11: ( ( SHIFT_LEFT | SHIFT_RIGHT ) ^ factor3 )?
			int alt32=2;
			int LA32_0 = input.LA(1);
			if ( ((LA32_0 >= SHIFT_LEFT && LA32_0 <= SHIFT_RIGHT)) ) {
				int LA32_1 = input.LA(2);
				if ( (synpred295_SQL()) ) {
					alt32=1;
				}
			}
			switch (alt32) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1264:13: ( SHIFT_LEFT | SHIFT_RIGHT ) ^ factor3
					{
					set120=input.LT(1);
					set120=input.LT(1);
					if ( (input.LA(1) >= SHIFT_LEFT && input.LA(1) <= SHIFT_RIGHT) ) {
						input.consume();
						if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot((Object)adaptor.create(set120), root_0);
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					pushFollow(FOLLOW_factor3_in_factor222862);
					factor3121=factor3();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, factor3121.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "factor2"


	public static class factor3_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "factor3"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1265:1: factor3 : factor4 ( ( PLUS | MINUS ) ^ factor4 )? ;
	public final SQLParser.factor3_return factor3() throws RecognitionException {
		SQLParser.factor3_return retval = new SQLParser.factor3_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set123=null;
		ParserRuleReturnScope factor4122 =null;
		ParserRuleReturnScope factor4124 =null;

		Object set123_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1265:8: ( factor4 ( ( PLUS | MINUS ) ^ factor4 )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1266:3: factor4 ( ( PLUS | MINUS ) ^ factor4 )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_factor4_in_factor322874);
			factor4122=factor4();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, factor4122.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1266:11: ( ( PLUS | MINUS ) ^ factor4 )?
			int alt33=2;
			int LA33_0 = input.LA(1);
			if ( (LA33_0==MINUS||LA33_0==PLUS) ) {
				int LA33_1 = input.LA(2);
				if ( (synpred297_SQL()) ) {
					alt33=1;
				}
			}
			switch (alt33) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1266:13: ( PLUS | MINUS ) ^ factor4
					{
					set123=input.LT(1);
					set123=input.LT(1);
					if ( input.LA(1)==MINUS||input.LA(1)==PLUS ) {
						input.consume();
						if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot((Object)adaptor.create(set123), root_0);
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					pushFollow(FOLLOW_factor4_in_factor322886);
					factor4124=factor4();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, factor4124.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "factor3"


	public static class factor4_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "factor4"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1267:1: factor4 : factor5 ( ( ASTERISK | DIVIDE | MOD_SYM | POWER_OP ) ^ factor5 )? ;
	public final SQLParser.factor4_return factor4() throws RecognitionException {
		SQLParser.factor4_return retval = new SQLParser.factor4_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set126=null;
		ParserRuleReturnScope factor5125 =null;
		ParserRuleReturnScope factor5127 =null;

		Object set126_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1267:8: ( factor5 ( ( ASTERISK | DIVIDE | MOD_SYM | POWER_OP ) ^ factor5 )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1268:3: factor5 ( ( ASTERISK | DIVIDE | MOD_SYM | POWER_OP ) ^ factor5 )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_factor5_in_factor422898);
			factor5125=factor5();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, factor5125.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1268:11: ( ( ASTERISK | DIVIDE | MOD_SYM | POWER_OP ) ^ factor5 )?
			int alt34=2;
			int LA34_0 = input.LA(1);
			if ( (LA34_0==ASTERISK||LA34_0==DIVIDE||LA34_0==MOD_SYM||LA34_0==POWER_OP) ) {
				int LA34_1 = input.LA(2);
				if ( (synpred301_SQL()) ) {
					alt34=1;
				}
			}
			switch (alt34) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1268:13: ( ASTERISK | DIVIDE | MOD_SYM | POWER_OP ) ^ factor5
					{
					set126=input.LT(1);
					set126=input.LT(1);
					if ( input.LA(1)==ASTERISK||input.LA(1)==DIVIDE||input.LA(1)==MOD_SYM||input.LA(1)==POWER_OP ) {
						input.consume();
						if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot((Object)adaptor.create(set126), root_0);
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					pushFollow(FOLLOW_factor5_in_factor422914);
					factor5127=factor5();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, factor5127.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "factor4"


	public static class factor5_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "factor5"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1269:1: factor5 : factor6 ( ( PLUS | MINUS ) ^ interval_expr )? ;
	public final SQLParser.factor5_return factor5() throws RecognitionException {
		SQLParser.factor5_return retval = new SQLParser.factor5_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set129=null;
		ParserRuleReturnScope factor6128 =null;
		ParserRuleReturnScope interval_expr130 =null;

		Object set129_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1269:8: ( factor6 ( ( PLUS | MINUS ) ^ interval_expr )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1270:3: factor6 ( ( PLUS | MINUS ) ^ interval_expr )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_factor6_in_factor522926);
			factor6128=factor6();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, factor6128.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1270:11: ( ( PLUS | MINUS ) ^ interval_expr )?
			int alt35=2;
			int LA35_0 = input.LA(1);
			if ( (LA35_0==MINUS||LA35_0==PLUS) ) {
				int LA35_1 = input.LA(2);
				if ( (synpred303_SQL()) ) {
					alt35=1;
				}
			}
			switch (alt35) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1270:13: ( PLUS | MINUS ) ^ interval_expr
					{
					set129=input.LT(1);
					set129=input.LT(1);
					if ( input.LA(1)==MINUS||input.LA(1)==PLUS ) {
						input.consume();
						if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot((Object)adaptor.create(set129), root_0);
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					pushFollow(FOLLOW_interval_expr_in_factor522938);
					interval_expr130=interval_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, interval_expr130.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "factor5"


	public static class factor6_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "factor6"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1271:1: factor6 : ( ( PLUS | MINUS | NEGATION | BINARY ) ^ simple_expr | simple_expr );
	public final SQLParser.factor6_return factor6() throws RecognitionException {
		SQLParser.factor6_return retval = new SQLParser.factor6_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set131=null;
		ParserRuleReturnScope simple_expr132 =null;
		ParserRuleReturnScope simple_expr133 =null;

		Object set131_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1271:8: ( ( PLUS | MINUS | NEGATION | BINARY ) ^ simple_expr | simple_expr )
			int alt36=2;
			switch ( input.LA(1) ) {
			case MINUS:
			case PLUS:
				{
				int LA36_1 = input.LA(2);
				if ( (LA36_1==ABS||LA36_1==ACOS||(LA36_1 >= ADDDATE && LA36_1 <= ADDTIME)||(LA36_1 >= AES_DECRYPT && LA36_1 <= AES_ENCRYPT)||LA36_1==ASCII_SYM||LA36_1==ASIN||(LA36_1 >= ATAN && LA36_1 <= ATAN2)||LA36_1==AVG||LA36_1==BENCHMARK||LA36_1==BIN||(LA36_1 >= BIT_AND && LA36_1 <= BIT_OR)||LA36_1==BIT_XOR||(LA36_1 >= CASE_SYM && LA36_1 <= CEILING)||LA36_1==CHAR||(LA36_1 >= CHARSET && LA36_1 <= CHAR_LENGTH)||LA36_1==COERCIBILITY||LA36_1==COLLATION||(LA36_1 >= CONCAT && LA36_1 <= CONCAT_WS)||LA36_1==CONNECTION_ID||(LA36_1 >= CONV && LA36_1 <= CONVERT_TZ)||(LA36_1 >= COS && LA36_1 <= COUNT)||LA36_1==CRC32||LA36_1==CURDATE||LA36_1==CURRENT_USER||LA36_1==CURTIME||LA36_1==DATABASE||LA36_1==DATEDIFF||(LA36_1 >= DATE_ADD && LA36_1 <= DAYOFYEAR)||(LA36_1 >= DECODE && LA36_1 <= DEFAULT)||LA36_1==DEGREES||(LA36_1 >= DES_DECRYPT && LA36_1 <= DES_ENCRYPT)||LA36_1==ELT||(LA36_1 >= ENCODE && LA36_1 <= ENCRYPT)||LA36_1==EXISTS||LA36_1==EXP||LA36_1==EXPORT_SET||LA36_1==EXTRACT||LA36_1==FALSE_SYM||LA36_1==FIELD||LA36_1==FIND_IN_SET||LA36_1==FLOOR||LA36_1==FORMAT||LA36_1==FOUND_ROWS||(LA36_1 >= FROM_BASE64 && LA36_1 <= FROM_UNIXTIME)||(LA36_1 >= GET_FORMAT && LA36_1 <= GET_LOCK)||LA36_1==GROUP_CONCAT||(LA36_1 >= HEX && LA36_1 <= HEX_DIGIT)||LA36_1==HOUR||LA36_1==ID||(LA36_1 >= IF && LA36_1 <= IFNULL)||(LA36_1 >= INET_ATON && LA36_1 <= INET_NTOA)||LA36_1==INSERT||LA36_1==INSTR||LA36_1==INTERVAL_SYM||LA36_1==IS_FREE_LOCK||LA36_1==IS_USED_LOCK||(LA36_1 >= LAST_DAY && LA36_1 <= LAST_INSERT_ID)||(LA36_1 >= LEFT && LA36_1 <= LENGTH)||LA36_1==LN||LA36_1==LOAD_FILE||LA36_1==LOCATE||(LA36_1 >= LOG && LA36_1 <= LOG2)||LA36_1==LOWER||(LA36_1 >= LPAD && LA36_1 <= LPAREN)||LA36_1==LTRIM||(LA36_1 >= MAKEDATE && LA36_1 <= MAKE_SET)||LA36_1==MASTER_POS_WAIT||LA36_1==MATCH||LA36_1==MAX_SYM||LA36_1==MD5||(LA36_1 >= MICROSECOND && LA36_1 <= MID)||(LA36_1 >= MINUS && LA36_1 <= MINUTE)||LA36_1==MIN_SYM||LA36_1==MOD||(LA36_1 >= MONTH && LA36_1 <= MONTHNAME)||LA36_1==NAME_CONST||LA36_1==NOW||LA36_1==NULL_SYM||LA36_1==OCT||LA36_1==OLD_PASSWORD||LA36_1==ORD||(LA36_1 >= PASSWORD && LA36_1 <= PERIOD_DIFF)||LA36_1==PI||LA36_1==PLUS||(LA36_1 >= POW && LA36_1 <= POWER)||LA36_1==QUARTER||LA36_1==QUOTE||(LA36_1 >= RADIANS && LA36_1 <= RAND)||LA36_1==RELEASE_LOCK||LA36_1==REPEAT||LA36_1==REPLACE||LA36_1==REVERSE||LA36_1==RIGHT||LA36_1==ROUND||(LA36_1 >= ROW_SYM && LA36_1 <= RPAD)||LA36_1==RTRIM||(LA36_1 >= SCHEMA && LA36_1 <= SECOND)||LA36_1==SEC_TO_TIME||LA36_1==SESSION_USER||LA36_1==SIGN||LA36_1==SIN||LA36_1==SLEEP||LA36_1==SOUNDEX||LA36_1==SPACE||LA36_1==SQRT||(LA36_1 >= STD && LA36_1 <= STDDEV_SAMP)||LA36_1==STRCMP||LA36_1==STR_TO_DATE||(LA36_1 >= SUBSTRING && LA36_1 <= SUM)||(LA36_1 >= SYSDATE && LA36_1 <= SYSTEM_USER)||LA36_1==TAN||LA36_1==TEXT_STRING||(LA36_1 >= TIMEDIFF && LA36_1 <= TIME_TO_SEC)||(LA36_1 >= TO_BASE64 && LA36_1 <= TO_SECONDS)||(LA36_1 >= TRIM && LA36_1 <= TRUNCATE)||LA36_1==UNHEX||LA36_1==UNIX_TIMESTAMP||LA36_1==UPPER||(LA36_1 >= USER && LA36_1 <= USER_VAR)||(LA36_1 >= UTC_DATE && LA36_1 <= UTC_TIMESTAMP)||LA36_1==UUID||LA36_1==VALUES||LA36_1==VARIANCE||(LA36_1 >= VAR_POP && LA36_1 <= VERSION_SYM)||(LA36_1 >= WEEK && LA36_1 <= WEIGHT_STRING)||(LA36_1 >= YEAR && LA36_1 <= YEARWEEK)) ) {
					alt36=1;
				}
				else if ( (LA36_1==INTEGER_NUM||LA36_1==REAL_NUMBER) ) {
					int LA36_4 = input.LA(3);
					if ( (synpred307_SQL()) ) {
						alt36=1;
					}
					else if ( (true) ) {
						alt36=2;
					}

				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 36, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case ASCII_SYM:
			case ASIN:
			case ATAN:
			case ATAN2:
			case AVG:
			case BENCHMARK:
			case BIN:
			case BIT_AND:
			case BIT_LENGTH:
			case BIT_NUM:
			case BIT_OR:
			case BIT_XOR:
			case CASE_SYM:
			case CAST_SYM:
			case CEIL:
			case CEILING:
			case CHAR:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_SYM:
			case CONVERT_TZ:
			case COS:
			case COT:
			case COUNT:
			case CRC32:
			case CURDATE:
			case CURRENT_USER:
			case CURTIME:
			case DATABASE:
			case DATEDIFF:
			case DATE_ADD:
			case DATE_FORMAT:
			case DATE_SUB:
			case DATE_SYM:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEFAULT:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case EXISTS:
			case EXP:
			case EXPORT_SET:
			case EXTRACT:
			case FALSE_SYM:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GET_FORMAT:
			case GET_LOCK:
			case GROUP_CONCAT:
			case HEX:
			case HEX_DIGIT:
			case HOUR:
			case ID:
			case IF:
			case IFNULL:
			case INET_ATON:
			case INET_NTOA:
			case INSERT:
			case INSTR:
			case INTEGER_NUM:
			case INTERVAL_SYM:
			case IS_FREE_LOCK:
			case IS_USED_LOCK:
			case LAST_DAY:
			case LAST_INSERT_ID:
			case LEFT:
			case LENGTH:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LPAREN:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MATCH:
			case MAX_SYM:
			case MD5:
			case MICROSECOND:
			case MID:
			case MINUTE:
			case MIN_SYM:
			case MOD:
			case MONTH:
			case MONTHNAME:
			case NAME_CONST:
			case NOW:
			case NULL_SYM:
			case OCT:
			case OLD_PASSWORD:
			case ORD:
			case PASSWORD:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POW:
			case POWER:
			case QUARTER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case REAL_NUMBER:
			case RELEASE_LOCK:
			case REPEAT:
			case REPLACE:
			case REVERSE:
			case RIGHT:
			case ROUND:
			case ROW_SYM:
			case RPAD:
			case RTRIM:
			case SCHEMA:
			case SECOND:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STRCMP:
			case STR_TO_DATE:
			case SUBSTRING:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SUM:
			case SYSDATE:
			case SYSTEM_USER:
			case TAN:
			case TEXT_STRING:
			case TIMEDIFF:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_SYM:
			case TIME_TO_SEC:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case TRIM:
			case TRUE_SYM:
			case TRUNCATE:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPPER:
			case USER:
			case USER_VAR:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case UUID:
			case VALUES:
			case VARIANCE:
			case VAR_POP:
			case VAR_SAMP:
			case VERSION_SYM:
			case WEEK:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case YEAR:
			case YEARWEEK:
				{
				alt36=2;
				}
				break;
			case BINARY:
			case NEGATION:
				{
				alt36=1;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 36, 0, input);
				throw nvae;
			}
			switch (alt36) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1272:3: ( PLUS | MINUS | NEGATION | BINARY ) ^ simple_expr
					{
					root_0 = (Object)adaptor.nil();


					set131=input.LT(1);
					set131=input.LT(1);
					if ( input.LA(1)==BINARY||input.LA(1)==MINUS||input.LA(1)==NEGATION||input.LA(1)==PLUS ) {
						input.consume();
						if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot((Object)adaptor.create(set131), root_0);
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					pushFollow(FOLLOW_simple_expr_in_factor622968);
					simple_expr132=simple_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expr132.getTree());

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1273:5: simple_expr
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_simple_expr_in_factor622974);
					simple_expr133=simple_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expr133.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "factor6"


	public static class factor7_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "factor7"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1274:1: factor7 : simple_expr ( COLLATE_SYM ^ collation_names )? ;
	public final SQLParser.factor7_return factor7() throws RecognitionException {
		SQLParser.factor7_return retval = new SQLParser.factor7_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token COLLATE_SYM135=null;
		ParserRuleReturnScope simple_expr134 =null;
		ParserRuleReturnScope collation_names136 =null;

		Object COLLATE_SYM135_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1274:8: ( simple_expr ( COLLATE_SYM ^ collation_names )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1275:3: simple_expr ( COLLATE_SYM ^ collation_names )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_simple_expr_in_factor722983);
			simple_expr134=simple_expr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expr134.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1275:15: ( COLLATE_SYM ^ collation_names )?
			int alt37=2;
			int LA37_0 = input.LA(1);
			if ( (LA37_0==COLLATE_SYM) ) {
				alt37=1;
			}
			switch (alt37) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1275:16: COLLATE_SYM ^ collation_names
					{
					COLLATE_SYM135=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_factor722986); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COLLATE_SYM135_tree = (Object)adaptor.create(COLLATE_SYM135);
					root_0 = (Object)adaptor.becomeRoot(COLLATE_SYM135_tree, root_0);
					}

					pushFollow(FOLLOW_collation_names_in_factor722990);
					collation_names136=collation_names();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_names136.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "factor7"


	public static class simple_expr_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "simple_expr"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1276:1: simple_expr : ( literal_value | column_spec | function_call | USER_VAR | expression_list | ( ROW_SYM expression_list ) | subquery | EXISTS ^ subquery | match_against_statement | case_when_statement | interval_expr );
	public final SQLParser.simple_expr_return simple_expr() throws RecognitionException {
		SQLParser.simple_expr_return retval = new SQLParser.simple_expr_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token USER_VAR140=null;
		Token ROW_SYM142=null;
		Token EXISTS145=null;
		ParserRuleReturnScope literal_value137 =null;
		ParserRuleReturnScope column_spec138 =null;
		ParserRuleReturnScope function_call139 =null;
		ParserRuleReturnScope expression_list141 =null;
		ParserRuleReturnScope expression_list143 =null;
		ParserRuleReturnScope subquery144 =null;
		ParserRuleReturnScope subquery146 =null;
		ParserRuleReturnScope match_against_statement147 =null;
		ParserRuleReturnScope case_when_statement148 =null;
		ParserRuleReturnScope interval_expr149 =null;

		Object USER_VAR140_tree=null;
		Object ROW_SYM142_tree=null;
		Object EXISTS145_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1276:12: ( literal_value | column_spec | function_call | USER_VAR | expression_list | ( ROW_SYM expression_list ) | subquery | EXISTS ^ subquery | match_against_statement | case_when_statement | interval_expr )
			int alt38=11;
			switch ( input.LA(1) ) {
			case BIT_NUM:
			case FALSE_SYM:
			case HEX_DIGIT:
			case INTEGER_NUM:
			case MINUS:
			case NULL_SYM:
			case PLUS:
			case REAL_NUMBER:
			case TEXT_STRING:
			case TRUE_SYM:
				{
				alt38=1;
				}
				break;
			case ID:
				{
				alt38=2;
				}
				break;
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case ASCII_SYM:
			case ASIN:
			case ATAN:
			case ATAN2:
			case AVG:
			case BENCHMARK:
			case BIN:
			case BIT_AND:
			case BIT_LENGTH:
			case BIT_OR:
			case BIT_XOR:
			case CAST_SYM:
			case CEIL:
			case CEILING:
			case CHAR:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_SYM:
			case CONVERT_TZ:
			case COS:
			case COT:
			case COUNT:
			case CRC32:
			case CURDATE:
			case CURRENT_USER:
			case CURTIME:
			case DATABASE:
			case DATEDIFF:
			case DATE_ADD:
			case DATE_FORMAT:
			case DATE_SUB:
			case DATE_SYM:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEFAULT:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case EXP:
			case EXPORT_SET:
			case EXTRACT:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GET_FORMAT:
			case GET_LOCK:
			case GROUP_CONCAT:
			case HEX:
			case HOUR:
			case IF:
			case IFNULL:
			case INET_ATON:
			case INET_NTOA:
			case INSERT:
			case INSTR:
			case IS_FREE_LOCK:
			case IS_USED_LOCK:
			case LAST_DAY:
			case LAST_INSERT_ID:
			case LEFT:
			case LENGTH:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MAX_SYM:
			case MD5:
			case MICROSECOND:
			case MID:
			case MINUTE:
			case MIN_SYM:
			case MOD:
			case MONTH:
			case MONTHNAME:
			case NAME_CONST:
			case NOW:
			case OCT:
			case OLD_PASSWORD:
			case ORD:
			case PASSWORD:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POW:
			case POWER:
			case QUARTER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RELEASE_LOCK:
			case REPEAT:
			case REPLACE:
			case REVERSE:
			case RIGHT:
			case ROUND:
			case RPAD:
			case RTRIM:
			case SCHEMA:
			case SECOND:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STRCMP:
			case STR_TO_DATE:
			case SUBSTRING:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SUM:
			case SYSDATE:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_SYM:
			case TIME_TO_SEC:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case TRIM:
			case TRUNCATE:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPPER:
			case USER:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case UUID:
			case VALUES:
			case VARIANCE:
			case VAR_POP:
			case VAR_SAMP:
			case VERSION_SYM:
			case WEEK:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case YEAR:
			case YEARWEEK:
				{
				alt38=3;
				}
				break;
			case USER_VAR:
				{
				alt38=4;
				}
				break;
			case LPAREN:
				{
				int LA38_5 = input.LA(2);
				if ( (LA38_5==ABS||LA38_5==ACOS||(LA38_5 >= ADDDATE && LA38_5 <= ADDTIME)||(LA38_5 >= AES_DECRYPT && LA38_5 <= AES_ENCRYPT)||LA38_5==ASCII_SYM||LA38_5==ASIN||(LA38_5 >= ATAN && LA38_5 <= ATAN2)||LA38_5==AVG||LA38_5==BENCHMARK||(LA38_5 >= BIN && LA38_5 <= BINARY)||(LA38_5 >= BIT_AND && LA38_5 <= BIT_OR)||LA38_5==BIT_XOR||(LA38_5 >= CASE_SYM && LA38_5 <= CEILING)||LA38_5==CHAR||(LA38_5 >= CHARSET && LA38_5 <= CHAR_LENGTH)||LA38_5==COERCIBILITY||LA38_5==COLLATION||(LA38_5 >= CONCAT && LA38_5 <= CONCAT_WS)||LA38_5==CONNECTION_ID||(LA38_5 >= CONV && LA38_5 <= CONVERT_TZ)||(LA38_5 >= COS && LA38_5 <= COUNT)||LA38_5==CRC32||LA38_5==CURDATE||LA38_5==CURRENT_USER||LA38_5==CURTIME||LA38_5==DATABASE||LA38_5==DATEDIFF||(LA38_5 >= DATE_ADD && LA38_5 <= DAYOFYEAR)||(LA38_5 >= DECODE && LA38_5 <= DEFAULT)||LA38_5==DEGREES||(LA38_5 >= DES_DECRYPT && LA38_5 <= DES_ENCRYPT)||LA38_5==ELT||(LA38_5 >= ENCODE && LA38_5 <= ENCRYPT)||LA38_5==EXISTS||LA38_5==EXP||LA38_5==EXPORT_SET||LA38_5==EXTRACT||LA38_5==FALSE_SYM||LA38_5==FIELD||LA38_5==FIND_IN_SET||LA38_5==FLOOR||LA38_5==FORMAT||LA38_5==FOUND_ROWS||(LA38_5 >= FROM_BASE64 && LA38_5 <= FROM_UNIXTIME)||(LA38_5 >= GET_FORMAT && LA38_5 <= GET_LOCK)||LA38_5==GROUP_CONCAT||(LA38_5 >= HEX && LA38_5 <= HEX_DIGIT)||LA38_5==HOUR||LA38_5==ID||(LA38_5 >= IF && LA38_5 <= IFNULL)||(LA38_5 >= INET_ATON && LA38_5 <= INET_NTOA)||LA38_5==INSERT||(LA38_5 >= INSTR && LA38_5 <= INTEGER_NUM)||LA38_5==INTERVAL_SYM||LA38_5==IS_FREE_LOCK||LA38_5==IS_USED_LOCK||(LA38_5 >= LAST_DAY && LA38_5 <= LAST_INSERT_ID)||(LA38_5 >= LEFT && LA38_5 <= LENGTH)||LA38_5==LN||LA38_5==LOAD_FILE||LA38_5==LOCATE||(LA38_5 >= LOG && LA38_5 <= LOG2)||LA38_5==LOWER||(LA38_5 >= LPAD && LA38_5 <= LPAREN)||LA38_5==LTRIM||(LA38_5 >= MAKEDATE && LA38_5 <= MAKE_SET)||LA38_5==MASTER_POS_WAIT||LA38_5==MATCH||LA38_5==MAX_SYM||LA38_5==MD5||(LA38_5 >= MICROSECOND && LA38_5 <= MID)||(LA38_5 >= MINUS && LA38_5 <= MINUTE)||LA38_5==MIN_SYM||LA38_5==MOD||(LA38_5 >= MONTH && LA38_5 <= MONTHNAME)||LA38_5==NAME_CONST||LA38_5==NEGATION||(LA38_5 >= NOT_SYM && LA38_5 <= NOW)||LA38_5==NULL_SYM||LA38_5==OCT||LA38_5==OLD_PASSWORD||LA38_5==ORD||(LA38_5 >= PASSWORD && LA38_5 <= PERIOD_DIFF)||LA38_5==PI||LA38_5==PLUS||(LA38_5 >= POW && LA38_5 <= POWER)||LA38_5==QUARTER||LA38_5==QUOTE||(LA38_5 >= RADIANS && LA38_5 <= RAND)||LA38_5==REAL_NUMBER||LA38_5==RELEASE_LOCK||LA38_5==REPEAT||LA38_5==REPLACE||LA38_5==REVERSE||LA38_5==RIGHT||LA38_5==ROUND||(LA38_5 >= ROW_SYM && LA38_5 <= RPAD)||LA38_5==RTRIM||(LA38_5 >= SCHEMA && LA38_5 <= SECOND)||LA38_5==SEC_TO_TIME||LA38_5==SESSION_USER||LA38_5==SIGN||LA38_5==SIN||LA38_5==SLEEP||LA38_5==SOUNDEX||LA38_5==SPACE||LA38_5==SQRT||(LA38_5 >= STD && LA38_5 <= STDDEV_SAMP)||LA38_5==STRCMP||LA38_5==STR_TO_DATE||(LA38_5 >= SUBSTRING && LA38_5 <= SUM)||(LA38_5 >= SYSDATE && LA38_5 <= SYSTEM_USER)||LA38_5==TAN||LA38_5==TEXT_STRING||(LA38_5 >= TIMEDIFF && LA38_5 <= TIME_TO_SEC)||(LA38_5 >= TO_BASE64 && LA38_5 <= TO_SECONDS)||(LA38_5 >= TRIM && LA38_5 <= TRUNCATE)||LA38_5==UNHEX||LA38_5==UNIX_TIMESTAMP||LA38_5==UPPER||(LA38_5 >= USER && LA38_5 <= USER_VAR)||(LA38_5 >= UTC_DATE && LA38_5 <= UTC_TIMESTAMP)||LA38_5==UUID||LA38_5==VALUES||LA38_5==VARIANCE||(LA38_5 >= VAR_POP && LA38_5 <= VERSION_SYM)||(LA38_5 >= WEEK && LA38_5 <= WEIGHT_STRING)||(LA38_5 >= YEAR && LA38_5 <= YEARWEEK)) ) {
					alt38=5;
				}
				else if ( (LA38_5==SELECT) ) {
					alt38=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 38, 5, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ROW_SYM:
				{
				alt38=6;
				}
				break;
			case EXISTS:
				{
				alt38=8;
				}
				break;
			case MATCH:
				{
				alt38=9;
				}
				break;
			case CASE_SYM:
				{
				alt38=10;
				}
				break;
			case INTERVAL_SYM:
				{
				alt38=11;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 38, 0, input);
				throw nvae;
			}
			switch (alt38) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1277:3: literal_value
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_literal_value_in_simple_expr23000);
					literal_value137=literal_value();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, literal_value137.getTree());

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1278:5: column_spec
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_column_spec_in_simple_expr23007);
					column_spec138=column_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec138.getTree());

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1279:5: function_call
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_function_call_in_simple_expr23013);
					function_call139=function_call();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, function_call139.getTree());

					}
					break;
				case 4 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1281:5: USER_VAR
					{
					root_0 = (Object)adaptor.nil();


					USER_VAR140=(Token)match(input,USER_VAR,FOLLOW_USER_VAR_in_simple_expr23022); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					USER_VAR140_tree = (Object)adaptor.create(USER_VAR140);
					adaptor.addChild(root_0, USER_VAR140_tree);
					}

					}
					break;
				case 5 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1282:5: expression_list
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_expression_list_in_simple_expr23028);
					expression_list141=expression_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list141.getTree());

					}
					break;
				case 6 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1283:5: ( ROW_SYM expression_list )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1283:5: ( ROW_SYM expression_list )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1283:6: ROW_SYM expression_list
					{
					ROW_SYM142=(Token)match(input,ROW_SYM,FOLLOW_ROW_SYM_in_simple_expr23035); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ROW_SYM142_tree = (Object)adaptor.create(ROW_SYM142);
					adaptor.addChild(root_0, ROW_SYM142_tree);
					}

					pushFollow(FOLLOW_expression_list_in_simple_expr23037);
					expression_list143=expression_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list143.getTree());

					}

					}
					break;
				case 7 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1284:5: subquery
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_subquery_in_simple_expr23044);
					subquery144=subquery();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery144.getTree());

					}
					break;
				case 8 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1285:5: EXISTS ^ subquery
					{
					root_0 = (Object)adaptor.nil();


					EXISTS145=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_simple_expr23050); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXISTS145_tree = (Object)adaptor.create(EXISTS145);
					root_0 = (Object)adaptor.becomeRoot(EXISTS145_tree, root_0);
					}

					pushFollow(FOLLOW_subquery_in_simple_expr23054);
					subquery146=subquery();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery146.getTree());

					}
					break;
				case 9 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1287:5: match_against_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_match_against_statement_in_simple_expr23063);
					match_against_statement147=match_against_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, match_against_statement147.getTree());

					}
					break;
				case 10 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1288:5: case_when_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_case_when_statement_in_simple_expr23069);
					case_when_statement148=case_when_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, case_when_statement148.getTree());

					}
					break;
				case 11 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1289:5: interval_expr
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_interval_expr_in_simple_expr23075);
					interval_expr149=interval_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, interval_expr149.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "simple_expr"


	public static class function_call_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "function_call"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1293:1: function_call : ( ( functionList ( LPAREN ( expression ( COMMA expression )* )? RPAREN )? ) | ( CAST_SYM LPAREN expression AS_SYM cast_data_type RPAREN ) | ( CONVERT_SYM LPAREN expression COMMA cast_data_type RPAREN ) | ( CONVERT_SYM LPAREN expression USING_SYM transcoding_name RPAREN ) | ( group_functions LPAREN ( ASTERISK | ALL | DISTINCT )? bit_expr RPAREN ) );
	public final SQLParser.function_call_return function_call() throws RecognitionException {
		SQLParser.function_call_return retval = new SQLParser.function_call_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LPAREN151=null;
		Token COMMA153=null;
		Token RPAREN155=null;
		Token CAST_SYM156=null;
		Token LPAREN157=null;
		Token AS_SYM159=null;
		Token RPAREN161=null;
		Token CONVERT_SYM162=null;
		Token LPAREN163=null;
		Token COMMA165=null;
		Token RPAREN167=null;
		Token CONVERT_SYM168=null;
		Token LPAREN169=null;
		Token USING_SYM171=null;
		Token RPAREN173=null;
		Token LPAREN175=null;
		Token set176=null;
		Token RPAREN178=null;
		ParserRuleReturnScope functionList150 =null;
		ParserRuleReturnScope expression152 =null;
		ParserRuleReturnScope expression154 =null;
		ParserRuleReturnScope expression158 =null;
		ParserRuleReturnScope cast_data_type160 =null;
		ParserRuleReturnScope expression164 =null;
		ParserRuleReturnScope cast_data_type166 =null;
		ParserRuleReturnScope expression170 =null;
		ParserRuleReturnScope transcoding_name172 =null;
		ParserRuleReturnScope group_functions174 =null;
		ParserRuleReturnScope bit_expr177 =null;

		Object LPAREN151_tree=null;
		Object COMMA153_tree=null;
		Object RPAREN155_tree=null;
		Object CAST_SYM156_tree=null;
		Object LPAREN157_tree=null;
		Object AS_SYM159_tree=null;
		Object RPAREN161_tree=null;
		Object CONVERT_SYM162_tree=null;
		Object LPAREN163_tree=null;
		Object COMMA165_tree=null;
		Object RPAREN167_tree=null;
		Object CONVERT_SYM168_tree=null;
		Object LPAREN169_tree=null;
		Object USING_SYM171_tree=null;
		Object RPAREN173_tree=null;
		Object LPAREN175_tree=null;
		Object set176_tree=null;
		Object RPAREN178_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1293:14: ( ( functionList ( LPAREN ( expression ( COMMA expression )* )? RPAREN )? ) | ( CAST_SYM LPAREN expression AS_SYM cast_data_type RPAREN ) | ( CONVERT_SYM LPAREN expression COMMA cast_data_type RPAREN ) | ( CONVERT_SYM LPAREN expression USING_SYM transcoding_name RPAREN ) | ( group_functions LPAREN ( ASTERISK | ALL | DISTINCT )? bit_expr RPAREN ) )
			int alt43=5;
			switch ( input.LA(1) ) {
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case ASCII_SYM:
			case ASIN:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_LENGTH:
			case CEIL:
			case CEILING:
			case CHAR:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CURDATE:
			case CURRENT_USER:
			case CURTIME:
			case DATABASE:
			case DATEDIFF:
			case DATE_ADD:
			case DATE_FORMAT:
			case DATE_SUB:
			case DATE_SYM:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEFAULT:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case EXP:
			case EXPORT_SET:
			case EXTRACT:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GET_FORMAT:
			case GET_LOCK:
			case HEX:
			case HOUR:
			case IF:
			case IFNULL:
			case INET_ATON:
			case INET_NTOA:
			case INSERT:
			case INSTR:
			case IS_FREE_LOCK:
			case IS_USED_LOCK:
			case LAST_DAY:
			case LAST_INSERT_ID:
			case LEFT:
			case LENGTH:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MD5:
			case MICROSECOND:
			case MID:
			case MINUTE:
			case MOD:
			case MONTH:
			case MONTHNAME:
			case NAME_CONST:
			case NOW:
			case OCT:
			case OLD_PASSWORD:
			case ORD:
			case PASSWORD:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POW:
			case POWER:
			case QUARTER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RELEASE_LOCK:
			case REPEAT:
			case REPLACE:
			case REVERSE:
			case RIGHT:
			case ROUND:
			case RPAD:
			case RTRIM:
			case SCHEMA:
			case SECOND:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRCMP:
			case STR_TO_DATE:
			case SUBSTRING:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSDATE:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_SYM:
			case TIME_TO_SEC:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case TRIM:
			case TRUNCATE:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPPER:
			case USER:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case UUID:
			case VALUES:
			case VERSION_SYM:
			case WEEK:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case YEAR:
			case YEARWEEK:
				{
				alt43=1;
				}
				break;
			case CAST_SYM:
				{
				alt43=2;
				}
				break;
			case CONVERT_SYM:
				{
				int LA43_7 = input.LA(2);
				if ( (synpred324_SQL()) ) {
					alt43=3;
				}
				else if ( (synpred325_SQL()) ) {
					alt43=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 43, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX_SYM:
			case MIN_SYM:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VARIANCE:
			case VAR_POP:
			case VAR_SAMP:
				{
				alt43=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 43, 0, input);
				throw nvae;
			}
			switch (alt43) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1294:5: ( functionList ( LPAREN ( expression ( COMMA expression )* )? RPAREN )? )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1294:5: ( functionList ( LPAREN ( expression ( COMMA expression )* )? RPAREN )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1294:8: functionList ( LPAREN ( expression ( COMMA expression )* )? RPAREN )?
					{
					pushFollow(FOLLOW_functionList_in_function_call23091);
					functionList150=functionList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, functionList150.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1294:21: ( LPAREN ( expression ( COMMA expression )* )? RPAREN )?
					int alt41=2;
					int LA41_0 = input.LA(1);
					if ( (LA41_0==LPAREN) ) {
						alt41=1;
					}
					switch (alt41) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1294:23: LPAREN ( expression ( COMMA expression )* )? RPAREN
							{
							LPAREN151=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function_call23095); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN151_tree = (Object)adaptor.create(LPAREN151);
							adaptor.addChild(root_0, LPAREN151_tree);
							}

							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1294:30: ( expression ( COMMA expression )* )?
							int alt40=2;
							int LA40_0 = input.LA(1);
							if ( (LA40_0==ABS||LA40_0==ACOS||(LA40_0 >= ADDDATE && LA40_0 <= ADDTIME)||(LA40_0 >= AES_DECRYPT && LA40_0 <= AES_ENCRYPT)||LA40_0==ASCII_SYM||LA40_0==ASIN||(LA40_0 >= ATAN && LA40_0 <= ATAN2)||LA40_0==AVG||LA40_0==BENCHMARK||(LA40_0 >= BIN && LA40_0 <= BINARY)||(LA40_0 >= BIT_AND && LA40_0 <= BIT_OR)||LA40_0==BIT_XOR||(LA40_0 >= CASE_SYM && LA40_0 <= CEILING)||LA40_0==CHAR||(LA40_0 >= CHARSET && LA40_0 <= CHAR_LENGTH)||LA40_0==COERCIBILITY||LA40_0==COLLATION||(LA40_0 >= CONCAT && LA40_0 <= CONCAT_WS)||LA40_0==CONNECTION_ID||(LA40_0 >= CONV && LA40_0 <= CONVERT_TZ)||(LA40_0 >= COS && LA40_0 <= COUNT)||LA40_0==CRC32||LA40_0==CURDATE||LA40_0==CURRENT_USER||LA40_0==CURTIME||LA40_0==DATABASE||LA40_0==DATEDIFF||(LA40_0 >= DATE_ADD && LA40_0 <= DAYOFYEAR)||(LA40_0 >= DECODE && LA40_0 <= DEFAULT)||LA40_0==DEGREES||(LA40_0 >= DES_DECRYPT && LA40_0 <= DES_ENCRYPT)||LA40_0==ELT||(LA40_0 >= ENCODE && LA40_0 <= ENCRYPT)||LA40_0==EXISTS||LA40_0==EXP||LA40_0==EXPORT_SET||LA40_0==EXTRACT||LA40_0==FALSE_SYM||LA40_0==FIELD||LA40_0==FIND_IN_SET||LA40_0==FLOOR||LA40_0==FORMAT||LA40_0==FOUND_ROWS||(LA40_0 >= FROM_BASE64 && LA40_0 <= FROM_UNIXTIME)||(LA40_0 >= GET_FORMAT && LA40_0 <= GET_LOCK)||LA40_0==GROUP_CONCAT||(LA40_0 >= HEX && LA40_0 <= HEX_DIGIT)||LA40_0==HOUR||LA40_0==ID||(LA40_0 >= IF && LA40_0 <= IFNULL)||(LA40_0 >= INET_ATON && LA40_0 <= INET_NTOA)||LA40_0==INSERT||(LA40_0 >= INSTR && LA40_0 <= INTEGER_NUM)||LA40_0==INTERVAL_SYM||LA40_0==IS_FREE_LOCK||LA40_0==IS_USED_LOCK||(LA40_0 >= LAST_DAY && LA40_0 <= LAST_INSERT_ID)||(LA40_0 >= LEFT && LA40_0 <= LENGTH)||LA40_0==LN||LA40_0==LOAD_FILE||LA40_0==LOCATE||(LA40_0 >= LOG && LA40_0 <= LOG2)||LA40_0==LOWER||(LA40_0 >= LPAD && LA40_0 <= LPAREN)||LA40_0==LTRIM||(LA40_0 >= MAKEDATE && LA40_0 <= MAKE_SET)||LA40_0==MASTER_POS_WAIT||LA40_0==MATCH||LA40_0==MAX_SYM||LA40_0==MD5||(LA40_0 >= MICROSECOND && LA40_0 <= MID)||(LA40_0 >= MINUS && LA40_0 <= MINUTE)||LA40_0==MIN_SYM||LA40_0==MOD||(LA40_0 >= MONTH && LA40_0 <= MONTHNAME)||LA40_0==NAME_CONST||LA40_0==NEGATION||(LA40_0 >= NOT_SYM && LA40_0 <= NOW)||LA40_0==NULL_SYM||LA40_0==OCT||LA40_0==OLD_PASSWORD||LA40_0==ORD||(LA40_0 >= PASSWORD && LA40_0 <= PERIOD_DIFF)||LA40_0==PI||LA40_0==PLUS||(LA40_0 >= POW && LA40_0 <= POWER)||LA40_0==QUARTER||LA40_0==QUOTE||(LA40_0 >= RADIANS && LA40_0 <= RAND)||LA40_0==REAL_NUMBER||LA40_0==RELEASE_LOCK||LA40_0==REPEAT||LA40_0==REPLACE||LA40_0==REVERSE||LA40_0==RIGHT||LA40_0==ROUND||(LA40_0 >= ROW_SYM && LA40_0 <= RPAD)||LA40_0==RTRIM||(LA40_0 >= SCHEMA && LA40_0 <= SECOND)||LA40_0==SEC_TO_TIME||LA40_0==SESSION_USER||LA40_0==SIGN||LA40_0==SIN||LA40_0==SLEEP||LA40_0==SOUNDEX||LA40_0==SPACE||LA40_0==SQRT||(LA40_0 >= STD && LA40_0 <= STDDEV_SAMP)||LA40_0==STRCMP||LA40_0==STR_TO_DATE||(LA40_0 >= SUBSTRING && LA40_0 <= SUM)||(LA40_0 >= SYSDATE && LA40_0 <= SYSTEM_USER)||LA40_0==TAN||LA40_0==TEXT_STRING||(LA40_0 >= TIMEDIFF && LA40_0 <= TIME_TO_SEC)||(LA40_0 >= TO_BASE64 && LA40_0 <= TO_SECONDS)||(LA40_0 >= TRIM && LA40_0 <= TRUNCATE)||LA40_0==UNHEX||LA40_0==UNIX_TIMESTAMP||LA40_0==UPPER||(LA40_0 >= USER && LA40_0 <= USER_VAR)||(LA40_0 >= UTC_DATE && LA40_0 <= UTC_TIMESTAMP)||LA40_0==UUID||LA40_0==VALUES||LA40_0==VARIANCE||(LA40_0 >= VAR_POP && LA40_0 <= VERSION_SYM)||(LA40_0 >= WEEK && LA40_0 <= WEIGHT_STRING)||(LA40_0 >= YEAR && LA40_0 <= YEARWEEK)) ) {
								alt40=1;
							}
							switch (alt40) {
								case 1 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1294:31: expression ( COMMA expression )*
									{
									pushFollow(FOLLOW_expression_in_function_call23098);
									expression152=expression();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, expression152.getTree());

									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1294:42: ( COMMA expression )*
									loop39:
									while (true) {
										int alt39=2;
										int LA39_0 = input.LA(1);
										if ( (LA39_0==COMMA) ) {
											alt39=1;
										}

										switch (alt39) {
										case 1 :
											// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1294:43: COMMA expression
											{
											COMMA153=(Token)match(input,COMMA,FOLLOW_COMMA_in_function_call23101); if (state.failed) return retval;
											if ( state.backtracking==0 ) {
											COMMA153_tree = (Object)adaptor.create(COMMA153);
											adaptor.addChild(root_0, COMMA153_tree);
											}

											pushFollow(FOLLOW_expression_in_function_call23103);
											expression154=expression();
											state._fsp--;
											if (state.failed) return retval;
											if ( state.backtracking==0 ) adaptor.addChild(root_0, expression154.getTree());

											}
											break;

										default :
											break loop39;
										}
									}

									}
									break;

							}

							RPAREN155=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function_call23109); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN155_tree = (Object)adaptor.create(RPAREN155);
							adaptor.addChild(root_0, RPAREN155_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1295:5: ( CAST_SYM LPAREN expression AS_SYM cast_data_type RPAREN )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1295:5: ( CAST_SYM LPAREN expression AS_SYM cast_data_type RPAREN )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1295:8: CAST_SYM LPAREN expression AS_SYM cast_data_type RPAREN
					{
					CAST_SYM156=(Token)match(input,CAST_SYM,FOLLOW_CAST_SYM_in_function_call23125); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CAST_SYM156_tree = (Object)adaptor.create(CAST_SYM156);
					adaptor.addChild(root_0, CAST_SYM156_tree);
					}

					LPAREN157=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function_call23127); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN157_tree = (Object)adaptor.create(LPAREN157);
					adaptor.addChild(root_0, LPAREN157_tree);
					}

					pushFollow(FOLLOW_expression_in_function_call23129);
					expression158=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression158.getTree());

					AS_SYM159=(Token)match(input,AS_SYM,FOLLOW_AS_SYM_in_function_call23131); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					AS_SYM159_tree = (Object)adaptor.create(AS_SYM159);
					adaptor.addChild(root_0, AS_SYM159_tree);
					}

					pushFollow(FOLLOW_cast_data_type_in_function_call23133);
					cast_data_type160=cast_data_type();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_data_type160.getTree());

					RPAREN161=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function_call23135); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN161_tree = (Object)adaptor.create(RPAREN161);
					adaptor.addChild(root_0, RPAREN161_tree);
					}

					}

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1296:5: ( CONVERT_SYM LPAREN expression COMMA cast_data_type RPAREN )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1296:5: ( CONVERT_SYM LPAREN expression COMMA cast_data_type RPAREN )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1296:8: CONVERT_SYM LPAREN expression COMMA cast_data_type RPAREN
					{
					CONVERT_SYM162=(Token)match(input,CONVERT_SYM,FOLLOW_CONVERT_SYM_in_function_call23147); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CONVERT_SYM162_tree = (Object)adaptor.create(CONVERT_SYM162);
					adaptor.addChild(root_0, CONVERT_SYM162_tree);
					}

					LPAREN163=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function_call23149); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN163_tree = (Object)adaptor.create(LPAREN163);
					adaptor.addChild(root_0, LPAREN163_tree);
					}

					pushFollow(FOLLOW_expression_in_function_call23151);
					expression164=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression164.getTree());

					COMMA165=(Token)match(input,COMMA,FOLLOW_COMMA_in_function_call23153); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA165_tree = (Object)adaptor.create(COMMA165);
					adaptor.addChild(root_0, COMMA165_tree);
					}

					pushFollow(FOLLOW_cast_data_type_in_function_call23155);
					cast_data_type166=cast_data_type();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_data_type166.getTree());

					RPAREN167=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function_call23157); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN167_tree = (Object)adaptor.create(RPAREN167);
					adaptor.addChild(root_0, RPAREN167_tree);
					}

					}

					}
					break;
				case 4 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1297:5: ( CONVERT_SYM LPAREN expression USING_SYM transcoding_name RPAREN )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1297:5: ( CONVERT_SYM LPAREN expression USING_SYM transcoding_name RPAREN )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1297:8: CONVERT_SYM LPAREN expression USING_SYM transcoding_name RPAREN
					{
					CONVERT_SYM168=(Token)match(input,CONVERT_SYM,FOLLOW_CONVERT_SYM_in_function_call23169); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CONVERT_SYM168_tree = (Object)adaptor.create(CONVERT_SYM168);
					adaptor.addChild(root_0, CONVERT_SYM168_tree);
					}

					LPAREN169=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function_call23171); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN169_tree = (Object)adaptor.create(LPAREN169);
					adaptor.addChild(root_0, LPAREN169_tree);
					}

					pushFollow(FOLLOW_expression_in_function_call23173);
					expression170=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression170.getTree());

					USING_SYM171=(Token)match(input,USING_SYM,FOLLOW_USING_SYM_in_function_call23175); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					USING_SYM171_tree = (Object)adaptor.create(USING_SYM171);
					adaptor.addChild(root_0, USING_SYM171_tree);
					}

					pushFollow(FOLLOW_transcoding_name_in_function_call23177);
					transcoding_name172=transcoding_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, transcoding_name172.getTree());

					RPAREN173=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function_call23179); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN173_tree = (Object)adaptor.create(RPAREN173);
					adaptor.addChild(root_0, RPAREN173_tree);
					}

					}

					}
					break;
				case 5 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1298:5: ( group_functions LPAREN ( ASTERISK | ALL | DISTINCT )? bit_expr RPAREN )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1298:5: ( group_functions LPAREN ( ASTERISK | ALL | DISTINCT )? bit_expr RPAREN )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1298:8: group_functions LPAREN ( ASTERISK | ALL | DISTINCT )? bit_expr RPAREN
					{
					pushFollow(FOLLOW_group_functions_in_function_call23191);
					group_functions174=group_functions();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, group_functions174.getTree());

					LPAREN175=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function_call23193); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN175_tree = (Object)adaptor.create(LPAREN175);
					adaptor.addChild(root_0, LPAREN175_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1298:31: ( ASTERISK | ALL | DISTINCT )?
					int alt42=2;
					int LA42_0 = input.LA(1);
					if ( (LA42_0==ALL||LA42_0==ASTERISK||LA42_0==DISTINCT) ) {
						alt42=1;
					}
					switch (alt42) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
							{
							set176=input.LT(1);
							if ( input.LA(1)==ALL||input.LA(1)==ASTERISK||input.LA(1)==DISTINCT ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set176));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					pushFollow(FOLLOW_bit_expr_in_function_call23210);
					bit_expr177=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr177.getTree());

					RPAREN178=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function_call23212); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN178_tree = (Object)adaptor.create(RPAREN178);
					adaptor.addChild(root_0, RPAREN178_tree);
					}

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "function_call"


	public static class case_when_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "case_when_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1301:1: case_when_statement : ( case_when_statement1 | case_when_statement2 );
	public final SQLParser.case_when_statement_return case_when_statement() throws RecognitionException {
		SQLParser.case_when_statement_return retval = new SQLParser.case_when_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope case_when_statement1179 =null;
		ParserRuleReturnScope case_when_statement2180 =null;


		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1301:20: ( case_when_statement1 | case_when_statement2 )
			int alt44=2;
			int LA44_0 = input.LA(1);
			if ( (LA44_0==CASE_SYM) ) {
				int LA44_1 = input.LA(2);
				if ( (LA44_1==WHEN_SYM) ) {
					alt44=1;
				}
				else if ( (LA44_1==ABS||LA44_1==ACOS||(LA44_1 >= ADDDATE && LA44_1 <= ADDTIME)||(LA44_1 >= AES_DECRYPT && LA44_1 <= AES_ENCRYPT)||LA44_1==ASCII_SYM||LA44_1==ASIN||(LA44_1 >= ATAN && LA44_1 <= ATAN2)||LA44_1==AVG||LA44_1==BENCHMARK||(LA44_1 >= BIN && LA44_1 <= BINARY)||(LA44_1 >= BIT_AND && LA44_1 <= BIT_OR)||LA44_1==BIT_XOR||(LA44_1 >= CASE_SYM && LA44_1 <= CEILING)||LA44_1==CHAR||(LA44_1 >= CHARSET && LA44_1 <= CHAR_LENGTH)||LA44_1==COERCIBILITY||LA44_1==COLLATION||(LA44_1 >= CONCAT && LA44_1 <= CONCAT_WS)||LA44_1==CONNECTION_ID||(LA44_1 >= CONV && LA44_1 <= CONVERT_TZ)||(LA44_1 >= COS && LA44_1 <= COUNT)||LA44_1==CRC32||LA44_1==CURDATE||LA44_1==CURRENT_USER||LA44_1==CURTIME||LA44_1==DATABASE||LA44_1==DATEDIFF||(LA44_1 >= DATE_ADD && LA44_1 <= DAYOFYEAR)||(LA44_1 >= DECODE && LA44_1 <= DEFAULT)||LA44_1==DEGREES||(LA44_1 >= DES_DECRYPT && LA44_1 <= DES_ENCRYPT)||LA44_1==ELT||(LA44_1 >= ENCODE && LA44_1 <= ENCRYPT)||LA44_1==EXISTS||LA44_1==EXP||LA44_1==EXPORT_SET||LA44_1==EXTRACT||LA44_1==FALSE_SYM||LA44_1==FIELD||LA44_1==FIND_IN_SET||LA44_1==FLOOR||LA44_1==FORMAT||LA44_1==FOUND_ROWS||(LA44_1 >= FROM_BASE64 && LA44_1 <= FROM_UNIXTIME)||(LA44_1 >= GET_FORMAT && LA44_1 <= GET_LOCK)||LA44_1==GROUP_CONCAT||(LA44_1 >= HEX && LA44_1 <= HEX_DIGIT)||LA44_1==HOUR||LA44_1==ID||(LA44_1 >= IF && LA44_1 <= IFNULL)||(LA44_1 >= INET_ATON && LA44_1 <= INET_NTOA)||LA44_1==INSERT||(LA44_1 >= INSTR && LA44_1 <= INTEGER_NUM)||LA44_1==INTERVAL_SYM||LA44_1==IS_FREE_LOCK||LA44_1==IS_USED_LOCK||(LA44_1 >= LAST_DAY && LA44_1 <= LAST_INSERT_ID)||(LA44_1 >= LEFT && LA44_1 <= LENGTH)||LA44_1==LN||LA44_1==LOAD_FILE||LA44_1==LOCATE||(LA44_1 >= LOG && LA44_1 <= LOG2)||LA44_1==LOWER||(LA44_1 >= LPAD && LA44_1 <= LPAREN)||LA44_1==LTRIM||(LA44_1 >= MAKEDATE && LA44_1 <= MAKE_SET)||LA44_1==MASTER_POS_WAIT||LA44_1==MATCH||LA44_1==MAX_SYM||LA44_1==MD5||(LA44_1 >= MICROSECOND && LA44_1 <= MID)||(LA44_1 >= MINUS && LA44_1 <= MINUTE)||LA44_1==MIN_SYM||LA44_1==MOD||(LA44_1 >= MONTH && LA44_1 <= MONTHNAME)||LA44_1==NAME_CONST||LA44_1==NEGATION||LA44_1==NOW||LA44_1==NULL_SYM||LA44_1==OCT||LA44_1==OLD_PASSWORD||LA44_1==ORD||(LA44_1 >= PASSWORD && LA44_1 <= PERIOD_DIFF)||LA44_1==PI||LA44_1==PLUS||(LA44_1 >= POW && LA44_1 <= POWER)||LA44_1==QUARTER||LA44_1==QUOTE||(LA44_1 >= RADIANS && LA44_1 <= RAND)||LA44_1==REAL_NUMBER||LA44_1==RELEASE_LOCK||LA44_1==REPEAT||LA44_1==REPLACE||LA44_1==REVERSE||LA44_1==RIGHT||LA44_1==ROUND||(LA44_1 >= ROW_SYM && LA44_1 <= RPAD)||LA44_1==RTRIM||(LA44_1 >= SCHEMA && LA44_1 <= SECOND)||LA44_1==SEC_TO_TIME||LA44_1==SESSION_USER||LA44_1==SIGN||LA44_1==SIN||LA44_1==SLEEP||LA44_1==SOUNDEX||LA44_1==SPACE||LA44_1==SQRT||(LA44_1 >= STD && LA44_1 <= STDDEV_SAMP)||LA44_1==STRCMP||LA44_1==STR_TO_DATE||(LA44_1 >= SUBSTRING && LA44_1 <= SUM)||(LA44_1 >= SYSDATE && LA44_1 <= SYSTEM_USER)||LA44_1==TAN||LA44_1==TEXT_STRING||(LA44_1 >= TIMEDIFF && LA44_1 <= TIME_TO_SEC)||(LA44_1 >= TO_BASE64 && LA44_1 <= TO_SECONDS)||(LA44_1 >= TRIM && LA44_1 <= TRUNCATE)||LA44_1==UNHEX||LA44_1==UNIX_TIMESTAMP||LA44_1==UPPER||(LA44_1 >= USER && LA44_1 <= USER_VAR)||(LA44_1 >= UTC_DATE && LA44_1 <= UTC_TIMESTAMP)||LA44_1==UUID||LA44_1==VALUES||LA44_1==VARIANCE||(LA44_1 >= VAR_POP && LA44_1 <= VERSION_SYM)||(LA44_1 >= WEEK && LA44_1 <= WEIGHT_STRING)||(LA44_1 >= YEAR && LA44_1 <= YEARWEEK)) ) {
					alt44=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 44, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 44, 0, input);
				throw nvae;
			}

			switch (alt44) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1302:9: case_when_statement1
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_case_when_statement1_in_case_when_statement23231);
					case_when_statement1179=case_when_statement1();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, case_when_statement1179.getTree());

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1302:32: case_when_statement2
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_case_when_statement2_in_case_when_statement23235);
					case_when_statement2180=case_when_statement2();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, case_when_statement2180.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "case_when_statement"


	public static class case_when_statement1_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "case_when_statement1"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1304:1: case_when_statement1 : CASE_SYM ( WHEN_SYM expression THEN_SYM bit_expr )+ ( ELSE_SYM bit_expr )? END_SYM ;
	public final SQLParser.case_when_statement1_return case_when_statement1() throws RecognitionException {
		SQLParser.case_when_statement1_return retval = new SQLParser.case_when_statement1_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token CASE_SYM181=null;
		Token WHEN_SYM182=null;
		Token THEN_SYM184=null;
		Token ELSE_SYM186=null;
		Token END_SYM188=null;
		ParserRuleReturnScope expression183 =null;
		ParserRuleReturnScope bit_expr185 =null;
		ParserRuleReturnScope bit_expr187 =null;

		Object CASE_SYM181_tree=null;
		Object WHEN_SYM182_tree=null;
		Object THEN_SYM184_tree=null;
		Object ELSE_SYM186_tree=null;
		Object END_SYM188_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1304:21: ( CASE_SYM ( WHEN_SYM expression THEN_SYM bit_expr )+ ( ELSE_SYM bit_expr )? END_SYM )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1305:9: CASE_SYM ( WHEN_SYM expression THEN_SYM bit_expr )+ ( ELSE_SYM bit_expr )? END_SYM
			{
			root_0 = (Object)adaptor.nil();


			CASE_SYM181=(Token)match(input,CASE_SYM,FOLLOW_CASE_SYM_in_case_when_statement123250); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			CASE_SYM181_tree = (Object)adaptor.create(CASE_SYM181);
			adaptor.addChild(root_0, CASE_SYM181_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1306:9: ( WHEN_SYM expression THEN_SYM bit_expr )+
			int cnt45=0;
			loop45:
			while (true) {
				int alt45=2;
				int LA45_0 = input.LA(1);
				if ( (LA45_0==WHEN_SYM) ) {
					alt45=1;
				}

				switch (alt45) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1306:11: WHEN_SYM expression THEN_SYM bit_expr
					{
					WHEN_SYM182=(Token)match(input,WHEN_SYM,FOLLOW_WHEN_SYM_in_case_when_statement123262); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					WHEN_SYM182_tree = (Object)adaptor.create(WHEN_SYM182);
					adaptor.addChild(root_0, WHEN_SYM182_tree);
					}

					pushFollow(FOLLOW_expression_in_case_when_statement123264);
					expression183=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression183.getTree());

					THEN_SYM184=(Token)match(input,THEN_SYM,FOLLOW_THEN_SYM_in_case_when_statement123266); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					THEN_SYM184_tree = (Object)adaptor.create(THEN_SYM184);
					adaptor.addChild(root_0, THEN_SYM184_tree);
					}

					pushFollow(FOLLOW_bit_expr_in_case_when_statement123268);
					bit_expr185=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr185.getTree());

					}
					break;

				default :
					if ( cnt45 >= 1 ) break loop45;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(45, input);
					throw eee;
				}
				cnt45++;
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1307:9: ( ELSE_SYM bit_expr )?
			int alt46=2;
			int LA46_0 = input.LA(1);
			if ( (LA46_0==ELSE_SYM) ) {
				alt46=1;
			}
			switch (alt46) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1307:11: ELSE_SYM bit_expr
					{
					ELSE_SYM186=(Token)match(input,ELSE_SYM,FOLLOW_ELSE_SYM_in_case_when_statement123283); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ELSE_SYM186_tree = (Object)adaptor.create(ELSE_SYM186);
					adaptor.addChild(root_0, ELSE_SYM186_tree);
					}

					pushFollow(FOLLOW_bit_expr_in_case_when_statement123285);
					bit_expr187=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr187.getTree());

					}
					break;

			}

			END_SYM188=(Token)match(input,END_SYM,FOLLOW_END_SYM_in_case_when_statement123298); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			END_SYM188_tree = (Object)adaptor.create(END_SYM188);
			adaptor.addChild(root_0, END_SYM188_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "case_when_statement1"


	public static class case_when_statement2_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "case_when_statement2"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1310:1: case_when_statement2 : CASE_SYM bit_expr ( WHEN_SYM bit_expr THEN_SYM bit_expr )+ ( ELSE_SYM bit_expr )? END_SYM ;
	public final SQLParser.case_when_statement2_return case_when_statement2() throws RecognitionException {
		SQLParser.case_when_statement2_return retval = new SQLParser.case_when_statement2_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token CASE_SYM189=null;
		Token WHEN_SYM191=null;
		Token THEN_SYM193=null;
		Token ELSE_SYM195=null;
		Token END_SYM197=null;
		ParserRuleReturnScope bit_expr190 =null;
		ParserRuleReturnScope bit_expr192 =null;
		ParserRuleReturnScope bit_expr194 =null;
		ParserRuleReturnScope bit_expr196 =null;

		Object CASE_SYM189_tree=null;
		Object WHEN_SYM191_tree=null;
		Object THEN_SYM193_tree=null;
		Object ELSE_SYM195_tree=null;
		Object END_SYM197_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1310:21: ( CASE_SYM bit_expr ( WHEN_SYM bit_expr THEN_SYM bit_expr )+ ( ELSE_SYM bit_expr )? END_SYM )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1311:9: CASE_SYM bit_expr ( WHEN_SYM bit_expr THEN_SYM bit_expr )+ ( ELSE_SYM bit_expr )? END_SYM
			{
			root_0 = (Object)adaptor.nil();


			CASE_SYM189=(Token)match(input,CASE_SYM,FOLLOW_CASE_SYM_in_case_when_statement223313); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			CASE_SYM189_tree = (Object)adaptor.create(CASE_SYM189);
			adaptor.addChild(root_0, CASE_SYM189_tree);
			}

			pushFollow(FOLLOW_bit_expr_in_case_when_statement223315);
			bit_expr190=bit_expr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr190.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1312:9: ( WHEN_SYM bit_expr THEN_SYM bit_expr )+
			int cnt47=0;
			loop47:
			while (true) {
				int alt47=2;
				int LA47_0 = input.LA(1);
				if ( (LA47_0==WHEN_SYM) ) {
					alt47=1;
				}

				switch (alt47) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1312:11: WHEN_SYM bit_expr THEN_SYM bit_expr
					{
					WHEN_SYM191=(Token)match(input,WHEN_SYM,FOLLOW_WHEN_SYM_in_case_when_statement223327); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					WHEN_SYM191_tree = (Object)adaptor.create(WHEN_SYM191);
					adaptor.addChild(root_0, WHEN_SYM191_tree);
					}

					pushFollow(FOLLOW_bit_expr_in_case_when_statement223329);
					bit_expr192=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr192.getTree());

					THEN_SYM193=(Token)match(input,THEN_SYM,FOLLOW_THEN_SYM_in_case_when_statement223331); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					THEN_SYM193_tree = (Object)adaptor.create(THEN_SYM193);
					adaptor.addChild(root_0, THEN_SYM193_tree);
					}

					pushFollow(FOLLOW_bit_expr_in_case_when_statement223333);
					bit_expr194=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr194.getTree());

					}
					break;

				default :
					if ( cnt47 >= 1 ) break loop47;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(47, input);
					throw eee;
				}
				cnt47++;
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1313:9: ( ELSE_SYM bit_expr )?
			int alt48=2;
			int LA48_0 = input.LA(1);
			if ( (LA48_0==ELSE_SYM) ) {
				alt48=1;
			}
			switch (alt48) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1313:11: ELSE_SYM bit_expr
					{
					ELSE_SYM195=(Token)match(input,ELSE_SYM,FOLLOW_ELSE_SYM_in_case_when_statement223348); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ELSE_SYM195_tree = (Object)adaptor.create(ELSE_SYM195);
					adaptor.addChild(root_0, ELSE_SYM195_tree);
					}

					pushFollow(FOLLOW_bit_expr_in_case_when_statement223350);
					bit_expr196=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr196.getTree());

					}
					break;

			}

			END_SYM197=(Token)match(input,END_SYM,FOLLOW_END_SYM_in_case_when_statement223363); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			END_SYM197_tree = (Object)adaptor.create(END_SYM197);
			adaptor.addChild(root_0, END_SYM197_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "case_when_statement2"


	public static class match_against_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "match_against_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1317:1: match_against_statement : MATCH ( column_spec ( COMMA column_spec )* ) AGAINST ( expression ( search_modifier )? ) ;
	public final SQLParser.match_against_statement_return match_against_statement() throws RecognitionException {
		SQLParser.match_against_statement_return retval = new SQLParser.match_against_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token MATCH198=null;
		Token COMMA200=null;
		Token AGAINST202=null;
		ParserRuleReturnScope column_spec199 =null;
		ParserRuleReturnScope column_spec201 =null;
		ParserRuleReturnScope expression203 =null;
		ParserRuleReturnScope search_modifier204 =null;

		Object MATCH198_tree=null;
		Object COMMA200_tree=null;
		Object AGAINST202_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1317:24: ( MATCH ( column_spec ( COMMA column_spec )* ) AGAINST ( expression ( search_modifier )? ) )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1318:3: MATCH ( column_spec ( COMMA column_spec )* ) AGAINST ( expression ( search_modifier )? )
			{
			root_0 = (Object)adaptor.nil();


			MATCH198=(Token)match(input,MATCH,FOLLOW_MATCH_in_match_against_statement23375); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			MATCH198_tree = (Object)adaptor.create(MATCH198);
			adaptor.addChild(root_0, MATCH198_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1318:9: ( column_spec ( COMMA column_spec )* )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1318:10: column_spec ( COMMA column_spec )*
			{
			pushFollow(FOLLOW_column_spec_in_match_against_statement23378);
			column_spec199=column_spec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec199.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1318:22: ( COMMA column_spec )*
			loop49:
			while (true) {
				int alt49=2;
				int LA49_0 = input.LA(1);
				if ( (LA49_0==COMMA) ) {
					alt49=1;
				}

				switch (alt49) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1318:23: COMMA column_spec
					{
					COMMA200=(Token)match(input,COMMA,FOLLOW_COMMA_in_match_against_statement23381); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA200_tree = (Object)adaptor.create(COMMA200);
					adaptor.addChild(root_0, COMMA200_tree);
					}

					pushFollow(FOLLOW_column_spec_in_match_against_statement23383);
					column_spec201=column_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec201.getTree());

					}
					break;

				default :
					break loop49;
				}
			}

			}

			AGAINST202=(Token)match(input,AGAINST,FOLLOW_AGAINST_in_match_against_statement23389); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			AGAINST202_tree = (Object)adaptor.create(AGAINST202);
			adaptor.addChild(root_0, AGAINST202_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1318:53: ( expression ( search_modifier )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1318:54: expression ( search_modifier )?
			{
			pushFollow(FOLLOW_expression_in_match_against_statement23392);
			expression203=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression203.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1318:65: ( search_modifier )?
			int alt50=2;
			int LA50_0 = input.LA(1);
			if ( (LA50_0==IN_SYM) ) {
				int LA50_1 = input.LA(2);
				if ( (synpred335_SQL()) ) {
					alt50=1;
				}
			}
			else if ( (LA50_0==WITH) ) {
				int LA50_2 = input.LA(2);
				if ( (synpred335_SQL()) ) {
					alt50=1;
				}
			}
			switch (alt50) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1318:66: search_modifier
					{
					pushFollow(FOLLOW_search_modifier_in_match_against_statement23395);
					search_modifier204=search_modifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, search_modifier204.getTree());

					}
					break;

			}

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "match_against_statement"


	public static class column_spec_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "column_spec"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1321:1: column_spec : ( ( schema_name DOT ^)? table_name DOT ^)? column_name ;
	public final SQLParser.column_spec_return column_spec() throws RecognitionException {
		SQLParser.column_spec_return retval = new SQLParser.column_spec_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token DOT206=null;
		Token DOT208=null;
		ParserRuleReturnScope schema_name205 =null;
		ParserRuleReturnScope table_name207 =null;
		ParserRuleReturnScope column_name209 =null;

		Object DOT206_tree=null;
		Object DOT208_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1321:12: ( ( ( schema_name DOT ^)? table_name DOT ^)? column_name )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1322:3: ( ( schema_name DOT ^)? table_name DOT ^)? column_name
			{
			root_0 = (Object)adaptor.nil();


			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1322:3: ( ( schema_name DOT ^)? table_name DOT ^)?
			int alt52=2;
			int LA52_0 = input.LA(1);
			if ( (LA52_0==ID) ) {
				int LA52_1 = input.LA(2);
				if ( (LA52_1==DOT) ) {
					alt52=1;
				}
			}
			switch (alt52) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1322:5: ( schema_name DOT ^)? table_name DOT ^
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1322:5: ( schema_name DOT ^)?
					int alt51=2;
					int LA51_0 = input.LA(1);
					if ( (LA51_0==ID) ) {
						int LA51_1 = input.LA(2);
						if ( (LA51_1==DOT) ) {
							int LA51_2 = input.LA(3);
							if ( (LA51_2==ID) ) {
								int LA51_3 = input.LA(4);
								if ( (LA51_3==DOT) ) {
									alt51=1;
								}
							}
						}
					}
					switch (alt51) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1322:7: schema_name DOT ^
							{
							pushFollow(FOLLOW_schema_name_in_column_spec23414);
							schema_name205=schema_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, schema_name205.getTree());

							DOT206=(Token)match(input,DOT,FOLLOW_DOT_in_column_spec23416); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DOT206_tree = (Object)adaptor.create(DOT206);
							root_0 = (Object)adaptor.becomeRoot(DOT206_tree, root_0);
							}

							}
							break;

					}

					pushFollow(FOLLOW_table_name_in_column_spec23423);
					table_name207=table_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name207.getTree());

					DOT208=(Token)match(input,DOT,FOLLOW_DOT_in_column_spec23425); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DOT208_tree = (Object)adaptor.create(DOT208);
					root_0 = (Object)adaptor.becomeRoot(DOT208_tree, root_0);
					}

					}
					break;

			}

			pushFollow(FOLLOW_column_name_in_column_spec23432);
			column_name209=column_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name209.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "column_spec"


	public static class expression_list_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "expression_list"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1324:1: expression_list : LPAREN expression ( COMMA expression )* RPAREN ;
	public final SQLParser.expression_list_return expression_list() throws RecognitionException {
		SQLParser.expression_list_return retval = new SQLParser.expression_list_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LPAREN210=null;
		Token COMMA212=null;
		Token RPAREN214=null;
		ParserRuleReturnScope expression211 =null;
		ParserRuleReturnScope expression213 =null;

		Object LPAREN210_tree=null;
		Object COMMA212_tree=null;
		Object RPAREN214_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1324:16: ( LPAREN expression ( COMMA expression )* RPAREN )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1325:3: LPAREN expression ( COMMA expression )* RPAREN
			{
			root_0 = (Object)adaptor.nil();


			LPAREN210=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_expression_list23442); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN210_tree = (Object)adaptor.create(LPAREN210);
			adaptor.addChild(root_0, LPAREN210_tree);
			}

			pushFollow(FOLLOW_expression_in_expression_list23444);
			expression211=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression211.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1325:21: ( COMMA expression )*
			loop53:
			while (true) {
				int alt53=2;
				int LA53_0 = input.LA(1);
				if ( (LA53_0==COMMA) ) {
					alt53=1;
				}

				switch (alt53) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1325:23: COMMA expression
					{
					COMMA212=(Token)match(input,COMMA,FOLLOW_COMMA_in_expression_list23448); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA212_tree = (Object)adaptor.create(COMMA212);
					adaptor.addChild(root_0, COMMA212_tree);
					}

					pushFollow(FOLLOW_expression_in_expression_list23450);
					expression213=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression213.getTree());

					}
					break;

				default :
					break loop53;
				}
			}

			RPAREN214=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_expression_list23455); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN214_tree = (Object)adaptor.create(RPAREN214);
			adaptor.addChild(root_0, RPAREN214_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "expression_list"


	public static class interval_expr_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "interval_expr"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1327:1: interval_expr : INTERVAL_SYM expression interval_unit ;
	public final SQLParser.interval_expr_return interval_expr() throws RecognitionException {
		SQLParser.interval_expr_return retval = new SQLParser.interval_expr_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token INTERVAL_SYM215=null;
		ParserRuleReturnScope expression216 =null;
		ParserRuleReturnScope interval_unit217 =null;

		Object INTERVAL_SYM215_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1327:14: ( INTERVAL_SYM expression interval_unit )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1328:3: INTERVAL_SYM expression interval_unit
			{
			root_0 = (Object)adaptor.nil();


			INTERVAL_SYM215=(Token)match(input,INTERVAL_SYM,FOLLOW_INTERVAL_SYM_in_interval_expr23465); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			INTERVAL_SYM215_tree = (Object)adaptor.create(INTERVAL_SYM215);
			adaptor.addChild(root_0, INTERVAL_SYM215_tree);
			}

			pushFollow(FOLLOW_expression_in_interval_expr23467);
			expression216=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression216.getTree());

			pushFollow(FOLLOW_interval_unit_in_interval_expr23469);
			interval_unit217=interval_unit();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, interval_unit217.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "interval_expr"


	public static class table_references_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "table_references"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1337:1: table_references : table_reference ( COMMA ^ table_reference )* ;
	public final SQLParser.table_references_return table_references() throws RecognitionException {
		SQLParser.table_references_return retval = new SQLParser.table_references_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token COMMA219=null;
		ParserRuleReturnScope table_reference218 =null;
		ParserRuleReturnScope table_reference220 =null;

		Object COMMA219_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1337:17: ( table_reference ( COMMA ^ table_reference )* )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1338:9: table_reference ( COMMA ^ table_reference )*
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_table_reference_in_table_references23491);
			table_reference218=table_reference();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_reference218.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1338:25: ( COMMA ^ table_reference )*
			loop54:
			while (true) {
				int alt54=2;
				int LA54_0 = input.LA(1);
				if ( (LA54_0==COMMA) ) {
					int LA54_2 = input.LA(2);
					if ( (LA54_2==ID||LA54_2==LPAREN||LA54_2==OJ_SYM) ) {
						alt54=1;
					}

				}

				switch (alt54) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1338:27: COMMA ^ table_reference
					{
					COMMA219=(Token)match(input,COMMA,FOLLOW_COMMA_in_table_references23495); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA219_tree = (Object)adaptor.create(COMMA219);
					root_0 = (Object)adaptor.becomeRoot(COMMA219_tree, root_0);
					}

					pushFollow(FOLLOW_table_reference_in_table_references23499);
					table_reference220=table_reference();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_reference220.getTree());

					}
					break;

				default :
					break loop54;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_references"


	public static class table_reference_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "table_reference"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1340:1: table_reference : ( table_factor1 | table_atom );
	public final SQLParser.table_reference_return table_reference() throws RecognitionException {
		SQLParser.table_reference_return retval = new SQLParser.table_reference_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope table_factor1221 =null;
		ParserRuleReturnScope table_atom222 =null;


		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1340:16: ( table_factor1 | table_atom )
			int alt55=2;
			switch ( input.LA(1) ) {
			case ID:
				{
				int LA55_1 = input.LA(2);
				if ( (synpred340_SQL()) ) {
					alt55=1;
				}
				else if ( (true) ) {
					alt55=2;
				}

				}
				break;
			case LPAREN:
				{
				int LA55_2 = input.LA(2);
				if ( (synpred340_SQL()) ) {
					alt55=1;
				}
				else if ( (true) ) {
					alt55=2;
				}

				}
				break;
			case OJ_SYM:
				{
				int LA55_3 = input.LA(2);
				if ( (synpred340_SQL()) ) {
					alt55=1;
				}
				else if ( (true) ) {
					alt55=2;
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 55, 0, input);
				throw nvae;
			}
			switch (alt55) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1341:3: table_factor1
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_table_factor1_in_table_reference23511);
					table_factor1221=table_factor1();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_factor1221.getTree());

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1341:19: table_atom
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_table_atom_in_table_reference23515);
					table_atom222=table_atom();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_atom222.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_reference"


	public static class table_factor1_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "table_factor1"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1343:1: table_factor1 : table_factor2 ( table_factor1_part )? ;
	public final SQLParser.table_factor1_return table_factor1() throws RecognitionException {
		SQLParser.table_factor1_return retval = new SQLParser.table_factor1_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope table_factor2223 =null;
		ParserRuleReturnScope table_factor1_part224 =null;


		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1343:14: ( table_factor2 ( table_factor1_part )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1344:3: table_factor2 ( table_factor1_part )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_table_factor2_in_table_factor123524);
			table_factor2223=table_factor2();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_factor2223.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1344:17: ( table_factor1_part )?
			int alt56=2;
			int LA56_0 = input.LA(1);
			if ( (LA56_0==CROSS||LA56_0==INNER_SYM||LA56_0==JOIN_SYM) ) {
				alt56=1;
			}
			switch (alt56) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1344:18: table_factor1_part
					{
					pushFollow(FOLLOW_table_factor1_part_in_table_factor123527);
					table_factor1_part224=table_factor1_part();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_factor1_part224.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_factor1"


	public static class table_factor2_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "table_factor2"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1346:1: table_factor2 : table_factor3 ( table_factor2_part )? ;
	public final SQLParser.table_factor2_return table_factor2() throws RecognitionException {
		SQLParser.table_factor2_return retval = new SQLParser.table_factor2_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope table_factor3225 =null;
		ParserRuleReturnScope table_factor2_part226 =null;


		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1346:14: ( table_factor3 ( table_factor2_part )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1347:3: table_factor3 ( table_factor2_part )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_table_factor3_in_table_factor223538);
			table_factor3225=table_factor3();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_factor3225.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1347:17: ( table_factor2_part )?
			int alt57=2;
			int LA57_0 = input.LA(1);
			if ( (LA57_0==STRAIGHT_JOIN) ) {
				alt57=1;
			}
			switch (alt57) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1347:18: table_factor2_part
					{
					pushFollow(FOLLOW_table_factor2_part_in_table_factor223541);
					table_factor2_part226=table_factor2_part();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_factor2_part226.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_factor2"


	public static class table_factor3_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "table_factor3"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1349:1: table_factor3 : table_factor4 ( table_factor3_part )? ;
	public final SQLParser.table_factor3_return table_factor3() throws RecognitionException {
		SQLParser.table_factor3_return retval = new SQLParser.table_factor3_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope table_factor4227 =null;
		ParserRuleReturnScope table_factor3_part228 =null;


		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1349:14: ( table_factor4 ( table_factor3_part )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1350:3: table_factor4 ( table_factor3_part )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_table_factor4_in_table_factor323552);
			table_factor4227=table_factor4();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_factor4227.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1350:17: ( table_factor3_part )?
			int alt58=2;
			int LA58_0 = input.LA(1);
			if ( (LA58_0==LEFT) ) {
				int LA58_1 = input.LA(2);
				if ( (synpred343_SQL()) ) {
					alt58=1;
				}
			}
			else if ( (LA58_0==RIGHT) ) {
				alt58=1;
			}
			switch (alt58) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1350:18: table_factor3_part
					{
					pushFollow(FOLLOW_table_factor3_part_in_table_factor323555);
					table_factor3_part228=table_factor3_part();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_factor3_part228.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_factor3"


	public static class table_factor4_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "table_factor4"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1352:1: table_factor4 : table_atom ( table_factor4_part )? ;
	public final SQLParser.table_factor4_return table_factor4() throws RecognitionException {
		SQLParser.table_factor4_return retval = new SQLParser.table_factor4_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope table_atom229 =null;
		ParserRuleReturnScope table_factor4_part230 =null;


		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1352:14: ( table_atom ( table_factor4_part )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1353:3: table_atom ( table_factor4_part )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_table_atom_in_table_factor423566);
			table_atom229=table_atom();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_atom229.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1353:14: ( table_factor4_part )?
			int alt59=2;
			int LA59_0 = input.LA(1);
			if ( (LA59_0==NATURAL) ) {
				alt59=1;
			}
			switch (alt59) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1353:15: table_factor4_part
					{
					pushFollow(FOLLOW_table_factor4_part_in_table_factor423569);
					table_factor4_part230=table_factor4_part();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_factor4_part230.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_factor4"


	public static class table_atom_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "table_atom"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1355:1: table_atom : ( ( table_spec ^ ( partition_clause )? ( alias )? ( index_hint_list )? ) | ( subquery alias ) | ( LPAREN table_references RPAREN ) | ( OJ_SYM table_reference LEFT OUTER JOIN_SYM table_reference ON expression ) );
	public final SQLParser.table_atom_return table_atom() throws RecognitionException {
		SQLParser.table_atom_return retval = new SQLParser.table_atom_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LPAREN237=null;
		Token RPAREN239=null;
		Token OJ_SYM240=null;
		Token LEFT242=null;
		Token OUTER243=null;
		Token JOIN_SYM244=null;
		Token ON246=null;
		ParserRuleReturnScope table_spec231 =null;
		ParserRuleReturnScope partition_clause232 =null;
		ParserRuleReturnScope alias233 =null;
		ParserRuleReturnScope index_hint_list234 =null;
		ParserRuleReturnScope subquery235 =null;
		ParserRuleReturnScope alias236 =null;
		ParserRuleReturnScope table_references238 =null;
		ParserRuleReturnScope table_reference241 =null;
		ParserRuleReturnScope table_reference245 =null;
		ParserRuleReturnScope expression247 =null;

		Object LPAREN237_tree=null;
		Object RPAREN239_tree=null;
		Object OJ_SYM240_tree=null;
		Object LEFT242_tree=null;
		Object OUTER243_tree=null;
		Object JOIN_SYM244_tree=null;
		Object ON246_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1355:11: ( ( table_spec ^ ( partition_clause )? ( alias )? ( index_hint_list )? ) | ( subquery alias ) | ( LPAREN table_references RPAREN ) | ( OJ_SYM table_reference LEFT OUTER JOIN_SYM table_reference ON expression ) )
			int alt63=4;
			switch ( input.LA(1) ) {
			case ID:
				{
				alt63=1;
				}
				break;
			case LPAREN:
				{
				int LA63_2 = input.LA(2);
				if ( (LA63_2==SELECT) ) {
					alt63=2;
				}
				else if ( (LA63_2==ID||LA63_2==LPAREN||LA63_2==OJ_SYM) ) {
					alt63=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 63, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case OJ_SYM:
				{
				alt63=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 63, 0, input);
				throw nvae;
			}
			switch (alt63) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1356:5: ( table_spec ^ ( partition_clause )? ( alias )? ( index_hint_list )? )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1356:5: ( table_spec ^ ( partition_clause )? ( alias )? ( index_hint_list )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1356:7: table_spec ^ ( partition_clause )? ( alias )? ( index_hint_list )?
					{
					pushFollow(FOLLOW_table_spec_in_table_atom23584);
					table_spec231=table_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(table_spec231.getTree(), root_0);
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1356:20: ( partition_clause )?
					int alt60=2;
					alt60 = dfa60.predict(input);
					switch (alt60) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1356:21: partition_clause
							{
							pushFollow(FOLLOW_partition_clause_in_table_atom23589);
							partition_clause232=partition_clause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_clause232.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1356:40: ( alias )?
					int alt61=2;
					int LA61_0 = input.LA(1);
					if ( (LA61_0==AS_SYM||LA61_0==ID) ) {
						alt61=1;
					}
					switch (alt61) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1356:41: alias
							{
							pushFollow(FOLLOW_alias_in_table_atom23594);
							alias233=alias();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, alias233.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1356:49: ( index_hint_list )?
					int alt62=2;
					int LA62_0 = input.LA(1);
					if ( (LA62_0==FORCE_SYM||LA62_0==IGNORE_SYM||LA62_0==USE_SYM) ) {
						alt62=1;
					}
					switch (alt62) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1356:50: index_hint_list
							{
							pushFollow(FOLLOW_index_hint_list_in_table_atom23599);
							index_hint_list234=index_hint_list();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_hint_list234.getTree());

							}
							break;

					}

					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1357:5: ( subquery alias )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1357:5: ( subquery alias )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1357:7: subquery alias
					{
					pushFollow(FOLLOW_subquery_in_table_atom23611);
					subquery235=subquery();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery235.getTree());

					pushFollow(FOLLOW_alias_in_table_atom23613);
					alias236=alias();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alias236.getTree());

					}

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1358:5: ( LPAREN table_references RPAREN )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1358:5: ( LPAREN table_references RPAREN )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1358:7: LPAREN table_references RPAREN
					{
					LPAREN237=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_table_atom23623); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN237_tree = (Object)adaptor.create(LPAREN237);
					adaptor.addChild(root_0, LPAREN237_tree);
					}

					pushFollow(FOLLOW_table_references_in_table_atom23625);
					table_references238=table_references();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_references238.getTree());

					RPAREN239=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_table_atom23627); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN239_tree = (Object)adaptor.create(RPAREN239);
					adaptor.addChild(root_0, RPAREN239_tree);
					}

					}

					}
					break;
				case 4 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1359:5: ( OJ_SYM table_reference LEFT OUTER JOIN_SYM table_reference ON expression )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1359:5: ( OJ_SYM table_reference LEFT OUTER JOIN_SYM table_reference ON expression )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1359:7: OJ_SYM table_reference LEFT OUTER JOIN_SYM table_reference ON expression
					{
					OJ_SYM240=(Token)match(input,OJ_SYM,FOLLOW_OJ_SYM_in_table_atom23637); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					OJ_SYM240_tree = (Object)adaptor.create(OJ_SYM240);
					adaptor.addChild(root_0, OJ_SYM240_tree);
					}

					pushFollow(FOLLOW_table_reference_in_table_atom23639);
					table_reference241=table_reference();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_reference241.getTree());

					LEFT242=(Token)match(input,LEFT,FOLLOW_LEFT_in_table_atom23641); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LEFT242_tree = (Object)adaptor.create(LEFT242);
					adaptor.addChild(root_0, LEFT242_tree);
					}

					OUTER243=(Token)match(input,OUTER,FOLLOW_OUTER_in_table_atom23643); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					OUTER243_tree = (Object)adaptor.create(OUTER243);
					adaptor.addChild(root_0, OUTER243_tree);
					}

					JOIN_SYM244=(Token)match(input,JOIN_SYM,FOLLOW_JOIN_SYM_in_table_atom23645); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					JOIN_SYM244_tree = (Object)adaptor.create(JOIN_SYM244);
					adaptor.addChild(root_0, JOIN_SYM244_tree);
					}

					pushFollow(FOLLOW_table_reference_in_table_atom23647);
					table_reference245=table_reference();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_reference245.getTree());

					ON246=(Token)match(input,ON,FOLLOW_ON_in_table_atom23649); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ON246_tree = (Object)adaptor.create(ON246);
					adaptor.addChild(root_0, ON246_tree);
					}

					pushFollow(FOLLOW_expression_in_table_atom23651);
					expression247=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression247.getTree());

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_atom"


	public static class table_factor1_part_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "table_factor1_part"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1361:1: table_factor1_part : ( ( INNER_SYM | CROSS )? JOIN_SYM ^ table_atom ( join_condition )? ) ;
	public final SQLParser.table_factor1_part_return table_factor1_part() throws RecognitionException {
		SQLParser.table_factor1_part_return retval = new SQLParser.table_factor1_part_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set248=null;
		Token JOIN_SYM249=null;
		ParserRuleReturnScope table_atom250 =null;
		ParserRuleReturnScope join_condition251 =null;

		Object set248_tree=null;
		Object JOIN_SYM249_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1361:19: ( ( ( INNER_SYM | CROSS )? JOIN_SYM ^ table_atom ( join_condition )? ) )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1362:4: ( ( INNER_SYM | CROSS )? JOIN_SYM ^ table_atom ( join_condition )? )
			{
			root_0 = (Object)adaptor.nil();


			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1362:4: ( ( INNER_SYM | CROSS )? JOIN_SYM ^ table_atom ( join_condition )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1362:4: ( INNER_SYM | CROSS )? JOIN_SYM ^ table_atom ( join_condition )?
			{
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1362:4: ( INNER_SYM | CROSS )?
			int alt64=2;
			int LA64_0 = input.LA(1);
			if ( (LA64_0==CROSS||LA64_0==INNER_SYM) ) {
				alt64=1;
			}
			switch (alt64) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
					{
					set248=input.LT(1);
					if ( input.LA(1)==CROSS||input.LA(1)==INNER_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set248));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			JOIN_SYM249=(Token)match(input,JOIN_SYM,FOLLOW_JOIN_SYM_in_table_factor1_part23672); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			JOIN_SYM249_tree = (Object)adaptor.create(JOIN_SYM249);
			root_0 = (Object)adaptor.becomeRoot(JOIN_SYM249_tree, root_0);
			}

			pushFollow(FOLLOW_table_atom_in_table_factor1_part23676);
			table_atom250=table_atom();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_atom250.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1362:47: ( join_condition )?
			int alt65=2;
			int LA65_0 = input.LA(1);
			if ( (LA65_0==ON) ) {
				int LA65_1 = input.LA(2);
				if ( (synpred353_SQL()) ) {
					alt65=1;
				}
			}
			else if ( (LA65_0==USING_SYM) ) {
				alt65=1;
			}
			switch (alt65) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1362:48: join_condition
					{
					pushFollow(FOLLOW_join_condition_in_table_factor1_part23679);
					join_condition251=join_condition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, join_condition251.getTree());

					}
					break;

			}

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_factor1_part"


	public static class table_factor2_part_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "table_factor2_part"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1364:1: table_factor2_part : ( STRAIGHT_JOIN ^ table_atom ( ON expression )? ) ;
	public final SQLParser.table_factor2_part_return table_factor2_part() throws RecognitionException {
		SQLParser.table_factor2_part_return retval = new SQLParser.table_factor2_part_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token STRAIGHT_JOIN252=null;
		Token ON254=null;
		ParserRuleReturnScope table_atom253 =null;
		ParserRuleReturnScope expression255 =null;

		Object STRAIGHT_JOIN252_tree=null;
		Object ON254_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1364:19: ( ( STRAIGHT_JOIN ^ table_atom ( ON expression )? ) )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1365:4: ( STRAIGHT_JOIN ^ table_atom ( ON expression )? )
			{
			root_0 = (Object)adaptor.nil();


			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1365:4: ( STRAIGHT_JOIN ^ table_atom ( ON expression )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1365:4: STRAIGHT_JOIN ^ table_atom ( ON expression )?
			{
			STRAIGHT_JOIN252=(Token)match(input,STRAIGHT_JOIN,FOLLOW_STRAIGHT_JOIN_in_table_factor2_part23694); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			STRAIGHT_JOIN252_tree = (Object)adaptor.create(STRAIGHT_JOIN252);
			root_0 = (Object)adaptor.becomeRoot(STRAIGHT_JOIN252_tree, root_0);
			}

			pushFollow(FOLLOW_table_atom_in_table_factor2_part23698);
			table_atom253=table_atom();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_atom253.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1365:31: ( ON expression )?
			int alt66=2;
			int LA66_0 = input.LA(1);
			if ( (LA66_0==ON) ) {
				int LA66_1 = input.LA(2);
				if ( (synpred354_SQL()) ) {
					alt66=1;
				}
			}
			switch (alt66) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1365:32: ON expression
					{
					ON254=(Token)match(input,ON,FOLLOW_ON_in_table_factor2_part23701); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ON254_tree = (Object)adaptor.create(ON254);
					adaptor.addChild(root_0, ON254_tree);
					}

					pushFollow(FOLLOW_expression_in_table_factor2_part23703);
					expression255=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression255.getTree());

					}
					break;

			}

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_factor2_part"


	public static class table_factor3_part_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "table_factor3_part"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1367:1: table_factor3_part : ( ( LEFT | RIGHT ) ( OUTER )? JOIN_SYM ^ table_factor4 join_condition ) ;
	public final SQLParser.table_factor3_part_return table_factor3_part() throws RecognitionException {
		SQLParser.table_factor3_part_return retval = new SQLParser.table_factor3_part_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set256=null;
		Token OUTER257=null;
		Token JOIN_SYM258=null;
		ParserRuleReturnScope table_factor4259 =null;
		ParserRuleReturnScope join_condition260 =null;

		Object set256_tree=null;
		Object OUTER257_tree=null;
		Object JOIN_SYM258_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1367:19: ( ( ( LEFT | RIGHT ) ( OUTER )? JOIN_SYM ^ table_factor4 join_condition ) )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1368:4: ( ( LEFT | RIGHT ) ( OUTER )? JOIN_SYM ^ table_factor4 join_condition )
			{
			root_0 = (Object)adaptor.nil();


			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1368:4: ( ( LEFT | RIGHT ) ( OUTER )? JOIN_SYM ^ table_factor4 join_condition )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1368:4: ( LEFT | RIGHT ) ( OUTER )? JOIN_SYM ^ table_factor4 join_condition
			{
			set256=input.LT(1);
			if ( input.LA(1)==LEFT||input.LA(1)==RIGHT ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set256));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1368:17: ( OUTER )?
			int alt67=2;
			int LA67_0 = input.LA(1);
			if ( (LA67_0==OUTER) ) {
				alt67=1;
			}
			switch (alt67) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1368:18: OUTER
					{
					OUTER257=(Token)match(input,OUTER,FOLLOW_OUTER_in_table_factor3_part23725); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					OUTER257_tree = (Object)adaptor.create(OUTER257);
					adaptor.addChild(root_0, OUTER257_tree);
					}

					}
					break;

			}

			JOIN_SYM258=(Token)match(input,JOIN_SYM,FOLLOW_JOIN_SYM_in_table_factor3_part23729); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			JOIN_SYM258_tree = (Object)adaptor.create(JOIN_SYM258);
			root_0 = (Object)adaptor.becomeRoot(JOIN_SYM258_tree, root_0);
			}

			pushFollow(FOLLOW_table_factor4_in_table_factor3_part23733);
			table_factor4259=table_factor4();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_factor4259.getTree());

			pushFollow(FOLLOW_join_condition_in_table_factor3_part23735);
			join_condition260=join_condition();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, join_condition260.getTree());

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_factor3_part"


	public static class table_factor4_part_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "table_factor4_part"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1370:1: table_factor4_part : ( NATURAL ( ( LEFT | RIGHT ) ( OUTER )? )? JOIN_SYM ^ table_atom ) ;
	public final SQLParser.table_factor4_part_return table_factor4_part() throws RecognitionException {
		SQLParser.table_factor4_part_return retval = new SQLParser.table_factor4_part_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token NATURAL261=null;
		Token set262=null;
		Token OUTER263=null;
		Token JOIN_SYM264=null;
		ParserRuleReturnScope table_atom265 =null;

		Object NATURAL261_tree=null;
		Object set262_tree=null;
		Object OUTER263_tree=null;
		Object JOIN_SYM264_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1370:19: ( ( NATURAL ( ( LEFT | RIGHT ) ( OUTER )? )? JOIN_SYM ^ table_atom ) )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1371:4: ( NATURAL ( ( LEFT | RIGHT ) ( OUTER )? )? JOIN_SYM ^ table_atom )
			{
			root_0 = (Object)adaptor.nil();


			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1371:4: ( NATURAL ( ( LEFT | RIGHT ) ( OUTER )? )? JOIN_SYM ^ table_atom )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1371:4: NATURAL ( ( LEFT | RIGHT ) ( OUTER )? )? JOIN_SYM ^ table_atom
			{
			NATURAL261=(Token)match(input,NATURAL,FOLLOW_NATURAL_in_table_factor4_part23748); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			NATURAL261_tree = (Object)adaptor.create(NATURAL261);
			adaptor.addChild(root_0, NATURAL261_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1371:12: ( ( LEFT | RIGHT ) ( OUTER )? )?
			int alt69=2;
			int LA69_0 = input.LA(1);
			if ( (LA69_0==LEFT||LA69_0==RIGHT) ) {
				alt69=1;
			}
			switch (alt69) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1371:14: ( LEFT | RIGHT ) ( OUTER )?
					{
					set262=input.LT(1);
					if ( input.LA(1)==LEFT||input.LA(1)==RIGHT ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set262));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1371:27: ( OUTER )?
					int alt68=2;
					int LA68_0 = input.LA(1);
					if ( (LA68_0==OUTER) ) {
						alt68=1;
					}
					switch (alt68) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1371:28: OUTER
							{
							OUTER263=(Token)match(input,OUTER,FOLLOW_OUTER_in_table_factor4_part23759); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							OUTER263_tree = (Object)adaptor.create(OUTER263);
							adaptor.addChild(root_0, OUTER263_tree);
							}

							}
							break;

					}

					}
					break;

			}

			JOIN_SYM264=(Token)match(input,JOIN_SYM,FOLLOW_JOIN_SYM_in_table_factor4_part23766); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			JOIN_SYM264_tree = (Object)adaptor.create(JOIN_SYM264);
			root_0 = (Object)adaptor.becomeRoot(JOIN_SYM264_tree, root_0);
			}

			pushFollow(FOLLOW_table_atom_in_table_factor4_part23770);
			table_atom265=table_atom();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_atom265.getTree());

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_factor4_part"


	public static class join_condition_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "join_condition"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1373:1: join_condition : ( ( ON ^ expression ) | ( USING_SYM ^ column_list ) );
	public final SQLParser.join_condition_return join_condition() throws RecognitionException {
		SQLParser.join_condition_return retval = new SQLParser.join_condition_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token ON266=null;
		Token USING_SYM268=null;
		ParserRuleReturnScope expression267 =null;
		ParserRuleReturnScope column_list269 =null;

		Object ON266_tree=null;
		Object USING_SYM268_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1373:15: ( ( ON ^ expression ) | ( USING_SYM ^ column_list ) )
			int alt70=2;
			int LA70_0 = input.LA(1);
			if ( (LA70_0==ON) ) {
				alt70=1;
			}
			else if ( (LA70_0==USING_SYM) ) {
				alt70=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 70, 0, input);
				throw nvae;
			}

			switch (alt70) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1374:5: ( ON ^ expression )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1374:5: ( ON ^ expression )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1374:6: ON ^ expression
					{
					ON266=(Token)match(input,ON,FOLLOW_ON_in_join_condition23784); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ON266_tree = (Object)adaptor.create(ON266);
					root_0 = (Object)adaptor.becomeRoot(ON266_tree, root_0);
					}

					pushFollow(FOLLOW_expression_in_join_condition23788);
					expression267=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression267.getTree());

					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1374:25: ( USING_SYM ^ column_list )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1374:25: ( USING_SYM ^ column_list )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1374:26: USING_SYM ^ column_list
					{
					USING_SYM268=(Token)match(input,USING_SYM,FOLLOW_USING_SYM_in_join_condition23794); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					USING_SYM268_tree = (Object)adaptor.create(USING_SYM268);
					root_0 = (Object)adaptor.becomeRoot(USING_SYM268_tree, root_0);
					}

					pushFollow(FOLLOW_column_list_in_join_condition23798);
					column_list269=column_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_list269.getTree());

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "join_condition"


	public static class index_hint_list_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "index_hint_list"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1376:1: index_hint_list : index_hint ( COMMA index_hint )* ;
	public final SQLParser.index_hint_list_return index_hint_list() throws RecognitionException {
		SQLParser.index_hint_list_return retval = new SQLParser.index_hint_list_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token COMMA271=null;
		ParserRuleReturnScope index_hint270 =null;
		ParserRuleReturnScope index_hint272 =null;

		Object COMMA271_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1376:16: ( index_hint ( COMMA index_hint )* )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1377:3: index_hint ( COMMA index_hint )*
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_index_hint_in_index_hint_list23808);
			index_hint270=index_hint();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, index_hint270.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1377:14: ( COMMA index_hint )*
			loop71:
			while (true) {
				int alt71=2;
				int LA71_0 = input.LA(1);
				if ( (LA71_0==COMMA) ) {
					int LA71_1 = input.LA(2);
					if ( (LA71_1==FORCE_SYM||LA71_1==IGNORE_SYM||LA71_1==USE_SYM) ) {
						alt71=1;
					}

				}

				switch (alt71) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1377:15: COMMA index_hint
					{
					COMMA271=(Token)match(input,COMMA,FOLLOW_COMMA_in_index_hint_list23811); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA271_tree = (Object)adaptor.create(COMMA271);
					adaptor.addChild(root_0, COMMA271_tree);
					}

					pushFollow(FOLLOW_index_hint_in_index_hint_list23813);
					index_hint272=index_hint();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_hint272.getTree());

					}
					break;

				default :
					break loop71;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "index_hint_list"


	public static class index_options_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "index_options"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1379:1: index_options : ( INDEX_SYM | KEY_SYM ) ( FOR_SYM ( ( JOIN_SYM ) | ( ORDER_SYM BY_SYM ) | ( GROUP_SYM BY_SYM ) ) )? ;
	public final SQLParser.index_options_return index_options() throws RecognitionException {
		SQLParser.index_options_return retval = new SQLParser.index_options_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set273=null;
		Token FOR_SYM274=null;
		Token JOIN_SYM275=null;
		Token ORDER_SYM276=null;
		Token BY_SYM277=null;
		Token GROUP_SYM278=null;
		Token BY_SYM279=null;

		Object set273_tree=null;
		Object FOR_SYM274_tree=null;
		Object JOIN_SYM275_tree=null;
		Object ORDER_SYM276_tree=null;
		Object BY_SYM277_tree=null;
		Object GROUP_SYM278_tree=null;
		Object BY_SYM279_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1379:14: ( ( INDEX_SYM | KEY_SYM ) ( FOR_SYM ( ( JOIN_SYM ) | ( ORDER_SYM BY_SYM ) | ( GROUP_SYM BY_SYM ) ) )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1380:3: ( INDEX_SYM | KEY_SYM ) ( FOR_SYM ( ( JOIN_SYM ) | ( ORDER_SYM BY_SYM ) | ( GROUP_SYM BY_SYM ) ) )?
			{
			root_0 = (Object)adaptor.nil();


			set273=input.LT(1);
			if ( input.LA(1)==INDEX_SYM||input.LA(1)==KEY_SYM ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set273));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1380:25: ( FOR_SYM ( ( JOIN_SYM ) | ( ORDER_SYM BY_SYM ) | ( GROUP_SYM BY_SYM ) ) )?
			int alt73=2;
			int LA73_0 = input.LA(1);
			if ( (LA73_0==FOR_SYM) ) {
				alt73=1;
			}
			switch (alt73) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1380:28: FOR_SYM ( ( JOIN_SYM ) | ( ORDER_SYM BY_SYM ) | ( GROUP_SYM BY_SYM ) )
					{
					FOR_SYM274=(Token)match(input,FOR_SYM,FOLLOW_FOR_SYM_in_index_options23835); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					FOR_SYM274_tree = (Object)adaptor.create(FOR_SYM274);
					adaptor.addChild(root_0, FOR_SYM274_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1380:36: ( ( JOIN_SYM ) | ( ORDER_SYM BY_SYM ) | ( GROUP_SYM BY_SYM ) )
					int alt72=3;
					switch ( input.LA(1) ) {
					case JOIN_SYM:
						{
						alt72=1;
						}
						break;
					case ORDER_SYM:
						{
						alt72=2;
						}
						break;
					case GROUP_SYM:
						{
						alt72=3;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 72, 0, input);
						throw nvae;
					}
					switch (alt72) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1380:37: ( JOIN_SYM )
							{
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1380:37: ( JOIN_SYM )
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1380:38: JOIN_SYM
							{
							JOIN_SYM275=(Token)match(input,JOIN_SYM,FOLLOW_JOIN_SYM_in_index_options23839); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							JOIN_SYM275_tree = (Object)adaptor.create(JOIN_SYM275);
							adaptor.addChild(root_0, JOIN_SYM275_tree);
							}

							}

							}
							break;
						case 2 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1380:50: ( ORDER_SYM BY_SYM )
							{
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1380:50: ( ORDER_SYM BY_SYM )
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1380:51: ORDER_SYM BY_SYM
							{
							ORDER_SYM276=(Token)match(input,ORDER_SYM,FOLLOW_ORDER_SYM_in_index_options23845); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ORDER_SYM276_tree = (Object)adaptor.create(ORDER_SYM276);
							adaptor.addChild(root_0, ORDER_SYM276_tree);
							}

							BY_SYM277=(Token)match(input,BY_SYM,FOLLOW_BY_SYM_in_index_options23847); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							BY_SYM277_tree = (Object)adaptor.create(BY_SYM277);
							adaptor.addChild(root_0, BY_SYM277_tree);
							}

							}

							}
							break;
						case 3 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1380:71: ( GROUP_SYM BY_SYM )
							{
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1380:71: ( GROUP_SYM BY_SYM )
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1380:72: GROUP_SYM BY_SYM
							{
							GROUP_SYM278=(Token)match(input,GROUP_SYM,FOLLOW_GROUP_SYM_in_index_options23853); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							GROUP_SYM278_tree = (Object)adaptor.create(GROUP_SYM278);
							adaptor.addChild(root_0, GROUP_SYM278_tree);
							}

							BY_SYM279=(Token)match(input,BY_SYM,FOLLOW_BY_SYM_in_index_options23855); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							BY_SYM279_tree = (Object)adaptor.create(BY_SYM279);
							adaptor.addChild(root_0, BY_SYM279_tree);
							}

							}

							}
							break;

					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "index_options"


	public static class index_hint_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "index_hint"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1382:1: index_hint : ( USE_SYM index_options LPAREN ( index_list )? RPAREN | IGNORE_SYM index_options LPAREN index_list RPAREN | FORCE_SYM index_options LPAREN index_list RPAREN );
	public final SQLParser.index_hint_return index_hint() throws RecognitionException {
		SQLParser.index_hint_return retval = new SQLParser.index_hint_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token USE_SYM280=null;
		Token LPAREN282=null;
		Token RPAREN284=null;
		Token IGNORE_SYM285=null;
		Token LPAREN287=null;
		Token RPAREN289=null;
		Token FORCE_SYM290=null;
		Token LPAREN292=null;
		Token RPAREN294=null;
		ParserRuleReturnScope index_options281 =null;
		ParserRuleReturnScope index_list283 =null;
		ParserRuleReturnScope index_options286 =null;
		ParserRuleReturnScope index_list288 =null;
		ParserRuleReturnScope index_options291 =null;
		ParserRuleReturnScope index_list293 =null;

		Object USE_SYM280_tree=null;
		Object LPAREN282_tree=null;
		Object RPAREN284_tree=null;
		Object IGNORE_SYM285_tree=null;
		Object LPAREN287_tree=null;
		Object RPAREN289_tree=null;
		Object FORCE_SYM290_tree=null;
		Object LPAREN292_tree=null;
		Object RPAREN294_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1382:11: ( USE_SYM index_options LPAREN ( index_list )? RPAREN | IGNORE_SYM index_options LPAREN index_list RPAREN | FORCE_SYM index_options LPAREN index_list RPAREN )
			int alt75=3;
			switch ( input.LA(1) ) {
			case USE_SYM:
				{
				alt75=1;
				}
				break;
			case IGNORE_SYM:
				{
				alt75=2;
				}
				break;
			case FORCE_SYM:
				{
				alt75=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 75, 0, input);
				throw nvae;
			}
			switch (alt75) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1383:5: USE_SYM index_options LPAREN ( index_list )? RPAREN
					{
					root_0 = (Object)adaptor.nil();


					USE_SYM280=(Token)match(input,USE_SYM,FOLLOW_USE_SYM_in_index_hint23872); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					USE_SYM280_tree = (Object)adaptor.create(USE_SYM280);
					adaptor.addChild(root_0, USE_SYM280_tree);
					}

					pushFollow(FOLLOW_index_options_in_index_hint23877);
					index_options281=index_options();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_options281.getTree());

					LPAREN282=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_index_hint23879); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN282_tree = (Object)adaptor.create(LPAREN282);
					adaptor.addChild(root_0, LPAREN282_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1383:37: ( index_list )?
					int alt74=2;
					int LA74_0 = input.LA(1);
					if ( (LA74_0==ID) ) {
						alt74=1;
					}
					switch (alt74) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1383:38: index_list
							{
							pushFollow(FOLLOW_index_list_in_index_hint23882);
							index_list283=index_list();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_list283.getTree());

							}
							break;

					}

					RPAREN284=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_index_hint23886); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN284_tree = (Object)adaptor.create(RPAREN284);
					adaptor.addChild(root_0, RPAREN284_tree);
					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1384:5: IGNORE_SYM index_options LPAREN index_list RPAREN
					{
					root_0 = (Object)adaptor.nil();


					IGNORE_SYM285=(Token)match(input,IGNORE_SYM,FOLLOW_IGNORE_SYM_in_index_hint23892); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IGNORE_SYM285_tree = (Object)adaptor.create(IGNORE_SYM285);
					adaptor.addChild(root_0, IGNORE_SYM285_tree);
					}

					pushFollow(FOLLOW_index_options_in_index_hint23894);
					index_options286=index_options();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_options286.getTree());

					LPAREN287=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_index_hint23896); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN287_tree = (Object)adaptor.create(LPAREN287);
					adaptor.addChild(root_0, LPAREN287_tree);
					}

					pushFollow(FOLLOW_index_list_in_index_hint23898);
					index_list288=index_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_list288.getTree());

					RPAREN289=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_index_hint23900); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN289_tree = (Object)adaptor.create(RPAREN289);
					adaptor.addChild(root_0, RPAREN289_tree);
					}

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1385:5: FORCE_SYM index_options LPAREN index_list RPAREN
					{
					root_0 = (Object)adaptor.nil();


					FORCE_SYM290=(Token)match(input,FORCE_SYM,FOLLOW_FORCE_SYM_in_index_hint23906); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					FORCE_SYM290_tree = (Object)adaptor.create(FORCE_SYM290);
					adaptor.addChild(root_0, FORCE_SYM290_tree);
					}

					pushFollow(FOLLOW_index_options_in_index_hint23909);
					index_options291=index_options();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_options291.getTree());

					LPAREN292=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_index_hint23911); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN292_tree = (Object)adaptor.create(LPAREN292);
					adaptor.addChild(root_0, LPAREN292_tree);
					}

					pushFollow(FOLLOW_index_list_in_index_hint23913);
					index_list293=index_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_list293.getTree());

					RPAREN294=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_index_hint23915); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN294_tree = (Object)adaptor.create(RPAREN294);
					adaptor.addChild(root_0, RPAREN294_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "index_hint"


	public static class index_list_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "index_list"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1387:1: index_list : index_name ( COMMA index_name )* ;
	public final SQLParser.index_list_return index_list() throws RecognitionException {
		SQLParser.index_list_return retval = new SQLParser.index_list_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token COMMA296=null;
		ParserRuleReturnScope index_name295 =null;
		ParserRuleReturnScope index_name297 =null;

		Object COMMA296_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1387:11: ( index_name ( COMMA index_name )* )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1388:3: index_name ( COMMA index_name )*
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_index_name_in_index_list23924);
			index_name295=index_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name295.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1388:14: ( COMMA index_name )*
			loop76:
			while (true) {
				int alt76=2;
				int LA76_0 = input.LA(1);
				if ( (LA76_0==COMMA) ) {
					alt76=1;
				}

				switch (alt76) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1388:15: COMMA index_name
					{
					COMMA296=(Token)match(input,COMMA,FOLLOW_COMMA_in_index_list23927); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA296_tree = (Object)adaptor.create(COMMA296);
					adaptor.addChild(root_0, COMMA296_tree);
					}

					pushFollow(FOLLOW_index_name_in_index_list23929);
					index_name297=index_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name297.getTree());

					}
					break;

				default :
					break loop76;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "index_list"


	public static class partition_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "partition_clause"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1390:1: partition_clause : PARTITION_SYM LPAREN partition_names RPAREN ;
	public final SQLParser.partition_clause_return partition_clause() throws RecognitionException {
		SQLParser.partition_clause_return retval = new SQLParser.partition_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token PARTITION_SYM298=null;
		Token LPAREN299=null;
		Token RPAREN301=null;
		ParserRuleReturnScope partition_names300 =null;

		Object PARTITION_SYM298_tree=null;
		Object LPAREN299_tree=null;
		Object RPAREN301_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1390:17: ( PARTITION_SYM LPAREN partition_names RPAREN )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1391:3: PARTITION_SYM LPAREN partition_names RPAREN
			{
			root_0 = (Object)adaptor.nil();


			PARTITION_SYM298=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_partition_clause23940); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			PARTITION_SYM298_tree = (Object)adaptor.create(PARTITION_SYM298);
			adaptor.addChild(root_0, PARTITION_SYM298_tree);
			}

			LPAREN299=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_clause23942); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN299_tree = (Object)adaptor.create(LPAREN299);
			adaptor.addChild(root_0, LPAREN299_tree);
			}

			pushFollow(FOLLOW_partition_names_in_partition_clause23944);
			partition_names300=partition_names();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_names300.getTree());

			RPAREN301=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_clause23946); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN301_tree = (Object)adaptor.create(RPAREN301);
			adaptor.addChild(root_0, RPAREN301_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "partition_clause"


	public static class partition_names_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "partition_names"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1393:1: partition_names : partition_name ( COMMA partition_name )* ;
	public final SQLParser.partition_names_return partition_names() throws RecognitionException {
		SQLParser.partition_names_return retval = new SQLParser.partition_names_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token COMMA303=null;
		ParserRuleReturnScope partition_name302 =null;
		ParserRuleReturnScope partition_name304 =null;

		Object COMMA303_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1393:16: ( partition_name ( COMMA partition_name )* )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1393:19: partition_name ( COMMA partition_name )*
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_partition_name_in_partition_names23954);
			partition_name302=partition_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_name302.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1393:34: ( COMMA partition_name )*
			loop77:
			while (true) {
				int alt77=2;
				int LA77_0 = input.LA(1);
				if ( (LA77_0==COMMA) ) {
					int LA77_2 = input.LA(2);
					if ( (LA77_2==ID) ) {
						alt77=1;
					}

				}

				switch (alt77) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1393:35: COMMA partition_name
					{
					COMMA303=(Token)match(input,COMMA,FOLLOW_COMMA_in_partition_names23957); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA303_tree = (Object)adaptor.create(COMMA303);
					adaptor.addChild(root_0, COMMA303_tree);
					}

					pushFollow(FOLLOW_partition_name_in_partition_names23959);
					partition_name304=partition_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_name304.getTree());

					}
					break;

				default :
					break loop77;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "partition_names"


	public static class root_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "root_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1401:1: root_statement : ( SHIFT_LEFT SHIFT_RIGHT )? ( data_manipulation_statements | data_definition_statements ) ( SEMI )? ;
	public final SQLParser.root_statement_return root_statement() throws RecognitionException {
		SQLParser.root_statement_return retval = new SQLParser.root_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token SHIFT_LEFT305=null;
		Token SHIFT_RIGHT306=null;
		Token SEMI309=null;
		ParserRuleReturnScope data_manipulation_statements307 =null;
		ParserRuleReturnScope data_definition_statements308 =null;

		Object SHIFT_LEFT305_tree=null;
		Object SHIFT_RIGHT306_tree=null;
		Object SEMI309_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1401:15: ( ( SHIFT_LEFT SHIFT_RIGHT )? ( data_manipulation_statements | data_definition_statements ) ( SEMI )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1402:3: ( SHIFT_LEFT SHIFT_RIGHT )? ( data_manipulation_statements | data_definition_statements ) ( SEMI )?
			{
			root_0 = (Object)adaptor.nil();


			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1402:3: ( SHIFT_LEFT SHIFT_RIGHT )?
			int alt78=2;
			int LA78_0 = input.LA(1);
			if ( (LA78_0==SHIFT_LEFT) ) {
				alt78=1;
			}
			switch (alt78) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1402:4: SHIFT_LEFT SHIFT_RIGHT
					{
					SHIFT_LEFT305=(Token)match(input,SHIFT_LEFT,FOLLOW_SHIFT_LEFT_in_root_statement23978); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SHIFT_LEFT305_tree = (Object)adaptor.create(SHIFT_LEFT305);
					adaptor.addChild(root_0, SHIFT_LEFT305_tree);
					}

					SHIFT_RIGHT306=(Token)match(input,SHIFT_RIGHT,FOLLOW_SHIFT_RIGHT_in_root_statement23980); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SHIFT_RIGHT306_tree = (Object)adaptor.create(SHIFT_RIGHT306);
					adaptor.addChild(root_0, SHIFT_RIGHT306_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1403:3: ( data_manipulation_statements | data_definition_statements )
			int alt79=2;
			int LA79_0 = input.LA(1);
			if ( (LA79_0==CALL_SYM||LA79_0==DELETE_SYM||LA79_0==DO_SYM||LA79_0==HANDLER_SYM||LA79_0==INSERT||LA79_0==LOAD||LA79_0==REPLACE||LA79_0==SELECT||LA79_0==UPDATE) ) {
				alt79=1;
			}
			else if ( (LA79_0==ALTER||LA79_0==CREATE||LA79_0==DROP||LA79_0==RENAME||LA79_0==TRUNCATE) ) {
				alt79=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 79, 0, input);
				throw nvae;
			}

			switch (alt79) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1403:5: data_manipulation_statements
					{
					pushFollow(FOLLOW_data_manipulation_statements_in_root_statement23990);
					data_manipulation_statements307=data_manipulation_statements();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, data_manipulation_statements307.getTree());

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1403:36: data_definition_statements
					{
					pushFollow(FOLLOW_data_definition_statements_in_root_statement23994);
					data_definition_statements308=data_definition_statements();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, data_definition_statements308.getTree());

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1404:3: ( SEMI )?
			int alt80=2;
			int LA80_0 = input.LA(1);
			if ( (LA80_0==SEMI) ) {
				int LA80_1 = input.LA(2);
				if ( (synpred373_SQL()) ) {
					alt80=1;
				}
			}
			switch (alt80) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1404:4: SEMI
					{
					SEMI309=(Token)match(input,SEMI,FOLLOW_SEMI_in_root_statement24003); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SEMI309_tree = (Object)adaptor.create(SEMI309);
					adaptor.addChild(root_0, SEMI309_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "root_statement"


	public static class data_manipulation_statements_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "data_manipulation_statements"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1407:1: data_manipulation_statements : ( select_statement | delete_statements | insert_statements | update_statements | call_statement | do_statement | handler_statements | load_data_statement | load_xml_statement | replace_statement );
	public final SQLParser.data_manipulation_statements_return data_manipulation_statements() throws RecognitionException {
		SQLParser.data_manipulation_statements_return retval = new SQLParser.data_manipulation_statements_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope select_statement310 =null;
		ParserRuleReturnScope delete_statements311 =null;
		ParserRuleReturnScope insert_statements312 =null;
		ParserRuleReturnScope update_statements313 =null;
		ParserRuleReturnScope call_statement314 =null;
		ParserRuleReturnScope do_statement315 =null;
		ParserRuleReturnScope handler_statements316 =null;
		ParserRuleReturnScope load_data_statement317 =null;
		ParserRuleReturnScope load_xml_statement318 =null;
		ParserRuleReturnScope replace_statement319 =null;


		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1407:29: ( select_statement | delete_statements | insert_statements | update_statements | call_statement | do_statement | handler_statements | load_data_statement | load_xml_statement | replace_statement )
			int alt81=10;
			switch ( input.LA(1) ) {
			case SELECT:
				{
				alt81=1;
				}
				break;
			case DELETE_SYM:
				{
				alt81=2;
				}
				break;
			case INSERT:
				{
				alt81=3;
				}
				break;
			case UPDATE:
				{
				alt81=4;
				}
				break;
			case CALL_SYM:
				{
				alt81=5;
				}
				break;
			case DO_SYM:
				{
				alt81=6;
				}
				break;
			case HANDLER_SYM:
				{
				alt81=7;
				}
				break;
			case LOAD:
				{
				int LA81_8 = input.LA(2);
				if ( (LA81_8==DATA_SYM) ) {
					alt81=8;
				}
				else if ( (LA81_8==XML_SYM) ) {
					alt81=9;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 81, 8, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case REPLACE:
				{
				alt81=10;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 81, 0, input);
				throw nvae;
			}
			switch (alt81) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1408:5: select_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_select_statement_in_data_manipulation_statements24017);
					select_statement310=select_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement310.getTree());

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1409:5: delete_statements
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_delete_statements_in_data_manipulation_statements24023);
					delete_statements311=delete_statements();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, delete_statements311.getTree());

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1410:5: insert_statements
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_insert_statements_in_data_manipulation_statements24029);
					insert_statements312=insert_statements();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, insert_statements312.getTree());

					}
					break;
				case 4 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1411:5: update_statements
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_update_statements_in_data_manipulation_statements24035);
					update_statements313=update_statements();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, update_statements313.getTree());

					}
					break;
				case 5 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1413:5: call_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_call_statement_in_data_manipulation_statements24042);
					call_statement314=call_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, call_statement314.getTree());

					}
					break;
				case 6 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1414:5: do_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_do_statement_in_data_manipulation_statements24048);
					do_statement315=do_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, do_statement315.getTree());

					}
					break;
				case 7 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1415:5: handler_statements
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_handler_statements_in_data_manipulation_statements24054);
					handler_statements316=handler_statements();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, handler_statements316.getTree());

					}
					break;
				case 8 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1416:5: load_data_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_load_data_statement_in_data_manipulation_statements24060);
					load_data_statement317=load_data_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, load_data_statement317.getTree());

					}
					break;
				case 9 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1417:5: load_xml_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_load_xml_statement_in_data_manipulation_statements24066);
					load_xml_statement318=load_xml_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, load_xml_statement318.getTree());

					}
					break;
				case 10 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1418:5: replace_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_replace_statement_in_data_manipulation_statements24072);
					replace_statement319=replace_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, replace_statement319.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "data_manipulation_statements"


	public static class data_definition_statements_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "data_definition_statements"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1421:1: data_definition_statements : ( create_database_statement | alter_database_statements | drop_database_statement | create_event_statement | alter_event_statement | drop_event_statement | create_server_statement | alter_server_statement | drop_server_statement | create_table_statement | alter_table_statement | drop_table_statement | create_view_statement | alter_view_statement | rename_table_statement | drop_view_statement | truncate_table_statement | create_index_statement | drop_index_statement );
	public final SQLParser.data_definition_statements_return data_definition_statements() throws RecognitionException {
		SQLParser.data_definition_statements_return retval = new SQLParser.data_definition_statements_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope create_database_statement320 =null;
		ParserRuleReturnScope alter_database_statements321 =null;
		ParserRuleReturnScope drop_database_statement322 =null;
		ParserRuleReturnScope create_event_statement323 =null;
		ParserRuleReturnScope alter_event_statement324 =null;
		ParserRuleReturnScope drop_event_statement325 =null;
		ParserRuleReturnScope create_server_statement326 =null;
		ParserRuleReturnScope alter_server_statement327 =null;
		ParserRuleReturnScope drop_server_statement328 =null;
		ParserRuleReturnScope create_table_statement329 =null;
		ParserRuleReturnScope alter_table_statement330 =null;
		ParserRuleReturnScope drop_table_statement331 =null;
		ParserRuleReturnScope create_view_statement332 =null;
		ParserRuleReturnScope alter_view_statement333 =null;
		ParserRuleReturnScope rename_table_statement334 =null;
		ParserRuleReturnScope drop_view_statement335 =null;
		ParserRuleReturnScope truncate_table_statement336 =null;
		ParserRuleReturnScope create_index_statement337 =null;
		ParserRuleReturnScope drop_index_statement338 =null;


		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1421:27: ( create_database_statement | alter_database_statements | drop_database_statement | create_event_statement | alter_event_statement | drop_event_statement | create_server_statement | alter_server_statement | drop_server_statement | create_table_statement | alter_table_statement | drop_table_statement | create_view_statement | alter_view_statement | rename_table_statement | drop_view_statement | truncate_table_statement | create_index_statement | drop_index_statement )
			int alt82=19;
			switch ( input.LA(1) ) {
			case CREATE:
				{
				switch ( input.LA(2) ) {
				case DATABASE:
				case SCHEMA:
					{
					alt82=1;
					}
					break;
				case SERVER_SYM:
					{
					alt82=7;
					}
					break;
				case DEFINER:
					{
					int LA82_8 = input.LA(3);
					if ( (LA82_8==EQ_SYM) ) {
						int LA82_25 = input.LA(4);
						if ( (LA82_25==ID) ) {
							int LA82_27 = input.LA(5);
							if ( (LA82_27==EVENT_SYM) ) {
								alt82=4;
							}
							else if ( (LA82_27==SQL_SYM||LA82_27==VIEW_SYM) ) {
								alt82=13;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 82, 27, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}

						}
						else if ( (LA82_25==CURRENT_USER) ) {
							int LA82_28 = input.LA(5);
							if ( (LA82_28==EVENT_SYM) ) {
								alt82=4;
							}
							else if ( (LA82_28==SQL_SYM||LA82_28==VIEW_SYM) ) {
								alt82=13;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 82, 28, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}

						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 82, 25, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 82, 8, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case EVENT_SYM:
					{
					alt82=4;
					}
					break;
				case TABLE:
				case TEMPORARY:
					{
					alt82=10;
					}
					break;
				case ALGORITHM_SYM:
				case OR_SYM:
				case SQL_SYM:
				case VIEW_SYM:
					{
					alt82=13;
					}
					break;
				case FULLTEXT_SYM:
				case INDEX_SYM:
				case SPATIAL_SYM:
				case UNIQUE_SYM:
					{
					alt82=18;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 82, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case ALTER:
				{
				switch ( input.LA(2) ) {
				case DATABASE:
				case SCHEMA:
					{
					alt82=2;
					}
					break;
				case SERVER_SYM:
					{
					alt82=8;
					}
					break;
				case DEFINER:
					{
					int LA82_15 = input.LA(3);
					if ( (LA82_15==EQ_SYM) ) {
						int LA82_26 = input.LA(4);
						if ( (LA82_26==ID) ) {
							int LA82_29 = input.LA(5);
							if ( (LA82_29==EVENT_SYM) ) {
								alt82=5;
							}
							else if ( (LA82_29==SQL_SYM||LA82_29==VIEW_SYM) ) {
								alt82=14;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 82, 29, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}

						}
						else if ( (LA82_26==CURRENT_USER) ) {
							int LA82_30 = input.LA(5);
							if ( (LA82_30==EVENT_SYM) ) {
								alt82=5;
							}
							else if ( (LA82_30==SQL_SYM||LA82_30==VIEW_SYM) ) {
								alt82=14;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 82, 30, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}

						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 82, 26, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 82, 15, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case EVENT_SYM:
					{
					alt82=5;
					}
					break;
				case IGNORE_SYM:
				case TABLE:
					{
					alt82=11;
					}
					break;
				case ALGORITHM_SYM:
				case SQL_SYM:
				case VIEW_SYM:
					{
					alt82=14;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 82, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case DROP:
				{
				switch ( input.LA(2) ) {
				case DATABASE:
				case SCHEMA:
					{
					alt82=3;
					}
					break;
				case EVENT_SYM:
					{
					alt82=6;
					}
					break;
				case SERVER_SYM:
					{
					alt82=9;
					}
					break;
				case VIEW_SYM:
					{
					alt82=16;
					}
					break;
				case INDEX_SYM:
					{
					alt82=19;
					}
					break;
				case TABLE:
				case TEMPORARY:
					{
					alt82=12;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 82, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case RENAME:
				{
				alt82=15;
				}
				break;
			case TRUNCATE:
				{
				alt82=17;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 82, 0, input);
				throw nvae;
			}
			switch (alt82) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1422:5: create_database_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_create_database_statement_in_data_definition_statements24085);
					create_database_statement320=create_database_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_database_statement320.getTree());

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1423:5: alter_database_statements
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_alter_database_statements_in_data_definition_statements24091);
					alter_database_statements321=alter_database_statements();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_database_statements321.getTree());

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1424:5: drop_database_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_drop_database_statement_in_data_definition_statements24097);
					drop_database_statement322=drop_database_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, drop_database_statement322.getTree());

					}
					break;
				case 4 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1426:5: create_event_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_create_event_statement_in_data_definition_statements24106);
					create_event_statement323=create_event_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_event_statement323.getTree());

					}
					break;
				case 5 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1427:5: alter_event_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_alter_event_statement_in_data_definition_statements24112);
					alter_event_statement324=alter_event_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_event_statement324.getTree());

					}
					break;
				case 6 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1428:5: drop_event_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_drop_event_statement_in_data_definition_statements24118);
					drop_event_statement325=drop_event_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, drop_event_statement325.getTree());

					}
					break;
				case 7 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1441:5: create_server_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_create_server_statement_in_data_definition_statements24160);
					create_server_statement326=create_server_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_server_statement326.getTree());

					}
					break;
				case 8 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1442:5: alter_server_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_alter_server_statement_in_data_definition_statements24166);
					alter_server_statement327=alter_server_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_server_statement327.getTree());

					}
					break;
				case 9 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1443:5: drop_server_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_drop_server_statement_in_data_definition_statements24172);
					drop_server_statement328=drop_server_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, drop_server_statement328.getTree());

					}
					break;
				case 10 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1445:5: create_table_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_create_table_statement_in_data_definition_statements24181);
					create_table_statement329=create_table_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_table_statement329.getTree());

					}
					break;
				case 11 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1446:5: alter_table_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_alter_table_statement_in_data_definition_statements24187);
					alter_table_statement330=alter_table_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_table_statement330.getTree());

					}
					break;
				case 12 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1447:5: drop_table_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_drop_table_statement_in_data_definition_statements24193);
					drop_table_statement331=drop_table_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, drop_table_statement331.getTree());

					}
					break;
				case 13 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1449:5: create_view_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_create_view_statement_in_data_definition_statements24202);
					create_view_statement332=create_view_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_view_statement332.getTree());

					}
					break;
				case 14 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1450:5: alter_view_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_alter_view_statement_in_data_definition_statements24208);
					alter_view_statement333=alter_view_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_view_statement333.getTree());

					}
					break;
				case 15 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1451:5: rename_table_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_rename_table_statement_in_data_definition_statements24214);
					rename_table_statement334=rename_table_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, rename_table_statement334.getTree());

					}
					break;
				case 16 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1452:5: drop_view_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_drop_view_statement_in_data_definition_statements24220);
					drop_view_statement335=drop_view_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, drop_view_statement335.getTree());

					}
					break;
				case 17 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1453:5: truncate_table_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_truncate_table_statement_in_data_definition_statements24226);
					truncate_table_statement336=truncate_table_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, truncate_table_statement336.getTree());

					}
					break;
				case 18 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1455:5: create_index_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_create_index_statement_in_data_definition_statements24235);
					create_index_statement337=create_index_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_index_statement337.getTree());

					}
					break;
				case 19 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1456:5: drop_index_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_drop_index_statement_in_data_definition_statements24241);
					drop_index_statement338=drop_index_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, drop_index_statement338.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "data_definition_statements"


	public static class select_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "select_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1489:1: select_statement : select_expression ( ( UNION_SYM ( ALL )? ) ^ select_expression )* ;
	public final SQLParser.select_statement_return select_statement() throws RecognitionException {
		SQLParser.select_statement_return retval = new SQLParser.select_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token UNION_SYM340=null;
		Token ALL341=null;
		ParserRuleReturnScope select_expression339 =null;
		ParserRuleReturnScope select_expression342 =null;

		Object UNION_SYM340_tree=null;
		Object ALL341_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1489:17: ( select_expression ( ( UNION_SYM ( ALL )? ) ^ select_expression )* )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1490:9: select_expression ( ( UNION_SYM ( ALL )? ) ^ select_expression )*
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_select_expression_in_select_statement24267);
			select_expression339=select_expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, select_expression339.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1490:27: ( ( UNION_SYM ( ALL )? ) ^ select_expression )*
			loop84:
			while (true) {
				int alt84=2;
				int LA84_0 = input.LA(1);
				if ( (LA84_0==UNION_SYM) ) {
					alt84=1;
				}

				switch (alt84) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1490:29: ( UNION_SYM ( ALL )? ) ^ select_expression
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1490:29: ( UNION_SYM ( ALL )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1490:30: UNION_SYM ( ALL )?
					{
					UNION_SYM340=(Token)match(input,UNION_SYM,FOLLOW_UNION_SYM_in_select_statement24272); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					UNION_SYM340_tree = (Object)adaptor.create(UNION_SYM340);
					adaptor.addChild(root_0, UNION_SYM340_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1490:40: ( ALL )?
					int alt83=2;
					int LA83_0 = input.LA(1);
					if ( (LA83_0==ALL) ) {
						alt83=1;
					}
					switch (alt83) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1490:41: ALL
							{
							ALL341=(Token)match(input,ALL,FOLLOW_ALL_in_select_statement24275); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ALL341_tree = (Object)adaptor.create(ALL341);
							adaptor.addChild(root_0, ALL341_tree);
							}

							}
							break;

					}

					}

					pushFollow(FOLLOW_select_expression_in_select_statement24282);
					select_expression342=select_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, select_expression342.getTree());

					}
					break;

				default :
					break loop84;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "select_statement"


	public static class select_expression_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "select_expression"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1493:1: select_expression : select_part ( from_part ( partition_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? )? ( orderby_clause )? ( limit_clause )? ( ( FOR_SYM UPDATE ) | ( LOCK IN_SYM SHARE_SYM MODE_SYM ) )? ;
	public final SQLParser.select_expression_return select_expression() throws RecognitionException {
		SQLParser.select_expression_return retval = new SQLParser.select_expression_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token FOR_SYM351=null;
		Token UPDATE352=null;
		Token LOCK353=null;
		Token IN_SYM354=null;
		Token SHARE_SYM355=null;
		Token MODE_SYM356=null;
		ParserRuleReturnScope select_part343 =null;
		ParserRuleReturnScope from_part344 =null;
		ParserRuleReturnScope partition_clause345 =null;
		ParserRuleReturnScope where_clause346 =null;
		ParserRuleReturnScope groupby_clause347 =null;
		ParserRuleReturnScope having_clause348 =null;
		ParserRuleReturnScope orderby_clause349 =null;
		ParserRuleReturnScope limit_clause350 =null;

		Object FOR_SYM351_tree=null;
		Object UPDATE352_tree=null;
		Object LOCK353_tree=null;
		Object IN_SYM354_tree=null;
		Object SHARE_SYM355_tree=null;
		Object MODE_SYM356_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1493:18: ( select_part ( from_part ( partition_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? )? ( orderby_clause )? ( limit_clause )? ( ( FOR_SYM UPDATE ) | ( LOCK IN_SYM SHARE_SYM MODE_SYM ) )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1494:3: select_part ( from_part ( partition_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? )? ( orderby_clause )? ( limit_clause )? ( ( FOR_SYM UPDATE ) | ( LOCK IN_SYM SHARE_SYM MODE_SYM ) )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_select_part_in_select_expression24296);
			select_part343=select_part();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, select_part343.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1495:3: ( from_part ( partition_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? )?
			int alt89=2;
			int LA89_0 = input.LA(1);
			if ( (LA89_0==FROM) ) {
				alt89=1;
			}
			switch (alt89) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1496:5: from_part ( partition_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )?
					{
					pushFollow(FOLLOW_from_part_in_select_expression24307);
					from_part344=from_part();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, from_part344.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1497:5: ( partition_clause )?
					int alt85=2;
					int LA85_0 = input.LA(1);
					if ( (LA85_0==PARTITION_SYM) ) {
						alt85=1;
					}
					switch (alt85) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1497:7: partition_clause
							{
							pushFollow(FOLLOW_partition_clause_in_select_expression24315);
							partition_clause345=partition_clause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_clause345.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1498:5: ( where_clause )?
					int alt86=2;
					int LA86_0 = input.LA(1);
					if ( (LA86_0==WHERE) ) {
						alt86=1;
					}
					switch (alt86) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1498:7: where_clause
							{
							pushFollow(FOLLOW_where_clause_in_select_expression24326);
							where_clause346=where_clause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, where_clause346.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1499:5: ( groupby_clause )?
					int alt87=2;
					int LA87_0 = input.LA(1);
					if ( (LA87_0==GROUP_SYM) ) {
						alt87=1;
					}
					switch (alt87) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1499:7: groupby_clause
							{
							pushFollow(FOLLOW_groupby_clause_in_select_expression24338);
							groupby_clause347=groupby_clause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, groupby_clause347.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1500:5: ( having_clause )?
					int alt88=2;
					int LA88_0 = input.LA(1);
					if ( (LA88_0==HAVING) ) {
						alt88=1;
					}
					switch (alt88) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1500:7: having_clause
							{
							pushFollow(FOLLOW_having_clause_in_select_expression24349);
							having_clause348=having_clause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, having_clause348.getTree());

							}
							break;

					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1503:3: ( orderby_clause )?
			int alt90=2;
			int LA90_0 = input.LA(1);
			if ( (LA90_0==ORDER_SYM) ) {
				alt90=1;
			}
			switch (alt90) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1503:5: orderby_clause
					{
					pushFollow(FOLLOW_orderby_clause_in_select_expression24367);
					orderby_clause349=orderby_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, orderby_clause349.getTree());

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1504:3: ( limit_clause )?
			int alt91=2;
			int LA91_0 = input.LA(1);
			if ( (LA91_0==INTEGER_NUM||LA91_0==LIMIT) ) {
				alt91=1;
			}
			switch (alt91) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1504:5: limit_clause
					{
					pushFollow(FOLLOW_limit_clause_in_select_expression24376);
					limit_clause350=limit_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, limit_clause350.getTree());

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1505:3: ( ( FOR_SYM UPDATE ) | ( LOCK IN_SYM SHARE_SYM MODE_SYM ) )?
			int alt92=3;
			int LA92_0 = input.LA(1);
			if ( (LA92_0==FOR_SYM) ) {
				alt92=1;
			}
			else if ( (LA92_0==LOCK) ) {
				alt92=2;
			}
			switch (alt92) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1505:5: ( FOR_SYM UPDATE )
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1505:5: ( FOR_SYM UPDATE )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1505:7: FOR_SYM UPDATE
					{
					FOR_SYM351=(Token)match(input,FOR_SYM,FOLLOW_FOR_SYM_in_select_expression24387); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					FOR_SYM351_tree = (Object)adaptor.create(FOR_SYM351);
					adaptor.addChild(root_0, FOR_SYM351_tree);
					}

					UPDATE352=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_select_expression24389); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					UPDATE352_tree = (Object)adaptor.create(UPDATE352);
					adaptor.addChild(root_0, UPDATE352_tree);
					}

					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1505:25: ( LOCK IN_SYM SHARE_SYM MODE_SYM )
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1505:25: ( LOCK IN_SYM SHARE_SYM MODE_SYM )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1505:26: LOCK IN_SYM SHARE_SYM MODE_SYM
					{
					LOCK353=(Token)match(input,LOCK,FOLLOW_LOCK_in_select_expression24395); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LOCK353_tree = (Object)adaptor.create(LOCK353);
					adaptor.addChild(root_0, LOCK353_tree);
					}

					IN_SYM354=(Token)match(input,IN_SYM,FOLLOW_IN_SYM_in_select_expression24397); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IN_SYM354_tree = (Object)adaptor.create(IN_SYM354);
					adaptor.addChild(root_0, IN_SYM354_tree);
					}

					SHARE_SYM355=(Token)match(input,SHARE_SYM,FOLLOW_SHARE_SYM_in_select_expression24399); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SHARE_SYM355_tree = (Object)adaptor.create(SHARE_SYM355);
					adaptor.addChild(root_0, SHARE_SYM355_tree);
					}

					MODE_SYM356=(Token)match(input,MODE_SYM,FOLLOW_MODE_SYM_in_select_expression24401); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MODE_SYM356_tree = (Object)adaptor.create(MODE_SYM356);
					adaptor.addChild(root_0, MODE_SYM356_tree);
					}

					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "select_expression"


	public static class select_part_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "select_part"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1508:1: select_part : SELECT ^ ( ALL | DISTINCT | DISTINCTROW )? ( HIGH_PRIORITY )? ( STRAIGHT_JOIN )? ( SQL_SMALL_RESULT )? ( SQL_BIG_RESULT )? ( SQL_BUFFER_RESULT )? ( SQL_CACHE_SYM | SQL_NO_CACHE_SYM )? ( SQL_CALC_FOUND_ROWS )? select_list ;
	public final SQLParser.select_part_return select_part() throws RecognitionException {
		SQLParser.select_part_return retval = new SQLParser.select_part_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token SELECT357=null;
		Token set358=null;
		Token HIGH_PRIORITY359=null;
		Token STRAIGHT_JOIN360=null;
		Token SQL_SMALL_RESULT361=null;
		Token SQL_BIG_RESULT362=null;
		Token SQL_BUFFER_RESULT363=null;
		Token set364=null;
		Token SQL_CALC_FOUND_ROWS365=null;
		ParserRuleReturnScope select_list366 =null;

		Object SELECT357_tree=null;
		Object set358_tree=null;
		Object HIGH_PRIORITY359_tree=null;
		Object STRAIGHT_JOIN360_tree=null;
		Object SQL_SMALL_RESULT361_tree=null;
		Object SQL_BIG_RESULT362_tree=null;
		Object SQL_BUFFER_RESULT363_tree=null;
		Object set364_tree=null;
		Object SQL_CALC_FOUND_ROWS365_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1508:12: ( SELECT ^ ( ALL | DISTINCT | DISTINCTROW )? ( HIGH_PRIORITY )? ( STRAIGHT_JOIN )? ( SQL_SMALL_RESULT )? ( SQL_BIG_RESULT )? ( SQL_BUFFER_RESULT )? ( SQL_CACHE_SYM | SQL_NO_CACHE_SYM )? ( SQL_CALC_FOUND_ROWS )? select_list )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1509:3: SELECT ^ ( ALL | DISTINCT | DISTINCTROW )? ( HIGH_PRIORITY )? ( STRAIGHT_JOIN )? ( SQL_SMALL_RESULT )? ( SQL_BIG_RESULT )? ( SQL_BUFFER_RESULT )? ( SQL_CACHE_SYM | SQL_NO_CACHE_SYM )? ( SQL_CALC_FOUND_ROWS )? select_list
			{
			root_0 = (Object)adaptor.nil();


			SELECT357=(Token)match(input,SELECT,FOLLOW_SELECT_in_select_part24416); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			SELECT357_tree = (Object)adaptor.create(SELECT357);
			root_0 = (Object)adaptor.becomeRoot(SELECT357_tree, root_0);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1511:3: ( ALL | DISTINCT | DISTINCTROW )?
			int alt93=2;
			int LA93_0 = input.LA(1);
			if ( (LA93_0==ALL||(LA93_0 >= DISTINCT && LA93_0 <= DISTINCTROW)) ) {
				alt93=1;
			}
			switch (alt93) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
					{
					set358=input.LT(1);
					if ( input.LA(1)==ALL||(input.LA(1) >= DISTINCT && input.LA(1) <= DISTINCTROW) ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set358));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1512:3: ( HIGH_PRIORITY )?
			int alt94=2;
			int LA94_0 = input.LA(1);
			if ( (LA94_0==HIGH_PRIORITY) ) {
				alt94=1;
			}
			switch (alt94) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1512:4: HIGH_PRIORITY
					{
					HIGH_PRIORITY359=(Token)match(input,HIGH_PRIORITY,FOLLOW_HIGH_PRIORITY_in_select_part24444); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					HIGH_PRIORITY359_tree = (Object)adaptor.create(HIGH_PRIORITY359);
					adaptor.addChild(root_0, HIGH_PRIORITY359_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1513:3: ( STRAIGHT_JOIN )?
			int alt95=2;
			int LA95_0 = input.LA(1);
			if ( (LA95_0==STRAIGHT_JOIN) ) {
				alt95=1;
			}
			switch (alt95) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1513:4: STRAIGHT_JOIN
					{
					STRAIGHT_JOIN360=(Token)match(input,STRAIGHT_JOIN,FOLLOW_STRAIGHT_JOIN_in_select_part24451); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					STRAIGHT_JOIN360_tree = (Object)adaptor.create(STRAIGHT_JOIN360);
					adaptor.addChild(root_0, STRAIGHT_JOIN360_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1514:3: ( SQL_SMALL_RESULT )?
			int alt96=2;
			int LA96_0 = input.LA(1);
			if ( (LA96_0==SQL_SMALL_RESULT) ) {
				alt96=1;
			}
			switch (alt96) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1514:4: SQL_SMALL_RESULT
					{
					SQL_SMALL_RESULT361=(Token)match(input,SQL_SMALL_RESULT,FOLLOW_SQL_SMALL_RESULT_in_select_part24458); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SQL_SMALL_RESULT361_tree = (Object)adaptor.create(SQL_SMALL_RESULT361);
					adaptor.addChild(root_0, SQL_SMALL_RESULT361_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1514:23: ( SQL_BIG_RESULT )?
			int alt97=2;
			int LA97_0 = input.LA(1);
			if ( (LA97_0==SQL_BIG_RESULT) ) {
				alt97=1;
			}
			switch (alt97) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1514:24: SQL_BIG_RESULT
					{
					SQL_BIG_RESULT362=(Token)match(input,SQL_BIG_RESULT,FOLLOW_SQL_BIG_RESULT_in_select_part24463); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SQL_BIG_RESULT362_tree = (Object)adaptor.create(SQL_BIG_RESULT362);
					adaptor.addChild(root_0, SQL_BIG_RESULT362_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1514:41: ( SQL_BUFFER_RESULT )?
			int alt98=2;
			int LA98_0 = input.LA(1);
			if ( (LA98_0==SQL_BUFFER_RESULT) ) {
				alt98=1;
			}
			switch (alt98) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1514:42: SQL_BUFFER_RESULT
					{
					SQL_BUFFER_RESULT363=(Token)match(input,SQL_BUFFER_RESULT,FOLLOW_SQL_BUFFER_RESULT_in_select_part24468); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SQL_BUFFER_RESULT363_tree = (Object)adaptor.create(SQL_BUFFER_RESULT363);
					adaptor.addChild(root_0, SQL_BUFFER_RESULT363_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1515:3: ( SQL_CACHE_SYM | SQL_NO_CACHE_SYM )?
			int alt99=2;
			int LA99_0 = input.LA(1);
			if ( (LA99_0==SQL_CACHE_SYM||LA99_0==SQL_NO_CACHE_SYM) ) {
				alt99=1;
			}
			switch (alt99) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
					{
					set364=input.LT(1);
					if ( input.LA(1)==SQL_CACHE_SYM||input.LA(1)==SQL_NO_CACHE_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set364));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1515:39: ( SQL_CALC_FOUND_ROWS )?
			int alt100=2;
			int LA100_0 = input.LA(1);
			if ( (LA100_0==SQL_CALC_FOUND_ROWS) ) {
				alt100=1;
			}
			switch (alt100) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1515:40: SQL_CALC_FOUND_ROWS
					{
					SQL_CALC_FOUND_ROWS365=(Token)match(input,SQL_CALC_FOUND_ROWS,FOLLOW_SQL_CALC_FOUND_ROWS_in_select_part24484); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SQL_CALC_FOUND_ROWS365_tree = (Object)adaptor.create(SQL_CALC_FOUND_ROWS365);
					adaptor.addChild(root_0, SQL_CALC_FOUND_ROWS365_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_select_list_in_select_part24491);
			select_list366=select_list();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, select_list366.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "select_part"


	public static class from_part_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "from_part"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1520:1: from_part : FROM ^ table_references ;
	public final SQLParser.from_part_return from_part() throws RecognitionException {
		SQLParser.from_part_return retval = new SQLParser.from_part_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token FROM367=null;
		ParserRuleReturnScope table_references368 =null;

		Object FROM367_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1520:10: ( FROM ^ table_references )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1521:3: FROM ^ table_references
			{
			root_0 = (Object)adaptor.nil();


			FROM367=(Token)match(input,FROM,FOLLOW_FROM_in_from_part24501); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			FROM367_tree = (Object)adaptor.create(FROM367);
			root_0 = (Object)adaptor.becomeRoot(FROM367_tree, root_0);
			}

			pushFollow(FOLLOW_table_references_in_from_part24505);
			table_references368=table_references();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_references368.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "from_part"


	public static class where_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "where_clause"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1524:1: where_clause : WHERE ^ expression ;
	public final SQLParser.where_clause_return where_clause() throws RecognitionException {
		SQLParser.where_clause_return retval = new SQLParser.where_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token WHERE369=null;
		ParserRuleReturnScope expression370 =null;

		Object WHERE369_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1524:13: ( WHERE ^ expression )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1525:3: WHERE ^ expression
			{
			root_0 = (Object)adaptor.nil();


			WHERE369=(Token)match(input,WHERE,FOLLOW_WHERE_in_where_clause24520); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			WHERE369_tree = (Object)adaptor.create(WHERE369);
			root_0 = (Object)adaptor.becomeRoot(WHERE369_tree, root_0);
			}

			pushFollow(FOLLOW_expression_in_where_clause24524);
			expression370=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression370.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "where_clause"


	public static class groupby_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "groupby_clause"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1528:1: groupby_clause : GROUP_SYM BY_SYM ^ groupby_item ( COMMA ^ groupby_item )* ( WITH ROLLUP_SYM )? ;
	public final SQLParser.groupby_clause_return groupby_clause() throws RecognitionException {
		SQLParser.groupby_clause_return retval = new SQLParser.groupby_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token GROUP_SYM371=null;
		Token BY_SYM372=null;
		Token COMMA374=null;
		Token WITH376=null;
		Token ROLLUP_SYM377=null;
		ParserRuleReturnScope groupby_item373 =null;
		ParserRuleReturnScope groupby_item375 =null;

		Object GROUP_SYM371_tree=null;
		Object BY_SYM372_tree=null;
		Object COMMA374_tree=null;
		Object WITH376_tree=null;
		Object ROLLUP_SYM377_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1528:15: ( GROUP_SYM BY_SYM ^ groupby_item ( COMMA ^ groupby_item )* ( WITH ROLLUP_SYM )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1529:3: GROUP_SYM BY_SYM ^ groupby_item ( COMMA ^ groupby_item )* ( WITH ROLLUP_SYM )?
			{
			root_0 = (Object)adaptor.nil();


			GROUP_SYM371=(Token)match(input,GROUP_SYM,FOLLOW_GROUP_SYM_in_groupby_clause24534); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			GROUP_SYM371_tree = (Object)adaptor.create(GROUP_SYM371);
			adaptor.addChild(root_0, GROUP_SYM371_tree);
			}

			BY_SYM372=(Token)match(input,BY_SYM,FOLLOW_BY_SYM_in_groupby_clause24536); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			BY_SYM372_tree = (Object)adaptor.create(BY_SYM372);
			root_0 = (Object)adaptor.becomeRoot(BY_SYM372_tree, root_0);
			}

			pushFollow(FOLLOW_groupby_item_in_groupby_clause24540);
			groupby_item373=groupby_item();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, groupby_item373.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1529:35: ( COMMA ^ groupby_item )*
			loop101:
			while (true) {
				int alt101=2;
				int LA101_0 = input.LA(1);
				if ( (LA101_0==COMMA) ) {
					switch ( input.LA(2) ) {
					case INSERT:
						{
						int LA101_3 = input.LA(3);
						if ( (LA101_3==EOF||LA101_3==ASTERISK||LA101_3==BITAND||LA101_3==COMMA||LA101_3==DIVIDE||LA101_3==FOR_SYM||LA101_3==HAVING||LA101_3==INTEGER_NUM||LA101_3==LIMIT||LA101_3==LOCK||LA101_3==LPAREN||LA101_3==MINUS||LA101_3==MOD_SYM||LA101_3==ON||LA101_3==ORDER_SYM||LA101_3==PLUS||LA101_3==POWER_OP||LA101_3==RPAREN||LA101_3==SEMI||(LA101_3 >= SHIFT_LEFT && LA101_3 <= SHIFT_RIGHT)||LA101_3==UNION_SYM||LA101_3==VERTBAR||LA101_3==WITH) ) {
							alt101=1;
						}

						}
						break;
					case REPLACE:
						{
						int LA101_4 = input.LA(3);
						if ( (LA101_4==EOF||LA101_4==ASTERISK||LA101_4==BITAND||LA101_4==COMMA||LA101_4==DIVIDE||LA101_4==FOR_SYM||LA101_4==HAVING||LA101_4==INTEGER_NUM||LA101_4==LIMIT||LA101_4==LOCK||LA101_4==LPAREN||LA101_4==MINUS||LA101_4==MOD_SYM||LA101_4==ON||LA101_4==ORDER_SYM||LA101_4==PLUS||LA101_4==POWER_OP||LA101_4==RPAREN||LA101_4==SEMI||(LA101_4 >= SHIFT_LEFT && LA101_4 <= SHIFT_RIGHT)||LA101_4==UNION_SYM||LA101_4==VERTBAR||LA101_4==WITH) ) {
							alt101=1;
						}

						}
						break;
					case TRUNCATE:
						{
						int LA101_5 = input.LA(3);
						if ( (LA101_5==EOF||LA101_5==ASTERISK||LA101_5==BITAND||LA101_5==COMMA||LA101_5==DIVIDE||LA101_5==FOR_SYM||LA101_5==HAVING||LA101_5==INTEGER_NUM||LA101_5==LIMIT||LA101_5==LOCK||LA101_5==LPAREN||LA101_5==MINUS||LA101_5==MOD_SYM||LA101_5==ON||LA101_5==ORDER_SYM||LA101_5==PLUS||LA101_5==POWER_OP||LA101_5==RPAREN||LA101_5==SEMI||(LA101_5 >= SHIFT_LEFT && LA101_5 <= SHIFT_RIGHT)||LA101_5==UNION_SYM||LA101_5==VERTBAR||LA101_5==WITH) ) {
							alt101=1;
						}

						}
						break;
					case ABS:
					case ACOS:
					case ADDDATE:
					case ADDTIME:
					case AES_DECRYPT:
					case AES_ENCRYPT:
					case ASCII_SYM:
					case ASIN:
					case ATAN:
					case ATAN2:
					case AVG:
					case BENCHMARK:
					case BIN:
					case BINARY:
					case BIT_AND:
					case BIT_LENGTH:
					case BIT_NUM:
					case BIT_OR:
					case BIT_XOR:
					case CASE_SYM:
					case CAST_SYM:
					case CEIL:
					case CEILING:
					case CHAR:
					case CHARSET:
					case CHAR_LENGTH:
					case COERCIBILITY:
					case COLLATION:
					case CONCAT:
					case CONCAT_WS:
					case CONNECTION_ID:
					case CONV:
					case CONVERT_SYM:
					case CONVERT_TZ:
					case COS:
					case COT:
					case COUNT:
					case CRC32:
					case CURDATE:
					case CURRENT_USER:
					case CURTIME:
					case DATABASE:
					case DATEDIFF:
					case DATE_ADD:
					case DATE_FORMAT:
					case DATE_SUB:
					case DATE_SYM:
					case DAYNAME:
					case DAYOFMONTH:
					case DAYOFWEEK:
					case DAYOFYEAR:
					case DECODE:
					case DEFAULT:
					case DEGREES:
					case DES_DECRYPT:
					case DES_ENCRYPT:
					case ELT:
					case ENCODE:
					case ENCRYPT:
					case EXISTS:
					case EXP:
					case EXPORT_SET:
					case EXTRACT:
					case FALSE_SYM:
					case FIELD:
					case FIND_IN_SET:
					case FLOOR:
					case FORMAT:
					case FOUND_ROWS:
					case FROM_BASE64:
					case FROM_DAYS:
					case FROM_UNIXTIME:
					case GET_FORMAT:
					case GET_LOCK:
					case GROUP_CONCAT:
					case HEX:
					case HEX_DIGIT:
					case HOUR:
					case ID:
					case IF:
					case IFNULL:
					case INET_ATON:
					case INET_NTOA:
					case INSTR:
					case INTEGER_NUM:
					case INTERVAL_SYM:
					case IS_FREE_LOCK:
					case IS_USED_LOCK:
					case LAST_DAY:
					case LAST_INSERT_ID:
					case LEFT:
					case LENGTH:
					case LN:
					case LOAD_FILE:
					case LOCATE:
					case LOG:
					case LOG10:
					case LOG2:
					case LOWER:
					case LPAD:
					case LPAREN:
					case LTRIM:
					case MAKEDATE:
					case MAKETIME:
					case MAKE_SET:
					case MASTER_POS_WAIT:
					case MATCH:
					case MAX_SYM:
					case MD5:
					case MICROSECOND:
					case MID:
					case MINUS:
					case MINUTE:
					case MIN_SYM:
					case MOD:
					case MONTH:
					case MONTHNAME:
					case NAME_CONST:
					case NEGATION:
					case NOW:
					case NULL_SYM:
					case OCT:
					case OLD_PASSWORD:
					case ORD:
					case PASSWORD:
					case PERIOD_ADD:
					case PERIOD_DIFF:
					case PI:
					case PLUS:
					case POW:
					case POWER:
					case QUARTER:
					case QUOTE:
					case RADIANS:
					case RAND:
					case REAL_NUMBER:
					case RELEASE_LOCK:
					case REPEAT:
					case REVERSE:
					case RIGHT:
					case ROUND:
					case ROW_SYM:
					case RPAD:
					case RTRIM:
					case SCHEMA:
					case SECOND:
					case SEC_TO_TIME:
					case SESSION_USER:
					case SIGN:
					case SIN:
					case SLEEP:
					case SOUNDEX:
					case SPACE:
					case SQRT:
					case STD:
					case STDDEV:
					case STDDEV_POP:
					case STDDEV_SAMP:
					case STRCMP:
					case STR_TO_DATE:
					case SUBSTRING:
					case SUBSTRING_INDEX:
					case SUBTIME:
					case SUM:
					case SYSDATE:
					case SYSTEM_USER:
					case TAN:
					case TEXT_STRING:
					case TIMEDIFF:
					case TIMESTAMP:
					case TIMESTAMPADD:
					case TIMESTAMPDIFF:
					case TIME_FORMAT:
					case TIME_SYM:
					case TIME_TO_SEC:
					case TO_BASE64:
					case TO_DAYS:
					case TO_SECONDS:
					case TRIM:
					case TRUE_SYM:
					case UNHEX:
					case UNIX_TIMESTAMP:
					case UPPER:
					case USER:
					case USER_VAR:
					case UTC_DATE:
					case UTC_TIME:
					case UTC_TIMESTAMP:
					case UUID:
					case VALUES:
					case VARIANCE:
					case VAR_POP:
					case VAR_SAMP:
					case VERSION_SYM:
					case WEEK:
					case WEEKDAY:
					case WEEKOFYEAR:
					case WEIGHT_STRING:
					case YEAR:
					case YEARWEEK:
						{
						alt101=1;
						}
						break;
					}
				}

				switch (alt101) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1529:36: COMMA ^ groupby_item
					{
					COMMA374=(Token)match(input,COMMA,FOLLOW_COMMA_in_groupby_clause24543); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA374_tree = (Object)adaptor.create(COMMA374);
					root_0 = (Object)adaptor.becomeRoot(COMMA374_tree, root_0);
					}

					pushFollow(FOLLOW_groupby_item_in_groupby_clause24547);
					groupby_item375=groupby_item();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, groupby_item375.getTree());

					}
					break;

				default :
					break loop101;
				}
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1529:59: ( WITH ROLLUP_SYM )?
			int alt102=2;
			int LA102_0 = input.LA(1);
			if ( (LA102_0==WITH) ) {
				int LA102_1 = input.LA(2);
				if ( (LA102_1==ROLLUP_SYM) ) {
					alt102=1;
				}
			}
			switch (alt102) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1529:60: WITH ROLLUP_SYM
					{
					WITH376=(Token)match(input,WITH,FOLLOW_WITH_in_groupby_clause24552); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					WITH376_tree = (Object)adaptor.create(WITH376);
					adaptor.addChild(root_0, WITH376_tree);
					}

					ROLLUP_SYM377=(Token)match(input,ROLLUP_SYM,FOLLOW_ROLLUP_SYM_in_groupby_clause24554); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ROLLUP_SYM377_tree = (Object)adaptor.create(ROLLUP_SYM377);
					adaptor.addChild(root_0, ROLLUP_SYM377_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "groupby_clause"


	public static class groupby_item_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "groupby_item"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1531:1: groupby_item : ( column_spec | INTEGER_NUM | bit_expr );
	public final SQLParser.groupby_item_return groupby_item() throws RecognitionException {
		SQLParser.groupby_item_return retval = new SQLParser.groupby_item_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token INTEGER_NUM379=null;
		ParserRuleReturnScope column_spec378 =null;
		ParserRuleReturnScope bit_expr380 =null;

		Object INTEGER_NUM379_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1531:13: ( column_spec | INTEGER_NUM | bit_expr )
			int alt103=3;
			switch ( input.LA(1) ) {
			case ID:
				{
				int LA103_1 = input.LA(2);
				if ( (synpred425_SQL()) ) {
					alt103=1;
				}
				else if ( (true) ) {
					alt103=3;
				}

				}
				break;
			case INTEGER_NUM:
				{
				int LA103_2 = input.LA(2);
				if ( (synpred426_SQL()) ) {
					alt103=2;
				}
				else if ( (true) ) {
					alt103=3;
				}

				}
				break;
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case ASCII_SYM:
			case ASIN:
			case ATAN:
			case ATAN2:
			case AVG:
			case BENCHMARK:
			case BIN:
			case BINARY:
			case BIT_AND:
			case BIT_LENGTH:
			case BIT_NUM:
			case BIT_OR:
			case BIT_XOR:
			case CASE_SYM:
			case CAST_SYM:
			case CEIL:
			case CEILING:
			case CHAR:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_SYM:
			case CONVERT_TZ:
			case COS:
			case COT:
			case COUNT:
			case CRC32:
			case CURDATE:
			case CURRENT_USER:
			case CURTIME:
			case DATABASE:
			case DATEDIFF:
			case DATE_ADD:
			case DATE_FORMAT:
			case DATE_SUB:
			case DATE_SYM:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEFAULT:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case EXISTS:
			case EXP:
			case EXPORT_SET:
			case EXTRACT:
			case FALSE_SYM:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GET_FORMAT:
			case GET_LOCK:
			case GROUP_CONCAT:
			case HEX:
			case HEX_DIGIT:
			case HOUR:
			case IF:
			case IFNULL:
			case INET_ATON:
			case INET_NTOA:
			case INSERT:
			case INSTR:
			case INTERVAL_SYM:
			case IS_FREE_LOCK:
			case IS_USED_LOCK:
			case LAST_DAY:
			case LAST_INSERT_ID:
			case LEFT:
			case LENGTH:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LPAREN:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MATCH:
			case MAX_SYM:
			case MD5:
			case MICROSECOND:
			case MID:
			case MINUS:
			case MINUTE:
			case MIN_SYM:
			case MOD:
			case MONTH:
			case MONTHNAME:
			case NAME_CONST:
			case NEGATION:
			case NOW:
			case NULL_SYM:
			case OCT:
			case OLD_PASSWORD:
			case ORD:
			case PASSWORD:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case PLUS:
			case POW:
			case POWER:
			case QUARTER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case REAL_NUMBER:
			case RELEASE_LOCK:
			case REPEAT:
			case REPLACE:
			case REVERSE:
			case RIGHT:
			case ROUND:
			case ROW_SYM:
			case RPAD:
			case RTRIM:
			case SCHEMA:
			case SECOND:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STRCMP:
			case STR_TO_DATE:
			case SUBSTRING:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SUM:
			case SYSDATE:
			case SYSTEM_USER:
			case TAN:
			case TEXT_STRING:
			case TIMEDIFF:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_SYM:
			case TIME_TO_SEC:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case TRIM:
			case TRUE_SYM:
			case TRUNCATE:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPPER:
			case USER:
			case USER_VAR:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case UUID:
			case VALUES:
			case VARIANCE:
			case VAR_POP:
			case VAR_SAMP:
			case VERSION_SYM:
			case WEEK:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case YEAR:
			case YEARWEEK:
				{
				alt103=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 103, 0, input);
				throw nvae;
			}
			switch (alt103) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1531:15: column_spec
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_column_spec_in_groupby_item24563);
					column_spec378=column_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec378.getTree());

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1531:29: INTEGER_NUM
					{
					root_0 = (Object)adaptor.nil();


					INTEGER_NUM379=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_groupby_item24567); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM379_tree = (Object)adaptor.create(INTEGER_NUM379);
					adaptor.addChild(root_0, INTEGER_NUM379_tree);
					}

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1531:43: bit_expr
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_bit_expr_in_groupby_item24571);
					bit_expr380=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr380.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "groupby_item"


	public static class having_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "having_clause"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1533:1: having_clause : HAVING ^ expression ;
	public final SQLParser.having_clause_return having_clause() throws RecognitionException {
		SQLParser.having_clause_return retval = new SQLParser.having_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token HAVING381=null;
		ParserRuleReturnScope expression382 =null;

		Object HAVING381_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1533:14: ( HAVING ^ expression )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1534:3: HAVING ^ expression
			{
			root_0 = (Object)adaptor.nil();


			HAVING381=(Token)match(input,HAVING,FOLLOW_HAVING_in_having_clause24581); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			HAVING381_tree = (Object)adaptor.create(HAVING381);
			root_0 = (Object)adaptor.becomeRoot(HAVING381_tree, root_0);
			}

			pushFollow(FOLLOW_expression_in_having_clause24585);
			expression382=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression382.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "having_clause"


	public static class orderby_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "orderby_clause"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1537:1: orderby_clause : ORDER_SYM BY_SYM ^ orderby_item ( COMMA ^ orderby_item )* ;
	public final SQLParser.orderby_clause_return orderby_clause() throws RecognitionException {
		SQLParser.orderby_clause_return retval = new SQLParser.orderby_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token ORDER_SYM383=null;
		Token BY_SYM384=null;
		Token COMMA386=null;
		ParserRuleReturnScope orderby_item385 =null;
		ParserRuleReturnScope orderby_item387 =null;

		Object ORDER_SYM383_tree=null;
		Object BY_SYM384_tree=null;
		Object COMMA386_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1537:15: ( ORDER_SYM BY_SYM ^ orderby_item ( COMMA ^ orderby_item )* )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1538:3: ORDER_SYM BY_SYM ^ orderby_item ( COMMA ^ orderby_item )*
			{
			root_0 = (Object)adaptor.nil();


			ORDER_SYM383=(Token)match(input,ORDER_SYM,FOLLOW_ORDER_SYM_in_orderby_clause24595); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			ORDER_SYM383_tree = (Object)adaptor.create(ORDER_SYM383);
			adaptor.addChild(root_0, ORDER_SYM383_tree);
			}

			BY_SYM384=(Token)match(input,BY_SYM,FOLLOW_BY_SYM_in_orderby_clause24597); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			BY_SYM384_tree = (Object)adaptor.create(BY_SYM384);
			root_0 = (Object)adaptor.becomeRoot(BY_SYM384_tree, root_0);
			}

			pushFollow(FOLLOW_orderby_item_in_orderby_clause24601);
			orderby_item385=orderby_item();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, orderby_item385.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1538:35: ( COMMA ^ orderby_item )*
			loop104:
			while (true) {
				int alt104=2;
				int LA104_0 = input.LA(1);
				if ( (LA104_0==COMMA) ) {
					switch ( input.LA(2) ) {
					case INSERT:
						{
						int LA104_3 = input.LA(3);
						if ( (LA104_3==EOF||LA104_3==ASC||LA104_3==ASTERISK||LA104_3==BITAND||LA104_3==COMMA||LA104_3==DESC||LA104_3==DIVIDE||LA104_3==FOR_SYM||LA104_3==INTEGER_NUM||LA104_3==LIMIT||LA104_3==LOCK||LA104_3==LPAREN||LA104_3==MINUS||LA104_3==MOD_SYM||LA104_3==ON||LA104_3==PLUS||LA104_3==POWER_OP||LA104_3==RPAREN||LA104_3==SEMI||(LA104_3 >= SHIFT_LEFT && LA104_3 <= SHIFT_RIGHT)||LA104_3==UNION_SYM||LA104_3==VERTBAR||LA104_3==WITH) ) {
							alt104=1;
						}

						}
						break;
					case REPLACE:
						{
						int LA104_4 = input.LA(3);
						if ( (LA104_4==EOF||LA104_4==ASC||LA104_4==ASTERISK||LA104_4==BITAND||LA104_4==COMMA||LA104_4==DESC||LA104_4==DIVIDE||LA104_4==FOR_SYM||LA104_4==INTEGER_NUM||LA104_4==LIMIT||LA104_4==LOCK||LA104_4==LPAREN||LA104_4==MINUS||LA104_4==MOD_SYM||LA104_4==ON||LA104_4==PLUS||LA104_4==POWER_OP||LA104_4==RPAREN||LA104_4==SEMI||(LA104_4 >= SHIFT_LEFT && LA104_4 <= SHIFT_RIGHT)||LA104_4==UNION_SYM||LA104_4==VERTBAR||LA104_4==WITH) ) {
							alt104=1;
						}

						}
						break;
					case TRUNCATE:
						{
						int LA104_5 = input.LA(3);
						if ( (LA104_5==EOF||LA104_5==ASC||LA104_5==ASTERISK||LA104_5==BITAND||LA104_5==COMMA||LA104_5==DESC||LA104_5==DIVIDE||LA104_5==FOR_SYM||LA104_5==INTEGER_NUM||LA104_5==LIMIT||LA104_5==LOCK||LA104_5==LPAREN||LA104_5==MINUS||LA104_5==MOD_SYM||LA104_5==ON||LA104_5==PLUS||LA104_5==POWER_OP||LA104_5==RPAREN||LA104_5==SEMI||(LA104_5 >= SHIFT_LEFT && LA104_5 <= SHIFT_RIGHT)||LA104_5==UNION_SYM||LA104_5==VERTBAR||LA104_5==WITH) ) {
							alt104=1;
						}

						}
						break;
					case ABS:
					case ACOS:
					case ADDDATE:
					case ADDTIME:
					case AES_DECRYPT:
					case AES_ENCRYPT:
					case ASCII_SYM:
					case ASIN:
					case ATAN:
					case ATAN2:
					case AVG:
					case BENCHMARK:
					case BIN:
					case BINARY:
					case BIT_AND:
					case BIT_LENGTH:
					case BIT_NUM:
					case BIT_OR:
					case BIT_XOR:
					case CASE_SYM:
					case CAST_SYM:
					case CEIL:
					case CEILING:
					case CHAR:
					case CHARSET:
					case CHAR_LENGTH:
					case COERCIBILITY:
					case COLLATION:
					case CONCAT:
					case CONCAT_WS:
					case CONNECTION_ID:
					case CONV:
					case CONVERT_SYM:
					case CONVERT_TZ:
					case COS:
					case COT:
					case COUNT:
					case CRC32:
					case CURDATE:
					case CURRENT_USER:
					case CURTIME:
					case DATABASE:
					case DATEDIFF:
					case DATE_ADD:
					case DATE_FORMAT:
					case DATE_SUB:
					case DATE_SYM:
					case DAYNAME:
					case DAYOFMONTH:
					case DAYOFWEEK:
					case DAYOFYEAR:
					case DECODE:
					case DEFAULT:
					case DEGREES:
					case DES_DECRYPT:
					case DES_ENCRYPT:
					case ELT:
					case ENCODE:
					case ENCRYPT:
					case EXISTS:
					case EXP:
					case EXPORT_SET:
					case EXTRACT:
					case FALSE_SYM:
					case FIELD:
					case FIND_IN_SET:
					case FLOOR:
					case FORMAT:
					case FOUND_ROWS:
					case FROM_BASE64:
					case FROM_DAYS:
					case FROM_UNIXTIME:
					case GET_FORMAT:
					case GET_LOCK:
					case GROUP_CONCAT:
					case HEX:
					case HEX_DIGIT:
					case HOUR:
					case ID:
					case IF:
					case IFNULL:
					case INET_ATON:
					case INET_NTOA:
					case INSTR:
					case INTEGER_NUM:
					case INTERVAL_SYM:
					case IS_FREE_LOCK:
					case IS_USED_LOCK:
					case LAST_DAY:
					case LAST_INSERT_ID:
					case LEFT:
					case LENGTH:
					case LN:
					case LOAD_FILE:
					case LOCATE:
					case LOG:
					case LOG10:
					case LOG2:
					case LOWER:
					case LPAD:
					case LPAREN:
					case LTRIM:
					case MAKEDATE:
					case MAKETIME:
					case MAKE_SET:
					case MASTER_POS_WAIT:
					case MATCH:
					case MAX_SYM:
					case MD5:
					case MICROSECOND:
					case MID:
					case MINUS:
					case MINUTE:
					case MIN_SYM:
					case MOD:
					case MONTH:
					case MONTHNAME:
					case NAME_CONST:
					case NEGATION:
					case NOW:
					case NULL_SYM:
					case OCT:
					case OLD_PASSWORD:
					case ORD:
					case PASSWORD:
					case PERIOD_ADD:
					case PERIOD_DIFF:
					case PI:
					case PLUS:
					case POW:
					case POWER:
					case QUARTER:
					case QUOTE:
					case RADIANS:
					case RAND:
					case REAL_NUMBER:
					case RELEASE_LOCK:
					case REPEAT:
					case REVERSE:
					case RIGHT:
					case ROUND:
					case ROW_SYM:
					case RPAD:
					case RTRIM:
					case SCHEMA:
					case SECOND:
					case SEC_TO_TIME:
					case SESSION_USER:
					case SIGN:
					case SIN:
					case SLEEP:
					case SOUNDEX:
					case SPACE:
					case SQRT:
					case STD:
					case STDDEV:
					case STDDEV_POP:
					case STDDEV_SAMP:
					case STRCMP:
					case STR_TO_DATE:
					case SUBSTRING:
					case SUBSTRING_INDEX:
					case SUBTIME:
					case SUM:
					case SYSDATE:
					case SYSTEM_USER:
					case TAN:
					case TEXT_STRING:
					case TIMEDIFF:
					case TIMESTAMP:
					case TIMESTAMPADD:
					case TIMESTAMPDIFF:
					case TIME_FORMAT:
					case TIME_SYM:
					case TIME_TO_SEC:
					case TO_BASE64:
					case TO_DAYS:
					case TO_SECONDS:
					case TRIM:
					case TRUE_SYM:
					case UNHEX:
					case UNIX_TIMESTAMP:
					case UPPER:
					case USER:
					case USER_VAR:
					case UTC_DATE:
					case UTC_TIME:
					case UTC_TIMESTAMP:
					case UUID:
					case VALUES:
					case VARIANCE:
					case VAR_POP:
					case VAR_SAMP:
					case VERSION_SYM:
					case WEEK:
					case WEEKDAY:
					case WEEKOFYEAR:
					case WEIGHT_STRING:
					case YEAR:
					case YEARWEEK:
						{
						alt104=1;
						}
						break;
					}
				}

				switch (alt104) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1538:36: COMMA ^ orderby_item
					{
					COMMA386=(Token)match(input,COMMA,FOLLOW_COMMA_in_orderby_clause24604); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA386_tree = (Object)adaptor.create(COMMA386);
					root_0 = (Object)adaptor.becomeRoot(COMMA386_tree, root_0);
					}

					pushFollow(FOLLOW_orderby_item_in_orderby_clause24608);
					orderby_item387=orderby_item();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, orderby_item387.getTree());

					}
					break;

				default :
					break loop104;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "orderby_clause"


	public static class orderby_item_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "orderby_item"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1540:1: orderby_item : groupby_item ( ASC | DESC )? ;
	public final SQLParser.orderby_item_return orderby_item() throws RecognitionException {
		SQLParser.orderby_item_return retval = new SQLParser.orderby_item_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set389=null;
		ParserRuleReturnScope groupby_item388 =null;

		Object set389_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1540:13: ( groupby_item ( ASC | DESC )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1540:15: groupby_item ( ASC | DESC )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_groupby_item_in_orderby_item24617);
			groupby_item388=groupby_item();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, groupby_item388.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1540:28: ( ASC | DESC )?
			int alt105=2;
			int LA105_0 = input.LA(1);
			if ( (LA105_0==ASC||LA105_0==DESC) ) {
				alt105=1;
			}
			switch (alt105) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
					{
					set389=input.LT(1);
					if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set389));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "orderby_item"


	public static class limit_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "limit_clause"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1542:1: limit_clause : ( LIMIT ( ( offset COMMA )? row_count ) | ( row_count OFFSET_SYM offset ) );
	public final SQLParser.limit_clause_return limit_clause() throws RecognitionException {
		SQLParser.limit_clause_return retval = new SQLParser.limit_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LIMIT390=null;
		Token COMMA392=null;
		Token OFFSET_SYM395=null;
		ParserRuleReturnScope offset391 =null;
		ParserRuleReturnScope row_count393 =null;
		ParserRuleReturnScope row_count394 =null;
		ParserRuleReturnScope offset396 =null;

		Object LIMIT390_tree=null;
		Object COMMA392_tree=null;
		Object OFFSET_SYM395_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1542:13: ( LIMIT ( ( offset COMMA )? row_count ) | ( row_count OFFSET_SYM offset ) )
			int alt107=2;
			int LA107_0 = input.LA(1);
			if ( (LA107_0==LIMIT) ) {
				alt107=1;
			}
			else if ( (LA107_0==INTEGER_NUM) ) {
				alt107=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 107, 0, input);
				throw nvae;
			}

			switch (alt107) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1543:3: LIMIT ( ( offset COMMA )? row_count )
					{
					root_0 = (Object)adaptor.nil();


					LIMIT390=(Token)match(input,LIMIT,FOLLOW_LIMIT_in_limit_clause24636); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LIMIT390_tree = (Object)adaptor.create(LIMIT390);
					adaptor.addChild(root_0, LIMIT390_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1543:9: ( ( offset COMMA )? row_count )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1543:10: ( offset COMMA )? row_count
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1543:10: ( offset COMMA )?
					int alt106=2;
					int LA106_0 = input.LA(1);
					if ( (LA106_0==INTEGER_NUM) ) {
						int LA106_1 = input.LA(2);
						if ( (LA106_1==COMMA) ) {
							int LA106_2 = input.LA(3);
							if ( (LA106_2==INTEGER_NUM) ) {
								alt106=1;
							}
						}
					}
					switch (alt106) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1543:11: offset COMMA
							{
							pushFollow(FOLLOW_offset_in_limit_clause24640);
							offset391=offset();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, offset391.getTree());

							COMMA392=(Token)match(input,COMMA,FOLLOW_COMMA_in_limit_clause24642); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA392_tree = (Object)adaptor.create(COMMA392);
							adaptor.addChild(root_0, COMMA392_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_row_count_in_limit_clause24646);
					row_count393=row_count();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, row_count393.getTree());

					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1543:39: ( row_count OFFSET_SYM offset )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1543:39: ( row_count OFFSET_SYM offset )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1543:40: row_count OFFSET_SYM offset
					{
					pushFollow(FOLLOW_row_count_in_limit_clause24652);
					row_count394=row_count();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, row_count394.getTree());

					OFFSET_SYM395=(Token)match(input,OFFSET_SYM,FOLLOW_OFFSET_SYM_in_limit_clause24654); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					OFFSET_SYM395_tree = (Object)adaptor.create(OFFSET_SYM395);
					adaptor.addChild(root_0, OFFSET_SYM395_tree);
					}

					pushFollow(FOLLOW_offset_in_limit_clause24656);
					offset396=offset();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, offset396.getTree());

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "limit_clause"


	public static class offset_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "offset"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1545:1: offset : INTEGER_NUM ;
	public final SQLParser.offset_return offset() throws RecognitionException {
		SQLParser.offset_return retval = new SQLParser.offset_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token INTEGER_NUM397=null;

		Object INTEGER_NUM397_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1545:7: ( INTEGER_NUM )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1545:11: INTEGER_NUM
			{
			root_0 = (Object)adaptor.nil();


			INTEGER_NUM397=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_offset24666); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			INTEGER_NUM397_tree = (Object)adaptor.create(INTEGER_NUM397);
			adaptor.addChild(root_0, INTEGER_NUM397_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "offset"


	public static class row_count_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "row_count"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1546:1: row_count : INTEGER_NUM ;
	public final SQLParser.row_count_return row_count() throws RecognitionException {
		SQLParser.row_count_return retval = new SQLParser.row_count_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token INTEGER_NUM398=null;

		Object INTEGER_NUM398_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1546:10: ( INTEGER_NUM )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1546:13: INTEGER_NUM
			{
			root_0 = (Object)adaptor.nil();


			INTEGER_NUM398=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_row_count24674); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			INTEGER_NUM398_tree = (Object)adaptor.create(INTEGER_NUM398);
			adaptor.addChild(root_0, INTEGER_NUM398_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "row_count"


	public static class select_list_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "select_list"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1548:1: select_list : ( ( displayed_column ( COMMA ^ displayed_column )* ) | ASTERISK ) ;
	public final SQLParser.select_list_return select_list() throws RecognitionException {
		SQLParser.select_list_return retval = new SQLParser.select_list_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token COMMA400=null;
		Token ASTERISK402=null;
		ParserRuleReturnScope displayed_column399 =null;
		ParserRuleReturnScope displayed_column401 =null;

		Object COMMA400_tree=null;
		Object ASTERISK402_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1548:12: ( ( ( displayed_column ( COMMA ^ displayed_column )* ) | ASTERISK ) )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1549:3: ( ( displayed_column ( COMMA ^ displayed_column )* ) | ASTERISK )
			{
			root_0 = (Object)adaptor.nil();


			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1549:3: ( ( displayed_column ( COMMA ^ displayed_column )* ) | ASTERISK )
			int alt109=2;
			int LA109_0 = input.LA(1);
			if ( (LA109_0==ABS||LA109_0==ACOS||(LA109_0 >= ADDDATE && LA109_0 <= ADDTIME)||(LA109_0 >= AES_DECRYPT && LA109_0 <= AES_ENCRYPT)||LA109_0==ASCII_SYM||LA109_0==ASIN||(LA109_0 >= ATAN && LA109_0 <= ATAN2)||LA109_0==AVG||LA109_0==BENCHMARK||(LA109_0 >= BIN && LA109_0 <= BINARY)||(LA109_0 >= BIT_AND && LA109_0 <= BIT_OR)||LA109_0==BIT_XOR||(LA109_0 >= CASE_SYM && LA109_0 <= CEILING)||LA109_0==CHAR||(LA109_0 >= CHARSET && LA109_0 <= CHAR_LENGTH)||LA109_0==COERCIBILITY||LA109_0==COLLATION||(LA109_0 >= CONCAT && LA109_0 <= CONCAT_WS)||LA109_0==CONNECTION_ID||(LA109_0 >= CONV && LA109_0 <= CONVERT_TZ)||(LA109_0 >= COS && LA109_0 <= COUNT)||LA109_0==CRC32||LA109_0==CURDATE||LA109_0==CURRENT_USER||LA109_0==CURTIME||LA109_0==DATABASE||LA109_0==DATEDIFF||(LA109_0 >= DATE_ADD && LA109_0 <= DAYOFYEAR)||(LA109_0 >= DECODE && LA109_0 <= DEFAULT)||LA109_0==DEGREES||(LA109_0 >= DES_DECRYPT && LA109_0 <= DES_ENCRYPT)||LA109_0==ELT||(LA109_0 >= ENCODE && LA109_0 <= ENCRYPT)||LA109_0==EXISTS||LA109_0==EXP||LA109_0==EXPORT_SET||LA109_0==EXTRACT||LA109_0==FALSE_SYM||LA109_0==FIELD||LA109_0==FIND_IN_SET||LA109_0==FLOOR||LA109_0==FORMAT||LA109_0==FOUND_ROWS||(LA109_0 >= FROM_BASE64 && LA109_0 <= FROM_UNIXTIME)||(LA109_0 >= GET_FORMAT && LA109_0 <= GET_LOCK)||LA109_0==GROUP_CONCAT||(LA109_0 >= HEX && LA109_0 <= HEX_DIGIT)||LA109_0==HOUR||LA109_0==ID||(LA109_0 >= IF && LA109_0 <= IFNULL)||(LA109_0 >= INET_ATON && LA109_0 <= INET_NTOA)||LA109_0==INSERT||(LA109_0 >= INSTR && LA109_0 <= INTEGER_NUM)||LA109_0==INTERVAL_SYM||LA109_0==IS_FREE_LOCK||LA109_0==IS_USED_LOCK||(LA109_0 >= LAST_DAY && LA109_0 <= LAST_INSERT_ID)||(LA109_0 >= LEFT && LA109_0 <= LENGTH)||LA109_0==LN||LA109_0==LOAD_FILE||LA109_0==LOCATE||(LA109_0 >= LOG && LA109_0 <= LOG2)||LA109_0==LOWER||(LA109_0 >= LPAD && LA109_0 <= LPAREN)||LA109_0==LTRIM||(LA109_0 >= MAKEDATE && LA109_0 <= MAKE_SET)||LA109_0==MASTER_POS_WAIT||LA109_0==MATCH||LA109_0==MAX_SYM||LA109_0==MD5||(LA109_0 >= MICROSECOND && LA109_0 <= MID)||(LA109_0 >= MINUS && LA109_0 <= MINUTE)||LA109_0==MIN_SYM||LA109_0==MOD||(LA109_0 >= MONTH && LA109_0 <= MONTHNAME)||LA109_0==NAME_CONST||LA109_0==NEGATION||LA109_0==NOW||LA109_0==NULL_SYM||LA109_0==OCT||LA109_0==OLD_PASSWORD||LA109_0==ORD||(LA109_0 >= PASSWORD && LA109_0 <= PERIOD_DIFF)||LA109_0==PI||LA109_0==PLUS||(LA109_0 >= POW && LA109_0 <= POWER)||LA109_0==QUARTER||LA109_0==QUOTE||(LA109_0 >= RADIANS && LA109_0 <= RAND)||LA109_0==REAL_NUMBER||LA109_0==RELEASE_LOCK||LA109_0==REPEAT||LA109_0==REPLACE||LA109_0==REVERSE||LA109_0==RIGHT||LA109_0==ROUND||(LA109_0 >= ROW_SYM && LA109_0 <= RPAD)||LA109_0==RTRIM||(LA109_0 >= SCHEMA && LA109_0 <= SECOND)||LA109_0==SEC_TO_TIME||LA109_0==SESSION_USER||LA109_0==SIGN||LA109_0==SIN||LA109_0==SLEEP||LA109_0==SOUNDEX||LA109_0==SPACE||LA109_0==SQRT||(LA109_0 >= STD && LA109_0 <= STDDEV_SAMP)||LA109_0==STRCMP||LA109_0==STR_TO_DATE||(LA109_0 >= SUBSTRING && LA109_0 <= SUM)||(LA109_0 >= SYSDATE && LA109_0 <= SYSTEM_USER)||LA109_0==TAN||LA109_0==TEXT_STRING||(LA109_0 >= TIMEDIFF && LA109_0 <= TIME_TO_SEC)||(LA109_0 >= TO_BASE64 && LA109_0 <= TO_SECONDS)||(LA109_0 >= TRIM && LA109_0 <= TRUNCATE)||LA109_0==UNHEX||LA109_0==UNIX_TIMESTAMP||LA109_0==UPPER||(LA109_0 >= USER && LA109_0 <= USER_VAR)||(LA109_0 >= UTC_DATE && LA109_0 <= UTC_TIMESTAMP)||LA109_0==UUID||LA109_0==VALUES||LA109_0==VARIANCE||(LA109_0 >= VAR_POP && LA109_0 <= VERSION_SYM)||(LA109_0 >= WEEK && LA109_0 <= WEIGHT_STRING)||(LA109_0 >= YEAR && LA109_0 <= YEARWEEK)) ) {
				alt109=1;
			}
			else if ( (LA109_0==ASTERISK) ) {
				alt109=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 109, 0, input);
				throw nvae;
			}

			switch (alt109) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1549:5: ( displayed_column ( COMMA ^ displayed_column )* )
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1549:5: ( displayed_column ( COMMA ^ displayed_column )* )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1549:7: displayed_column ( COMMA ^ displayed_column )*
					{
					pushFollow(FOLLOW_displayed_column_in_select_list24688);
					displayed_column399=displayed_column();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, displayed_column399.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1549:24: ( COMMA ^ displayed_column )*
					loop108:
					while (true) {
						int alt108=2;
						int LA108_0 = input.LA(1);
						if ( (LA108_0==COMMA) ) {
							switch ( input.LA(2) ) {
							case INSERT:
								{
								int LA108_3 = input.LA(3);
								if ( (LA108_3==ID) ) {
									int LA108_7 = input.LA(4);
									if ( (LA108_7==EOF||LA108_7==COMMA||LA108_7==FOR_SYM||LA108_7==FROM||LA108_7==INTEGER_NUM||LA108_7==LIMIT||LA108_7==LOCK||LA108_7==ON||LA108_7==ORDER_SYM||LA108_7==RPAREN||LA108_7==SEMI||LA108_7==UNION_SYM||LA108_7==WITH) ) {
										alt108=1;
									}

								}
								else if ( (LA108_3==EOF||(LA108_3 >= ASTERISK && LA108_3 <= AS_SYM)||LA108_3==BITAND||LA108_3==COMMA||LA108_3==DIVIDE||LA108_3==FOR_SYM||LA108_3==FROM||LA108_3==INTEGER_NUM||LA108_3==LIMIT||LA108_3==LOCK||LA108_3==LPAREN||LA108_3==MINUS||LA108_3==MOD_SYM||LA108_3==ON||LA108_3==ORDER_SYM||LA108_3==PLUS||LA108_3==POWER_OP||LA108_3==RPAREN||LA108_3==SEMI||(LA108_3 >= SHIFT_LEFT && LA108_3 <= SHIFT_RIGHT)||LA108_3==UNION_SYM||LA108_3==VERTBAR||LA108_3==WITH) ) {
									alt108=1;
								}

								}
								break;
							case REPLACE:
								{
								int LA108_4 = input.LA(3);
								if ( (LA108_4==ID) ) {
									int LA108_8 = input.LA(4);
									if ( (LA108_8==EOF||LA108_8==COMMA||LA108_8==FOR_SYM||LA108_8==FROM||LA108_8==INTEGER_NUM||LA108_8==LIMIT||LA108_8==LOCK||LA108_8==ON||LA108_8==ORDER_SYM||LA108_8==RPAREN||LA108_8==SEMI||LA108_8==UNION_SYM||LA108_8==WITH) ) {
										alt108=1;
									}

								}
								else if ( (LA108_4==EOF||(LA108_4 >= ASTERISK && LA108_4 <= AS_SYM)||LA108_4==BITAND||LA108_4==COMMA||LA108_4==DIVIDE||LA108_4==FOR_SYM||LA108_4==FROM||LA108_4==INTEGER_NUM||LA108_4==LIMIT||LA108_4==LOCK||LA108_4==LPAREN||LA108_4==MINUS||LA108_4==MOD_SYM||LA108_4==ON||LA108_4==ORDER_SYM||LA108_4==PLUS||LA108_4==POWER_OP||LA108_4==RPAREN||LA108_4==SEMI||(LA108_4 >= SHIFT_LEFT && LA108_4 <= SHIFT_RIGHT)||LA108_4==UNION_SYM||LA108_4==VERTBAR||LA108_4==WITH) ) {
									alt108=1;
								}

								}
								break;
							case TRUNCATE:
								{
								int LA108_5 = input.LA(3);
								if ( (LA108_5==ID) ) {
									int LA108_9 = input.LA(4);
									if ( (synpred432_SQL()) ) {
										alt108=1;
									}

								}
								else if ( (LA108_5==EOF||(LA108_5 >= ASTERISK && LA108_5 <= AS_SYM)||LA108_5==BITAND||LA108_5==COMMA||LA108_5==DIVIDE||LA108_5==FOR_SYM||LA108_5==FROM||LA108_5==INTEGER_NUM||LA108_5==LIMIT||LA108_5==LOCK||LA108_5==LPAREN||LA108_5==MINUS||LA108_5==MOD_SYM||LA108_5==ON||LA108_5==ORDER_SYM||LA108_5==PLUS||LA108_5==POWER_OP||LA108_5==RPAREN||LA108_5==SEMI||(LA108_5 >= SHIFT_LEFT && LA108_5 <= SHIFT_RIGHT)||LA108_5==UNION_SYM||LA108_5==VERTBAR||LA108_5==WITH) ) {
									alt108=1;
								}

								}
								break;
							case ABS:
							case ACOS:
							case ADDDATE:
							case ADDTIME:
							case AES_DECRYPT:
							case AES_ENCRYPT:
							case ASCII_SYM:
							case ASIN:
							case ATAN:
							case ATAN2:
							case AVG:
							case BENCHMARK:
							case BIN:
							case BINARY:
							case BIT_AND:
							case BIT_LENGTH:
							case BIT_NUM:
							case BIT_OR:
							case BIT_XOR:
							case CASE_SYM:
							case CAST_SYM:
							case CEIL:
							case CEILING:
							case CHAR:
							case CHARSET:
							case CHAR_LENGTH:
							case COERCIBILITY:
							case COLLATION:
							case CONCAT:
							case CONCAT_WS:
							case CONNECTION_ID:
							case CONV:
							case CONVERT_SYM:
							case CONVERT_TZ:
							case COS:
							case COT:
							case COUNT:
							case CRC32:
							case CURDATE:
							case CURRENT_USER:
							case CURTIME:
							case DATABASE:
							case DATEDIFF:
							case DATE_ADD:
							case DATE_FORMAT:
							case DATE_SUB:
							case DATE_SYM:
							case DAYNAME:
							case DAYOFMONTH:
							case DAYOFWEEK:
							case DAYOFYEAR:
							case DECODE:
							case DEFAULT:
							case DEGREES:
							case DES_DECRYPT:
							case DES_ENCRYPT:
							case ELT:
							case ENCODE:
							case ENCRYPT:
							case EXISTS:
							case EXP:
							case EXPORT_SET:
							case EXTRACT:
							case FALSE_SYM:
							case FIELD:
							case FIND_IN_SET:
							case FLOOR:
							case FORMAT:
							case FOUND_ROWS:
							case FROM_BASE64:
							case FROM_DAYS:
							case FROM_UNIXTIME:
							case GET_FORMAT:
							case GET_LOCK:
							case GROUP_CONCAT:
							case HEX:
							case HEX_DIGIT:
							case HOUR:
							case ID:
							case IF:
							case IFNULL:
							case INET_ATON:
							case INET_NTOA:
							case INSTR:
							case INTEGER_NUM:
							case INTERVAL_SYM:
							case IS_FREE_LOCK:
							case IS_USED_LOCK:
							case LAST_DAY:
							case LAST_INSERT_ID:
							case LEFT:
							case LENGTH:
							case LN:
							case LOAD_FILE:
							case LOCATE:
							case LOG:
							case LOG10:
							case LOG2:
							case LOWER:
							case LPAD:
							case LPAREN:
							case LTRIM:
							case MAKEDATE:
							case MAKETIME:
							case MAKE_SET:
							case MASTER_POS_WAIT:
							case MATCH:
							case MAX_SYM:
							case MD5:
							case MICROSECOND:
							case MID:
							case MINUS:
							case MINUTE:
							case MIN_SYM:
							case MOD:
							case MONTH:
							case MONTHNAME:
							case NAME_CONST:
							case NEGATION:
							case NOW:
							case NULL_SYM:
							case OCT:
							case OLD_PASSWORD:
							case ORD:
							case PASSWORD:
							case PERIOD_ADD:
							case PERIOD_DIFF:
							case PI:
							case PLUS:
							case POW:
							case POWER:
							case QUARTER:
							case QUOTE:
							case RADIANS:
							case RAND:
							case REAL_NUMBER:
							case RELEASE_LOCK:
							case REPEAT:
							case REVERSE:
							case RIGHT:
							case ROUND:
							case ROW_SYM:
							case RPAD:
							case RTRIM:
							case SCHEMA:
							case SECOND:
							case SEC_TO_TIME:
							case SESSION_USER:
							case SIGN:
							case SIN:
							case SLEEP:
							case SOUNDEX:
							case SPACE:
							case SQRT:
							case STD:
							case STDDEV:
							case STDDEV_POP:
							case STDDEV_SAMP:
							case STRCMP:
							case STR_TO_DATE:
							case SUBSTRING:
							case SUBSTRING_INDEX:
							case SUBTIME:
							case SUM:
							case SYSDATE:
							case SYSTEM_USER:
							case TAN:
							case TEXT_STRING:
							case TIMEDIFF:
							case TIMESTAMP:
							case TIMESTAMPADD:
							case TIMESTAMPDIFF:
							case TIME_FORMAT:
							case TIME_SYM:
							case TIME_TO_SEC:
							case TO_BASE64:
							case TO_DAYS:
							case TO_SECONDS:
							case TRIM:
							case TRUE_SYM:
							case UNHEX:
							case UNIX_TIMESTAMP:
							case UPPER:
							case USER:
							case USER_VAR:
							case UTC_DATE:
							case UTC_TIME:
							case UTC_TIMESTAMP:
							case UUID:
							case VALUES:
							case VARIANCE:
							case VAR_POP:
							case VAR_SAMP:
							case VERSION_SYM:
							case WEEK:
							case WEEKDAY:
							case WEEKOFYEAR:
							case WEIGHT_STRING:
							case YEAR:
							case YEARWEEK:
								{
								alt108=1;
								}
								break;
							}
						}

						switch (alt108) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1549:26: COMMA ^ displayed_column
							{
							COMMA400=(Token)match(input,COMMA,FOLLOW_COMMA_in_select_list24692); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA400_tree = (Object)adaptor.create(COMMA400);
							root_0 = (Object)adaptor.becomeRoot(COMMA400_tree, root_0);
							}

							pushFollow(FOLLOW_displayed_column_in_select_list24696);
							displayed_column401=displayed_column();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, displayed_column401.getTree());

							}
							break;

						default :
							break loop108;
						}
					}

					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1550:5: ASTERISK
					{
					ASTERISK402=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_select_list24706); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ASTERISK402_tree = (Object)adaptor.create(ASTERISK402);
					adaptor.addChild(root_0, ASTERISK402_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "select_list"


	public static class column_list_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "column_list"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1553:1: column_list : LPAREN column_spec ( COMMA ^ column_spec )* RPAREN ;
	public final SQLParser.column_list_return column_list() throws RecognitionException {
		SQLParser.column_list_return retval = new SQLParser.column_list_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LPAREN403=null;
		Token COMMA405=null;
		Token RPAREN407=null;
		ParserRuleReturnScope column_spec404 =null;
		ParserRuleReturnScope column_spec406 =null;

		Object LPAREN403_tree=null;
		Object COMMA405_tree=null;
		Object RPAREN407_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1553:12: ( LPAREN column_spec ( COMMA ^ column_spec )* RPAREN )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1554:3: LPAREN column_spec ( COMMA ^ column_spec )* RPAREN
			{
			root_0 = (Object)adaptor.nil();


			LPAREN403=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_list24719); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN403_tree = (Object)adaptor.create(LPAREN403);
			adaptor.addChild(root_0, LPAREN403_tree);
			}

			pushFollow(FOLLOW_column_spec_in_column_list24722);
			column_spec404=column_spec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec404.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1554:23: ( COMMA ^ column_spec )*
			loop110:
			while (true) {
				int alt110=2;
				int LA110_0 = input.LA(1);
				if ( (LA110_0==COMMA) ) {
					alt110=1;
				}

				switch (alt110) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1554:24: COMMA ^ column_spec
					{
					COMMA405=(Token)match(input,COMMA,FOLLOW_COMMA_in_column_list24725); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA405_tree = (Object)adaptor.create(COMMA405);
					root_0 = (Object)adaptor.becomeRoot(COMMA405_tree, root_0);
					}

					pushFollow(FOLLOW_column_spec_in_column_list24729);
					column_spec406=column_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec406.getTree());

					}
					break;

				default :
					break loop110;
				}
			}

			RPAREN407=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_list24733); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN407_tree = (Object)adaptor.create(RPAREN407);
			adaptor.addChild(root_0, RPAREN407_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "column_list"


	public static class subquery_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "subquery"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1557:1: subquery : LPAREN ^ select_statement RPAREN ;
	public final SQLParser.subquery_return subquery() throws RecognitionException {
		SQLParser.subquery_return retval = new SQLParser.subquery_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LPAREN408=null;
		Token RPAREN410=null;
		ParserRuleReturnScope select_statement409 =null;

		Object LPAREN408_tree=null;
		Object RPAREN410_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1557:9: ( LPAREN ^ select_statement RPAREN )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1558:3: LPAREN ^ select_statement RPAREN
			{
			root_0 = (Object)adaptor.nil();


			LPAREN408=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_subquery24744); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN408_tree = (Object)adaptor.create(LPAREN408);
			root_0 = (Object)adaptor.becomeRoot(LPAREN408_tree, root_0);
			}

			pushFollow(FOLLOW_select_statement_in_subquery24748);
			select_statement409=select_statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement409.getTree());

			RPAREN410=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subquery24750); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN410_tree = (Object)adaptor.create(RPAREN410);
			adaptor.addChild(root_0, RPAREN410_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subquery"


	public static class table_spec_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "table_spec"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1561:1: table_spec : ( ( schema_name DOT )? table_name ) ^;
	public final SQLParser.table_spec_return table_spec() throws RecognitionException {
		SQLParser.table_spec_return retval = new SQLParser.table_spec_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token DOT412=null;
		ParserRuleReturnScope schema_name411 =null;
		ParserRuleReturnScope table_name413 =null;

		Object DOT412_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1561:11: ( ( ( schema_name DOT )? table_name ) ^)
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1562:3: ( ( schema_name DOT )? table_name ) ^
			{
			root_0 = (Object)adaptor.nil();


			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1562:3: ( ( schema_name DOT )? table_name )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1562:4: ( schema_name DOT )? table_name
			{
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1562:4: ( schema_name DOT )?
			int alt111=2;
			int LA111_0 = input.LA(1);
			if ( (LA111_0==ID) ) {
				int LA111_1 = input.LA(2);
				if ( (LA111_1==DOT) ) {
					int LA111_2 = input.LA(3);
					if ( (LA111_2==ID) ) {
						alt111=1;
					}
				}
			}
			switch (alt111) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1562:6: schema_name DOT
					{
					pushFollow(FOLLOW_schema_name_in_table_spec24764);
					schema_name411=schema_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, schema_name411.getTree());

					DOT412=(Token)match(input,DOT,FOLLOW_DOT_in_table_spec24766); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DOT412_tree = (Object)adaptor.create(DOT412);
					adaptor.addChild(root_0, DOT412_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_table_name_in_table_spec24771);
			table_name413=table_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name413.getTree());

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_spec"


	public static class displayed_column_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "displayed_column"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1565:1: displayed_column : ( ( table_spec DOT ASTERISK ) | ( column_spec ( alias )? ) | ( bit_expr ( alias )? ) );
	public final SQLParser.displayed_column_return displayed_column() throws RecognitionException {
		SQLParser.displayed_column_return retval = new SQLParser.displayed_column_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token DOT415=null;
		Token ASTERISK416=null;
		ParserRuleReturnScope table_spec414 =null;
		ParserRuleReturnScope column_spec417 =null;
		ParserRuleReturnScope alias418 =null;
		ParserRuleReturnScope bit_expr419 =null;
		ParserRuleReturnScope alias420 =null;

		Object DOT415_tree=null;
		Object ASTERISK416_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1565:18: ( ( table_spec DOT ASTERISK ) | ( column_spec ( alias )? ) | ( bit_expr ( alias )? ) )
			int alt114=3;
			int LA114_0 = input.LA(1);
			if ( (LA114_0==ID) ) {
				int LA114_1 = input.LA(2);
				if ( (LA114_1==DOT) ) {
					alt114=1;
				}
				else if ( (synpred438_SQL()) ) {
					alt114=2;
				}
				else if ( (true) ) {
					alt114=3;
				}

			}
			else if ( (LA114_0==ABS||LA114_0==ACOS||(LA114_0 >= ADDDATE && LA114_0 <= ADDTIME)||(LA114_0 >= AES_DECRYPT && LA114_0 <= AES_ENCRYPT)||LA114_0==ASCII_SYM||LA114_0==ASIN||(LA114_0 >= ATAN && LA114_0 <= ATAN2)||LA114_0==AVG||LA114_0==BENCHMARK||(LA114_0 >= BIN && LA114_0 <= BINARY)||(LA114_0 >= BIT_AND && LA114_0 <= BIT_OR)||LA114_0==BIT_XOR||(LA114_0 >= CASE_SYM && LA114_0 <= CEILING)||LA114_0==CHAR||(LA114_0 >= CHARSET && LA114_0 <= CHAR_LENGTH)||LA114_0==COERCIBILITY||LA114_0==COLLATION||(LA114_0 >= CONCAT && LA114_0 <= CONCAT_WS)||LA114_0==CONNECTION_ID||(LA114_0 >= CONV && LA114_0 <= CONVERT_TZ)||(LA114_0 >= COS && LA114_0 <= COUNT)||LA114_0==CRC32||LA114_0==CURDATE||LA114_0==CURRENT_USER||LA114_0==CURTIME||LA114_0==DATABASE||LA114_0==DATEDIFF||(LA114_0 >= DATE_ADD && LA114_0 <= DAYOFYEAR)||(LA114_0 >= DECODE && LA114_0 <= DEFAULT)||LA114_0==DEGREES||(LA114_0 >= DES_DECRYPT && LA114_0 <= DES_ENCRYPT)||LA114_0==ELT||(LA114_0 >= ENCODE && LA114_0 <= ENCRYPT)||LA114_0==EXISTS||LA114_0==EXP||LA114_0==EXPORT_SET||LA114_0==EXTRACT||LA114_0==FALSE_SYM||LA114_0==FIELD||LA114_0==FIND_IN_SET||LA114_0==FLOOR||LA114_0==FORMAT||LA114_0==FOUND_ROWS||(LA114_0 >= FROM_BASE64 && LA114_0 <= FROM_UNIXTIME)||(LA114_0 >= GET_FORMAT && LA114_0 <= GET_LOCK)||LA114_0==GROUP_CONCAT||(LA114_0 >= HEX && LA114_0 <= HEX_DIGIT)||LA114_0==HOUR||(LA114_0 >= IF && LA114_0 <= IFNULL)||(LA114_0 >= INET_ATON && LA114_0 <= INET_NTOA)||LA114_0==INSERT||(LA114_0 >= INSTR && LA114_0 <= INTEGER_NUM)||LA114_0==INTERVAL_SYM||LA114_0==IS_FREE_LOCK||LA114_0==IS_USED_LOCK||(LA114_0 >= LAST_DAY && LA114_0 <= LAST_INSERT_ID)||(LA114_0 >= LEFT && LA114_0 <= LENGTH)||LA114_0==LN||LA114_0==LOAD_FILE||LA114_0==LOCATE||(LA114_0 >= LOG && LA114_0 <= LOG2)||LA114_0==LOWER||(LA114_0 >= LPAD && LA114_0 <= LPAREN)||LA114_0==LTRIM||(LA114_0 >= MAKEDATE && LA114_0 <= MAKE_SET)||LA114_0==MASTER_POS_WAIT||LA114_0==MATCH||LA114_0==MAX_SYM||LA114_0==MD5||(LA114_0 >= MICROSECOND && LA114_0 <= MID)||(LA114_0 >= MINUS && LA114_0 <= MINUTE)||LA114_0==MIN_SYM||LA114_0==MOD||(LA114_0 >= MONTH && LA114_0 <= MONTHNAME)||LA114_0==NAME_CONST||LA114_0==NEGATION||LA114_0==NOW||LA114_0==NULL_SYM||LA114_0==OCT||LA114_0==OLD_PASSWORD||LA114_0==ORD||(LA114_0 >= PASSWORD && LA114_0 <= PERIOD_DIFF)||LA114_0==PI||LA114_0==PLUS||(LA114_0 >= POW && LA114_0 <= POWER)||LA114_0==QUARTER||LA114_0==QUOTE||(LA114_0 >= RADIANS && LA114_0 <= RAND)||LA114_0==REAL_NUMBER||LA114_0==RELEASE_LOCK||LA114_0==REPEAT||LA114_0==REPLACE||LA114_0==REVERSE||LA114_0==RIGHT||LA114_0==ROUND||(LA114_0 >= ROW_SYM && LA114_0 <= RPAD)||LA114_0==RTRIM||(LA114_0 >= SCHEMA && LA114_0 <= SECOND)||LA114_0==SEC_TO_TIME||LA114_0==SESSION_USER||LA114_0==SIGN||LA114_0==SIN||LA114_0==SLEEP||LA114_0==SOUNDEX||LA114_0==SPACE||LA114_0==SQRT||(LA114_0 >= STD && LA114_0 <= STDDEV_SAMP)||LA114_0==STRCMP||LA114_0==STR_TO_DATE||(LA114_0 >= SUBSTRING && LA114_0 <= SUM)||(LA114_0 >= SYSDATE && LA114_0 <= SYSTEM_USER)||LA114_0==TAN||LA114_0==TEXT_STRING||(LA114_0 >= TIMEDIFF && LA114_0 <= TIME_TO_SEC)||(LA114_0 >= TO_BASE64 && LA114_0 <= TO_SECONDS)||(LA114_0 >= TRIM && LA114_0 <= TRUNCATE)||LA114_0==UNHEX||LA114_0==UNIX_TIMESTAMP||LA114_0==UPPER||(LA114_0 >= USER && LA114_0 <= USER_VAR)||(LA114_0 >= UTC_DATE && LA114_0 <= UTC_TIMESTAMP)||LA114_0==UUID||LA114_0==VALUES||LA114_0==VARIANCE||(LA114_0 >= VAR_POP && LA114_0 <= VERSION_SYM)||(LA114_0 >= WEEK && LA114_0 <= WEIGHT_STRING)||(LA114_0 >= YEAR && LA114_0 <= YEARWEEK)) ) {
				alt114=3;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 114, 0, input);
				throw nvae;
			}

			switch (alt114) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1566:3: ( table_spec DOT ASTERISK )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1566:3: ( table_spec DOT ASTERISK )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1566:5: table_spec DOT ASTERISK
					{
					pushFollow(FOLLOW_table_spec_in_displayed_column24787);
					table_spec414=table_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_spec414.getTree());

					DOT415=(Token)match(input,DOT,FOLLOW_DOT_in_displayed_column24789); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DOT415_tree = (Object)adaptor.create(DOT415);
					adaptor.addChild(root_0, DOT415_tree);
					}

					ASTERISK416=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_displayed_column24791); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ASTERISK416_tree = (Object)adaptor.create(ASTERISK416);
					adaptor.addChild(root_0, ASTERISK416_tree);
					}

					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1568:3: ( column_spec ( alias )? )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1568:3: ( column_spec ( alias )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1568:5: column_spec ( alias )?
					{
					pushFollow(FOLLOW_column_spec_in_displayed_column24803);
					column_spec417=column_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec417.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1568:17: ( alias )?
					int alt112=2;
					int LA112_0 = input.LA(1);
					if ( (LA112_0==AS_SYM||LA112_0==ID) ) {
						alt112=1;
					}
					switch (alt112) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1568:18: alias
							{
							pushFollow(FOLLOW_alias_in_displayed_column24806);
							alias418=alias();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, alias418.getTree());

							}
							break;

					}

					}

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1570:3: ( bit_expr ( alias )? )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1570:3: ( bit_expr ( alias )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1570:5: bit_expr ( alias )?
					{
					pushFollow(FOLLOW_bit_expr_in_displayed_column24821);
					bit_expr419=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr419.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1570:14: ( alias )?
					int alt113=2;
					int LA113_0 = input.LA(1);
					if ( (LA113_0==AS_SYM||LA113_0==ID) ) {
						alt113=1;
					}
					switch (alt113) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1570:15: alias
							{
							pushFollow(FOLLOW_alias_in_displayed_column24824);
							alias420=alias();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, alias420.getTree());

							}
							break;

					}

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "displayed_column"


	public static class delete_statements_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "delete_statements"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1580:1: delete_statements : DELETE_SYM ( LOW_PRIORITY )? ( QUICK )? ( IGNORE_SYM )? ( delete_single_table_statement | delete_multiple_table_statement1 | delete_multiple_table_statement2 ) ;
	public final SQLParser.delete_statements_return delete_statements() throws RecognitionException {
		SQLParser.delete_statements_return retval = new SQLParser.delete_statements_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token DELETE_SYM421=null;
		Token LOW_PRIORITY422=null;
		Token QUICK423=null;
		Token IGNORE_SYM424=null;
		ParserRuleReturnScope delete_single_table_statement425 =null;
		ParserRuleReturnScope delete_multiple_table_statement1426 =null;
		ParserRuleReturnScope delete_multiple_table_statement2427 =null;

		Object DELETE_SYM421_tree=null;
		Object LOW_PRIORITY422_tree=null;
		Object QUICK423_tree=null;
		Object IGNORE_SYM424_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1580:18: ( DELETE_SYM ( LOW_PRIORITY )? ( QUICK )? ( IGNORE_SYM )? ( delete_single_table_statement | delete_multiple_table_statement1 | delete_multiple_table_statement2 ) )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1581:3: DELETE_SYM ( LOW_PRIORITY )? ( QUICK )? ( IGNORE_SYM )? ( delete_single_table_statement | delete_multiple_table_statement1 | delete_multiple_table_statement2 )
			{
			root_0 = (Object)adaptor.nil();


			DELETE_SYM421=(Token)match(input,DELETE_SYM,FOLLOW_DELETE_SYM_in_delete_statements24845); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DELETE_SYM421_tree = (Object)adaptor.create(DELETE_SYM421);
			adaptor.addChild(root_0, DELETE_SYM421_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1581:14: ( LOW_PRIORITY )?
			int alt115=2;
			int LA115_0 = input.LA(1);
			if ( (LA115_0==LOW_PRIORITY) ) {
				alt115=1;
			}
			switch (alt115) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1581:15: LOW_PRIORITY
					{
					LOW_PRIORITY422=(Token)match(input,LOW_PRIORITY,FOLLOW_LOW_PRIORITY_in_delete_statements24848); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LOW_PRIORITY422_tree = (Object)adaptor.create(LOW_PRIORITY422);
					adaptor.addChild(root_0, LOW_PRIORITY422_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1581:30: ( QUICK )?
			int alt116=2;
			int LA116_0 = input.LA(1);
			if ( (LA116_0==QUICK) ) {
				alt116=1;
			}
			switch (alt116) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1581:31: QUICK
					{
					QUICK423=(Token)match(input,QUICK,FOLLOW_QUICK_in_delete_statements24853); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					QUICK423_tree = (Object)adaptor.create(QUICK423);
					adaptor.addChild(root_0, QUICK423_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1581:39: ( IGNORE_SYM )?
			int alt117=2;
			int LA117_0 = input.LA(1);
			if ( (LA117_0==IGNORE_SYM) ) {
				alt117=1;
			}
			switch (alt117) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1581:40: IGNORE_SYM
					{
					IGNORE_SYM424=(Token)match(input,IGNORE_SYM,FOLLOW_IGNORE_SYM_in_delete_statements24858); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IGNORE_SYM424_tree = (Object)adaptor.create(IGNORE_SYM424);
					adaptor.addChild(root_0, IGNORE_SYM424_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1582:3: ( delete_single_table_statement | delete_multiple_table_statement1 | delete_multiple_table_statement2 )
			int alt118=3;
			int LA118_0 = input.LA(1);
			if ( (LA118_0==FROM) ) {
				int LA118_1 = input.LA(2);
				if ( (LA118_1==ID) ) {
					switch ( input.LA(3) ) {
					case DOT:
						{
						int LA118_4 = input.LA(4);
						if ( (LA118_4==ID) ) {
							switch ( input.LA(5) ) {
							case EOF:
							case INTEGER_NUM:
							case LIMIT:
							case ORDER_SYM:
							case PARTITION_SYM:
							case SEMI:
							case WHERE:
								{
								alt118=1;
								}
								break;
							case COMMA:
								{
								int LA118_6 = input.LA(6);
								if ( (LA118_6==ALTER||LA118_6==CALL_SYM||LA118_6==CREATE||LA118_6==DELETE_SYM||(LA118_6 >= DO_SYM && LA118_6 <= DROP)||LA118_6==HANDLER_SYM||LA118_6==INSERT||LA118_6==LOAD||LA118_6==RENAME||LA118_6==REPLACE||LA118_6==SELECT||LA118_6==SHIFT_LEFT||LA118_6==TRUNCATE||LA118_6==UPDATE) ) {
									alt118=1;
								}
								else if ( (LA118_6==ID) ) {
									alt118=3;
								}

								else {
									if (state.backtracking>0) {state.failed=true; return retval;}
									int nvaeMark = input.mark();
									try {
										for (int nvaeConsume = 0; nvaeConsume < 6 - 1; nvaeConsume++) {
											input.consume();
										}
										NoViableAltException nvae =
											new NoViableAltException("", 118, 6, input);
										throw nvae;
									} finally {
										input.rewind(nvaeMark);
									}
								}

								}
								break;
							case ALL_FIELDS:
							case USING_SYM:
								{
								alt118=3;
								}
								break;
							default:
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 118, 8, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 118, 4, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case EOF:
					case INTEGER_NUM:
					case LIMIT:
					case ORDER_SYM:
					case PARTITION_SYM:
					case SEMI:
					case WHERE:
						{
						alt118=1;
						}
						break;
					case COMMA:
						{
						int LA118_6 = input.LA(4);
						if ( (LA118_6==ALTER||LA118_6==CALL_SYM||LA118_6==CREATE||LA118_6==DELETE_SYM||(LA118_6 >= DO_SYM && LA118_6 <= DROP)||LA118_6==HANDLER_SYM||LA118_6==INSERT||LA118_6==LOAD||LA118_6==RENAME||LA118_6==REPLACE||LA118_6==SELECT||LA118_6==SHIFT_LEFT||LA118_6==TRUNCATE||LA118_6==UPDATE) ) {
							alt118=1;
						}
						else if ( (LA118_6==ID) ) {
							alt118=3;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 118, 6, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case ALL_FIELDS:
					case USING_SYM:
						{
						alt118=3;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 118, 3, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 118, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA118_0==ID) ) {
				alt118=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 118, 0, input);
				throw nvae;
			}

			switch (alt118) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1582:5: delete_single_table_statement
					{
					pushFollow(FOLLOW_delete_single_table_statement_in_delete_statements24866);
					delete_single_table_statement425=delete_single_table_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, delete_single_table_statement425.getTree());

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1582:37: delete_multiple_table_statement1
					{
					pushFollow(FOLLOW_delete_multiple_table_statement1_in_delete_statements24870);
					delete_multiple_table_statement1426=delete_multiple_table_statement1();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, delete_multiple_table_statement1426.getTree());

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1582:72: delete_multiple_table_statement2
					{
					pushFollow(FOLLOW_delete_multiple_table_statement2_in_delete_statements24874);
					delete_multiple_table_statement2427=delete_multiple_table_statement2();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, delete_multiple_table_statement2427.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "delete_statements"


	public static class delete_single_table_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "delete_single_table_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1584:1: delete_single_table_statement : FROM table_spec ( partition_clause )? ( where_clause )? ( orderby_clause )? ( limit_clause )? ;
	public final SQLParser.delete_single_table_statement_return delete_single_table_statement() throws RecognitionException {
		SQLParser.delete_single_table_statement_return retval = new SQLParser.delete_single_table_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token FROM428=null;
		ParserRuleReturnScope table_spec429 =null;
		ParserRuleReturnScope partition_clause430 =null;
		ParserRuleReturnScope where_clause431 =null;
		ParserRuleReturnScope orderby_clause432 =null;
		ParserRuleReturnScope limit_clause433 =null;

		Object FROM428_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1584:30: ( FROM table_spec ( partition_clause )? ( where_clause )? ( orderby_clause )? ( limit_clause )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1585:3: FROM table_spec ( partition_clause )? ( where_clause )? ( orderby_clause )? ( limit_clause )?
			{
			root_0 = (Object)adaptor.nil();


			FROM428=(Token)match(input,FROM,FOLLOW_FROM_in_delete_single_table_statement24885); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			FROM428_tree = (Object)adaptor.create(FROM428);
			adaptor.addChild(root_0, FROM428_tree);
			}

			pushFollow(FOLLOW_table_spec_in_delete_single_table_statement24887);
			table_spec429=table_spec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_spec429.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1586:3: ( partition_clause )?
			int alt119=2;
			int LA119_0 = input.LA(1);
			if ( (LA119_0==PARTITION_SYM) ) {
				alt119=1;
			}
			switch (alt119) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1586:4: partition_clause
					{
					pushFollow(FOLLOW_partition_clause_in_delete_single_table_statement24892);
					partition_clause430=partition_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_clause430.getTree());

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1587:3: ( where_clause )?
			int alt120=2;
			int LA120_0 = input.LA(1);
			if ( (LA120_0==WHERE) ) {
				alt120=1;
			}
			switch (alt120) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1587:4: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_delete_single_table_statement24899);
					where_clause431=where_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, where_clause431.getTree());

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1588:3: ( orderby_clause )?
			int alt121=2;
			int LA121_0 = input.LA(1);
			if ( (LA121_0==ORDER_SYM) ) {
				alt121=1;
			}
			switch (alt121) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1588:4: orderby_clause
					{
					pushFollow(FOLLOW_orderby_clause_in_delete_single_table_statement24906);
					orderby_clause432=orderby_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, orderby_clause432.getTree());

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1589:3: ( limit_clause )?
			int alt122=2;
			int LA122_0 = input.LA(1);
			if ( (LA122_0==INTEGER_NUM||LA122_0==LIMIT) ) {
				alt122=1;
			}
			switch (alt122) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1589:4: limit_clause
					{
					pushFollow(FOLLOW_limit_clause_in_delete_single_table_statement24913);
					limit_clause433=limit_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, limit_clause433.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "delete_single_table_statement"


	public static class delete_multiple_table_statement1_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "delete_multiple_table_statement1"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1591:1: delete_multiple_table_statement1 : table_spec ( ALL_FIELDS )? ( COMMA table_spec ( ALL_FIELDS )? )* FROM table_references ( where_clause )? ;
	public final SQLParser.delete_multiple_table_statement1_return delete_multiple_table_statement1() throws RecognitionException {
		SQLParser.delete_multiple_table_statement1_return retval = new SQLParser.delete_multiple_table_statement1_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token ALL_FIELDS435=null;
		Token COMMA436=null;
		Token ALL_FIELDS438=null;
		Token FROM439=null;
		ParserRuleReturnScope table_spec434 =null;
		ParserRuleReturnScope table_spec437 =null;
		ParserRuleReturnScope table_references440 =null;
		ParserRuleReturnScope where_clause441 =null;

		Object ALL_FIELDS435_tree=null;
		Object COMMA436_tree=null;
		Object ALL_FIELDS438_tree=null;
		Object FROM439_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1591:33: ( table_spec ( ALL_FIELDS )? ( COMMA table_spec ( ALL_FIELDS )? )* FROM table_references ( where_clause )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1592:3: table_spec ( ALL_FIELDS )? ( COMMA table_spec ( ALL_FIELDS )? )* FROM table_references ( where_clause )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_table_spec_in_delete_multiple_table_statement124924);
			table_spec434=table_spec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_spec434.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1592:14: ( ALL_FIELDS )?
			int alt123=2;
			int LA123_0 = input.LA(1);
			if ( (LA123_0==ALL_FIELDS) ) {
				alt123=1;
			}
			switch (alt123) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1592:15: ALL_FIELDS
					{
					ALL_FIELDS435=(Token)match(input,ALL_FIELDS,FOLLOW_ALL_FIELDS_in_delete_multiple_table_statement124927); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ALL_FIELDS435_tree = (Object)adaptor.create(ALL_FIELDS435);
					adaptor.addChild(root_0, ALL_FIELDS435_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1592:28: ( COMMA table_spec ( ALL_FIELDS )? )*
			loop125:
			while (true) {
				int alt125=2;
				int LA125_0 = input.LA(1);
				if ( (LA125_0==COMMA) ) {
					alt125=1;
				}

				switch (alt125) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1592:29: COMMA table_spec ( ALL_FIELDS )?
					{
					COMMA436=(Token)match(input,COMMA,FOLLOW_COMMA_in_delete_multiple_table_statement124932); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA436_tree = (Object)adaptor.create(COMMA436);
					adaptor.addChild(root_0, COMMA436_tree);
					}

					pushFollow(FOLLOW_table_spec_in_delete_multiple_table_statement124934);
					table_spec437=table_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_spec437.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1592:46: ( ALL_FIELDS )?
					int alt124=2;
					int LA124_0 = input.LA(1);
					if ( (LA124_0==ALL_FIELDS) ) {
						alt124=1;
					}
					switch (alt124) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1592:47: ALL_FIELDS
							{
							ALL_FIELDS438=(Token)match(input,ALL_FIELDS,FOLLOW_ALL_FIELDS_in_delete_multiple_table_statement124937); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ALL_FIELDS438_tree = (Object)adaptor.create(ALL_FIELDS438);
							adaptor.addChild(root_0, ALL_FIELDS438_tree);
							}

							}
							break;

					}

					}
					break;

				default :
					break loop125;
				}
			}

			FROM439=(Token)match(input,FROM,FOLLOW_FROM_in_delete_multiple_table_statement124945); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			FROM439_tree = (Object)adaptor.create(FROM439);
			adaptor.addChild(root_0, FROM439_tree);
			}

			pushFollow(FOLLOW_table_references_in_delete_multiple_table_statement124947);
			table_references440=table_references();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_references440.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1594:3: ( where_clause )?
			int alt126=2;
			int LA126_0 = input.LA(1);
			if ( (LA126_0==WHERE) ) {
				alt126=1;
			}
			switch (alt126) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1594:4: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_delete_multiple_table_statement124952);
					where_clause441=where_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, where_clause441.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "delete_multiple_table_statement1"


	public static class delete_multiple_table_statement2_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "delete_multiple_table_statement2"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1596:1: delete_multiple_table_statement2 : FROM table_spec ( ALL_FIELDS )? ( COMMA table_spec ( ALL_FIELDS )? )* USING_SYM table_references ( where_clause )? ;
	public final SQLParser.delete_multiple_table_statement2_return delete_multiple_table_statement2() throws RecognitionException {
		SQLParser.delete_multiple_table_statement2_return retval = new SQLParser.delete_multiple_table_statement2_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token FROM442=null;
		Token ALL_FIELDS444=null;
		Token COMMA445=null;
		Token ALL_FIELDS447=null;
		Token USING_SYM448=null;
		ParserRuleReturnScope table_spec443 =null;
		ParserRuleReturnScope table_spec446 =null;
		ParserRuleReturnScope table_references449 =null;
		ParserRuleReturnScope where_clause450 =null;

		Object FROM442_tree=null;
		Object ALL_FIELDS444_tree=null;
		Object COMMA445_tree=null;
		Object ALL_FIELDS447_tree=null;
		Object USING_SYM448_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1596:33: ( FROM table_spec ( ALL_FIELDS )? ( COMMA table_spec ( ALL_FIELDS )? )* USING_SYM table_references ( where_clause )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1597:3: FROM table_spec ( ALL_FIELDS )? ( COMMA table_spec ( ALL_FIELDS )? )* USING_SYM table_references ( where_clause )?
			{
			root_0 = (Object)adaptor.nil();


			FROM442=(Token)match(input,FROM,FOLLOW_FROM_in_delete_multiple_table_statement224963); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			FROM442_tree = (Object)adaptor.create(FROM442);
			adaptor.addChild(root_0, FROM442_tree);
			}

			pushFollow(FOLLOW_table_spec_in_delete_multiple_table_statement224965);
			table_spec443=table_spec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_spec443.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1597:19: ( ALL_FIELDS )?
			int alt127=2;
			int LA127_0 = input.LA(1);
			if ( (LA127_0==ALL_FIELDS) ) {
				alt127=1;
			}
			switch (alt127) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1597:20: ALL_FIELDS
					{
					ALL_FIELDS444=(Token)match(input,ALL_FIELDS,FOLLOW_ALL_FIELDS_in_delete_multiple_table_statement224968); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ALL_FIELDS444_tree = (Object)adaptor.create(ALL_FIELDS444);
					adaptor.addChild(root_0, ALL_FIELDS444_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1597:33: ( COMMA table_spec ( ALL_FIELDS )? )*
			loop129:
			while (true) {
				int alt129=2;
				int LA129_0 = input.LA(1);
				if ( (LA129_0==COMMA) ) {
					alt129=1;
				}

				switch (alt129) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1597:34: COMMA table_spec ( ALL_FIELDS )?
					{
					COMMA445=(Token)match(input,COMMA,FOLLOW_COMMA_in_delete_multiple_table_statement224973); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA445_tree = (Object)adaptor.create(COMMA445);
					adaptor.addChild(root_0, COMMA445_tree);
					}

					pushFollow(FOLLOW_table_spec_in_delete_multiple_table_statement224975);
					table_spec446=table_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_spec446.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1597:51: ( ALL_FIELDS )?
					int alt128=2;
					int LA128_0 = input.LA(1);
					if ( (LA128_0==ALL_FIELDS) ) {
						alt128=1;
					}
					switch (alt128) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1597:52: ALL_FIELDS
							{
							ALL_FIELDS447=(Token)match(input,ALL_FIELDS,FOLLOW_ALL_FIELDS_in_delete_multiple_table_statement224978); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ALL_FIELDS447_tree = (Object)adaptor.create(ALL_FIELDS447);
							adaptor.addChild(root_0, ALL_FIELDS447_tree);
							}

							}
							break;

					}

					}
					break;

				default :
					break loop129;
				}
			}

			USING_SYM448=(Token)match(input,USING_SYM,FOLLOW_USING_SYM_in_delete_multiple_table_statement224986); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			USING_SYM448_tree = (Object)adaptor.create(USING_SYM448);
			adaptor.addChild(root_0, USING_SYM448_tree);
			}

			pushFollow(FOLLOW_table_references_in_delete_multiple_table_statement224988);
			table_references449=table_references();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_references449.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1599:3: ( where_clause )?
			int alt130=2;
			int LA130_0 = input.LA(1);
			if ( (LA130_0==WHERE) ) {
				alt130=1;
			}
			switch (alt130) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1599:4: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_delete_multiple_table_statement224993);
					where_clause450=where_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, where_clause450.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "delete_multiple_table_statement2"


	public static class insert_statements_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "insert_statements"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1607:1: insert_statements : ( insert_statement1 | insert_statement2 | insert_statement3 );
	public final SQLParser.insert_statements_return insert_statements() throws RecognitionException {
		SQLParser.insert_statements_return retval = new SQLParser.insert_statements_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope insert_statement1451 =null;
		ParserRuleReturnScope insert_statement2452 =null;
		ParserRuleReturnScope insert_statement3453 =null;


		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1607:19: ( insert_statement1 | insert_statement2 | insert_statement3 )
			int alt131=3;
			alt131 = dfa131.predict(input);
			switch (alt131) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1608:3: insert_statement1
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_insert_statement1_in_insert_statements25011);
					insert_statement1451=insert_statement1();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, insert_statement1451.getTree());

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1608:23: insert_statement2
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_insert_statement2_in_insert_statements25015);
					insert_statement2452=insert_statement2();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, insert_statement2452.getTree());

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1608:43: insert_statement3
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_insert_statement3_in_insert_statements25019);
					insert_statement3453=insert_statement3();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, insert_statement3453.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "insert_statements"


	public static class insert_header_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "insert_header"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1611:1: insert_header : INSERT ( LOW_PRIORITY | HIGH_PRIORITY )? ( IGNORE_SYM )? ( INTO )? table_spec ( partition_clause )? ;
	public final SQLParser.insert_header_return insert_header() throws RecognitionException {
		SQLParser.insert_header_return retval = new SQLParser.insert_header_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token INSERT454=null;
		Token set455=null;
		Token IGNORE_SYM456=null;
		Token INTO457=null;
		ParserRuleReturnScope table_spec458 =null;
		ParserRuleReturnScope partition_clause459 =null;

		Object INSERT454_tree=null;
		Object set455_tree=null;
		Object IGNORE_SYM456_tree=null;
		Object INTO457_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1611:14: ( INSERT ( LOW_PRIORITY | HIGH_PRIORITY )? ( IGNORE_SYM )? ( INTO )? table_spec ( partition_clause )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1612:3: INSERT ( LOW_PRIORITY | HIGH_PRIORITY )? ( IGNORE_SYM )? ( INTO )? table_spec ( partition_clause )?
			{
			root_0 = (Object)adaptor.nil();


			INSERT454=(Token)match(input,INSERT,FOLLOW_INSERT_in_insert_header25029); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			INSERT454_tree = (Object)adaptor.create(INSERT454);
			adaptor.addChild(root_0, INSERT454_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1612:10: ( LOW_PRIORITY | HIGH_PRIORITY )?
			int alt132=2;
			int LA132_0 = input.LA(1);
			if ( (LA132_0==HIGH_PRIORITY||LA132_0==LOW_PRIORITY) ) {
				alt132=1;
			}
			switch (alt132) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
					{
					set455=input.LT(1);
					if ( input.LA(1)==HIGH_PRIORITY||input.LA(1)==LOW_PRIORITY ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set455));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1612:42: ( IGNORE_SYM )?
			int alt133=2;
			int LA133_0 = input.LA(1);
			if ( (LA133_0==IGNORE_SYM) ) {
				alt133=1;
			}
			switch (alt133) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1612:43: IGNORE_SYM
					{
					IGNORE_SYM456=(Token)match(input,IGNORE_SYM,FOLLOW_IGNORE_SYM_in_insert_header25041); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IGNORE_SYM456_tree = (Object)adaptor.create(IGNORE_SYM456);
					adaptor.addChild(root_0, IGNORE_SYM456_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1613:3: ( INTO )?
			int alt134=2;
			int LA134_0 = input.LA(1);
			if ( (LA134_0==INTO) ) {
				alt134=1;
			}
			switch (alt134) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1613:4: INTO
					{
					INTO457=(Token)match(input,INTO,FOLLOW_INTO_in_insert_header25048); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTO457_tree = (Object)adaptor.create(INTO457);
					adaptor.addChild(root_0, INTO457_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_table_spec_in_insert_header25052);
			table_spec458=table_spec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_spec458.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1614:3: ( partition_clause )?
			int alt135=2;
			int LA135_0 = input.LA(1);
			if ( (LA135_0==PARTITION_SYM) ) {
				alt135=1;
			}
			switch (alt135) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1614:4: partition_clause
					{
					pushFollow(FOLLOW_partition_clause_in_insert_header25058);
					partition_clause459=partition_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_clause459.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "insert_header"


	public static class insert_subfix_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "insert_subfix"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1617:1: insert_subfix : ON DUPLICATE_SYM KEY_SYM UPDATE column_spec EQ_SYM expression ( COMMA column_spec EQ_SYM expression )* ;
	public final SQLParser.insert_subfix_return insert_subfix() throws RecognitionException {
		SQLParser.insert_subfix_return retval = new SQLParser.insert_subfix_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token ON460=null;
		Token DUPLICATE_SYM461=null;
		Token KEY_SYM462=null;
		Token UPDATE463=null;
		Token EQ_SYM465=null;
		Token COMMA467=null;
		Token EQ_SYM469=null;
		ParserRuleReturnScope column_spec464 =null;
		ParserRuleReturnScope expression466 =null;
		ParserRuleReturnScope column_spec468 =null;
		ParserRuleReturnScope expression470 =null;

		Object ON460_tree=null;
		Object DUPLICATE_SYM461_tree=null;
		Object KEY_SYM462_tree=null;
		Object UPDATE463_tree=null;
		Object EQ_SYM465_tree=null;
		Object COMMA467_tree=null;
		Object EQ_SYM469_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1617:14: ( ON DUPLICATE_SYM KEY_SYM UPDATE column_spec EQ_SYM expression ( COMMA column_spec EQ_SYM expression )* )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1618:3: ON DUPLICATE_SYM KEY_SYM UPDATE column_spec EQ_SYM expression ( COMMA column_spec EQ_SYM expression )*
			{
			root_0 = (Object)adaptor.nil();


			ON460=(Token)match(input,ON,FOLLOW_ON_in_insert_subfix25070); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			ON460_tree = (Object)adaptor.create(ON460);
			adaptor.addChild(root_0, ON460_tree);
			}

			DUPLICATE_SYM461=(Token)match(input,DUPLICATE_SYM,FOLLOW_DUPLICATE_SYM_in_insert_subfix25072); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DUPLICATE_SYM461_tree = (Object)adaptor.create(DUPLICATE_SYM461);
			adaptor.addChild(root_0, DUPLICATE_SYM461_tree);
			}

			KEY_SYM462=(Token)match(input,KEY_SYM,FOLLOW_KEY_SYM_in_insert_subfix25074); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			KEY_SYM462_tree = (Object)adaptor.create(KEY_SYM462);
			adaptor.addChild(root_0, KEY_SYM462_tree);
			}

			UPDATE463=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_insert_subfix25076); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			UPDATE463_tree = (Object)adaptor.create(UPDATE463);
			adaptor.addChild(root_0, UPDATE463_tree);
			}

			pushFollow(FOLLOW_column_spec_in_insert_subfix25078);
			column_spec464=column_spec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec464.getTree());

			EQ_SYM465=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_insert_subfix25080); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			EQ_SYM465_tree = (Object)adaptor.create(EQ_SYM465);
			adaptor.addChild(root_0, EQ_SYM465_tree);
			}

			pushFollow(FOLLOW_expression_in_insert_subfix25082);
			expression466=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression466.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1618:65: ( COMMA column_spec EQ_SYM expression )*
			loop136:
			while (true) {
				int alt136=2;
				int LA136_0 = input.LA(1);
				if ( (LA136_0==COMMA) ) {
					int LA136_2 = input.LA(2);
					if ( (LA136_2==ID) ) {
						alt136=1;
					}

				}

				switch (alt136) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1618:66: COMMA column_spec EQ_SYM expression
					{
					COMMA467=(Token)match(input,COMMA,FOLLOW_COMMA_in_insert_subfix25085); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA467_tree = (Object)adaptor.create(COMMA467);
					adaptor.addChild(root_0, COMMA467_tree);
					}

					pushFollow(FOLLOW_column_spec_in_insert_subfix25087);
					column_spec468=column_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec468.getTree());

					EQ_SYM469=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_insert_subfix25089); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EQ_SYM469_tree = (Object)adaptor.create(EQ_SYM469);
					adaptor.addChild(root_0, EQ_SYM469_tree);
					}

					pushFollow(FOLLOW_expression_in_insert_subfix25091);
					expression470=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression470.getTree());

					}
					break;

				default :
					break loop136;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "insert_subfix"


	public static class insert_statement1_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "insert_statement1"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1621:1: insert_statement1 : insert_header ( column_list )? value_list_clause ( insert_subfix )? ;
	public final SQLParser.insert_statement1_return insert_statement1() throws RecognitionException {
		SQLParser.insert_statement1_return retval = new SQLParser.insert_statement1_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope insert_header471 =null;
		ParserRuleReturnScope column_list472 =null;
		ParserRuleReturnScope value_list_clause473 =null;
		ParserRuleReturnScope insert_subfix474 =null;


		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1621:18: ( insert_header ( column_list )? value_list_clause ( insert_subfix )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1622:3: insert_header ( column_list )? value_list_clause ( insert_subfix )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_insert_header_in_insert_statement125103);
			insert_header471=insert_header();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, insert_header471.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1623:3: ( column_list )?
			int alt137=2;
			int LA137_0 = input.LA(1);
			if ( (LA137_0==LPAREN) ) {
				alt137=1;
			}
			switch (alt137) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1623:4: column_list
					{
					pushFollow(FOLLOW_column_list_in_insert_statement125108);
					column_list472=column_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_list472.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_value_list_clause_in_insert_statement125115);
			value_list_clause473=value_list_clause();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, value_list_clause473.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1625:3: ( insert_subfix )?
			int alt138=2;
			int LA138_0 = input.LA(1);
			if ( (LA138_0==ON) ) {
				alt138=1;
			}
			switch (alt138) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1625:5: insert_subfix
					{
					pushFollow(FOLLOW_insert_subfix_in_insert_statement125121);
					insert_subfix474=insert_subfix();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, insert_subfix474.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "insert_statement1"


	public static class value_list_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "value_list_clause"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1627:1: value_list_clause : ( VALUES | VALUE_SYM ) column_value_list ( COMMA column_value_list )* ;
	public final SQLParser.value_list_clause_return value_list_clause() throws RecognitionException {
		SQLParser.value_list_clause_return retval = new SQLParser.value_list_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set475=null;
		Token COMMA477=null;
		ParserRuleReturnScope column_value_list476 =null;
		ParserRuleReturnScope column_value_list478 =null;

		Object set475_tree=null;
		Object COMMA477_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1627:18: ( ( VALUES | VALUE_SYM ) column_value_list ( COMMA column_value_list )* )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1627:21: ( VALUES | VALUE_SYM ) column_value_list ( COMMA column_value_list )*
			{
			root_0 = (Object)adaptor.nil();


			set475=input.LT(1);
			if ( (input.LA(1) >= VALUES && input.LA(1) <= VALUE_SYM) ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set475));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			pushFollow(FOLLOW_column_value_list_in_value_list_clause25140);
			column_value_list476=column_value_list();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, column_value_list476.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1627:60: ( COMMA column_value_list )*
			loop139:
			while (true) {
				int alt139=2;
				int LA139_0 = input.LA(1);
				if ( (LA139_0==COMMA) ) {
					int LA139_2 = input.LA(2);
					if ( (LA139_2==LPAREN) ) {
						alt139=1;
					}

				}

				switch (alt139) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1627:61: COMMA column_value_list
					{
					COMMA477=(Token)match(input,COMMA,FOLLOW_COMMA_in_value_list_clause25143); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA477_tree = (Object)adaptor.create(COMMA477);
					adaptor.addChild(root_0, COMMA477_tree);
					}

					pushFollow(FOLLOW_column_value_list_in_value_list_clause25145);
					column_value_list478=column_value_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_value_list478.getTree());

					}
					break;

				default :
					break loop139;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "value_list_clause"


	public static class column_value_list_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "column_value_list"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1628:1: column_value_list : LPAREN ( bit_expr | DEFAULT ) ( COMMA ( bit_expr | DEFAULT ) )* RPAREN ;
	public final SQLParser.column_value_list_return column_value_list() throws RecognitionException {
		SQLParser.column_value_list_return retval = new SQLParser.column_value_list_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LPAREN479=null;
		Token DEFAULT481=null;
		Token COMMA482=null;
		Token DEFAULT484=null;
		Token RPAREN485=null;
		ParserRuleReturnScope bit_expr480 =null;
		ParserRuleReturnScope bit_expr483 =null;

		Object LPAREN479_tree=null;
		Object DEFAULT481_tree=null;
		Object COMMA482_tree=null;
		Object DEFAULT484_tree=null;
		Object RPAREN485_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1628:18: ( LPAREN ( bit_expr | DEFAULT ) ( COMMA ( bit_expr | DEFAULT ) )* RPAREN )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1628:21: LPAREN ( bit_expr | DEFAULT ) ( COMMA ( bit_expr | DEFAULT ) )* RPAREN
			{
			root_0 = (Object)adaptor.nil();


			LPAREN479=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_value_list25154); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN479_tree = (Object)adaptor.create(LPAREN479);
			adaptor.addChild(root_0, LPAREN479_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1628:28: ( bit_expr | DEFAULT )
			int alt140=2;
			int LA140_0 = input.LA(1);
			if ( (LA140_0==ABS||LA140_0==ACOS||(LA140_0 >= ADDDATE && LA140_0 <= ADDTIME)||(LA140_0 >= AES_DECRYPT && LA140_0 <= AES_ENCRYPT)||LA140_0==ASCII_SYM||LA140_0==ASIN||(LA140_0 >= ATAN && LA140_0 <= ATAN2)||LA140_0==AVG||LA140_0==BENCHMARK||(LA140_0 >= BIN && LA140_0 <= BINARY)||(LA140_0 >= BIT_AND && LA140_0 <= BIT_OR)||LA140_0==BIT_XOR||(LA140_0 >= CASE_SYM && LA140_0 <= CEILING)||LA140_0==CHAR||(LA140_0 >= CHARSET && LA140_0 <= CHAR_LENGTH)||LA140_0==COERCIBILITY||LA140_0==COLLATION||(LA140_0 >= CONCAT && LA140_0 <= CONCAT_WS)||LA140_0==CONNECTION_ID||(LA140_0 >= CONV && LA140_0 <= CONVERT_TZ)||(LA140_0 >= COS && LA140_0 <= COUNT)||LA140_0==CRC32||LA140_0==CURDATE||LA140_0==CURRENT_USER||LA140_0==CURTIME||LA140_0==DATABASE||LA140_0==DATEDIFF||(LA140_0 >= DATE_ADD && LA140_0 <= DAYOFYEAR)||LA140_0==DECODE||LA140_0==DEGREES||(LA140_0 >= DES_DECRYPT && LA140_0 <= DES_ENCRYPT)||LA140_0==ELT||(LA140_0 >= ENCODE && LA140_0 <= ENCRYPT)||LA140_0==EXISTS||LA140_0==EXP||LA140_0==EXPORT_SET||LA140_0==EXTRACT||LA140_0==FALSE_SYM||LA140_0==FIELD||LA140_0==FIND_IN_SET||LA140_0==FLOOR||LA140_0==FORMAT||LA140_0==FOUND_ROWS||(LA140_0 >= FROM_BASE64 && LA140_0 <= FROM_UNIXTIME)||(LA140_0 >= GET_FORMAT && LA140_0 <= GET_LOCK)||LA140_0==GROUP_CONCAT||(LA140_0 >= HEX && LA140_0 <= HEX_DIGIT)||LA140_0==HOUR||LA140_0==ID||(LA140_0 >= IF && LA140_0 <= IFNULL)||(LA140_0 >= INET_ATON && LA140_0 <= INET_NTOA)||LA140_0==INSERT||(LA140_0 >= INSTR && LA140_0 <= INTEGER_NUM)||LA140_0==INTERVAL_SYM||LA140_0==IS_FREE_LOCK||LA140_0==IS_USED_LOCK||(LA140_0 >= LAST_DAY && LA140_0 <= LAST_INSERT_ID)||(LA140_0 >= LEFT && LA140_0 <= LENGTH)||LA140_0==LN||LA140_0==LOAD_FILE||LA140_0==LOCATE||(LA140_0 >= LOG && LA140_0 <= LOG2)||LA140_0==LOWER||(LA140_0 >= LPAD && LA140_0 <= LPAREN)||LA140_0==LTRIM||(LA140_0 >= MAKEDATE && LA140_0 <= MAKE_SET)||LA140_0==MASTER_POS_WAIT||LA140_0==MATCH||LA140_0==MAX_SYM||LA140_0==MD5||(LA140_0 >= MICROSECOND && LA140_0 <= MID)||(LA140_0 >= MINUS && LA140_0 <= MINUTE)||LA140_0==MIN_SYM||LA140_0==MOD||(LA140_0 >= MONTH && LA140_0 <= MONTHNAME)||LA140_0==NAME_CONST||LA140_0==NEGATION||LA140_0==NOW||LA140_0==NULL_SYM||LA140_0==OCT||LA140_0==OLD_PASSWORD||LA140_0==ORD||(LA140_0 >= PASSWORD && LA140_0 <= PERIOD_DIFF)||LA140_0==PI||LA140_0==PLUS||(LA140_0 >= POW && LA140_0 <= POWER)||LA140_0==QUARTER||LA140_0==QUOTE||(LA140_0 >= RADIANS && LA140_0 <= RAND)||LA140_0==REAL_NUMBER||LA140_0==RELEASE_LOCK||LA140_0==REPEAT||LA140_0==REPLACE||LA140_0==REVERSE||LA140_0==RIGHT||LA140_0==ROUND||(LA140_0 >= ROW_SYM && LA140_0 <= RPAD)||LA140_0==RTRIM||(LA140_0 >= SCHEMA && LA140_0 <= SECOND)||LA140_0==SEC_TO_TIME||LA140_0==SESSION_USER||LA140_0==SIGN||LA140_0==SIN||LA140_0==SLEEP||LA140_0==SOUNDEX||LA140_0==SPACE||LA140_0==SQRT||(LA140_0 >= STD && LA140_0 <= STDDEV_SAMP)||LA140_0==STRCMP||LA140_0==STR_TO_DATE||(LA140_0 >= SUBSTRING && LA140_0 <= SUM)||(LA140_0 >= SYSDATE && LA140_0 <= SYSTEM_USER)||LA140_0==TAN||LA140_0==TEXT_STRING||(LA140_0 >= TIMEDIFF && LA140_0 <= TIME_TO_SEC)||(LA140_0 >= TO_BASE64 && LA140_0 <= TO_SECONDS)||(LA140_0 >= TRIM && LA140_0 <= TRUNCATE)||LA140_0==UNHEX||LA140_0==UNIX_TIMESTAMP||LA140_0==UPPER||(LA140_0 >= USER && LA140_0 <= USER_VAR)||(LA140_0 >= UTC_DATE && LA140_0 <= UTC_TIMESTAMP)||LA140_0==UUID||LA140_0==VALUES||LA140_0==VARIANCE||(LA140_0 >= VAR_POP && LA140_0 <= VERSION_SYM)||(LA140_0 >= WEEK && LA140_0 <= WEIGHT_STRING)||(LA140_0 >= YEAR && LA140_0 <= YEARWEEK)) ) {
				alt140=1;
			}
			else if ( (LA140_0==DEFAULT) ) {
				int LA140_2 = input.LA(2);
				if ( (synpred469_SQL()) ) {
					alt140=1;
				}
				else if ( (true) ) {
					alt140=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 140, 0, input);
				throw nvae;
			}

			switch (alt140) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1628:29: bit_expr
					{
					pushFollow(FOLLOW_bit_expr_in_column_value_list25157);
					bit_expr480=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr480.getTree());

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1628:38: DEFAULT
					{
					DEFAULT481=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_value_list25159); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DEFAULT481_tree = (Object)adaptor.create(DEFAULT481);
					adaptor.addChild(root_0, DEFAULT481_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1628:47: ( COMMA ( bit_expr | DEFAULT ) )*
			loop142:
			while (true) {
				int alt142=2;
				int LA142_0 = input.LA(1);
				if ( (LA142_0==COMMA) ) {
					alt142=1;
				}

				switch (alt142) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1628:48: COMMA ( bit_expr | DEFAULT )
					{
					COMMA482=(Token)match(input,COMMA,FOLLOW_COMMA_in_column_value_list25163); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA482_tree = (Object)adaptor.create(COMMA482);
					adaptor.addChild(root_0, COMMA482_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1628:54: ( bit_expr | DEFAULT )
					int alt141=2;
					int LA141_0 = input.LA(1);
					if ( (LA141_0==ABS||LA141_0==ACOS||(LA141_0 >= ADDDATE && LA141_0 <= ADDTIME)||(LA141_0 >= AES_DECRYPT && LA141_0 <= AES_ENCRYPT)||LA141_0==ASCII_SYM||LA141_0==ASIN||(LA141_0 >= ATAN && LA141_0 <= ATAN2)||LA141_0==AVG||LA141_0==BENCHMARK||(LA141_0 >= BIN && LA141_0 <= BINARY)||(LA141_0 >= BIT_AND && LA141_0 <= BIT_OR)||LA141_0==BIT_XOR||(LA141_0 >= CASE_SYM && LA141_0 <= CEILING)||LA141_0==CHAR||(LA141_0 >= CHARSET && LA141_0 <= CHAR_LENGTH)||LA141_0==COERCIBILITY||LA141_0==COLLATION||(LA141_0 >= CONCAT && LA141_0 <= CONCAT_WS)||LA141_0==CONNECTION_ID||(LA141_0 >= CONV && LA141_0 <= CONVERT_TZ)||(LA141_0 >= COS && LA141_0 <= COUNT)||LA141_0==CRC32||LA141_0==CURDATE||LA141_0==CURRENT_USER||LA141_0==CURTIME||LA141_0==DATABASE||LA141_0==DATEDIFF||(LA141_0 >= DATE_ADD && LA141_0 <= DAYOFYEAR)||LA141_0==DECODE||LA141_0==DEGREES||(LA141_0 >= DES_DECRYPT && LA141_0 <= DES_ENCRYPT)||LA141_0==ELT||(LA141_0 >= ENCODE && LA141_0 <= ENCRYPT)||LA141_0==EXISTS||LA141_0==EXP||LA141_0==EXPORT_SET||LA141_0==EXTRACT||LA141_0==FALSE_SYM||LA141_0==FIELD||LA141_0==FIND_IN_SET||LA141_0==FLOOR||LA141_0==FORMAT||LA141_0==FOUND_ROWS||(LA141_0 >= FROM_BASE64 && LA141_0 <= FROM_UNIXTIME)||(LA141_0 >= GET_FORMAT && LA141_0 <= GET_LOCK)||LA141_0==GROUP_CONCAT||(LA141_0 >= HEX && LA141_0 <= HEX_DIGIT)||LA141_0==HOUR||LA141_0==ID||(LA141_0 >= IF && LA141_0 <= IFNULL)||(LA141_0 >= INET_ATON && LA141_0 <= INET_NTOA)||LA141_0==INSERT||(LA141_0 >= INSTR && LA141_0 <= INTEGER_NUM)||LA141_0==INTERVAL_SYM||LA141_0==IS_FREE_LOCK||LA141_0==IS_USED_LOCK||(LA141_0 >= LAST_DAY && LA141_0 <= LAST_INSERT_ID)||(LA141_0 >= LEFT && LA141_0 <= LENGTH)||LA141_0==LN||LA141_0==LOAD_FILE||LA141_0==LOCATE||(LA141_0 >= LOG && LA141_0 <= LOG2)||LA141_0==LOWER||(LA141_0 >= LPAD && LA141_0 <= LPAREN)||LA141_0==LTRIM||(LA141_0 >= MAKEDATE && LA141_0 <= MAKE_SET)||LA141_0==MASTER_POS_WAIT||LA141_0==MATCH||LA141_0==MAX_SYM||LA141_0==MD5||(LA141_0 >= MICROSECOND && LA141_0 <= MID)||(LA141_0 >= MINUS && LA141_0 <= MINUTE)||LA141_0==MIN_SYM||LA141_0==MOD||(LA141_0 >= MONTH && LA141_0 <= MONTHNAME)||LA141_0==NAME_CONST||LA141_0==NEGATION||LA141_0==NOW||LA141_0==NULL_SYM||LA141_0==OCT||LA141_0==OLD_PASSWORD||LA141_0==ORD||(LA141_0 >= PASSWORD && LA141_0 <= PERIOD_DIFF)||LA141_0==PI||LA141_0==PLUS||(LA141_0 >= POW && LA141_0 <= POWER)||LA141_0==QUARTER||LA141_0==QUOTE||(LA141_0 >= RADIANS && LA141_0 <= RAND)||LA141_0==REAL_NUMBER||LA141_0==RELEASE_LOCK||LA141_0==REPEAT||LA141_0==REPLACE||LA141_0==REVERSE||LA141_0==RIGHT||LA141_0==ROUND||(LA141_0 >= ROW_SYM && LA141_0 <= RPAD)||LA141_0==RTRIM||(LA141_0 >= SCHEMA && LA141_0 <= SECOND)||LA141_0==SEC_TO_TIME||LA141_0==SESSION_USER||LA141_0==SIGN||LA141_0==SIN||LA141_0==SLEEP||LA141_0==SOUNDEX||LA141_0==SPACE||LA141_0==SQRT||(LA141_0 >= STD && LA141_0 <= STDDEV_SAMP)||LA141_0==STRCMP||LA141_0==STR_TO_DATE||(LA141_0 >= SUBSTRING && LA141_0 <= SUM)||(LA141_0 >= SYSDATE && LA141_0 <= SYSTEM_USER)||LA141_0==TAN||LA141_0==TEXT_STRING||(LA141_0 >= TIMEDIFF && LA141_0 <= TIME_TO_SEC)||(LA141_0 >= TO_BASE64 && LA141_0 <= TO_SECONDS)||(LA141_0 >= TRIM && LA141_0 <= TRUNCATE)||LA141_0==UNHEX||LA141_0==UNIX_TIMESTAMP||LA141_0==UPPER||(LA141_0 >= USER && LA141_0 <= USER_VAR)||(LA141_0 >= UTC_DATE && LA141_0 <= UTC_TIMESTAMP)||LA141_0==UUID||LA141_0==VALUES||LA141_0==VARIANCE||(LA141_0 >= VAR_POP && LA141_0 <= VERSION_SYM)||(LA141_0 >= WEEK && LA141_0 <= WEIGHT_STRING)||(LA141_0 >= YEAR && LA141_0 <= YEARWEEK)) ) {
						alt141=1;
					}
					else if ( (LA141_0==DEFAULT) ) {
						int LA141_2 = input.LA(2);
						if ( (synpred470_SQL()) ) {
							alt141=1;
						}
						else if ( (true) ) {
							alt141=2;
						}

					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 141, 0, input);
						throw nvae;
					}

					switch (alt141) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1628:55: bit_expr
							{
							pushFollow(FOLLOW_bit_expr_in_column_value_list25166);
							bit_expr483=bit_expr();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr483.getTree());

							}
							break;
						case 2 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1628:64: DEFAULT
							{
							DEFAULT484=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_value_list25168); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT484_tree = (Object)adaptor.create(DEFAULT484);
							adaptor.addChild(root_0, DEFAULT484_tree);
							}

							}
							break;

					}

					}
					break;

				default :
					break loop142;
				}
			}

			RPAREN485=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_value_list25174); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN485_tree = (Object)adaptor.create(RPAREN485);
			adaptor.addChild(root_0, RPAREN485_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "column_value_list"


	public static class insert_statement2_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "insert_statement2"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1630:1: insert_statement2 : insert_header set_columns_cluase ( insert_subfix )? ;
	public final SQLParser.insert_statement2_return insert_statement2() throws RecognitionException {
		SQLParser.insert_statement2_return retval = new SQLParser.insert_statement2_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope insert_header486 =null;
		ParserRuleReturnScope set_columns_cluase487 =null;
		ParserRuleReturnScope insert_subfix488 =null;


		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1630:18: ( insert_header set_columns_cluase ( insert_subfix )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1631:3: insert_header set_columns_cluase ( insert_subfix )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_insert_header_in_insert_statement225184);
			insert_header486=insert_header();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, insert_header486.getTree());

			pushFollow(FOLLOW_set_columns_cluase_in_insert_statement225188);
			set_columns_cluase487=set_columns_cluase();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, set_columns_cluase487.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1633:3: ( insert_subfix )?
			int alt143=2;
			int LA143_0 = input.LA(1);
			if ( (LA143_0==ON) ) {
				alt143=1;
			}
			switch (alt143) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1633:5: insert_subfix
					{
					pushFollow(FOLLOW_insert_subfix_in_insert_statement225194);
					insert_subfix488=insert_subfix();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, insert_subfix488.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "insert_statement2"


	public static class set_columns_cluase_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "set_columns_cluase"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1635:1: set_columns_cluase : SET_SYM set_column_cluase ( COMMA set_column_cluase )* ;
	public final SQLParser.set_columns_cluase_return set_columns_cluase() throws RecognitionException {
		SQLParser.set_columns_cluase_return retval = new SQLParser.set_columns_cluase_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token SET_SYM489=null;
		Token COMMA491=null;
		ParserRuleReturnScope set_column_cluase490 =null;
		ParserRuleReturnScope set_column_cluase492 =null;

		Object SET_SYM489_tree=null;
		Object COMMA491_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1635:19: ( SET_SYM set_column_cluase ( COMMA set_column_cluase )* )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1635:21: SET_SYM set_column_cluase ( COMMA set_column_cluase )*
			{
			root_0 = (Object)adaptor.nil();


			SET_SYM489=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_set_columns_cluase25204); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			SET_SYM489_tree = (Object)adaptor.create(SET_SYM489);
			adaptor.addChild(root_0, SET_SYM489_tree);
			}

			pushFollow(FOLLOW_set_column_cluase_in_set_columns_cluase25206);
			set_column_cluase490=set_column_cluase();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, set_column_cluase490.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1635:47: ( COMMA set_column_cluase )*
			loop144:
			while (true) {
				int alt144=2;
				int LA144_0 = input.LA(1);
				if ( (LA144_0==COMMA) ) {
					int LA144_2 = input.LA(2);
					if ( (LA144_2==ID) ) {
						alt144=1;
					}

				}

				switch (alt144) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1635:49: COMMA set_column_cluase
					{
					COMMA491=(Token)match(input,COMMA,FOLLOW_COMMA_in_set_columns_cluase25210); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA491_tree = (Object)adaptor.create(COMMA491);
					adaptor.addChild(root_0, COMMA491_tree);
					}

					pushFollow(FOLLOW_set_column_cluase_in_set_columns_cluase25212);
					set_column_cluase492=set_column_cluase();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, set_column_cluase492.getTree());

					}
					break;

				default :
					break loop144;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "set_columns_cluase"


	public static class set_column_cluase_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "set_column_cluase"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1636:1: set_column_cluase : column_spec EQ_SYM ( expression | DEFAULT ) ;
	public final SQLParser.set_column_cluase_return set_column_cluase() throws RecognitionException {
		SQLParser.set_column_cluase_return retval = new SQLParser.set_column_cluase_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token EQ_SYM494=null;
		Token DEFAULT496=null;
		ParserRuleReturnScope column_spec493 =null;
		ParserRuleReturnScope expression495 =null;

		Object EQ_SYM494_tree=null;
		Object DEFAULT496_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1636:18: ( column_spec EQ_SYM ( expression | DEFAULT ) )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1636:21: column_spec EQ_SYM ( expression | DEFAULT )
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_column_spec_in_set_column_cluase25222);
			column_spec493=column_spec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec493.getTree());

			EQ_SYM494=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_set_column_cluase25224); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			EQ_SYM494_tree = (Object)adaptor.create(EQ_SYM494);
			adaptor.addChild(root_0, EQ_SYM494_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1636:40: ( expression | DEFAULT )
			int alt145=2;
			int LA145_0 = input.LA(1);
			if ( (LA145_0==ABS||LA145_0==ACOS||(LA145_0 >= ADDDATE && LA145_0 <= ADDTIME)||(LA145_0 >= AES_DECRYPT && LA145_0 <= AES_ENCRYPT)||LA145_0==ASCII_SYM||LA145_0==ASIN||(LA145_0 >= ATAN && LA145_0 <= ATAN2)||LA145_0==AVG||LA145_0==BENCHMARK||(LA145_0 >= BIN && LA145_0 <= BINARY)||(LA145_0 >= BIT_AND && LA145_0 <= BIT_OR)||LA145_0==BIT_XOR||(LA145_0 >= CASE_SYM && LA145_0 <= CEILING)||LA145_0==CHAR||(LA145_0 >= CHARSET && LA145_0 <= CHAR_LENGTH)||LA145_0==COERCIBILITY||LA145_0==COLLATION||(LA145_0 >= CONCAT && LA145_0 <= CONCAT_WS)||LA145_0==CONNECTION_ID||(LA145_0 >= CONV && LA145_0 <= CONVERT_TZ)||(LA145_0 >= COS && LA145_0 <= COUNT)||LA145_0==CRC32||LA145_0==CURDATE||LA145_0==CURRENT_USER||LA145_0==CURTIME||LA145_0==DATABASE||LA145_0==DATEDIFF||(LA145_0 >= DATE_ADD && LA145_0 <= DAYOFYEAR)||LA145_0==DECODE||LA145_0==DEGREES||(LA145_0 >= DES_DECRYPT && LA145_0 <= DES_ENCRYPT)||LA145_0==ELT||(LA145_0 >= ENCODE && LA145_0 <= ENCRYPT)||LA145_0==EXISTS||LA145_0==EXP||LA145_0==EXPORT_SET||LA145_0==EXTRACT||LA145_0==FALSE_SYM||LA145_0==FIELD||LA145_0==FIND_IN_SET||LA145_0==FLOOR||LA145_0==FORMAT||LA145_0==FOUND_ROWS||(LA145_0 >= FROM_BASE64 && LA145_0 <= FROM_UNIXTIME)||(LA145_0 >= GET_FORMAT && LA145_0 <= GET_LOCK)||LA145_0==GROUP_CONCAT||(LA145_0 >= HEX && LA145_0 <= HEX_DIGIT)||LA145_0==HOUR||LA145_0==ID||(LA145_0 >= IF && LA145_0 <= IFNULL)||(LA145_0 >= INET_ATON && LA145_0 <= INET_NTOA)||LA145_0==INSERT||(LA145_0 >= INSTR && LA145_0 <= INTEGER_NUM)||LA145_0==INTERVAL_SYM||LA145_0==IS_FREE_LOCK||LA145_0==IS_USED_LOCK||(LA145_0 >= LAST_DAY && LA145_0 <= LAST_INSERT_ID)||(LA145_0 >= LEFT && LA145_0 <= LENGTH)||LA145_0==LN||LA145_0==LOAD_FILE||LA145_0==LOCATE||(LA145_0 >= LOG && LA145_0 <= LOG2)||LA145_0==LOWER||(LA145_0 >= LPAD && LA145_0 <= LPAREN)||LA145_0==LTRIM||(LA145_0 >= MAKEDATE && LA145_0 <= MAKE_SET)||LA145_0==MASTER_POS_WAIT||LA145_0==MATCH||LA145_0==MAX_SYM||LA145_0==MD5||(LA145_0 >= MICROSECOND && LA145_0 <= MID)||(LA145_0 >= MINUS && LA145_0 <= MINUTE)||LA145_0==MIN_SYM||LA145_0==MOD||(LA145_0 >= MONTH && LA145_0 <= MONTHNAME)||LA145_0==NAME_CONST||LA145_0==NEGATION||(LA145_0 >= NOT_SYM && LA145_0 <= NOW)||LA145_0==NULL_SYM||LA145_0==OCT||LA145_0==OLD_PASSWORD||LA145_0==ORD||(LA145_0 >= PASSWORD && LA145_0 <= PERIOD_DIFF)||LA145_0==PI||LA145_0==PLUS||(LA145_0 >= POW && LA145_0 <= POWER)||LA145_0==QUARTER||LA145_0==QUOTE||(LA145_0 >= RADIANS && LA145_0 <= RAND)||LA145_0==REAL_NUMBER||LA145_0==RELEASE_LOCK||LA145_0==REPEAT||LA145_0==REPLACE||LA145_0==REVERSE||LA145_0==RIGHT||LA145_0==ROUND||(LA145_0 >= ROW_SYM && LA145_0 <= RPAD)||LA145_0==RTRIM||(LA145_0 >= SCHEMA && LA145_0 <= SECOND)||LA145_0==SEC_TO_TIME||LA145_0==SESSION_USER||LA145_0==SIGN||LA145_0==SIN||LA145_0==SLEEP||LA145_0==SOUNDEX||LA145_0==SPACE||LA145_0==SQRT||(LA145_0 >= STD && LA145_0 <= STDDEV_SAMP)||LA145_0==STRCMP||LA145_0==STR_TO_DATE||(LA145_0 >= SUBSTRING && LA145_0 <= SUM)||(LA145_0 >= SYSDATE && LA145_0 <= SYSTEM_USER)||LA145_0==TAN||LA145_0==TEXT_STRING||(LA145_0 >= TIMEDIFF && LA145_0 <= TIME_TO_SEC)||(LA145_0 >= TO_BASE64 && LA145_0 <= TO_SECONDS)||(LA145_0 >= TRIM && LA145_0 <= TRUNCATE)||LA145_0==UNHEX||LA145_0==UNIX_TIMESTAMP||LA145_0==UPPER||(LA145_0 >= USER && LA145_0 <= USER_VAR)||(LA145_0 >= UTC_DATE && LA145_0 <= UTC_TIMESTAMP)||LA145_0==UUID||LA145_0==VALUES||LA145_0==VARIANCE||(LA145_0 >= VAR_POP && LA145_0 <= VERSION_SYM)||(LA145_0 >= WEEK && LA145_0 <= WEIGHT_STRING)||(LA145_0 >= YEAR && LA145_0 <= YEARWEEK)) ) {
				alt145=1;
			}
			else if ( (LA145_0==DEFAULT) ) {
				int LA145_2 = input.LA(2);
				if ( (synpred474_SQL()) ) {
					alt145=1;
				}
				else if ( (true) ) {
					alt145=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 145, 0, input);
				throw nvae;
			}

			switch (alt145) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1636:41: expression
					{
					pushFollow(FOLLOW_expression_in_set_column_cluase25227);
					expression495=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression495.getTree());

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1636:52: DEFAULT
					{
					DEFAULT496=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_set_column_cluase25229); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DEFAULT496_tree = (Object)adaptor.create(DEFAULT496);
					adaptor.addChild(root_0, DEFAULT496_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "set_column_cluase"


	public static class insert_statement3_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "insert_statement3"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1638:1: insert_statement3 : insert_header ( column_list )? select_expression ( insert_subfix )? ;
	public final SQLParser.insert_statement3_return insert_statement3() throws RecognitionException {
		SQLParser.insert_statement3_return retval = new SQLParser.insert_statement3_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope insert_header497 =null;
		ParserRuleReturnScope column_list498 =null;
		ParserRuleReturnScope select_expression499 =null;
		ParserRuleReturnScope insert_subfix500 =null;


		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1638:18: ( insert_header ( column_list )? select_expression ( insert_subfix )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1639:3: insert_header ( column_list )? select_expression ( insert_subfix )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_insert_header_in_insert_statement325240);
			insert_header497=insert_header();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, insert_header497.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1640:3: ( column_list )?
			int alt146=2;
			int LA146_0 = input.LA(1);
			if ( (LA146_0==LPAREN) ) {
				alt146=1;
			}
			switch (alt146) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1640:4: column_list
					{
					pushFollow(FOLLOW_column_list_in_insert_statement325245);
					column_list498=column_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_list498.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_select_expression_in_insert_statement325252);
			select_expression499=select_expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, select_expression499.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1642:3: ( insert_subfix )?
			int alt147=2;
			int LA147_0 = input.LA(1);
			if ( (LA147_0==ON) ) {
				alt147=1;
			}
			switch (alt147) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1642:5: insert_subfix
					{
					pushFollow(FOLLOW_insert_subfix_in_insert_statement325258);
					insert_subfix500=insert_subfix();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, insert_subfix500.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "insert_statement3"


	public static class update_statements_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "update_statements"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1652:1: update_statements : ( single_table_update_statement | multiple_table_update_statement );
	public final SQLParser.update_statements_return update_statements() throws RecognitionException {
		SQLParser.update_statements_return retval = new SQLParser.update_statements_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope single_table_update_statement501 =null;
		ParserRuleReturnScope multiple_table_update_statement502 =null;


		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1652:19: ( single_table_update_statement | multiple_table_update_statement )
			int alt148=2;
			int LA148_0 = input.LA(1);
			if ( (LA148_0==UPDATE) ) {
				int LA148_1 = input.LA(2);
				if ( (synpred477_SQL()) ) {
					alt148=1;
				}
				else if ( (true) ) {
					alt148=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 148, 0, input);
				throw nvae;
			}

			switch (alt148) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1653:3: single_table_update_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_single_table_update_statement_in_update_statements25279);
					single_table_update_statement501=single_table_update_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, single_table_update_statement501.getTree());

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1653:35: multiple_table_update_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_multiple_table_update_statement_in_update_statements25283);
					multiple_table_update_statement502=multiple_table_update_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, multiple_table_update_statement502.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "update_statements"


	public static class single_table_update_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "single_table_update_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1656:1: single_table_update_statement : UPDATE ( LOW_PRIORITY )? ( IGNORE_SYM )? table_reference set_columns_cluase ( where_clause )? ( orderby_clause )? ( limit_clause )? ;
	public final SQLParser.single_table_update_statement_return single_table_update_statement() throws RecognitionException {
		SQLParser.single_table_update_statement_return retval = new SQLParser.single_table_update_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token UPDATE503=null;
		Token LOW_PRIORITY504=null;
		Token IGNORE_SYM505=null;
		ParserRuleReturnScope table_reference506 =null;
		ParserRuleReturnScope set_columns_cluase507 =null;
		ParserRuleReturnScope where_clause508 =null;
		ParserRuleReturnScope orderby_clause509 =null;
		ParserRuleReturnScope limit_clause510 =null;

		Object UPDATE503_tree=null;
		Object LOW_PRIORITY504_tree=null;
		Object IGNORE_SYM505_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1656:30: ( UPDATE ( LOW_PRIORITY )? ( IGNORE_SYM )? table_reference set_columns_cluase ( where_clause )? ( orderby_clause )? ( limit_clause )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1657:1: UPDATE ( LOW_PRIORITY )? ( IGNORE_SYM )? table_reference set_columns_cluase ( where_clause )? ( orderby_clause )? ( limit_clause )?
			{
			root_0 = (Object)adaptor.nil();


			UPDATE503=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_single_table_update_statement25292); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			UPDATE503_tree = (Object)adaptor.create(UPDATE503);
			adaptor.addChild(root_0, UPDATE503_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1657:8: ( LOW_PRIORITY )?
			int alt149=2;
			int LA149_0 = input.LA(1);
			if ( (LA149_0==LOW_PRIORITY) ) {
				alt149=1;
			}
			switch (alt149) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1657:9: LOW_PRIORITY
					{
					LOW_PRIORITY504=(Token)match(input,LOW_PRIORITY,FOLLOW_LOW_PRIORITY_in_single_table_update_statement25295); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LOW_PRIORITY504_tree = (Object)adaptor.create(LOW_PRIORITY504);
					adaptor.addChild(root_0, LOW_PRIORITY504_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1657:24: ( IGNORE_SYM )?
			int alt150=2;
			int LA150_0 = input.LA(1);
			if ( (LA150_0==IGNORE_SYM) ) {
				alt150=1;
			}
			switch (alt150) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1657:25: IGNORE_SYM
					{
					IGNORE_SYM505=(Token)match(input,IGNORE_SYM,FOLLOW_IGNORE_SYM_in_single_table_update_statement25300); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IGNORE_SYM505_tree = (Object)adaptor.create(IGNORE_SYM505);
					adaptor.addChild(root_0, IGNORE_SYM505_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_table_reference_in_single_table_update_statement25304);
			table_reference506=table_reference();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_reference506.getTree());

			pushFollow(FOLLOW_set_columns_cluase_in_single_table_update_statement25308);
			set_columns_cluase507=set_columns_cluase();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, set_columns_cluase507.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1659:3: ( where_clause )?
			int alt151=2;
			int LA151_0 = input.LA(1);
			if ( (LA151_0==WHERE) ) {
				alt151=1;
			}
			switch (alt151) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1659:4: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_single_table_update_statement25313);
					where_clause508=where_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, where_clause508.getTree());

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1660:3: ( orderby_clause )?
			int alt152=2;
			int LA152_0 = input.LA(1);
			if ( (LA152_0==ORDER_SYM) ) {
				alt152=1;
			}
			switch (alt152) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1660:4: orderby_clause
					{
					pushFollow(FOLLOW_orderby_clause_in_single_table_update_statement25320);
					orderby_clause509=orderby_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, orderby_clause509.getTree());

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1661:3: ( limit_clause )?
			int alt153=2;
			int LA153_0 = input.LA(1);
			if ( (LA153_0==INTEGER_NUM||LA153_0==LIMIT) ) {
				alt153=1;
			}
			switch (alt153) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1661:4: limit_clause
					{
					pushFollow(FOLLOW_limit_clause_in_single_table_update_statement25327);
					limit_clause510=limit_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, limit_clause510.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "single_table_update_statement"


	public static class multiple_table_update_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "multiple_table_update_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1664:1: multiple_table_update_statement : UPDATE ( LOW_PRIORITY )? ( IGNORE_SYM )? table_references set_columns_cluase ( where_clause )? ;
	public final SQLParser.multiple_table_update_statement_return multiple_table_update_statement() throws RecognitionException {
		SQLParser.multiple_table_update_statement_return retval = new SQLParser.multiple_table_update_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token UPDATE511=null;
		Token LOW_PRIORITY512=null;
		Token IGNORE_SYM513=null;
		ParserRuleReturnScope table_references514 =null;
		ParserRuleReturnScope set_columns_cluase515 =null;
		ParserRuleReturnScope where_clause516 =null;

		Object UPDATE511_tree=null;
		Object LOW_PRIORITY512_tree=null;
		Object IGNORE_SYM513_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1664:32: ( UPDATE ( LOW_PRIORITY )? ( IGNORE_SYM )? table_references set_columns_cluase ( where_clause )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1665:3: UPDATE ( LOW_PRIORITY )? ( IGNORE_SYM )? table_references set_columns_cluase ( where_clause )?
			{
			root_0 = (Object)adaptor.nil();


			UPDATE511=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_multiple_table_update_statement25340); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			UPDATE511_tree = (Object)adaptor.create(UPDATE511);
			adaptor.addChild(root_0, UPDATE511_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1665:10: ( LOW_PRIORITY )?
			int alt154=2;
			int LA154_0 = input.LA(1);
			if ( (LA154_0==LOW_PRIORITY) ) {
				alt154=1;
			}
			switch (alt154) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1665:11: LOW_PRIORITY
					{
					LOW_PRIORITY512=(Token)match(input,LOW_PRIORITY,FOLLOW_LOW_PRIORITY_in_multiple_table_update_statement25343); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LOW_PRIORITY512_tree = (Object)adaptor.create(LOW_PRIORITY512);
					adaptor.addChild(root_0, LOW_PRIORITY512_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1665:26: ( IGNORE_SYM )?
			int alt155=2;
			int LA155_0 = input.LA(1);
			if ( (LA155_0==IGNORE_SYM) ) {
				alt155=1;
			}
			switch (alt155) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1665:27: IGNORE_SYM
					{
					IGNORE_SYM513=(Token)match(input,IGNORE_SYM,FOLLOW_IGNORE_SYM_in_multiple_table_update_statement25348); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IGNORE_SYM513_tree = (Object)adaptor.create(IGNORE_SYM513);
					adaptor.addChild(root_0, IGNORE_SYM513_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_table_references_in_multiple_table_update_statement25352);
			table_references514=table_references();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_references514.getTree());

			pushFollow(FOLLOW_set_columns_cluase_in_multiple_table_update_statement25356);
			set_columns_cluase515=set_columns_cluase();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, set_columns_cluase515.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1667:3: ( where_clause )?
			int alt156=2;
			int LA156_0 = input.LA(1);
			if ( (LA156_0==WHERE) ) {
				alt156=1;
			}
			switch (alt156) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1667:4: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_multiple_table_update_statement25361);
					where_clause516=where_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, where_clause516.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "multiple_table_update_statement"


	public static class call_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "call_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1676:1: call_statement : CALL_SYM procedure_name ( LPAREN ( bit_expr ( COMMA bit_expr )* )? RPAREN )? ;
	public final SQLParser.call_statement_return call_statement() throws RecognitionException {
		SQLParser.call_statement_return retval = new SQLParser.call_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token CALL_SYM517=null;
		Token LPAREN519=null;
		Token COMMA521=null;
		Token RPAREN523=null;
		ParserRuleReturnScope procedure_name518 =null;
		ParserRuleReturnScope bit_expr520 =null;
		ParserRuleReturnScope bit_expr522 =null;

		Object CALL_SYM517_tree=null;
		Object LPAREN519_tree=null;
		Object COMMA521_tree=null;
		Object RPAREN523_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1676:15: ( CALL_SYM procedure_name ( LPAREN ( bit_expr ( COMMA bit_expr )* )? RPAREN )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1677:3: CALL_SYM procedure_name ( LPAREN ( bit_expr ( COMMA bit_expr )* )? RPAREN )?
			{
			root_0 = (Object)adaptor.nil();


			CALL_SYM517=(Token)match(input,CALL_SYM,FOLLOW_CALL_SYM_in_call_statement25379); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			CALL_SYM517_tree = (Object)adaptor.create(CALL_SYM517);
			adaptor.addChild(root_0, CALL_SYM517_tree);
			}

			pushFollow(FOLLOW_procedure_name_in_call_statement25381);
			procedure_name518=procedure_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_name518.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1677:27: ( LPAREN ( bit_expr ( COMMA bit_expr )* )? RPAREN )?
			int alt159=2;
			int LA159_0 = input.LA(1);
			if ( (LA159_0==LPAREN) ) {
				alt159=1;
			}
			switch (alt159) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1677:28: LPAREN ( bit_expr ( COMMA bit_expr )* )? RPAREN
					{
					LPAREN519=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_call_statement25384); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN519_tree = (Object)adaptor.create(LPAREN519);
					adaptor.addChild(root_0, LPAREN519_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1677:35: ( bit_expr ( COMMA bit_expr )* )?
					int alt158=2;
					int LA158_0 = input.LA(1);
					if ( (LA158_0==ABS||LA158_0==ACOS||(LA158_0 >= ADDDATE && LA158_0 <= ADDTIME)||(LA158_0 >= AES_DECRYPT && LA158_0 <= AES_ENCRYPT)||LA158_0==ASCII_SYM||LA158_0==ASIN||(LA158_0 >= ATAN && LA158_0 <= ATAN2)||LA158_0==AVG||LA158_0==BENCHMARK||(LA158_0 >= BIN && LA158_0 <= BINARY)||(LA158_0 >= BIT_AND && LA158_0 <= BIT_OR)||LA158_0==BIT_XOR||(LA158_0 >= CASE_SYM && LA158_0 <= CEILING)||LA158_0==CHAR||(LA158_0 >= CHARSET && LA158_0 <= CHAR_LENGTH)||LA158_0==COERCIBILITY||LA158_0==COLLATION||(LA158_0 >= CONCAT && LA158_0 <= CONCAT_WS)||LA158_0==CONNECTION_ID||(LA158_0 >= CONV && LA158_0 <= CONVERT_TZ)||(LA158_0 >= COS && LA158_0 <= COUNT)||LA158_0==CRC32||LA158_0==CURDATE||LA158_0==CURRENT_USER||LA158_0==CURTIME||LA158_0==DATABASE||LA158_0==DATEDIFF||(LA158_0 >= DATE_ADD && LA158_0 <= DAYOFYEAR)||(LA158_0 >= DECODE && LA158_0 <= DEFAULT)||LA158_0==DEGREES||(LA158_0 >= DES_DECRYPT && LA158_0 <= DES_ENCRYPT)||LA158_0==ELT||(LA158_0 >= ENCODE && LA158_0 <= ENCRYPT)||LA158_0==EXISTS||LA158_0==EXP||LA158_0==EXPORT_SET||LA158_0==EXTRACT||LA158_0==FALSE_SYM||LA158_0==FIELD||LA158_0==FIND_IN_SET||LA158_0==FLOOR||LA158_0==FORMAT||LA158_0==FOUND_ROWS||(LA158_0 >= FROM_BASE64 && LA158_0 <= FROM_UNIXTIME)||(LA158_0 >= GET_FORMAT && LA158_0 <= GET_LOCK)||LA158_0==GROUP_CONCAT||(LA158_0 >= HEX && LA158_0 <= HEX_DIGIT)||LA158_0==HOUR||LA158_0==ID||(LA158_0 >= IF && LA158_0 <= IFNULL)||(LA158_0 >= INET_ATON && LA158_0 <= INET_NTOA)||LA158_0==INSERT||(LA158_0 >= INSTR && LA158_0 <= INTEGER_NUM)||LA158_0==INTERVAL_SYM||LA158_0==IS_FREE_LOCK||LA158_0==IS_USED_LOCK||(LA158_0 >= LAST_DAY && LA158_0 <= LAST_INSERT_ID)||(LA158_0 >= LEFT && LA158_0 <= LENGTH)||LA158_0==LN||LA158_0==LOAD_FILE||LA158_0==LOCATE||(LA158_0 >= LOG && LA158_0 <= LOG2)||LA158_0==LOWER||(LA158_0 >= LPAD && LA158_0 <= LPAREN)||LA158_0==LTRIM||(LA158_0 >= MAKEDATE && LA158_0 <= MAKE_SET)||LA158_0==MASTER_POS_WAIT||LA158_0==MATCH||LA158_0==MAX_SYM||LA158_0==MD5||(LA158_0 >= MICROSECOND && LA158_0 <= MID)||(LA158_0 >= MINUS && LA158_0 <= MINUTE)||LA158_0==MIN_SYM||LA158_0==MOD||(LA158_0 >= MONTH && LA158_0 <= MONTHNAME)||LA158_0==NAME_CONST||LA158_0==NEGATION||LA158_0==NOW||LA158_0==NULL_SYM||LA158_0==OCT||LA158_0==OLD_PASSWORD||LA158_0==ORD||(LA158_0 >= PASSWORD && LA158_0 <= PERIOD_DIFF)||LA158_0==PI||LA158_0==PLUS||(LA158_0 >= POW && LA158_0 <= POWER)||LA158_0==QUARTER||LA158_0==QUOTE||(LA158_0 >= RADIANS && LA158_0 <= RAND)||LA158_0==REAL_NUMBER||LA158_0==RELEASE_LOCK||LA158_0==REPEAT||LA158_0==REPLACE||LA158_0==REVERSE||LA158_0==RIGHT||LA158_0==ROUND||(LA158_0 >= ROW_SYM && LA158_0 <= RPAD)||LA158_0==RTRIM||(LA158_0 >= SCHEMA && LA158_0 <= SECOND)||LA158_0==SEC_TO_TIME||LA158_0==SESSION_USER||LA158_0==SIGN||LA158_0==SIN||LA158_0==SLEEP||LA158_0==SOUNDEX||LA158_0==SPACE||LA158_0==SQRT||(LA158_0 >= STD && LA158_0 <= STDDEV_SAMP)||LA158_0==STRCMP||LA158_0==STR_TO_DATE||(LA158_0 >= SUBSTRING && LA158_0 <= SUM)||(LA158_0 >= SYSDATE && LA158_0 <= SYSTEM_USER)||LA158_0==TAN||LA158_0==TEXT_STRING||(LA158_0 >= TIMEDIFF && LA158_0 <= TIME_TO_SEC)||(LA158_0 >= TO_BASE64 && LA158_0 <= TO_SECONDS)||(LA158_0 >= TRIM && LA158_0 <= TRUNCATE)||LA158_0==UNHEX||LA158_0==UNIX_TIMESTAMP||LA158_0==UPPER||(LA158_0 >= USER && LA158_0 <= USER_VAR)||(LA158_0 >= UTC_DATE && LA158_0 <= UTC_TIMESTAMP)||LA158_0==UUID||LA158_0==VALUES||LA158_0==VARIANCE||(LA158_0 >= VAR_POP && LA158_0 <= VERSION_SYM)||(LA158_0 >= WEEK && LA158_0 <= WEIGHT_STRING)||(LA158_0 >= YEAR && LA158_0 <= YEARWEEK)) ) {
						alt158=1;
					}
					switch (alt158) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1677:37: bit_expr ( COMMA bit_expr )*
							{
							pushFollow(FOLLOW_bit_expr_in_call_statement25388);
							bit_expr520=bit_expr();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr520.getTree());

							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1677:46: ( COMMA bit_expr )*
							loop157:
							while (true) {
								int alt157=2;
								int LA157_0 = input.LA(1);
								if ( (LA157_0==COMMA) ) {
									alt157=1;
								}

								switch (alt157) {
								case 1 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1677:47: COMMA bit_expr
									{
									COMMA521=(Token)match(input,COMMA,FOLLOW_COMMA_in_call_statement25391); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									COMMA521_tree = (Object)adaptor.create(COMMA521);
									adaptor.addChild(root_0, COMMA521_tree);
									}

									pushFollow(FOLLOW_bit_expr_in_call_statement25393);
									bit_expr522=bit_expr();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr522.getTree());

									}
									break;

								default :
									break loop157;
								}
							}

							}
							break;

					}

					RPAREN523=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_call_statement25400); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN523_tree = (Object)adaptor.create(RPAREN523);
					adaptor.addChild(root_0, RPAREN523_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "call_statement"


	public static class do_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "do_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1686:1: do_statement : DO_SYM root_statement ( COMMA root_statement )* ;
	public final SQLParser.do_statement_return do_statement() throws RecognitionException {
		SQLParser.do_statement_return retval = new SQLParser.do_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token DO_SYM524=null;
		Token COMMA526=null;
		ParserRuleReturnScope root_statement525 =null;
		ParserRuleReturnScope root_statement527 =null;

		Object DO_SYM524_tree=null;
		Object COMMA526_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1686:13: ( DO_SYM root_statement ( COMMA root_statement )* )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1687:3: DO_SYM root_statement ( COMMA root_statement )*
			{
			root_0 = (Object)adaptor.nil();


			DO_SYM524=(Token)match(input,DO_SYM,FOLLOW_DO_SYM_in_do_statement25418); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DO_SYM524_tree = (Object)adaptor.create(DO_SYM524);
			adaptor.addChild(root_0, DO_SYM524_tree);
			}

			pushFollow(FOLLOW_root_statement_in_do_statement25420);
			root_statement525=root_statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, root_statement525.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1687:25: ( COMMA root_statement )*
			loop160:
			while (true) {
				int alt160=2;
				int LA160_0 = input.LA(1);
				if ( (LA160_0==COMMA) ) {
					int LA160_2 = input.LA(2);
					if ( (synpred489_SQL()) ) {
						alt160=1;
					}

				}

				switch (alt160) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1687:26: COMMA root_statement
					{
					COMMA526=(Token)match(input,COMMA,FOLLOW_COMMA_in_do_statement25423); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA526_tree = (Object)adaptor.create(COMMA526);
					adaptor.addChild(root_0, COMMA526_tree);
					}

					pushFollow(FOLLOW_root_statement_in_do_statement25425);
					root_statement527=root_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, root_statement527.getTree());

					}
					break;

				default :
					break loop160;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "do_statement"


	public static class handler_statements_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "handler_statements"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1696:1: handler_statements : HANDLER_SYM table_name ( open_handler_statement | handler_statement1 | handler_statement2 | handler_statement3 | close_handler_statement ) ;
	public final SQLParser.handler_statements_return handler_statements() throws RecognitionException {
		SQLParser.handler_statements_return retval = new SQLParser.handler_statements_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token HANDLER_SYM528=null;
		ParserRuleReturnScope table_name529 =null;
		ParserRuleReturnScope open_handler_statement530 =null;
		ParserRuleReturnScope handler_statement1531 =null;
		ParserRuleReturnScope handler_statement2532 =null;
		ParserRuleReturnScope handler_statement3533 =null;
		ParserRuleReturnScope close_handler_statement534 =null;

		Object HANDLER_SYM528_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1696:19: ( HANDLER_SYM table_name ( open_handler_statement | handler_statement1 | handler_statement2 | handler_statement3 | close_handler_statement ) )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1697:3: HANDLER_SYM table_name ( open_handler_statement | handler_statement1 | handler_statement2 | handler_statement3 | close_handler_statement )
			{
			root_0 = (Object)adaptor.nil();


			HANDLER_SYM528=(Token)match(input,HANDLER_SYM,FOLLOW_HANDLER_SYM_in_handler_statements25443); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			HANDLER_SYM528_tree = (Object)adaptor.create(HANDLER_SYM528);
			adaptor.addChild(root_0, HANDLER_SYM528_tree);
			}

			pushFollow(FOLLOW_table_name_in_handler_statements25445);
			table_name529=table_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name529.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1698:3: ( open_handler_statement | handler_statement1 | handler_statement2 | handler_statement3 | close_handler_statement )
			int alt161=5;
			switch ( input.LA(1) ) {
			case OPEN_SYM:
				{
				alt161=1;
				}
				break;
			case READ_SYM:
				{
				int LA161_2 = input.LA(2);
				if ( (LA161_2==FIRST_SYM||LA161_2==NEXT_SYM) ) {
					alt161=4;
				}
				else if ( (LA161_2==ID) ) {
					int LA161_5 = input.LA(3);
					if ( (LA161_5==EQ_SYM||LA161_5==GET||LA161_5==GTH||LA161_5==LET||LA161_5==LTH||LA161_5==NOT_EQ) ) {
						alt161=2;
					}
					else if ( (LA161_5==FIRST_SYM||LA161_5==LAST_SYM||LA161_5==NEXT_SYM||LA161_5==PREV_SYM) ) {
						alt161=3;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 161, 5, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 161, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CLOSE_SYM:
				{
				alt161=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 161, 0, input);
				throw nvae;
			}
			switch (alt161) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1698:4: open_handler_statement
					{
					pushFollow(FOLLOW_open_handler_statement_in_handler_statements25450);
					open_handler_statement530=open_handler_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, open_handler_statement530.getTree());

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1698:29: handler_statement1
					{
					pushFollow(FOLLOW_handler_statement1_in_handler_statements25454);
					handler_statement1531=handler_statement1();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, handler_statement1531.getTree());

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1698:50: handler_statement2
					{
					pushFollow(FOLLOW_handler_statement2_in_handler_statements25458);
					handler_statement2532=handler_statement2();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, handler_statement2532.getTree());

					}
					break;
				case 4 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1698:71: handler_statement3
					{
					pushFollow(FOLLOW_handler_statement3_in_handler_statements25462);
					handler_statement3533=handler_statement3();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, handler_statement3533.getTree());

					}
					break;
				case 5 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1698:92: close_handler_statement
					{
					pushFollow(FOLLOW_close_handler_statement_in_handler_statements25466);
					close_handler_statement534=close_handler_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, close_handler_statement534.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "handler_statements"


	public static class open_handler_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "open_handler_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1701:1: open_handler_statement : OPEN_SYM ( alias )? ;
	public final SQLParser.open_handler_statement_return open_handler_statement() throws RecognitionException {
		SQLParser.open_handler_statement_return retval = new SQLParser.open_handler_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token OPEN_SYM535=null;
		ParserRuleReturnScope alias536 =null;

		Object OPEN_SYM535_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1701:23: ( OPEN_SYM ( alias )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1702:3: OPEN_SYM ( alias )?
			{
			root_0 = (Object)adaptor.nil();


			OPEN_SYM535=(Token)match(input,OPEN_SYM,FOLLOW_OPEN_SYM_in_open_handler_statement25477); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			OPEN_SYM535_tree = (Object)adaptor.create(OPEN_SYM535);
			adaptor.addChild(root_0, OPEN_SYM535_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1702:12: ( alias )?
			int alt162=2;
			int LA162_0 = input.LA(1);
			if ( (LA162_0==AS_SYM||LA162_0==ID) ) {
				alt162=1;
			}
			switch (alt162) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1702:13: alias
					{
					pushFollow(FOLLOW_alias_in_open_handler_statement25480);
					alias536=alias();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alias536.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "open_handler_statement"


	public static class handler_statement1_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "handler_statement1"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1705:1: handler_statement1 : READ_SYM index_name relational_op LPAREN bit_expr ( COMMA bit_expr )* RPAREN ( where_clause )? ( limit_clause )? ;
	public final SQLParser.handler_statement1_return handler_statement1() throws RecognitionException {
		SQLParser.handler_statement1_return retval = new SQLParser.handler_statement1_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token READ_SYM537=null;
		Token LPAREN540=null;
		Token COMMA542=null;
		Token RPAREN544=null;
		ParserRuleReturnScope index_name538 =null;
		ParserRuleReturnScope relational_op539 =null;
		ParserRuleReturnScope bit_expr541 =null;
		ParserRuleReturnScope bit_expr543 =null;
		ParserRuleReturnScope where_clause545 =null;
		ParserRuleReturnScope limit_clause546 =null;

		Object READ_SYM537_tree=null;
		Object LPAREN540_tree=null;
		Object COMMA542_tree=null;
		Object RPAREN544_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1705:19: ( READ_SYM index_name relational_op LPAREN bit_expr ( COMMA bit_expr )* RPAREN ( where_clause )? ( limit_clause )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1706:3: READ_SYM index_name relational_op LPAREN bit_expr ( COMMA bit_expr )* RPAREN ( where_clause )? ( limit_clause )?
			{
			root_0 = (Object)adaptor.nil();


			READ_SYM537=(Token)match(input,READ_SYM,FOLLOW_READ_SYM_in_handler_statement125492); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			READ_SYM537_tree = (Object)adaptor.create(READ_SYM537);
			adaptor.addChild(root_0, READ_SYM537_tree);
			}

			pushFollow(FOLLOW_index_name_in_handler_statement125494);
			index_name538=index_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name538.getTree());

			pushFollow(FOLLOW_relational_op_in_handler_statement125496);
			relational_op539=relational_op();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, relational_op539.getTree());

			LPAREN540=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_handler_statement125498); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN540_tree = (Object)adaptor.create(LPAREN540);
			adaptor.addChild(root_0, LPAREN540_tree);
			}

			pushFollow(FOLLOW_bit_expr_in_handler_statement125500);
			bit_expr541=bit_expr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr541.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1706:53: ( COMMA bit_expr )*
			loop163:
			while (true) {
				int alt163=2;
				int LA163_0 = input.LA(1);
				if ( (LA163_0==COMMA) ) {
					alt163=1;
				}

				switch (alt163) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1706:54: COMMA bit_expr
					{
					COMMA542=(Token)match(input,COMMA,FOLLOW_COMMA_in_handler_statement125503); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA542_tree = (Object)adaptor.create(COMMA542);
					adaptor.addChild(root_0, COMMA542_tree);
					}

					pushFollow(FOLLOW_bit_expr_in_handler_statement125505);
					bit_expr543=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr543.getTree());

					}
					break;

				default :
					break loop163;
				}
			}

			RPAREN544=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_handler_statement125509); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN544_tree = (Object)adaptor.create(RPAREN544);
			adaptor.addChild(root_0, RPAREN544_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1707:3: ( where_clause )?
			int alt164=2;
			int LA164_0 = input.LA(1);
			if ( (LA164_0==WHERE) ) {
				alt164=1;
			}
			switch (alt164) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1707:4: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_handler_statement125514);
					where_clause545=where_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, where_clause545.getTree());

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1707:19: ( limit_clause )?
			int alt165=2;
			int LA165_0 = input.LA(1);
			if ( (LA165_0==INTEGER_NUM||LA165_0==LIMIT) ) {
				alt165=1;
			}
			switch (alt165) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1707:20: limit_clause
					{
					pushFollow(FOLLOW_limit_clause_in_handler_statement125519);
					limit_clause546=limit_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, limit_clause546.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "handler_statement1"


	public static class handler_statement2_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "handler_statement2"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1710:1: handler_statement2 : READ_SYM index_name ( FIRST_SYM | NEXT_SYM | PREV_SYM | LAST_SYM ) ( where_clause )? ( limit_clause )? ;
	public final SQLParser.handler_statement2_return handler_statement2() throws RecognitionException {
		SQLParser.handler_statement2_return retval = new SQLParser.handler_statement2_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token READ_SYM547=null;
		Token set549=null;
		ParserRuleReturnScope index_name548 =null;
		ParserRuleReturnScope where_clause550 =null;
		ParserRuleReturnScope limit_clause551 =null;

		Object READ_SYM547_tree=null;
		Object set549_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1710:19: ( READ_SYM index_name ( FIRST_SYM | NEXT_SYM | PREV_SYM | LAST_SYM ) ( where_clause )? ( limit_clause )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1711:3: READ_SYM index_name ( FIRST_SYM | NEXT_SYM | PREV_SYM | LAST_SYM ) ( where_clause )? ( limit_clause )?
			{
			root_0 = (Object)adaptor.nil();


			READ_SYM547=(Token)match(input,READ_SYM,FOLLOW_READ_SYM_in_handler_statement225531); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			READ_SYM547_tree = (Object)adaptor.create(READ_SYM547);
			adaptor.addChild(root_0, READ_SYM547_tree);
			}

			pushFollow(FOLLOW_index_name_in_handler_statement225533);
			index_name548=index_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name548.getTree());

			set549=input.LT(1);
			if ( input.LA(1)==FIRST_SYM||input.LA(1)==LAST_SYM||input.LA(1)==NEXT_SYM||input.LA(1)==PREV_SYM ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set549));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1712:3: ( where_clause )?
			int alt166=2;
			int LA166_0 = input.LA(1);
			if ( (LA166_0==WHERE) ) {
				alt166=1;
			}
			switch (alt166) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1712:4: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_handler_statement225554);
					where_clause550=where_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, where_clause550.getTree());

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1712:19: ( limit_clause )?
			int alt167=2;
			int LA167_0 = input.LA(1);
			if ( (LA167_0==INTEGER_NUM||LA167_0==LIMIT) ) {
				alt167=1;
			}
			switch (alt167) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1712:20: limit_clause
					{
					pushFollow(FOLLOW_limit_clause_in_handler_statement225559);
					limit_clause551=limit_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, limit_clause551.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "handler_statement2"


	public static class handler_statement3_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "handler_statement3"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1715:1: handler_statement3 : READ_SYM ( FIRST_SYM | NEXT_SYM ) ( where_clause )? ( limit_clause )? ;
	public final SQLParser.handler_statement3_return handler_statement3() throws RecognitionException {
		SQLParser.handler_statement3_return retval = new SQLParser.handler_statement3_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token READ_SYM552=null;
		Token set553=null;
		ParserRuleReturnScope where_clause554 =null;
		ParserRuleReturnScope limit_clause555 =null;

		Object READ_SYM552_tree=null;
		Object set553_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1715:19: ( READ_SYM ( FIRST_SYM | NEXT_SYM ) ( where_clause )? ( limit_clause )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1716:3: READ_SYM ( FIRST_SYM | NEXT_SYM ) ( where_clause )? ( limit_clause )?
			{
			root_0 = (Object)adaptor.nil();


			READ_SYM552=(Token)match(input,READ_SYM,FOLLOW_READ_SYM_in_handler_statement325571); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			READ_SYM552_tree = (Object)adaptor.create(READ_SYM552);
			adaptor.addChild(root_0, READ_SYM552_tree);
			}

			set553=input.LT(1);
			if ( input.LA(1)==FIRST_SYM||input.LA(1)==NEXT_SYM ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set553));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1717:3: ( where_clause )?
			int alt168=2;
			int LA168_0 = input.LA(1);
			if ( (LA168_0==WHERE) ) {
				alt168=1;
			}
			switch (alt168) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1717:4: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_handler_statement325584);
					where_clause554=where_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, where_clause554.getTree());

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1717:19: ( limit_clause )?
			int alt169=2;
			int LA169_0 = input.LA(1);
			if ( (LA169_0==INTEGER_NUM||LA169_0==LIMIT) ) {
				alt169=1;
			}
			switch (alt169) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1717:20: limit_clause
					{
					pushFollow(FOLLOW_limit_clause_in_handler_statement325589);
					limit_clause555=limit_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, limit_clause555.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "handler_statement3"


	public static class close_handler_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "close_handler_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1720:1: close_handler_statement : CLOSE_SYM ;
	public final SQLParser.close_handler_statement_return close_handler_statement() throws RecognitionException {
		SQLParser.close_handler_statement_return retval = new SQLParser.close_handler_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token CLOSE_SYM556=null;

		Object CLOSE_SYM556_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1720:24: ( CLOSE_SYM )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1721:3: CLOSE_SYM
			{
			root_0 = (Object)adaptor.nil();


			CLOSE_SYM556=(Token)match(input,CLOSE_SYM,FOLLOW_CLOSE_SYM_in_close_handler_statement25601); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			CLOSE_SYM556_tree = (Object)adaptor.create(CLOSE_SYM556);
			adaptor.addChild(root_0, CLOSE_SYM556_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "close_handler_statement"


	public static class load_data_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "load_data_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1731:1: load_data_statement : LOAD DATA_SYM ( LOW_PRIORITY | CONCURRENT )? ( LOCAL_SYM )? INFILE TEXT_STRING ( REPLACE | IGNORE_SYM )? INTO TABLE table_spec ( partition_clause )? ( CHARACTER_SYM SET_SYM charset_name )? ( ( FIELDS_SYM | COLUMNS_SYM ) ( TERMINATED BY_SYM TEXT_STRING )? ( ( OPTIONALLY )? ENCLOSED BY_SYM TEXT_STRING )? ( ESCAPED BY_SYM TEXT_STRING )? )? ( LINES ( STARTING BY_SYM TEXT_STRING )? ( TERMINATED BY_SYM TEXT_STRING )? )? ( IGNORE_SYM INTEGER_NUM ( LINES | ROWS_SYM ) )? ( LPAREN ( column_spec | USER_VAR ) ( COMMA ( column_spec | USER_VAR ) )* RPAREN )? ( set_columns_cluase )? ;
	public final SQLParser.load_data_statement_return load_data_statement() throws RecognitionException {
		SQLParser.load_data_statement_return retval = new SQLParser.load_data_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LOAD557=null;
		Token DATA_SYM558=null;
		Token set559=null;
		Token LOCAL_SYM560=null;
		Token INFILE561=null;
		Token TEXT_STRING562=null;
		Token set563=null;
		Token INTO564=null;
		Token TABLE565=null;
		Token CHARACTER_SYM568=null;
		Token SET_SYM569=null;
		Token set571=null;
		Token TERMINATED572=null;
		Token BY_SYM573=null;
		Token TEXT_STRING574=null;
		Token OPTIONALLY575=null;
		Token ENCLOSED576=null;
		Token BY_SYM577=null;
		Token TEXT_STRING578=null;
		Token ESCAPED579=null;
		Token BY_SYM580=null;
		Token TEXT_STRING581=null;
		Token LINES582=null;
		Token STARTING583=null;
		Token BY_SYM584=null;
		Token TEXT_STRING585=null;
		Token TERMINATED586=null;
		Token BY_SYM587=null;
		Token TEXT_STRING588=null;
		Token IGNORE_SYM589=null;
		Token INTEGER_NUM590=null;
		Token set591=null;
		Token LPAREN592=null;
		Token USER_VAR594=null;
		Token COMMA595=null;
		Token USER_VAR597=null;
		Token RPAREN598=null;
		ParserRuleReturnScope table_spec566 =null;
		ParserRuleReturnScope partition_clause567 =null;
		ParserRuleReturnScope charset_name570 =null;
		ParserRuleReturnScope column_spec593 =null;
		ParserRuleReturnScope column_spec596 =null;
		ParserRuleReturnScope set_columns_cluase599 =null;

		Object LOAD557_tree=null;
		Object DATA_SYM558_tree=null;
		Object set559_tree=null;
		Object LOCAL_SYM560_tree=null;
		Object INFILE561_tree=null;
		Object TEXT_STRING562_tree=null;
		Object set563_tree=null;
		Object INTO564_tree=null;
		Object TABLE565_tree=null;
		Object CHARACTER_SYM568_tree=null;
		Object SET_SYM569_tree=null;
		Object set571_tree=null;
		Object TERMINATED572_tree=null;
		Object BY_SYM573_tree=null;
		Object TEXT_STRING574_tree=null;
		Object OPTIONALLY575_tree=null;
		Object ENCLOSED576_tree=null;
		Object BY_SYM577_tree=null;
		Object TEXT_STRING578_tree=null;
		Object ESCAPED579_tree=null;
		Object BY_SYM580_tree=null;
		Object TEXT_STRING581_tree=null;
		Object LINES582_tree=null;
		Object STARTING583_tree=null;
		Object BY_SYM584_tree=null;
		Object TEXT_STRING585_tree=null;
		Object TERMINATED586_tree=null;
		Object BY_SYM587_tree=null;
		Object TEXT_STRING588_tree=null;
		Object IGNORE_SYM589_tree=null;
		Object INTEGER_NUM590_tree=null;
		Object set591_tree=null;
		Object LPAREN592_tree=null;
		Object USER_VAR594_tree=null;
		Object COMMA595_tree=null;
		Object USER_VAR597_tree=null;
		Object RPAREN598_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1731:20: ( LOAD DATA_SYM ( LOW_PRIORITY | CONCURRENT )? ( LOCAL_SYM )? INFILE TEXT_STRING ( REPLACE | IGNORE_SYM )? INTO TABLE table_spec ( partition_clause )? ( CHARACTER_SYM SET_SYM charset_name )? ( ( FIELDS_SYM | COLUMNS_SYM ) ( TERMINATED BY_SYM TEXT_STRING )? ( ( OPTIONALLY )? ENCLOSED BY_SYM TEXT_STRING )? ( ESCAPED BY_SYM TEXT_STRING )? )? ( LINES ( STARTING BY_SYM TEXT_STRING )? ( TERMINATED BY_SYM TEXT_STRING )? )? ( IGNORE_SYM INTEGER_NUM ( LINES | ROWS_SYM ) )? ( LPAREN ( column_spec | USER_VAR ) ( COMMA ( column_spec | USER_VAR ) )* RPAREN )? ( set_columns_cluase )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1732:3: LOAD DATA_SYM ( LOW_PRIORITY | CONCURRENT )? ( LOCAL_SYM )? INFILE TEXT_STRING ( REPLACE | IGNORE_SYM )? INTO TABLE table_spec ( partition_clause )? ( CHARACTER_SYM SET_SYM charset_name )? ( ( FIELDS_SYM | COLUMNS_SYM ) ( TERMINATED BY_SYM TEXT_STRING )? ( ( OPTIONALLY )? ENCLOSED BY_SYM TEXT_STRING )? ( ESCAPED BY_SYM TEXT_STRING )? )? ( LINES ( STARTING BY_SYM TEXT_STRING )? ( TERMINATED BY_SYM TEXT_STRING )? )? ( IGNORE_SYM INTEGER_NUM ( LINES | ROWS_SYM ) )? ( LPAREN ( column_spec | USER_VAR ) ( COMMA ( column_spec | USER_VAR ) )* RPAREN )? ( set_columns_cluase )?
			{
			root_0 = (Object)adaptor.nil();


			LOAD557=(Token)match(input,LOAD,FOLLOW_LOAD_in_load_data_statement25618); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LOAD557_tree = (Object)adaptor.create(LOAD557);
			adaptor.addChild(root_0, LOAD557_tree);
			}

			DATA_SYM558=(Token)match(input,DATA_SYM,FOLLOW_DATA_SYM_in_load_data_statement25620); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DATA_SYM558_tree = (Object)adaptor.create(DATA_SYM558);
			adaptor.addChild(root_0, DATA_SYM558_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1732:17: ( LOW_PRIORITY | CONCURRENT )?
			int alt170=2;
			int LA170_0 = input.LA(1);
			if ( (LA170_0==CONCURRENT||LA170_0==LOW_PRIORITY) ) {
				alt170=1;
			}
			switch (alt170) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
					{
					set559=input.LT(1);
					if ( input.LA(1)==CONCURRENT||input.LA(1)==LOW_PRIORITY ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set559));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1732:46: ( LOCAL_SYM )?
			int alt171=2;
			int LA171_0 = input.LA(1);
			if ( (LA171_0==LOCAL_SYM) ) {
				alt171=1;
			}
			switch (alt171) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1732:47: LOCAL_SYM
					{
					LOCAL_SYM560=(Token)match(input,LOCAL_SYM,FOLLOW_LOCAL_SYM_in_load_data_statement25632); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LOCAL_SYM560_tree = (Object)adaptor.create(LOCAL_SYM560);
					adaptor.addChild(root_0, LOCAL_SYM560_tree);
					}

					}
					break;

			}

			INFILE561=(Token)match(input,INFILE,FOLLOW_INFILE_in_load_data_statement25636); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			INFILE561_tree = (Object)adaptor.create(INFILE561);
			adaptor.addChild(root_0, INFILE561_tree);
			}

			TEXT_STRING562=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_load_data_statement25638); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			TEXT_STRING562_tree = (Object)adaptor.create(TEXT_STRING562);
			adaptor.addChild(root_0, TEXT_STRING562_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1733:3: ( REPLACE | IGNORE_SYM )?
			int alt172=2;
			int LA172_0 = input.LA(1);
			if ( (LA172_0==IGNORE_SYM||LA172_0==REPLACE) ) {
				alt172=1;
			}
			switch (alt172) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
					{
					set563=input.LT(1);
					if ( input.LA(1)==IGNORE_SYM||input.LA(1)==REPLACE ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set563));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			INTO564=(Token)match(input,INTO,FOLLOW_INTO_in_load_data_statement25653); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			INTO564_tree = (Object)adaptor.create(INTO564);
			adaptor.addChild(root_0, INTO564_tree);
			}

			TABLE565=(Token)match(input,TABLE,FOLLOW_TABLE_in_load_data_statement25655); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			TABLE565_tree = (Object)adaptor.create(TABLE565);
			adaptor.addChild(root_0, TABLE565_tree);
			}

			pushFollow(FOLLOW_table_spec_in_load_data_statement25657);
			table_spec566=table_spec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_spec566.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1735:3: ( partition_clause )?
			int alt173=2;
			int LA173_0 = input.LA(1);
			if ( (LA173_0==PARTITION_SYM) ) {
				alt173=1;
			}
			switch (alt173) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1735:4: partition_clause
					{
					pushFollow(FOLLOW_partition_clause_in_load_data_statement25662);
					partition_clause567=partition_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_clause567.getTree());

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1736:3: ( CHARACTER_SYM SET_SYM charset_name )?
			int alt174=2;
			int LA174_0 = input.LA(1);
			if ( (LA174_0==CHARACTER_SYM) ) {
				alt174=1;
			}
			switch (alt174) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1736:4: CHARACTER_SYM SET_SYM charset_name
					{
					CHARACTER_SYM568=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_load_data_statement25669); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CHARACTER_SYM568_tree = (Object)adaptor.create(CHARACTER_SYM568);
					adaptor.addChild(root_0, CHARACTER_SYM568_tree);
					}

					SET_SYM569=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_load_data_statement25671); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SET_SYM569_tree = (Object)adaptor.create(SET_SYM569);
					adaptor.addChild(root_0, SET_SYM569_tree);
					}

					pushFollow(FOLLOW_charset_name_in_load_data_statement25673);
					charset_name570=charset_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name570.getTree());

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1737:3: ( ( FIELDS_SYM | COLUMNS_SYM ) ( TERMINATED BY_SYM TEXT_STRING )? ( ( OPTIONALLY )? ENCLOSED BY_SYM TEXT_STRING )? ( ESCAPED BY_SYM TEXT_STRING )? )?
			int alt179=2;
			int LA179_0 = input.LA(1);
			if ( (LA179_0==COLUMNS_SYM||LA179_0==FIELDS_SYM) ) {
				alt179=1;
			}
			switch (alt179) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1738:5: ( FIELDS_SYM | COLUMNS_SYM ) ( TERMINATED BY_SYM TEXT_STRING )? ( ( OPTIONALLY )? ENCLOSED BY_SYM TEXT_STRING )? ( ESCAPED BY_SYM TEXT_STRING )?
					{
					set571=input.LT(1);
					if ( input.LA(1)==COLUMNS_SYM||input.LA(1)==FIELDS_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set571));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1739:5: ( TERMINATED BY_SYM TEXT_STRING )?
					int alt175=2;
					int LA175_0 = input.LA(1);
					if ( (LA175_0==TERMINATED) ) {
						alt175=1;
					}
					switch (alt175) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1739:6: TERMINATED BY_SYM TEXT_STRING
							{
							TERMINATED572=(Token)match(input,TERMINATED,FOLLOW_TERMINATED_in_load_data_statement25698); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TERMINATED572_tree = (Object)adaptor.create(TERMINATED572);
							adaptor.addChild(root_0, TERMINATED572_tree);
							}

							BY_SYM573=(Token)match(input,BY_SYM,FOLLOW_BY_SYM_in_load_data_statement25700); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							BY_SYM573_tree = (Object)adaptor.create(BY_SYM573);
							adaptor.addChild(root_0, BY_SYM573_tree);
							}

							TEXT_STRING574=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_load_data_statement25702); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TEXT_STRING574_tree = (Object)adaptor.create(TEXT_STRING574);
							adaptor.addChild(root_0, TEXT_STRING574_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1740:5: ( ( OPTIONALLY )? ENCLOSED BY_SYM TEXT_STRING )?
					int alt177=2;
					int LA177_0 = input.LA(1);
					if ( (LA177_0==ENCLOSED||LA177_0==OPTIONALLY) ) {
						alt177=1;
					}
					switch (alt177) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1740:6: ( OPTIONALLY )? ENCLOSED BY_SYM TEXT_STRING
							{
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1740:6: ( OPTIONALLY )?
							int alt176=2;
							int LA176_0 = input.LA(1);
							if ( (LA176_0==OPTIONALLY) ) {
								alt176=1;
							}
							switch (alt176) {
								case 1 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1740:7: OPTIONALLY
									{
									OPTIONALLY575=(Token)match(input,OPTIONALLY,FOLLOW_OPTIONALLY_in_load_data_statement25712); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									OPTIONALLY575_tree = (Object)adaptor.create(OPTIONALLY575);
									adaptor.addChild(root_0, OPTIONALLY575_tree);
									}

									}
									break;

							}

							ENCLOSED576=(Token)match(input,ENCLOSED,FOLLOW_ENCLOSED_in_load_data_statement25716); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ENCLOSED576_tree = (Object)adaptor.create(ENCLOSED576);
							adaptor.addChild(root_0, ENCLOSED576_tree);
							}

							BY_SYM577=(Token)match(input,BY_SYM,FOLLOW_BY_SYM_in_load_data_statement25718); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							BY_SYM577_tree = (Object)adaptor.create(BY_SYM577);
							adaptor.addChild(root_0, BY_SYM577_tree);
							}

							TEXT_STRING578=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_load_data_statement25720); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TEXT_STRING578_tree = (Object)adaptor.create(TEXT_STRING578);
							adaptor.addChild(root_0, TEXT_STRING578_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1741:5: ( ESCAPED BY_SYM TEXT_STRING )?
					int alt178=2;
					int LA178_0 = input.LA(1);
					if ( (LA178_0==ESCAPED) ) {
						alt178=1;
					}
					switch (alt178) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1741:6: ESCAPED BY_SYM TEXT_STRING
							{
							ESCAPED579=(Token)match(input,ESCAPED,FOLLOW_ESCAPED_in_load_data_statement25729); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ESCAPED579_tree = (Object)adaptor.create(ESCAPED579);
							adaptor.addChild(root_0, ESCAPED579_tree);
							}

							BY_SYM580=(Token)match(input,BY_SYM,FOLLOW_BY_SYM_in_load_data_statement25731); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							BY_SYM580_tree = (Object)adaptor.create(BY_SYM580);
							adaptor.addChild(root_0, BY_SYM580_tree);
							}

							TEXT_STRING581=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_load_data_statement25733); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TEXT_STRING581_tree = (Object)adaptor.create(TEXT_STRING581);
							adaptor.addChild(root_0, TEXT_STRING581_tree);
							}

							}
							break;

					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1743:3: ( LINES ( STARTING BY_SYM TEXT_STRING )? ( TERMINATED BY_SYM TEXT_STRING )? )?
			int alt182=2;
			int LA182_0 = input.LA(1);
			if ( (LA182_0==LINES) ) {
				alt182=1;
			}
			switch (alt182) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1744:5: LINES ( STARTING BY_SYM TEXT_STRING )? ( TERMINATED BY_SYM TEXT_STRING )?
					{
					LINES582=(Token)match(input,LINES,FOLLOW_LINES_in_load_data_statement25750); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LINES582_tree = (Object)adaptor.create(LINES582);
					adaptor.addChild(root_0, LINES582_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1745:5: ( STARTING BY_SYM TEXT_STRING )?
					int alt180=2;
					int LA180_0 = input.LA(1);
					if ( (LA180_0==STARTING) ) {
						alt180=1;
					}
					switch (alt180) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1745:6: STARTING BY_SYM TEXT_STRING
							{
							STARTING583=(Token)match(input,STARTING,FOLLOW_STARTING_in_load_data_statement25757); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							STARTING583_tree = (Object)adaptor.create(STARTING583);
							adaptor.addChild(root_0, STARTING583_tree);
							}

							BY_SYM584=(Token)match(input,BY_SYM,FOLLOW_BY_SYM_in_load_data_statement25759); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							BY_SYM584_tree = (Object)adaptor.create(BY_SYM584);
							adaptor.addChild(root_0, BY_SYM584_tree);
							}

							TEXT_STRING585=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_load_data_statement25761); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TEXT_STRING585_tree = (Object)adaptor.create(TEXT_STRING585);
							adaptor.addChild(root_0, TEXT_STRING585_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1746:5: ( TERMINATED BY_SYM TEXT_STRING )?
					int alt181=2;
					int LA181_0 = input.LA(1);
					if ( (LA181_0==TERMINATED) ) {
						alt181=1;
					}
					switch (alt181) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1746:6: TERMINATED BY_SYM TEXT_STRING
							{
							TERMINATED586=(Token)match(input,TERMINATED,FOLLOW_TERMINATED_in_load_data_statement25770); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TERMINATED586_tree = (Object)adaptor.create(TERMINATED586);
							adaptor.addChild(root_0, TERMINATED586_tree);
							}

							BY_SYM587=(Token)match(input,BY_SYM,FOLLOW_BY_SYM_in_load_data_statement25772); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							BY_SYM587_tree = (Object)adaptor.create(BY_SYM587);
							adaptor.addChild(root_0, BY_SYM587_tree);
							}

							TEXT_STRING588=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_load_data_statement25774); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TEXT_STRING588_tree = (Object)adaptor.create(TEXT_STRING588);
							adaptor.addChild(root_0, TEXT_STRING588_tree);
							}

							}
							break;

					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1748:3: ( IGNORE_SYM INTEGER_NUM ( LINES | ROWS_SYM ) )?
			int alt183=2;
			int LA183_0 = input.LA(1);
			if ( (LA183_0==IGNORE_SYM) ) {
				alt183=1;
			}
			switch (alt183) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1748:4: IGNORE_SYM INTEGER_NUM ( LINES | ROWS_SYM )
					{
					IGNORE_SYM589=(Token)match(input,IGNORE_SYM,FOLLOW_IGNORE_SYM_in_load_data_statement25786); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IGNORE_SYM589_tree = (Object)adaptor.create(IGNORE_SYM589);
					adaptor.addChild(root_0, IGNORE_SYM589_tree);
					}

					INTEGER_NUM590=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_load_data_statement25788); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM590_tree = (Object)adaptor.create(INTEGER_NUM590);
					adaptor.addChild(root_0, INTEGER_NUM590_tree);
					}

					set591=input.LT(1);
					if ( input.LA(1)==LINES||input.LA(1)==ROWS_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set591));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1749:3: ( LPAREN ( column_spec | USER_VAR ) ( COMMA ( column_spec | USER_VAR ) )* RPAREN )?
			int alt187=2;
			int LA187_0 = input.LA(1);
			if ( (LA187_0==LPAREN) ) {
				alt187=1;
			}
			switch (alt187) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1749:4: LPAREN ( column_spec | USER_VAR ) ( COMMA ( column_spec | USER_VAR ) )* RPAREN
					{
					LPAREN592=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_load_data_statement25803); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN592_tree = (Object)adaptor.create(LPAREN592);
					adaptor.addChild(root_0, LPAREN592_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1749:11: ( column_spec | USER_VAR )
					int alt184=2;
					int LA184_0 = input.LA(1);
					if ( (LA184_0==ID) ) {
						alt184=1;
					}
					else if ( (LA184_0==USER_VAR) ) {
						alt184=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 184, 0, input);
						throw nvae;
					}

					switch (alt184) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1749:12: column_spec
							{
							pushFollow(FOLLOW_column_spec_in_load_data_statement25806);
							column_spec593=column_spec();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec593.getTree());

							}
							break;
						case 2 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1749:24: USER_VAR
							{
							USER_VAR594=(Token)match(input,USER_VAR,FOLLOW_USER_VAR_in_load_data_statement25808); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							USER_VAR594_tree = (Object)adaptor.create(USER_VAR594);
							adaptor.addChild(root_0, USER_VAR594_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1749:34: ( COMMA ( column_spec | USER_VAR ) )*
					loop186:
					while (true) {
						int alt186=2;
						int LA186_0 = input.LA(1);
						if ( (LA186_0==COMMA) ) {
							alt186=1;
						}

						switch (alt186) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1749:35: COMMA ( column_spec | USER_VAR )
							{
							COMMA595=(Token)match(input,COMMA,FOLLOW_COMMA_in_load_data_statement25812); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA595_tree = (Object)adaptor.create(COMMA595);
							adaptor.addChild(root_0, COMMA595_tree);
							}

							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1749:41: ( column_spec | USER_VAR )
							int alt185=2;
							int LA185_0 = input.LA(1);
							if ( (LA185_0==ID) ) {
								alt185=1;
							}
							else if ( (LA185_0==USER_VAR) ) {
								alt185=2;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae =
									new NoViableAltException("", 185, 0, input);
								throw nvae;
							}

							switch (alt185) {
								case 1 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1749:42: column_spec
									{
									pushFollow(FOLLOW_column_spec_in_load_data_statement25815);
									column_spec596=column_spec();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec596.getTree());

									}
									break;
								case 2 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1749:54: USER_VAR
									{
									USER_VAR597=(Token)match(input,USER_VAR,FOLLOW_USER_VAR_in_load_data_statement25817); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									USER_VAR597_tree = (Object)adaptor.create(USER_VAR597);
									adaptor.addChild(root_0, USER_VAR597_tree);
									}

									}
									break;

							}

							}
							break;

						default :
							break loop186;
						}
					}

					RPAREN598=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_load_data_statement25822); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN598_tree = (Object)adaptor.create(RPAREN598);
					adaptor.addChild(root_0, RPAREN598_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1750:3: ( set_columns_cluase )?
			int alt188=2;
			int LA188_0 = input.LA(1);
			if ( (LA188_0==SET_SYM) ) {
				alt188=1;
			}
			switch (alt188) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1750:4: set_columns_cluase
					{
					pushFollow(FOLLOW_set_columns_cluase_in_load_data_statement25829);
					set_columns_cluase599=set_columns_cluase();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, set_columns_cluase599.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "load_data_statement"


	public static class load_xml_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "load_xml_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1759:1: load_xml_statement : LOAD XML_SYM ( LOW_PRIORITY | CONCURRENT )? ( LOCAL_SYM )? INFILE TEXT_STRING ( REPLACE | IGNORE_SYM )? INTO TABLE table_spec ( partition_clause )? ( CHARACTER_SYM SET_SYM charset_name )? ( ROWS_SYM IDENTIFIED_SYM BY_SYM TEXT_STRING )? ( IGNORE_SYM INTEGER_NUM ( LINES | ROWS_SYM ) )? ( LPAREN ( column_spec | USER_VAR ) ( COMMA ( column_spec | USER_VAR ) )* RPAREN )? ( set_columns_cluase )? ;
	public final SQLParser.load_xml_statement_return load_xml_statement() throws RecognitionException {
		SQLParser.load_xml_statement_return retval = new SQLParser.load_xml_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LOAD600=null;
		Token XML_SYM601=null;
		Token set602=null;
		Token LOCAL_SYM603=null;
		Token INFILE604=null;
		Token TEXT_STRING605=null;
		Token set606=null;
		Token INTO607=null;
		Token TABLE608=null;
		Token CHARACTER_SYM611=null;
		Token SET_SYM612=null;
		Token ROWS_SYM614=null;
		Token IDENTIFIED_SYM615=null;
		Token BY_SYM616=null;
		Token TEXT_STRING617=null;
		Token IGNORE_SYM618=null;
		Token INTEGER_NUM619=null;
		Token set620=null;
		Token LPAREN621=null;
		Token USER_VAR623=null;
		Token COMMA624=null;
		Token USER_VAR626=null;
		Token RPAREN627=null;
		ParserRuleReturnScope table_spec609 =null;
		ParserRuleReturnScope partition_clause610 =null;
		ParserRuleReturnScope charset_name613 =null;
		ParserRuleReturnScope column_spec622 =null;
		ParserRuleReturnScope column_spec625 =null;
		ParserRuleReturnScope set_columns_cluase628 =null;

		Object LOAD600_tree=null;
		Object XML_SYM601_tree=null;
		Object set602_tree=null;
		Object LOCAL_SYM603_tree=null;
		Object INFILE604_tree=null;
		Object TEXT_STRING605_tree=null;
		Object set606_tree=null;
		Object INTO607_tree=null;
		Object TABLE608_tree=null;
		Object CHARACTER_SYM611_tree=null;
		Object SET_SYM612_tree=null;
		Object ROWS_SYM614_tree=null;
		Object IDENTIFIED_SYM615_tree=null;
		Object BY_SYM616_tree=null;
		Object TEXT_STRING617_tree=null;
		Object IGNORE_SYM618_tree=null;
		Object INTEGER_NUM619_tree=null;
		Object set620_tree=null;
		Object LPAREN621_tree=null;
		Object USER_VAR623_tree=null;
		Object COMMA624_tree=null;
		Object USER_VAR626_tree=null;
		Object RPAREN627_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1759:19: ( LOAD XML_SYM ( LOW_PRIORITY | CONCURRENT )? ( LOCAL_SYM )? INFILE TEXT_STRING ( REPLACE | IGNORE_SYM )? INTO TABLE table_spec ( partition_clause )? ( CHARACTER_SYM SET_SYM charset_name )? ( ROWS_SYM IDENTIFIED_SYM BY_SYM TEXT_STRING )? ( IGNORE_SYM INTEGER_NUM ( LINES | ROWS_SYM ) )? ( LPAREN ( column_spec | USER_VAR ) ( COMMA ( column_spec | USER_VAR ) )* RPAREN )? ( set_columns_cluase )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1760:3: LOAD XML_SYM ( LOW_PRIORITY | CONCURRENT )? ( LOCAL_SYM )? INFILE TEXT_STRING ( REPLACE | IGNORE_SYM )? INTO TABLE table_spec ( partition_clause )? ( CHARACTER_SYM SET_SYM charset_name )? ( ROWS_SYM IDENTIFIED_SYM BY_SYM TEXT_STRING )? ( IGNORE_SYM INTEGER_NUM ( LINES | ROWS_SYM ) )? ( LPAREN ( column_spec | USER_VAR ) ( COMMA ( column_spec | USER_VAR ) )* RPAREN )? ( set_columns_cluase )?
			{
			root_0 = (Object)adaptor.nil();


			LOAD600=(Token)match(input,LOAD,FOLLOW_LOAD_in_load_xml_statement25847); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LOAD600_tree = (Object)adaptor.create(LOAD600);
			adaptor.addChild(root_0, LOAD600_tree);
			}

			XML_SYM601=(Token)match(input,XML_SYM,FOLLOW_XML_SYM_in_load_xml_statement25849); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			XML_SYM601_tree = (Object)adaptor.create(XML_SYM601);
			adaptor.addChild(root_0, XML_SYM601_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1760:16: ( LOW_PRIORITY | CONCURRENT )?
			int alt189=2;
			int LA189_0 = input.LA(1);
			if ( (LA189_0==CONCURRENT||LA189_0==LOW_PRIORITY) ) {
				alt189=1;
			}
			switch (alt189) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
					{
					set602=input.LT(1);
					if ( input.LA(1)==CONCURRENT||input.LA(1)==LOW_PRIORITY ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set602));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1760:45: ( LOCAL_SYM )?
			int alt190=2;
			int LA190_0 = input.LA(1);
			if ( (LA190_0==LOCAL_SYM) ) {
				alt190=1;
			}
			switch (alt190) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1760:46: LOCAL_SYM
					{
					LOCAL_SYM603=(Token)match(input,LOCAL_SYM,FOLLOW_LOCAL_SYM_in_load_xml_statement25861); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LOCAL_SYM603_tree = (Object)adaptor.create(LOCAL_SYM603);
					adaptor.addChild(root_0, LOCAL_SYM603_tree);
					}

					}
					break;

			}

			INFILE604=(Token)match(input,INFILE,FOLLOW_INFILE_in_load_xml_statement25865); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			INFILE604_tree = (Object)adaptor.create(INFILE604);
			adaptor.addChild(root_0, INFILE604_tree);
			}

			TEXT_STRING605=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_load_xml_statement25867); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			TEXT_STRING605_tree = (Object)adaptor.create(TEXT_STRING605);
			adaptor.addChild(root_0, TEXT_STRING605_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1761:3: ( REPLACE | IGNORE_SYM )?
			int alt191=2;
			int LA191_0 = input.LA(1);
			if ( (LA191_0==IGNORE_SYM||LA191_0==REPLACE) ) {
				alt191=1;
			}
			switch (alt191) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
					{
					set606=input.LT(1);
					if ( input.LA(1)==IGNORE_SYM||input.LA(1)==REPLACE ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set606));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			INTO607=(Token)match(input,INTO,FOLLOW_INTO_in_load_xml_statement25882); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			INTO607_tree = (Object)adaptor.create(INTO607);
			adaptor.addChild(root_0, INTO607_tree);
			}

			TABLE608=(Token)match(input,TABLE,FOLLOW_TABLE_in_load_xml_statement25884); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			TABLE608_tree = (Object)adaptor.create(TABLE608);
			adaptor.addChild(root_0, TABLE608_tree);
			}

			pushFollow(FOLLOW_table_spec_in_load_xml_statement25886);
			table_spec609=table_spec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_spec609.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1763:3: ( partition_clause )?
			int alt192=2;
			int LA192_0 = input.LA(1);
			if ( (LA192_0==PARTITION_SYM) ) {
				alt192=1;
			}
			switch (alt192) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1763:4: partition_clause
					{
					pushFollow(FOLLOW_partition_clause_in_load_xml_statement25891);
					partition_clause610=partition_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_clause610.getTree());

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1764:3: ( CHARACTER_SYM SET_SYM charset_name )?
			int alt193=2;
			int LA193_0 = input.LA(1);
			if ( (LA193_0==CHARACTER_SYM) ) {
				alt193=1;
			}
			switch (alt193) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1764:4: CHARACTER_SYM SET_SYM charset_name
					{
					CHARACTER_SYM611=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_load_xml_statement25898); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CHARACTER_SYM611_tree = (Object)adaptor.create(CHARACTER_SYM611);
					adaptor.addChild(root_0, CHARACTER_SYM611_tree);
					}

					SET_SYM612=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_load_xml_statement25900); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SET_SYM612_tree = (Object)adaptor.create(SET_SYM612);
					adaptor.addChild(root_0, SET_SYM612_tree);
					}

					pushFollow(FOLLOW_charset_name_in_load_xml_statement25902);
					charset_name613=charset_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name613.getTree());

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1765:3: ( ROWS_SYM IDENTIFIED_SYM BY_SYM TEXT_STRING )?
			int alt194=2;
			int LA194_0 = input.LA(1);
			if ( (LA194_0==ROWS_SYM) ) {
				alt194=1;
			}
			switch (alt194) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1765:4: ROWS_SYM IDENTIFIED_SYM BY_SYM TEXT_STRING
					{
					ROWS_SYM614=(Token)match(input,ROWS_SYM,FOLLOW_ROWS_SYM_in_load_xml_statement25909); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ROWS_SYM614_tree = (Object)adaptor.create(ROWS_SYM614);
					adaptor.addChild(root_0, ROWS_SYM614_tree);
					}

					IDENTIFIED_SYM615=(Token)match(input,IDENTIFIED_SYM,FOLLOW_IDENTIFIED_SYM_in_load_xml_statement25911); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IDENTIFIED_SYM615_tree = (Object)adaptor.create(IDENTIFIED_SYM615);
					adaptor.addChild(root_0, IDENTIFIED_SYM615_tree);
					}

					BY_SYM616=(Token)match(input,BY_SYM,FOLLOW_BY_SYM_in_load_xml_statement25913); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BY_SYM616_tree = (Object)adaptor.create(BY_SYM616);
					adaptor.addChild(root_0, BY_SYM616_tree);
					}

					TEXT_STRING617=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_load_xml_statement25915); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING617_tree = (Object)adaptor.create(TEXT_STRING617);
					adaptor.addChild(root_0, TEXT_STRING617_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1766:3: ( IGNORE_SYM INTEGER_NUM ( LINES | ROWS_SYM ) )?
			int alt195=2;
			int LA195_0 = input.LA(1);
			if ( (LA195_0==IGNORE_SYM) ) {
				alt195=1;
			}
			switch (alt195) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1766:4: IGNORE_SYM INTEGER_NUM ( LINES | ROWS_SYM )
					{
					IGNORE_SYM618=(Token)match(input,IGNORE_SYM,FOLLOW_IGNORE_SYM_in_load_xml_statement25922); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IGNORE_SYM618_tree = (Object)adaptor.create(IGNORE_SYM618);
					adaptor.addChild(root_0, IGNORE_SYM618_tree);
					}

					INTEGER_NUM619=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_load_xml_statement25924); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM619_tree = (Object)adaptor.create(INTEGER_NUM619);
					adaptor.addChild(root_0, INTEGER_NUM619_tree);
					}

					set620=input.LT(1);
					if ( input.LA(1)==LINES||input.LA(1)==ROWS_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set620));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1767:3: ( LPAREN ( column_spec | USER_VAR ) ( COMMA ( column_spec | USER_VAR ) )* RPAREN )?
			int alt199=2;
			int LA199_0 = input.LA(1);
			if ( (LA199_0==LPAREN) ) {
				alt199=1;
			}
			switch (alt199) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1767:4: LPAREN ( column_spec | USER_VAR ) ( COMMA ( column_spec | USER_VAR ) )* RPAREN
					{
					LPAREN621=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_load_xml_statement25939); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN621_tree = (Object)adaptor.create(LPAREN621);
					adaptor.addChild(root_0, LPAREN621_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1767:11: ( column_spec | USER_VAR )
					int alt196=2;
					int LA196_0 = input.LA(1);
					if ( (LA196_0==ID) ) {
						alt196=1;
					}
					else if ( (LA196_0==USER_VAR) ) {
						alt196=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 196, 0, input);
						throw nvae;
					}

					switch (alt196) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1767:12: column_spec
							{
							pushFollow(FOLLOW_column_spec_in_load_xml_statement25942);
							column_spec622=column_spec();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec622.getTree());

							}
							break;
						case 2 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1767:24: USER_VAR
							{
							USER_VAR623=(Token)match(input,USER_VAR,FOLLOW_USER_VAR_in_load_xml_statement25944); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							USER_VAR623_tree = (Object)adaptor.create(USER_VAR623);
							adaptor.addChild(root_0, USER_VAR623_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1767:34: ( COMMA ( column_spec | USER_VAR ) )*
					loop198:
					while (true) {
						int alt198=2;
						int LA198_0 = input.LA(1);
						if ( (LA198_0==COMMA) ) {
							alt198=1;
						}

						switch (alt198) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1767:35: COMMA ( column_spec | USER_VAR )
							{
							COMMA624=(Token)match(input,COMMA,FOLLOW_COMMA_in_load_xml_statement25948); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA624_tree = (Object)adaptor.create(COMMA624);
							adaptor.addChild(root_0, COMMA624_tree);
							}

							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1767:41: ( column_spec | USER_VAR )
							int alt197=2;
							int LA197_0 = input.LA(1);
							if ( (LA197_0==ID) ) {
								alt197=1;
							}
							else if ( (LA197_0==USER_VAR) ) {
								alt197=2;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae =
									new NoViableAltException("", 197, 0, input);
								throw nvae;
							}

							switch (alt197) {
								case 1 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1767:42: column_spec
									{
									pushFollow(FOLLOW_column_spec_in_load_xml_statement25951);
									column_spec625=column_spec();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec625.getTree());

									}
									break;
								case 2 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1767:54: USER_VAR
									{
									USER_VAR626=(Token)match(input,USER_VAR,FOLLOW_USER_VAR_in_load_xml_statement25953); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									USER_VAR626_tree = (Object)adaptor.create(USER_VAR626);
									adaptor.addChild(root_0, USER_VAR626_tree);
									}

									}
									break;

							}

							}
							break;

						default :
							break loop198;
						}
					}

					RPAREN627=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_load_xml_statement25958); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN627_tree = (Object)adaptor.create(RPAREN627);
					adaptor.addChild(root_0, RPAREN627_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1768:3: ( set_columns_cluase )?
			int alt200=2;
			int LA200_0 = input.LA(1);
			if ( (LA200_0==SET_SYM) ) {
				alt200=1;
			}
			switch (alt200) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1768:4: set_columns_cluase
					{
					pushFollow(FOLLOW_set_columns_cluase_in_load_xml_statement25965);
					set_columns_cluase628=set_columns_cluase();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, set_columns_cluase628.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "load_xml_statement"


	public static class replace_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "replace_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1777:1: replace_statement : replace_statement_header ( replace_statement1 | replace_statement2 | replace_statement3 ) ;
	public final SQLParser.replace_statement_return replace_statement() throws RecognitionException {
		SQLParser.replace_statement_return retval = new SQLParser.replace_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope replace_statement_header629 =null;
		ParserRuleReturnScope replace_statement1630 =null;
		ParserRuleReturnScope replace_statement2631 =null;
		ParserRuleReturnScope replace_statement3632 =null;


		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1777:18: ( replace_statement_header ( replace_statement1 | replace_statement2 | replace_statement3 ) )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1778:3: replace_statement_header ( replace_statement1 | replace_statement2 | replace_statement3 )
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_replace_statement_header_in_replace_statement25983);
			replace_statement_header629=replace_statement_header();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, replace_statement_header629.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1779:3: ( replace_statement1 | replace_statement2 | replace_statement3 )
			int alt201=3;
			alt201 = dfa201.predict(input);
			switch (alt201) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1779:5: replace_statement1
					{
					pushFollow(FOLLOW_replace_statement1_in_replace_statement25989);
					replace_statement1630=replace_statement1();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, replace_statement1630.getTree());

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1779:26: replace_statement2
					{
					pushFollow(FOLLOW_replace_statement2_in_replace_statement25993);
					replace_statement2631=replace_statement2();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, replace_statement2631.getTree());

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1779:47: replace_statement3
					{
					pushFollow(FOLLOW_replace_statement3_in_replace_statement25997);
					replace_statement3632=replace_statement3();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, replace_statement3632.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "replace_statement"


	public static class replace_statement_header_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "replace_statement_header"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1782:1: replace_statement_header : REPLACE ( LOW_PRIORITY | DELAYED_SYM )? ( INTO )? table_name ( partition_clause )? ;
	public final SQLParser.replace_statement_header_return replace_statement_header() throws RecognitionException {
		SQLParser.replace_statement_header_return retval = new SQLParser.replace_statement_header_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token REPLACE633=null;
		Token set634=null;
		Token INTO635=null;
		ParserRuleReturnScope table_name636 =null;
		ParserRuleReturnScope partition_clause637 =null;

		Object REPLACE633_tree=null;
		Object set634_tree=null;
		Object INTO635_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1782:25: ( REPLACE ( LOW_PRIORITY | DELAYED_SYM )? ( INTO )? table_name ( partition_clause )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1783:3: REPLACE ( LOW_PRIORITY | DELAYED_SYM )? ( INTO )? table_name ( partition_clause )?
			{
			root_0 = (Object)adaptor.nil();


			REPLACE633=(Token)match(input,REPLACE,FOLLOW_REPLACE_in_replace_statement_header26009); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			REPLACE633_tree = (Object)adaptor.create(REPLACE633);
			adaptor.addChild(root_0, REPLACE633_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1783:11: ( LOW_PRIORITY | DELAYED_SYM )?
			int alt202=2;
			int LA202_0 = input.LA(1);
			if ( (LA202_0==DELAYED_SYM||LA202_0==LOW_PRIORITY) ) {
				alt202=1;
			}
			switch (alt202) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
					{
					set634=input.LT(1);
					if ( input.LA(1)==DELAYED_SYM||input.LA(1)==LOW_PRIORITY ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set634));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1784:3: ( INTO )?
			int alt203=2;
			int LA203_0 = input.LA(1);
			if ( (LA203_0==INTO) ) {
				alt203=1;
			}
			switch (alt203) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1784:4: INTO
					{
					INTO635=(Token)match(input,INTO,FOLLOW_INTO_in_replace_statement_header26023); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTO635_tree = (Object)adaptor.create(INTO635);
					adaptor.addChild(root_0, INTO635_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_table_name_in_replace_statement_header26027);
			table_name636=table_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name636.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1785:3: ( partition_clause )?
			int alt204=2;
			int LA204_0 = input.LA(1);
			if ( (LA204_0==PARTITION_SYM) ) {
				alt204=1;
			}
			switch (alt204) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1785:4: partition_clause
					{
					pushFollow(FOLLOW_partition_clause_in_replace_statement_header26032);
					partition_clause637=partition_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_clause637.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "replace_statement_header"


	public static class replace_statement1_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "replace_statement1"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1788:1: replace_statement1 : ( column_list )? value_list_clause ;
	public final SQLParser.replace_statement1_return replace_statement1() throws RecognitionException {
		SQLParser.replace_statement1_return retval = new SQLParser.replace_statement1_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope column_list638 =null;
		ParserRuleReturnScope value_list_clause639 =null;


		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1788:19: ( ( column_list )? value_list_clause )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1789:3: ( column_list )? value_list_clause
			{
			root_0 = (Object)adaptor.nil();


			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1789:3: ( column_list )?
			int alt205=2;
			int LA205_0 = input.LA(1);
			if ( (LA205_0==LPAREN) ) {
				alt205=1;
			}
			switch (alt205) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1789:4: column_list
					{
					pushFollow(FOLLOW_column_list_in_replace_statement126045);
					column_list638=column_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_list638.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_value_list_clause_in_replace_statement126051);
			value_list_clause639=value_list_clause();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, value_list_clause639.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "replace_statement1"


	public static class replace_statement2_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "replace_statement2"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1793:1: replace_statement2 : set_columns_cluase ;
	public final SQLParser.replace_statement2_return replace_statement2() throws RecognitionException {
		SQLParser.replace_statement2_return retval = new SQLParser.replace_statement2_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope set_columns_cluase640 =null;


		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1793:19: ( set_columns_cluase )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1794:3: set_columns_cluase
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_set_columns_cluase_in_replace_statement226061);
			set_columns_cluase640=set_columns_cluase();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, set_columns_cluase640.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "replace_statement2"


	public static class replace_statement3_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "replace_statement3"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1797:1: replace_statement3 : ( column_list )? select_statement ;
	public final SQLParser.replace_statement3_return replace_statement3() throws RecognitionException {
		SQLParser.replace_statement3_return retval = new SQLParser.replace_statement3_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope column_list641 =null;
		ParserRuleReturnScope select_statement642 =null;


		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1797:19: ( ( column_list )? select_statement )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1798:3: ( column_list )? select_statement
			{
			root_0 = (Object)adaptor.nil();


			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1798:3: ( column_list )?
			int alt206=2;
			int LA206_0 = input.LA(1);
			if ( (LA206_0==LPAREN) ) {
				alt206=1;
			}
			switch (alt206) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1798:4: column_list
					{
					pushFollow(FOLLOW_column_list_in_replace_statement326072);
					column_list641=column_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_list641.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_select_statement_in_replace_statement326078);
			select_statement642=select_statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement642.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "replace_statement3"


	public static class create_database_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "create_database_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1809:1: create_database_statement : CREATE ( DATABASE | SCHEMA ) ( IF NOT_SYM EXISTS )? schema_name ( create_specification ( COMMA create_specification )* )* ;
	public final SQLParser.create_database_statement_return create_database_statement() throws RecognitionException {
		SQLParser.create_database_statement_return retval = new SQLParser.create_database_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token CREATE643=null;
		Token set644=null;
		Token IF645=null;
		Token NOT_SYM646=null;
		Token EXISTS647=null;
		Token COMMA650=null;
		ParserRuleReturnScope schema_name648 =null;
		ParserRuleReturnScope create_specification649 =null;
		ParserRuleReturnScope create_specification651 =null;

		Object CREATE643_tree=null;
		Object set644_tree=null;
		Object IF645_tree=null;
		Object NOT_SYM646_tree=null;
		Object EXISTS647_tree=null;
		Object COMMA650_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1809:26: ( CREATE ( DATABASE | SCHEMA ) ( IF NOT_SYM EXISTS )? schema_name ( create_specification ( COMMA create_specification )* )* )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1810:3: CREATE ( DATABASE | SCHEMA ) ( IF NOT_SYM EXISTS )? schema_name ( create_specification ( COMMA create_specification )* )*
			{
			root_0 = (Object)adaptor.nil();


			CREATE643=(Token)match(input,CREATE,FOLLOW_CREATE_in_create_database_statement26095); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			CREATE643_tree = (Object)adaptor.create(CREATE643);
			adaptor.addChild(root_0, CREATE643_tree);
			}

			set644=input.LT(1);
			if ( input.LA(1)==DATABASE||input.LA(1)==SCHEMA ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set644));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1810:30: ( IF NOT_SYM EXISTS )?
			int alt207=2;
			int LA207_0 = input.LA(1);
			if ( (LA207_0==IF) ) {
				alt207=1;
			}
			switch (alt207) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1810:31: IF NOT_SYM EXISTS
					{
					IF645=(Token)match(input,IF,FOLLOW_IF_in_create_database_statement26106); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IF645_tree = (Object)adaptor.create(IF645);
					adaptor.addChild(root_0, IF645_tree);
					}

					NOT_SYM646=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_create_database_statement26108); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NOT_SYM646_tree = (Object)adaptor.create(NOT_SYM646);
					adaptor.addChild(root_0, NOT_SYM646_tree);
					}

					EXISTS647=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_create_database_statement26110); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXISTS647_tree = (Object)adaptor.create(EXISTS647);
					adaptor.addChild(root_0, EXISTS647_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_schema_name_in_create_database_statement26114);
			schema_name648=schema_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, schema_name648.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1811:3: ( create_specification ( COMMA create_specification )* )*
			loop209:
			while (true) {
				int alt209=2;
				int LA209_0 = input.LA(1);
				if ( (LA209_0==CHARACTER_SYM||LA209_0==COLLATE_SYM||LA209_0==DEFAULT) ) {
					alt209=1;
				}

				switch (alt209) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1811:5: create_specification ( COMMA create_specification )*
					{
					pushFollow(FOLLOW_create_specification_in_create_database_statement26120);
					create_specification649=create_specification();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_specification649.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1811:26: ( COMMA create_specification )*
					loop208:
					while (true) {
						int alt208=2;
						int LA208_0 = input.LA(1);
						if ( (LA208_0==COMMA) ) {
							int LA208_2 = input.LA(2);
							if ( (LA208_2==CHARACTER_SYM||LA208_2==COLLATE_SYM||LA208_2==DEFAULT) ) {
								alt208=1;
							}

						}

						switch (alt208) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1811:27: COMMA create_specification
							{
							COMMA650=(Token)match(input,COMMA,FOLLOW_COMMA_in_create_database_statement26123); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA650_tree = (Object)adaptor.create(COMMA650);
							adaptor.addChild(root_0, COMMA650_tree);
							}

							pushFollow(FOLLOW_create_specification_in_create_database_statement26125);
							create_specification651=create_specification();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, create_specification651.getTree());

							}
							break;

						default :
							break loop208;
						}
					}

					}
					break;

				default :
					break loop209;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_database_statement"


	public static class create_specification_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "create_specification"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1813:1: create_specification : ( DEFAULT )? ( ( CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ) | ( COLLATE_SYM ( EQ_SYM )? collation_name ) ) ;
	public final SQLParser.create_specification_return create_specification() throws RecognitionException {
		SQLParser.create_specification_return retval = new SQLParser.create_specification_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token DEFAULT652=null;
		Token CHARACTER_SYM653=null;
		Token SET_SYM654=null;
		Token EQ_SYM655=null;
		Token COLLATE_SYM657=null;
		Token EQ_SYM658=null;
		ParserRuleReturnScope charset_name656 =null;
		ParserRuleReturnScope collation_name659 =null;

		Object DEFAULT652_tree=null;
		Object CHARACTER_SYM653_tree=null;
		Object SET_SYM654_tree=null;
		Object EQ_SYM655_tree=null;
		Object COLLATE_SYM657_tree=null;
		Object EQ_SYM658_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1813:21: ( ( DEFAULT )? ( ( CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ) | ( COLLATE_SYM ( EQ_SYM )? collation_name ) ) )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1814:3: ( DEFAULT )? ( ( CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ) | ( COLLATE_SYM ( EQ_SYM )? collation_name ) )
			{
			root_0 = (Object)adaptor.nil();


			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1814:3: ( DEFAULT )?
			int alt210=2;
			int LA210_0 = input.LA(1);
			if ( (LA210_0==DEFAULT) ) {
				alt210=1;
			}
			switch (alt210) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1814:4: DEFAULT
					{
					DEFAULT652=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_create_specification26140); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DEFAULT652_tree = (Object)adaptor.create(DEFAULT652);
					adaptor.addChild(root_0, DEFAULT652_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1815:3: ( ( CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ) | ( COLLATE_SYM ( EQ_SYM )? collation_name ) )
			int alt213=2;
			int LA213_0 = input.LA(1);
			if ( (LA213_0==CHARACTER_SYM) ) {
				alt213=1;
			}
			else if ( (LA213_0==COLLATE_SYM) ) {
				alt213=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 213, 0, input);
				throw nvae;
			}

			switch (alt213) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1816:5: ( CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name )
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1816:5: ( CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1816:8: CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name
					{
					CHARACTER_SYM653=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_create_specification26156); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CHARACTER_SYM653_tree = (Object)adaptor.create(CHARACTER_SYM653);
					adaptor.addChild(root_0, CHARACTER_SYM653_tree);
					}

					SET_SYM654=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_create_specification26158); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SET_SYM654_tree = (Object)adaptor.create(SET_SYM654);
					adaptor.addChild(root_0, SET_SYM654_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1816:30: ( EQ_SYM )?
					int alt211=2;
					int LA211_0 = input.LA(1);
					if ( (LA211_0==EQ_SYM) ) {
						alt211=1;
					}
					switch (alt211) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1816:31: EQ_SYM
							{
							EQ_SYM655=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_create_specification26161); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM655_tree = (Object)adaptor.create(EQ_SYM655);
							adaptor.addChild(root_0, EQ_SYM655_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_charset_name_in_create_specification26165);
					charset_name656=charset_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name656.getTree());

					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1818:5: ( COLLATE_SYM ( EQ_SYM )? collation_name )
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1818:5: ( COLLATE_SYM ( EQ_SYM )? collation_name )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1818:8: COLLATE_SYM ( EQ_SYM )? collation_name
					{
					COLLATE_SYM657=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_create_specification26183); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COLLATE_SYM657_tree = (Object)adaptor.create(COLLATE_SYM657);
					adaptor.addChild(root_0, COLLATE_SYM657_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1818:20: ( EQ_SYM )?
					int alt212=2;
					int LA212_0 = input.LA(1);
					if ( (LA212_0==EQ_SYM) ) {
						alt212=1;
					}
					switch (alt212) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1818:21: EQ_SYM
							{
							EQ_SYM658=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_create_specification26186); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM658_tree = (Object)adaptor.create(EQ_SYM658);
							adaptor.addChild(root_0, EQ_SYM658_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_collation_name_in_create_specification26190);
					collation_name659=collation_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name659.getTree());

					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_specification"


	public static class alter_database_statements_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "alter_database_statements"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1824:1: alter_database_statements : ( alter_database_statement1 | alter_database_statement2 );
	public final SQLParser.alter_database_statements_return alter_database_statements() throws RecognitionException {
		SQLParser.alter_database_statements_return retval = new SQLParser.alter_database_statements_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope alter_database_statement1660 =null;
		ParserRuleReturnScope alter_database_statement2661 =null;


		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1824:26: ( alter_database_statement1 | alter_database_statement2 )
			int alt214=2;
			int LA214_0 = input.LA(1);
			if ( (LA214_0==ALTER) ) {
				int LA214_1 = input.LA(2);
				if ( (LA214_1==DATABASE||LA214_1==SCHEMA) ) {
					int LA214_2 = input.LA(3);
					if ( (LA214_2==ID) ) {
						int LA214_3 = input.LA(4);
						if ( (LA214_3==CHARACTER_SYM||LA214_3==COLLATE_SYM||LA214_3==DEFAULT) ) {
							alt214=1;
						}
						else if ( (LA214_3==UPGRADE_SYM) ) {
							alt214=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 214, 3, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}
					else if ( (LA214_2==CHARACTER_SYM||LA214_2==COLLATE_SYM||LA214_2==DEFAULT) ) {
						alt214=1;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 214, 2, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 214, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 214, 0, input);
				throw nvae;
			}

			switch (alt214) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1825:3: alter_database_statement1
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_alter_database_statement1_in_alter_database_statements26209);
					alter_database_statement1660=alter_database_statement1();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_database_statement1660.getTree());

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1825:31: alter_database_statement2
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_alter_database_statement2_in_alter_database_statements26213);
					alter_database_statement2661=alter_database_statement2();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_database_statement2661.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_database_statements"


	public static class alter_database_statement1_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "alter_database_statement1"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1827:1: alter_database_statement1 : ALTER ( DATABASE | SCHEMA ) ( schema_name )? alter_database_specification ;
	public final SQLParser.alter_database_statement1_return alter_database_statement1() throws RecognitionException {
		SQLParser.alter_database_statement1_return retval = new SQLParser.alter_database_statement1_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token ALTER662=null;
		Token set663=null;
		ParserRuleReturnScope schema_name664 =null;
		ParserRuleReturnScope alter_database_specification665 =null;

		Object ALTER662_tree=null;
		Object set663_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1827:26: ( ALTER ( DATABASE | SCHEMA ) ( schema_name )? alter_database_specification )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1828:3: ALTER ( DATABASE | SCHEMA ) ( schema_name )? alter_database_specification
			{
			root_0 = (Object)adaptor.nil();


			ALTER662=(Token)match(input,ALTER,FOLLOW_ALTER_in_alter_database_statement126222); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			ALTER662_tree = (Object)adaptor.create(ALTER662);
			adaptor.addChild(root_0, ALTER662_tree);
			}

			set663=input.LT(1);
			if ( input.LA(1)==DATABASE||input.LA(1)==SCHEMA ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set663));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1828:29: ( schema_name )?
			int alt215=2;
			int LA215_0 = input.LA(1);
			if ( (LA215_0==ID) ) {
				alt215=1;
			}
			switch (alt215) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1828:30: schema_name
					{
					pushFollow(FOLLOW_schema_name_in_alter_database_statement126233);
					schema_name664=schema_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, schema_name664.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_alter_database_specification_in_alter_database_statement126239);
			alter_database_specification665=alter_database_specification();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_database_specification665.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_database_statement1"


	public static class alter_database_statement2_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "alter_database_statement2"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1831:1: alter_database_statement2 : ALTER ( DATABASE | SCHEMA ) schema_name UPGRADE_SYM DATA_SYM DIRECTORY_SYM NAME_SYM ;
	public final SQLParser.alter_database_statement2_return alter_database_statement2() throws RecognitionException {
		SQLParser.alter_database_statement2_return retval = new SQLParser.alter_database_statement2_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token ALTER666=null;
		Token set667=null;
		Token UPGRADE_SYM669=null;
		Token DATA_SYM670=null;
		Token DIRECTORY_SYM671=null;
		Token NAME_SYM672=null;
		ParserRuleReturnScope schema_name668 =null;

		Object ALTER666_tree=null;
		Object set667_tree=null;
		Object UPGRADE_SYM669_tree=null;
		Object DATA_SYM670_tree=null;
		Object DIRECTORY_SYM671_tree=null;
		Object NAME_SYM672_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1831:26: ( ALTER ( DATABASE | SCHEMA ) schema_name UPGRADE_SYM DATA_SYM DIRECTORY_SYM NAME_SYM )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1832:3: ALTER ( DATABASE | SCHEMA ) schema_name UPGRADE_SYM DATA_SYM DIRECTORY_SYM NAME_SYM
			{
			root_0 = (Object)adaptor.nil();


			ALTER666=(Token)match(input,ALTER,FOLLOW_ALTER_in_alter_database_statement226248); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			ALTER666_tree = (Object)adaptor.create(ALTER666);
			adaptor.addChild(root_0, ALTER666_tree);
			}

			set667=input.LT(1);
			if ( input.LA(1)==DATABASE||input.LA(1)==SCHEMA ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set667));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			pushFollow(FOLLOW_schema_name_in_alter_database_statement226258);
			schema_name668=schema_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, schema_name668.getTree());

			UPGRADE_SYM669=(Token)match(input,UPGRADE_SYM,FOLLOW_UPGRADE_SYM_in_alter_database_statement226262); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			UPGRADE_SYM669_tree = (Object)adaptor.create(UPGRADE_SYM669);
			adaptor.addChild(root_0, UPGRADE_SYM669_tree);
			}

			DATA_SYM670=(Token)match(input,DATA_SYM,FOLLOW_DATA_SYM_in_alter_database_statement226264); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DATA_SYM670_tree = (Object)adaptor.create(DATA_SYM670);
			adaptor.addChild(root_0, DATA_SYM670_tree);
			}

			DIRECTORY_SYM671=(Token)match(input,DIRECTORY_SYM,FOLLOW_DIRECTORY_SYM_in_alter_database_statement226266); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DIRECTORY_SYM671_tree = (Object)adaptor.create(DIRECTORY_SYM671);
			adaptor.addChild(root_0, DIRECTORY_SYM671_tree);
			}

			NAME_SYM672=(Token)match(input,NAME_SYM,FOLLOW_NAME_SYM_in_alter_database_statement226268); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			NAME_SYM672_tree = (Object)adaptor.create(NAME_SYM672);
			adaptor.addChild(root_0, NAME_SYM672_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_database_statement2"


	public static class alter_database_specification_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "alter_database_specification"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1835:1: alter_database_specification : ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name | ( DEFAULT )? COLLATE_SYM ( EQ_SYM )? collation_names );
	public final SQLParser.alter_database_specification_return alter_database_specification() throws RecognitionException {
		SQLParser.alter_database_specification_return retval = new SQLParser.alter_database_specification_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token DEFAULT673=null;
		Token CHARACTER_SYM674=null;
		Token SET_SYM675=null;
		Token EQ_SYM676=null;
		Token DEFAULT678=null;
		Token COLLATE_SYM679=null;
		Token EQ_SYM680=null;
		ParserRuleReturnScope charset_name677 =null;
		ParserRuleReturnScope collation_names681 =null;

		Object DEFAULT673_tree=null;
		Object CHARACTER_SYM674_tree=null;
		Object SET_SYM675_tree=null;
		Object EQ_SYM676_tree=null;
		Object DEFAULT678_tree=null;
		Object COLLATE_SYM679_tree=null;
		Object EQ_SYM680_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1835:29: ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name | ( DEFAULT )? COLLATE_SYM ( EQ_SYM )? collation_names )
			int alt220=2;
			switch ( input.LA(1) ) {
			case DEFAULT:
				{
				int LA220_1 = input.LA(2);
				if ( (LA220_1==CHARACTER_SYM) ) {
					alt220=1;
				}
				else if ( (LA220_1==COLLATE_SYM) ) {
					alt220=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 220, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CHARACTER_SYM:
				{
				alt220=1;
				}
				break;
			case COLLATE_SYM:
				{
				alt220=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 220, 0, input);
				throw nvae;
			}
			switch (alt220) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1836:3: ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1836:3: ( DEFAULT )?
					int alt216=2;
					int LA216_0 = input.LA(1);
					if ( (LA216_0==DEFAULT) ) {
						alt216=1;
					}
					switch (alt216) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1836:4: DEFAULT
							{
							DEFAULT673=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_alter_database_specification26278); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT673_tree = (Object)adaptor.create(DEFAULT673);
							adaptor.addChild(root_0, DEFAULT673_tree);
							}

							}
							break;

					}

					CHARACTER_SYM674=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_alter_database_specification26282); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CHARACTER_SYM674_tree = (Object)adaptor.create(CHARACTER_SYM674);
					adaptor.addChild(root_0, CHARACTER_SYM674_tree);
					}

					SET_SYM675=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_alter_database_specification26284); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SET_SYM675_tree = (Object)adaptor.create(SET_SYM675);
					adaptor.addChild(root_0, SET_SYM675_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1836:36: ( EQ_SYM )?
					int alt217=2;
					int LA217_0 = input.LA(1);
					if ( (LA217_0==EQ_SYM) ) {
						alt217=1;
					}
					switch (alt217) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1836:37: EQ_SYM
							{
							EQ_SYM676=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_alter_database_specification26287); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM676_tree = (Object)adaptor.create(EQ_SYM676);
							adaptor.addChild(root_0, EQ_SYM676_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_charset_name_in_alter_database_specification26291);
					charset_name677=charset_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name677.getTree());

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1838:3: ( DEFAULT )? COLLATE_SYM ( EQ_SYM )? collation_names
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1838:3: ( DEFAULT )?
					int alt218=2;
					int LA218_0 = input.LA(1);
					if ( (LA218_0==DEFAULT) ) {
						alt218=1;
					}
					switch (alt218) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1838:4: DEFAULT
							{
							DEFAULT678=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_alter_database_specification26301); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT678_tree = (Object)adaptor.create(DEFAULT678);
							adaptor.addChild(root_0, DEFAULT678_tree);
							}

							}
							break;

					}

					COLLATE_SYM679=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_alter_database_specification26305); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COLLATE_SYM679_tree = (Object)adaptor.create(COLLATE_SYM679);
					adaptor.addChild(root_0, COLLATE_SYM679_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1838:26: ( EQ_SYM )?
					int alt219=2;
					int LA219_0 = input.LA(1);
					if ( (LA219_0==EQ_SYM) ) {
						alt219=1;
					}
					switch (alt219) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1838:27: EQ_SYM
							{
							EQ_SYM680=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_alter_database_specification26308); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM680_tree = (Object)adaptor.create(EQ_SYM680);
							adaptor.addChild(root_0, EQ_SYM680_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_collation_names_in_alter_database_specification26312);
					collation_names681=collation_names();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_names681.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_database_specification"


	public static class drop_database_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "drop_database_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1844:1: drop_database_statement : DROP ( DATABASE | SCHEMA ) ( IF EXISTS )? schema_name ;
	public final SQLParser.drop_database_statement_return drop_database_statement() throws RecognitionException {
		SQLParser.drop_database_statement_return retval = new SQLParser.drop_database_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token DROP682=null;
		Token set683=null;
		Token IF684=null;
		Token EXISTS685=null;
		ParserRuleReturnScope schema_name686 =null;

		Object DROP682_tree=null;
		Object set683_tree=null;
		Object IF684_tree=null;
		Object EXISTS685_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1844:24: ( DROP ( DATABASE | SCHEMA ) ( IF EXISTS )? schema_name )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1845:3: DROP ( DATABASE | SCHEMA ) ( IF EXISTS )? schema_name
			{
			root_0 = (Object)adaptor.nil();


			DROP682=(Token)match(input,DROP,FOLLOW_DROP_in_drop_database_statement26325); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DROP682_tree = (Object)adaptor.create(DROP682);
			adaptor.addChild(root_0, DROP682_tree);
			}

			set683=input.LT(1);
			if ( input.LA(1)==DATABASE||input.LA(1)==SCHEMA ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set683));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1845:28: ( IF EXISTS )?
			int alt221=2;
			int LA221_0 = input.LA(1);
			if ( (LA221_0==IF) ) {
				alt221=1;
			}
			switch (alt221) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1845:29: IF EXISTS
					{
					IF684=(Token)match(input,IF,FOLLOW_IF_in_drop_database_statement26336); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IF684_tree = (Object)adaptor.create(IF684);
					adaptor.addChild(root_0, IF684_tree);
					}

					EXISTS685=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_drop_database_statement26338); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXISTS685_tree = (Object)adaptor.create(EXISTS685);
					adaptor.addChild(root_0, EXISTS685_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_schema_name_in_drop_database_statement26342);
			schema_name686=schema_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, schema_name686.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_database_statement"


	public static class create_event_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "create_event_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1854:1: create_event_statement : CREATE ( DEFINER EQ_SYM ( user_name | CURRENT_USER ) )? EVENT_SYM ( IF NOT_SYM EXISTS )? event_name ON SCHEDULE_SYM schedule_definition ( ON COMPLETION_SYM ( NOT_SYM )? PRESERVE_SYM )? ( ENABLE_SYM | DISABLE_SYM | ( DISABLE_SYM ON SLAVE ) )? ( COMMENT_SYM TEXT_STRING )? do_statement ;
	public final SQLParser.create_event_statement_return create_event_statement() throws RecognitionException {
		SQLParser.create_event_statement_return retval = new SQLParser.create_event_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token CREATE687=null;
		Token DEFINER688=null;
		Token EQ_SYM689=null;
		Token CURRENT_USER691=null;
		Token EVENT_SYM692=null;
		Token IF693=null;
		Token NOT_SYM694=null;
		Token EXISTS695=null;
		Token ON697=null;
		Token SCHEDULE_SYM698=null;
		Token ON700=null;
		Token COMPLETION_SYM701=null;
		Token NOT_SYM702=null;
		Token PRESERVE_SYM703=null;
		Token ENABLE_SYM704=null;
		Token DISABLE_SYM705=null;
		Token DISABLE_SYM706=null;
		Token ON707=null;
		Token SLAVE708=null;
		Token COMMENT_SYM709=null;
		Token TEXT_STRING710=null;
		ParserRuleReturnScope user_name690 =null;
		ParserRuleReturnScope event_name696 =null;
		ParserRuleReturnScope schedule_definition699 =null;
		ParserRuleReturnScope do_statement711 =null;

		Object CREATE687_tree=null;
		Object DEFINER688_tree=null;
		Object EQ_SYM689_tree=null;
		Object CURRENT_USER691_tree=null;
		Object EVENT_SYM692_tree=null;
		Object IF693_tree=null;
		Object NOT_SYM694_tree=null;
		Object EXISTS695_tree=null;
		Object ON697_tree=null;
		Object SCHEDULE_SYM698_tree=null;
		Object ON700_tree=null;
		Object COMPLETION_SYM701_tree=null;
		Object NOT_SYM702_tree=null;
		Object PRESERVE_SYM703_tree=null;
		Object ENABLE_SYM704_tree=null;
		Object DISABLE_SYM705_tree=null;
		Object DISABLE_SYM706_tree=null;
		Object ON707_tree=null;
		Object SLAVE708_tree=null;
		Object COMMENT_SYM709_tree=null;
		Object TEXT_STRING710_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1854:23: ( CREATE ( DEFINER EQ_SYM ( user_name | CURRENT_USER ) )? EVENT_SYM ( IF NOT_SYM EXISTS )? event_name ON SCHEDULE_SYM schedule_definition ( ON COMPLETION_SYM ( NOT_SYM )? PRESERVE_SYM )? ( ENABLE_SYM | DISABLE_SYM | ( DISABLE_SYM ON SLAVE ) )? ( COMMENT_SYM TEXT_STRING )? do_statement )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1855:3: CREATE ( DEFINER EQ_SYM ( user_name | CURRENT_USER ) )? EVENT_SYM ( IF NOT_SYM EXISTS )? event_name ON SCHEDULE_SYM schedule_definition ( ON COMPLETION_SYM ( NOT_SYM )? PRESERVE_SYM )? ( ENABLE_SYM | DISABLE_SYM | ( DISABLE_SYM ON SLAVE ) )? ( COMMENT_SYM TEXT_STRING )? do_statement
			{
			root_0 = (Object)adaptor.nil();


			CREATE687=(Token)match(input,CREATE,FOLLOW_CREATE_in_create_event_statement26358); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			CREATE687_tree = (Object)adaptor.create(CREATE687);
			adaptor.addChild(root_0, CREATE687_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1856:3: ( DEFINER EQ_SYM ( user_name | CURRENT_USER ) )?
			int alt223=2;
			int LA223_0 = input.LA(1);
			if ( (LA223_0==DEFINER) ) {
				alt223=1;
			}
			switch (alt223) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1856:4: DEFINER EQ_SYM ( user_name | CURRENT_USER )
					{
					DEFINER688=(Token)match(input,DEFINER,FOLLOW_DEFINER_in_create_event_statement26363); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DEFINER688_tree = (Object)adaptor.create(DEFINER688);
					adaptor.addChild(root_0, DEFINER688_tree);
					}

					EQ_SYM689=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_create_event_statement26365); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EQ_SYM689_tree = (Object)adaptor.create(EQ_SYM689);
					adaptor.addChild(root_0, EQ_SYM689_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1856:19: ( user_name | CURRENT_USER )
					int alt222=2;
					int LA222_0 = input.LA(1);
					if ( (LA222_0==ID) ) {
						alt222=1;
					}
					else if ( (LA222_0==CURRENT_USER) ) {
						alt222=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 222, 0, input);
						throw nvae;
					}

					switch (alt222) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1856:21: user_name
							{
							pushFollow(FOLLOW_user_name_in_create_event_statement26369);
							user_name690=user_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, user_name690.getTree());

							}
							break;
						case 2 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1856:33: CURRENT_USER
							{
							CURRENT_USER691=(Token)match(input,CURRENT_USER,FOLLOW_CURRENT_USER_in_create_event_statement26373); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CURRENT_USER691_tree = (Object)adaptor.create(CURRENT_USER691);
							adaptor.addChild(root_0, CURRENT_USER691_tree);
							}

							}
							break;

					}

					}
					break;

			}

			EVENT_SYM692=(Token)match(input,EVENT_SYM,FOLLOW_EVENT_SYM_in_create_event_statement26381); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			EVENT_SYM692_tree = (Object)adaptor.create(EVENT_SYM692);
			adaptor.addChild(root_0, EVENT_SYM692_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1858:3: ( IF NOT_SYM EXISTS )?
			int alt224=2;
			int LA224_0 = input.LA(1);
			if ( (LA224_0==IF) ) {
				alt224=1;
			}
			switch (alt224) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1858:4: IF NOT_SYM EXISTS
					{
					IF693=(Token)match(input,IF,FOLLOW_IF_in_create_event_statement26386); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IF693_tree = (Object)adaptor.create(IF693);
					adaptor.addChild(root_0, IF693_tree);
					}

					NOT_SYM694=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_create_event_statement26388); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NOT_SYM694_tree = (Object)adaptor.create(NOT_SYM694);
					adaptor.addChild(root_0, NOT_SYM694_tree);
					}

					EXISTS695=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_create_event_statement26390); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXISTS695_tree = (Object)adaptor.create(EXISTS695);
					adaptor.addChild(root_0, EXISTS695_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_event_name_in_create_event_statement26396);
			event_name696=event_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, event_name696.getTree());

			ON697=(Token)match(input,ON,FOLLOW_ON_in_create_event_statement26400); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			ON697_tree = (Object)adaptor.create(ON697);
			adaptor.addChild(root_0, ON697_tree);
			}

			SCHEDULE_SYM698=(Token)match(input,SCHEDULE_SYM,FOLLOW_SCHEDULE_SYM_in_create_event_statement26402); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			SCHEDULE_SYM698_tree = (Object)adaptor.create(SCHEDULE_SYM698);
			adaptor.addChild(root_0, SCHEDULE_SYM698_tree);
			}

			pushFollow(FOLLOW_schedule_definition_in_create_event_statement26404);
			schedule_definition699=schedule_definition();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, schedule_definition699.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1861:3: ( ON COMPLETION_SYM ( NOT_SYM )? PRESERVE_SYM )?
			int alt226=2;
			int LA226_0 = input.LA(1);
			if ( (LA226_0==ON) ) {
				alt226=1;
			}
			switch (alt226) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1861:4: ON COMPLETION_SYM ( NOT_SYM )? PRESERVE_SYM
					{
					ON700=(Token)match(input,ON,FOLLOW_ON_in_create_event_statement26409); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ON700_tree = (Object)adaptor.create(ON700);
					adaptor.addChild(root_0, ON700_tree);
					}

					COMPLETION_SYM701=(Token)match(input,COMPLETION_SYM,FOLLOW_COMPLETION_SYM_in_create_event_statement26411); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMPLETION_SYM701_tree = (Object)adaptor.create(COMPLETION_SYM701);
					adaptor.addChild(root_0, COMPLETION_SYM701_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1861:22: ( NOT_SYM )?
					int alt225=2;
					int LA225_0 = input.LA(1);
					if ( (LA225_0==NOT_SYM) ) {
						alt225=1;
					}
					switch (alt225) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1861:23: NOT_SYM
							{
							NOT_SYM702=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_create_event_statement26414); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							NOT_SYM702_tree = (Object)adaptor.create(NOT_SYM702);
							adaptor.addChild(root_0, NOT_SYM702_tree);
							}

							}
							break;

					}

					PRESERVE_SYM703=(Token)match(input,PRESERVE_SYM,FOLLOW_PRESERVE_SYM_in_create_event_statement26418); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PRESERVE_SYM703_tree = (Object)adaptor.create(PRESERVE_SYM703);
					adaptor.addChild(root_0, PRESERVE_SYM703_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1862:3: ( ENABLE_SYM | DISABLE_SYM | ( DISABLE_SYM ON SLAVE ) )?
			int alt227=4;
			int LA227_0 = input.LA(1);
			if ( (LA227_0==ENABLE_SYM) ) {
				alt227=1;
			}
			else if ( (LA227_0==DISABLE_SYM) ) {
				int LA227_2 = input.LA(2);
				if ( (LA227_2==ON) ) {
					alt227=3;
				}
				else if ( (LA227_2==COMMENT_SYM||LA227_2==DO_SYM) ) {
					alt227=2;
				}
			}
			switch (alt227) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1862:5: ENABLE_SYM
					{
					ENABLE_SYM704=(Token)match(input,ENABLE_SYM,FOLLOW_ENABLE_SYM_in_create_event_statement26426); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ENABLE_SYM704_tree = (Object)adaptor.create(ENABLE_SYM704);
					adaptor.addChild(root_0, ENABLE_SYM704_tree);
					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1862:18: DISABLE_SYM
					{
					DISABLE_SYM705=(Token)match(input,DISABLE_SYM,FOLLOW_DISABLE_SYM_in_create_event_statement26430); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DISABLE_SYM705_tree = (Object)adaptor.create(DISABLE_SYM705);
					adaptor.addChild(root_0, DISABLE_SYM705_tree);
					}

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1862:32: ( DISABLE_SYM ON SLAVE )
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1862:32: ( DISABLE_SYM ON SLAVE )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1862:33: DISABLE_SYM ON SLAVE
					{
					DISABLE_SYM706=(Token)match(input,DISABLE_SYM,FOLLOW_DISABLE_SYM_in_create_event_statement26435); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DISABLE_SYM706_tree = (Object)adaptor.create(DISABLE_SYM706);
					adaptor.addChild(root_0, DISABLE_SYM706_tree);
					}

					ON707=(Token)match(input,ON,FOLLOW_ON_in_create_event_statement26437); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ON707_tree = (Object)adaptor.create(ON707);
					adaptor.addChild(root_0, ON707_tree);
					}

					SLAVE708=(Token)match(input,SLAVE,FOLLOW_SLAVE_in_create_event_statement26439); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SLAVE708_tree = (Object)adaptor.create(SLAVE708);
					adaptor.addChild(root_0, SLAVE708_tree);
					}

					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1863:3: ( COMMENT_SYM TEXT_STRING )?
			int alt228=2;
			int LA228_0 = input.LA(1);
			if ( (LA228_0==COMMENT_SYM) ) {
				alt228=1;
			}
			switch (alt228) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1863:4: COMMENT_SYM TEXT_STRING
					{
					COMMENT_SYM709=(Token)match(input,COMMENT_SYM,FOLLOW_COMMENT_SYM_in_create_event_statement26448); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMENT_SYM709_tree = (Object)adaptor.create(COMMENT_SYM709);
					adaptor.addChild(root_0, COMMENT_SYM709_tree);
					}

					TEXT_STRING710=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_create_event_statement26450); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING710_tree = (Object)adaptor.create(TEXT_STRING710);
					adaptor.addChild(root_0, TEXT_STRING710_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_do_statement_in_create_event_statement26456);
			do_statement711=do_statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, do_statement711.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_event_statement"


	public static class schedule_definition_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "schedule_definition"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1866:1: schedule_definition : ( ( AT_SYM timestamp ( PLUS INTERVAL_SYM interval )* ) | ( EVERY_SYM interval ) ( STARTS_SYM timestamp ( PLUS INTERVAL_SYM interval )* )? ( ENDS_SYM timestamp ( PLUS INTERVAL_SYM interval )* )? );
	public final SQLParser.schedule_definition_return schedule_definition() throws RecognitionException {
		SQLParser.schedule_definition_return retval = new SQLParser.schedule_definition_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token AT_SYM712=null;
		Token PLUS714=null;
		Token INTERVAL_SYM715=null;
		Token EVERY_SYM717=null;
		Token STARTS_SYM719=null;
		Token PLUS721=null;
		Token INTERVAL_SYM722=null;
		Token ENDS_SYM724=null;
		Token PLUS726=null;
		Token INTERVAL_SYM727=null;
		ParserRuleReturnScope timestamp713 =null;
		ParserRuleReturnScope interval716 =null;
		ParserRuleReturnScope interval718 =null;
		ParserRuleReturnScope timestamp720 =null;
		ParserRuleReturnScope interval723 =null;
		ParserRuleReturnScope timestamp725 =null;
		ParserRuleReturnScope interval728 =null;

		Object AT_SYM712_tree=null;
		Object PLUS714_tree=null;
		Object INTERVAL_SYM715_tree=null;
		Object EVERY_SYM717_tree=null;
		Object STARTS_SYM719_tree=null;
		Object PLUS721_tree=null;
		Object INTERVAL_SYM722_tree=null;
		Object ENDS_SYM724_tree=null;
		Object PLUS726_tree=null;
		Object INTERVAL_SYM727_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1866:20: ( ( AT_SYM timestamp ( PLUS INTERVAL_SYM interval )* ) | ( EVERY_SYM interval ) ( STARTS_SYM timestamp ( PLUS INTERVAL_SYM interval )* )? ( ENDS_SYM timestamp ( PLUS INTERVAL_SYM interval )* )? )
			int alt234=2;
			int LA234_0 = input.LA(1);
			if ( (LA234_0==AT_SYM) ) {
				alt234=1;
			}
			else if ( (LA234_0==EVERY_SYM) ) {
				alt234=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 234, 0, input);
				throw nvae;
			}

			switch (alt234) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1867:3: ( AT_SYM timestamp ( PLUS INTERVAL_SYM interval )* )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1867:3: ( AT_SYM timestamp ( PLUS INTERVAL_SYM interval )* )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1867:5: AT_SYM timestamp ( PLUS INTERVAL_SYM interval )*
					{
					AT_SYM712=(Token)match(input,AT_SYM,FOLLOW_AT_SYM_in_schedule_definition26467); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					AT_SYM712_tree = (Object)adaptor.create(AT_SYM712);
					adaptor.addChild(root_0, AT_SYM712_tree);
					}

					pushFollow(FOLLOW_timestamp_in_schedule_definition26469);
					timestamp713=timestamp();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, timestamp713.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1867:22: ( PLUS INTERVAL_SYM interval )*
					loop229:
					while (true) {
						int alt229=2;
						int LA229_0 = input.LA(1);
						if ( (LA229_0==PLUS) ) {
							alt229=1;
						}

						switch (alt229) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1867:23: PLUS INTERVAL_SYM interval
							{
							PLUS714=(Token)match(input,PLUS,FOLLOW_PLUS_in_schedule_definition26472); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							PLUS714_tree = (Object)adaptor.create(PLUS714);
							adaptor.addChild(root_0, PLUS714_tree);
							}

							INTERVAL_SYM715=(Token)match(input,INTERVAL_SYM,FOLLOW_INTERVAL_SYM_in_schedule_definition26474); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							INTERVAL_SYM715_tree = (Object)adaptor.create(INTERVAL_SYM715);
							adaptor.addChild(root_0, INTERVAL_SYM715_tree);
							}

							pushFollow(FOLLOW_interval_in_schedule_definition26476);
							interval716=interval();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, interval716.getTree());

							}
							break;

						default :
							break loop229;
						}
					}

					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1869:3: ( EVERY_SYM interval ) ( STARTS_SYM timestamp ( PLUS INTERVAL_SYM interval )* )? ( ENDS_SYM timestamp ( PLUS INTERVAL_SYM interval )* )?
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1869:3: ( EVERY_SYM interval )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1869:5: EVERY_SYM interval
					{
					EVERY_SYM717=(Token)match(input,EVERY_SYM,FOLLOW_EVERY_SYM_in_schedule_definition26491); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EVERY_SYM717_tree = (Object)adaptor.create(EVERY_SYM717);
					adaptor.addChild(root_0, EVERY_SYM717_tree);
					}

					pushFollow(FOLLOW_interval_in_schedule_definition26493);
					interval718=interval();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, interval718.getTree());

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1870:3: ( STARTS_SYM timestamp ( PLUS INTERVAL_SYM interval )* )?
					int alt231=2;
					int LA231_0 = input.LA(1);
					if ( (LA231_0==STARTS_SYM) ) {
						alt231=1;
					}
					switch (alt231) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1870:5: STARTS_SYM timestamp ( PLUS INTERVAL_SYM interval )*
							{
							STARTS_SYM719=(Token)match(input,STARTS_SYM,FOLLOW_STARTS_SYM_in_schedule_definition26501); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							STARTS_SYM719_tree = (Object)adaptor.create(STARTS_SYM719);
							adaptor.addChild(root_0, STARTS_SYM719_tree);
							}

							pushFollow(FOLLOW_timestamp_in_schedule_definition26503);
							timestamp720=timestamp();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, timestamp720.getTree());

							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1870:26: ( PLUS INTERVAL_SYM interval )*
							loop230:
							while (true) {
								int alt230=2;
								int LA230_0 = input.LA(1);
								if ( (LA230_0==PLUS) ) {
									alt230=1;
								}

								switch (alt230) {
								case 1 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1870:27: PLUS INTERVAL_SYM interval
									{
									PLUS721=(Token)match(input,PLUS,FOLLOW_PLUS_in_schedule_definition26506); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									PLUS721_tree = (Object)adaptor.create(PLUS721);
									adaptor.addChild(root_0, PLUS721_tree);
									}

									INTERVAL_SYM722=(Token)match(input,INTERVAL_SYM,FOLLOW_INTERVAL_SYM_in_schedule_definition26508); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									INTERVAL_SYM722_tree = (Object)adaptor.create(INTERVAL_SYM722);
									adaptor.addChild(root_0, INTERVAL_SYM722_tree);
									}

									pushFollow(FOLLOW_interval_in_schedule_definition26510);
									interval723=interval();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, interval723.getTree());

									}
									break;

								default :
									break loop230;
								}
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1871:3: ( ENDS_SYM timestamp ( PLUS INTERVAL_SYM interval )* )?
					int alt233=2;
					int LA233_0 = input.LA(1);
					if ( (LA233_0==ENDS_SYM) ) {
						alt233=1;
					}
					switch (alt233) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1871:5: ENDS_SYM timestamp ( PLUS INTERVAL_SYM interval )*
							{
							ENDS_SYM724=(Token)match(input,ENDS_SYM,FOLLOW_ENDS_SYM_in_schedule_definition26521); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ENDS_SYM724_tree = (Object)adaptor.create(ENDS_SYM724);
							adaptor.addChild(root_0, ENDS_SYM724_tree);
							}

							pushFollow(FOLLOW_timestamp_in_schedule_definition26523);
							timestamp725=timestamp();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, timestamp725.getTree());

							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1871:24: ( PLUS INTERVAL_SYM interval )*
							loop232:
							while (true) {
								int alt232=2;
								int LA232_0 = input.LA(1);
								if ( (LA232_0==PLUS) ) {
									alt232=1;
								}

								switch (alt232) {
								case 1 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1871:25: PLUS INTERVAL_SYM interval
									{
									PLUS726=(Token)match(input,PLUS,FOLLOW_PLUS_in_schedule_definition26526); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									PLUS726_tree = (Object)adaptor.create(PLUS726);
									adaptor.addChild(root_0, PLUS726_tree);
									}

									INTERVAL_SYM727=(Token)match(input,INTERVAL_SYM,FOLLOW_INTERVAL_SYM_in_schedule_definition26528); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									INTERVAL_SYM727_tree = (Object)adaptor.create(INTERVAL_SYM727);
									adaptor.addChild(root_0, INTERVAL_SYM727_tree);
									}

									pushFollow(FOLLOW_interval_in_schedule_definition26530);
									interval728=interval();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, interval728.getTree());

									}
									break;

								default :
									break loop232;
								}
							}

							}
							break;

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "schedule_definition"


	public static class interval_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "interval"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1873:1: interval : INTEGER_NUM ( YEAR | QUARTER | MONTH | DAY_SYM | HOUR | MINUTE | WEEK | SECOND | YEAR_MONTH | DAY_HOUR | DAY_MINUTE | DAY_SECOND | HOUR_MINUTE | HOUR_SECOND | MINUTE_SECOND ) ;
	public final SQLParser.interval_return interval() throws RecognitionException {
		SQLParser.interval_return retval = new SQLParser.interval_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token INTEGER_NUM729=null;
		Token set730=null;

		Object INTEGER_NUM729_tree=null;
		Object set730_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1873:9: ( INTEGER_NUM ( YEAR | QUARTER | MONTH | DAY_SYM | HOUR | MINUTE | WEEK | SECOND | YEAR_MONTH | DAY_HOUR | DAY_MINUTE | DAY_SECOND | HOUR_MINUTE | HOUR_SECOND | MINUTE_SECOND ) )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1874:3: INTEGER_NUM ( YEAR | QUARTER | MONTH | DAY_SYM | HOUR | MINUTE | WEEK | SECOND | YEAR_MONTH | DAY_HOUR | DAY_MINUTE | DAY_SECOND | HOUR_MINUTE | HOUR_SECOND | MINUTE_SECOND )
			{
			root_0 = (Object)adaptor.nil();


			INTEGER_NUM729=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_interval26544); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			INTEGER_NUM729_tree = (Object)adaptor.create(INTEGER_NUM729);
			adaptor.addChild(root_0, INTEGER_NUM729_tree);
			}

			set730=input.LT(1);
			if ( input.LA(1)==DAY_HOUR||(input.LA(1) >= DAY_MINUTE && input.LA(1) <= DAY_SYM)||input.LA(1)==HOUR||(input.LA(1) >= HOUR_MINUTE && input.LA(1) <= HOUR_SECOND)||input.LA(1)==MINUTE||input.LA(1)==MINUTE_SECOND||input.LA(1)==MONTH||input.LA(1)==QUARTER||input.LA(1)==SECOND||input.LA(1)==WEEK||input.LA(1)==YEAR||input.LA(1)==YEAR_MONTH ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set730));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "interval"


	public static class timestamp_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "timestamp"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1879:1: timestamp : CURRENT_TIMESTAMP ;
	public final SQLParser.timestamp_return timestamp() throws RecognitionException {
		SQLParser.timestamp_return retval = new SQLParser.timestamp_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token CURRENT_TIMESTAMP731=null;

		Object CURRENT_TIMESTAMP731_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1879:10: ( CURRENT_TIMESTAMP )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1880:3: CURRENT_TIMESTAMP
			{
			root_0 = (Object)adaptor.nil();


			CURRENT_TIMESTAMP731=(Token)match(input,CURRENT_TIMESTAMP,FOLLOW_CURRENT_TIMESTAMP_in_timestamp26638); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			CURRENT_TIMESTAMP731_tree = (Object)adaptor.create(CURRENT_TIMESTAMP731);
			adaptor.addChild(root_0, CURRENT_TIMESTAMP731_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "timestamp"


	public static class alter_event_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "alter_event_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1887:1: alter_event_statement : ALTER ( DEFINER EQ_SYM ( user_name | CURRENT_USER ) )? EVENT_SYM event_name ( ON SCHEDULE_SYM schedule_definition )? ( ON COMPLETION_SYM ( NOT_SYM )? PRESERVE_SYM )? ( RENAME TO_SYM event_name )? ( ENABLE_SYM | DISABLE_SYM | ( DISABLE_SYM ON SLAVE ) )? ( COMMENT_SYM TEXT_STRING )? ( do_statement )? ;
	public final SQLParser.alter_event_statement_return alter_event_statement() throws RecognitionException {
		SQLParser.alter_event_statement_return retval = new SQLParser.alter_event_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token ALTER732=null;
		Token DEFINER733=null;
		Token EQ_SYM734=null;
		Token CURRENT_USER736=null;
		Token EVENT_SYM737=null;
		Token ON739=null;
		Token SCHEDULE_SYM740=null;
		Token ON742=null;
		Token COMPLETION_SYM743=null;
		Token NOT_SYM744=null;
		Token PRESERVE_SYM745=null;
		Token RENAME746=null;
		Token TO_SYM747=null;
		Token ENABLE_SYM749=null;
		Token DISABLE_SYM750=null;
		Token DISABLE_SYM751=null;
		Token ON752=null;
		Token SLAVE753=null;
		Token COMMENT_SYM754=null;
		Token TEXT_STRING755=null;
		ParserRuleReturnScope user_name735 =null;
		ParserRuleReturnScope event_name738 =null;
		ParserRuleReturnScope schedule_definition741 =null;
		ParserRuleReturnScope event_name748 =null;
		ParserRuleReturnScope do_statement756 =null;

		Object ALTER732_tree=null;
		Object DEFINER733_tree=null;
		Object EQ_SYM734_tree=null;
		Object CURRENT_USER736_tree=null;
		Object EVENT_SYM737_tree=null;
		Object ON739_tree=null;
		Object SCHEDULE_SYM740_tree=null;
		Object ON742_tree=null;
		Object COMPLETION_SYM743_tree=null;
		Object NOT_SYM744_tree=null;
		Object PRESERVE_SYM745_tree=null;
		Object RENAME746_tree=null;
		Object TO_SYM747_tree=null;
		Object ENABLE_SYM749_tree=null;
		Object DISABLE_SYM750_tree=null;
		Object DISABLE_SYM751_tree=null;
		Object ON752_tree=null;
		Object SLAVE753_tree=null;
		Object COMMENT_SYM754_tree=null;
		Object TEXT_STRING755_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1887:22: ( ALTER ( DEFINER EQ_SYM ( user_name | CURRENT_USER ) )? EVENT_SYM event_name ( ON SCHEDULE_SYM schedule_definition )? ( ON COMPLETION_SYM ( NOT_SYM )? PRESERVE_SYM )? ( RENAME TO_SYM event_name )? ( ENABLE_SYM | DISABLE_SYM | ( DISABLE_SYM ON SLAVE ) )? ( COMMENT_SYM TEXT_STRING )? ( do_statement )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1888:3: ALTER ( DEFINER EQ_SYM ( user_name | CURRENT_USER ) )? EVENT_SYM event_name ( ON SCHEDULE_SYM schedule_definition )? ( ON COMPLETION_SYM ( NOT_SYM )? PRESERVE_SYM )? ( RENAME TO_SYM event_name )? ( ENABLE_SYM | DISABLE_SYM | ( DISABLE_SYM ON SLAVE ) )? ( COMMENT_SYM TEXT_STRING )? ( do_statement )?
			{
			root_0 = (Object)adaptor.nil();


			ALTER732=(Token)match(input,ALTER,FOLLOW_ALTER_in_alter_event_statement26657); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			ALTER732_tree = (Object)adaptor.create(ALTER732);
			adaptor.addChild(root_0, ALTER732_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1889:3: ( DEFINER EQ_SYM ( user_name | CURRENT_USER ) )?
			int alt236=2;
			int LA236_0 = input.LA(1);
			if ( (LA236_0==DEFINER) ) {
				alt236=1;
			}
			switch (alt236) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1889:4: DEFINER EQ_SYM ( user_name | CURRENT_USER )
					{
					DEFINER733=(Token)match(input,DEFINER,FOLLOW_DEFINER_in_alter_event_statement26662); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DEFINER733_tree = (Object)adaptor.create(DEFINER733);
					adaptor.addChild(root_0, DEFINER733_tree);
					}

					EQ_SYM734=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_alter_event_statement26664); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EQ_SYM734_tree = (Object)adaptor.create(EQ_SYM734);
					adaptor.addChild(root_0, EQ_SYM734_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1889:19: ( user_name | CURRENT_USER )
					int alt235=2;
					int LA235_0 = input.LA(1);
					if ( (LA235_0==ID) ) {
						alt235=1;
					}
					else if ( (LA235_0==CURRENT_USER) ) {
						alt235=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 235, 0, input);
						throw nvae;
					}

					switch (alt235) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1889:21: user_name
							{
							pushFollow(FOLLOW_user_name_in_alter_event_statement26668);
							user_name735=user_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, user_name735.getTree());

							}
							break;
						case 2 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1889:33: CURRENT_USER
							{
							CURRENT_USER736=(Token)match(input,CURRENT_USER,FOLLOW_CURRENT_USER_in_alter_event_statement26672); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CURRENT_USER736_tree = (Object)adaptor.create(CURRENT_USER736);
							adaptor.addChild(root_0, CURRENT_USER736_tree);
							}

							}
							break;

					}

					}
					break;

			}

			EVENT_SYM737=(Token)match(input,EVENT_SYM,FOLLOW_EVENT_SYM_in_alter_event_statement26680); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			EVENT_SYM737_tree = (Object)adaptor.create(EVENT_SYM737);
			adaptor.addChild(root_0, EVENT_SYM737_tree);
			}

			pushFollow(FOLLOW_event_name_in_alter_event_statement26682);
			event_name738=event_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, event_name738.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1891:3: ( ON SCHEDULE_SYM schedule_definition )?
			int alt237=2;
			int LA237_0 = input.LA(1);
			if ( (LA237_0==ON) ) {
				int LA237_1 = input.LA(2);
				if ( (LA237_1==SCHEDULE_SYM) ) {
					alt237=1;
				}
			}
			switch (alt237) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1891:4: ON SCHEDULE_SYM schedule_definition
					{
					ON739=(Token)match(input,ON,FOLLOW_ON_in_alter_event_statement26687); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ON739_tree = (Object)adaptor.create(ON739);
					adaptor.addChild(root_0, ON739_tree);
					}

					SCHEDULE_SYM740=(Token)match(input,SCHEDULE_SYM,FOLLOW_SCHEDULE_SYM_in_alter_event_statement26689); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SCHEDULE_SYM740_tree = (Object)adaptor.create(SCHEDULE_SYM740);
					adaptor.addChild(root_0, SCHEDULE_SYM740_tree);
					}

					pushFollow(FOLLOW_schedule_definition_in_alter_event_statement26691);
					schedule_definition741=schedule_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, schedule_definition741.getTree());

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1892:3: ( ON COMPLETION_SYM ( NOT_SYM )? PRESERVE_SYM )?
			int alt239=2;
			int LA239_0 = input.LA(1);
			if ( (LA239_0==ON) ) {
				alt239=1;
			}
			switch (alt239) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1892:4: ON COMPLETION_SYM ( NOT_SYM )? PRESERVE_SYM
					{
					ON742=(Token)match(input,ON,FOLLOW_ON_in_alter_event_statement26698); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ON742_tree = (Object)adaptor.create(ON742);
					adaptor.addChild(root_0, ON742_tree);
					}

					COMPLETION_SYM743=(Token)match(input,COMPLETION_SYM,FOLLOW_COMPLETION_SYM_in_alter_event_statement26700); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMPLETION_SYM743_tree = (Object)adaptor.create(COMPLETION_SYM743);
					adaptor.addChild(root_0, COMPLETION_SYM743_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1892:22: ( NOT_SYM )?
					int alt238=2;
					int LA238_0 = input.LA(1);
					if ( (LA238_0==NOT_SYM) ) {
						alt238=1;
					}
					switch (alt238) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1892:23: NOT_SYM
							{
							NOT_SYM744=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_alter_event_statement26703); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							NOT_SYM744_tree = (Object)adaptor.create(NOT_SYM744);
							adaptor.addChild(root_0, NOT_SYM744_tree);
							}

							}
							break;

					}

					PRESERVE_SYM745=(Token)match(input,PRESERVE_SYM,FOLLOW_PRESERVE_SYM_in_alter_event_statement26707); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PRESERVE_SYM745_tree = (Object)adaptor.create(PRESERVE_SYM745);
					adaptor.addChild(root_0, PRESERVE_SYM745_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1893:3: ( RENAME TO_SYM event_name )?
			int alt240=2;
			int LA240_0 = input.LA(1);
			if ( (LA240_0==RENAME) ) {
				alt240=1;
			}
			switch (alt240) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1893:4: RENAME TO_SYM event_name
					{
					RENAME746=(Token)match(input,RENAME,FOLLOW_RENAME_in_alter_event_statement26714); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RENAME746_tree = (Object)adaptor.create(RENAME746);
					adaptor.addChild(root_0, RENAME746_tree);
					}

					TO_SYM747=(Token)match(input,TO_SYM,FOLLOW_TO_SYM_in_alter_event_statement26716); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TO_SYM747_tree = (Object)adaptor.create(TO_SYM747);
					adaptor.addChild(root_0, TO_SYM747_tree);
					}

					pushFollow(FOLLOW_event_name_in_alter_event_statement26718);
					event_name748=event_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, event_name748.getTree());

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1894:3: ( ENABLE_SYM | DISABLE_SYM | ( DISABLE_SYM ON SLAVE ) )?
			int alt241=4;
			int LA241_0 = input.LA(1);
			if ( (LA241_0==ENABLE_SYM) ) {
				alt241=1;
			}
			else if ( (LA241_0==DISABLE_SYM) ) {
				int LA241_2 = input.LA(2);
				if ( (LA241_2==ON) ) {
					alt241=3;
				}
				else if ( (LA241_2==EOF||(LA241_2 >= COMMA && LA241_2 <= COMMENT_SYM)||LA241_2==DO_SYM||LA241_2==SEMI) ) {
					alt241=2;
				}
			}
			switch (alt241) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1894:5: ENABLE_SYM
					{
					ENABLE_SYM749=(Token)match(input,ENABLE_SYM,FOLLOW_ENABLE_SYM_in_alter_event_statement26726); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ENABLE_SYM749_tree = (Object)adaptor.create(ENABLE_SYM749);
					adaptor.addChild(root_0, ENABLE_SYM749_tree);
					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1894:18: DISABLE_SYM
					{
					DISABLE_SYM750=(Token)match(input,DISABLE_SYM,FOLLOW_DISABLE_SYM_in_alter_event_statement26730); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DISABLE_SYM750_tree = (Object)adaptor.create(DISABLE_SYM750);
					adaptor.addChild(root_0, DISABLE_SYM750_tree);
					}

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1894:32: ( DISABLE_SYM ON SLAVE )
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1894:32: ( DISABLE_SYM ON SLAVE )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1894:33: DISABLE_SYM ON SLAVE
					{
					DISABLE_SYM751=(Token)match(input,DISABLE_SYM,FOLLOW_DISABLE_SYM_in_alter_event_statement26735); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DISABLE_SYM751_tree = (Object)adaptor.create(DISABLE_SYM751);
					adaptor.addChild(root_0, DISABLE_SYM751_tree);
					}

					ON752=(Token)match(input,ON,FOLLOW_ON_in_alter_event_statement26737); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ON752_tree = (Object)adaptor.create(ON752);
					adaptor.addChild(root_0, ON752_tree);
					}

					SLAVE753=(Token)match(input,SLAVE,FOLLOW_SLAVE_in_alter_event_statement26739); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SLAVE753_tree = (Object)adaptor.create(SLAVE753);
					adaptor.addChild(root_0, SLAVE753_tree);
					}

					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1895:3: ( COMMENT_SYM TEXT_STRING )?
			int alt242=2;
			int LA242_0 = input.LA(1);
			if ( (LA242_0==COMMENT_SYM) ) {
				alt242=1;
			}
			switch (alt242) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1895:4: COMMENT_SYM TEXT_STRING
					{
					COMMENT_SYM754=(Token)match(input,COMMENT_SYM,FOLLOW_COMMENT_SYM_in_alter_event_statement26748); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMENT_SYM754_tree = (Object)adaptor.create(COMMENT_SYM754);
					adaptor.addChild(root_0, COMMENT_SYM754_tree);
					}

					TEXT_STRING755=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_alter_event_statement26750); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING755_tree = (Object)adaptor.create(TEXT_STRING755);
					adaptor.addChild(root_0, TEXT_STRING755_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1896:3: ( do_statement )?
			int alt243=2;
			int LA243_0 = input.LA(1);
			if ( (LA243_0==DO_SYM) ) {
				alt243=1;
			}
			switch (alt243) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1896:4: do_statement
					{
					pushFollow(FOLLOW_do_statement_in_alter_event_statement26757);
					do_statement756=do_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, do_statement756.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_event_statement"


	public static class drop_event_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "drop_event_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1901:1: drop_event_statement : DROP EVENT_SYM ( IF EXISTS )? event_name ;
	public final SQLParser.drop_event_statement_return drop_event_statement() throws RecognitionException {
		SQLParser.drop_event_statement_return retval = new SQLParser.drop_event_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token DROP757=null;
		Token EVENT_SYM758=null;
		Token IF759=null;
		Token EXISTS760=null;
		ParserRuleReturnScope event_name761 =null;

		Object DROP757_tree=null;
		Object EVENT_SYM758_tree=null;
		Object IF759_tree=null;
		Object EXISTS760_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1901:21: ( DROP EVENT_SYM ( IF EXISTS )? event_name )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1902:3: DROP EVENT_SYM ( IF EXISTS )? event_name
			{
			root_0 = (Object)adaptor.nil();


			DROP757=(Token)match(input,DROP,FOLLOW_DROP_in_drop_event_statement26771); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DROP757_tree = (Object)adaptor.create(DROP757);
			adaptor.addChild(root_0, DROP757_tree);
			}

			EVENT_SYM758=(Token)match(input,EVENT_SYM,FOLLOW_EVENT_SYM_in_drop_event_statement26773); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			EVENT_SYM758_tree = (Object)adaptor.create(EVENT_SYM758);
			adaptor.addChild(root_0, EVENT_SYM758_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1902:18: ( IF EXISTS )?
			int alt244=2;
			int LA244_0 = input.LA(1);
			if ( (LA244_0==IF) ) {
				alt244=1;
			}
			switch (alt244) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1902:19: IF EXISTS
					{
					IF759=(Token)match(input,IF,FOLLOW_IF_in_drop_event_statement26776); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IF759_tree = (Object)adaptor.create(IF759);
					adaptor.addChild(root_0, IF759_tree);
					}

					EXISTS760=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_drop_event_statement26778); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXISTS760_tree = (Object)adaptor.create(EXISTS760);
					adaptor.addChild(root_0, EXISTS760_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_event_name_in_drop_event_statement26782);
			event_name761=event_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, event_name761.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_event_statement"


	public static class create_index_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "create_index_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1938:1: create_index_statement : CREATE ( UNIQUE_SYM | FULLTEXT_SYM | SPATIAL_SYM )? INDEX_SYM index_name ( index_type )? ON table_name LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( algorithm_option | lock_option )* ;
	public final SQLParser.create_index_statement_return create_index_statement() throws RecognitionException {
		SQLParser.create_index_statement_return retval = new SQLParser.create_index_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token CREATE762=null;
		Token set763=null;
		Token INDEX_SYM764=null;
		Token ON767=null;
		Token LPAREN769=null;
		Token COMMA771=null;
		Token RPAREN773=null;
		ParserRuleReturnScope index_name765 =null;
		ParserRuleReturnScope index_type766 =null;
		ParserRuleReturnScope table_name768 =null;
		ParserRuleReturnScope index_column_name770 =null;
		ParserRuleReturnScope index_column_name772 =null;
		ParserRuleReturnScope algorithm_option774 =null;
		ParserRuleReturnScope lock_option775 =null;

		Object CREATE762_tree=null;
		Object set763_tree=null;
		Object INDEX_SYM764_tree=null;
		Object ON767_tree=null;
		Object LPAREN769_tree=null;
		Object COMMA771_tree=null;
		Object RPAREN773_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1938:23: ( CREATE ( UNIQUE_SYM | FULLTEXT_SYM | SPATIAL_SYM )? INDEX_SYM index_name ( index_type )? ON table_name LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( algorithm_option | lock_option )* )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1939:3: CREATE ( UNIQUE_SYM | FULLTEXT_SYM | SPATIAL_SYM )? INDEX_SYM index_name ( index_type )? ON table_name LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( algorithm_option | lock_option )*
			{
			root_0 = (Object)adaptor.nil();


			CREATE762=(Token)match(input,CREATE,FOLLOW_CREATE_in_create_index_statement26805); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			CREATE762_tree = (Object)adaptor.create(CREATE762);
			adaptor.addChild(root_0, CREATE762_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1939:10: ( UNIQUE_SYM | FULLTEXT_SYM | SPATIAL_SYM )?
			int alt245=2;
			int LA245_0 = input.LA(1);
			if ( (LA245_0==FULLTEXT_SYM||LA245_0==SPATIAL_SYM||LA245_0==UNIQUE_SYM) ) {
				alt245=1;
			}
			switch (alt245) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
					{
					set763=input.LT(1);
					if ( input.LA(1)==FULLTEXT_SYM||input.LA(1)==SPATIAL_SYM||input.LA(1)==UNIQUE_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set763));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			INDEX_SYM764=(Token)match(input,INDEX_SYM,FOLLOW_INDEX_SYM_in_create_index_statement26816); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			INDEX_SYM764_tree = (Object)adaptor.create(INDEX_SYM764);
			adaptor.addChild(root_0, INDEX_SYM764_tree);
			}

			pushFollow(FOLLOW_index_name_in_create_index_statement26818);
			index_name765=index_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name765.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1940:3: ( index_type )?
			int alt246=2;
			int LA246_0 = input.LA(1);
			if ( (LA246_0==USING_SYM) ) {
				alt246=1;
			}
			switch (alt246) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1940:4: index_type
					{
					pushFollow(FOLLOW_index_type_in_create_index_statement26823);
					index_type766=index_type();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_type766.getTree());

					}
					break;

			}

			ON767=(Token)match(input,ON,FOLLOW_ON_in_create_index_statement26829); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			ON767_tree = (Object)adaptor.create(ON767);
			adaptor.addChild(root_0, ON767_tree);
			}

			pushFollow(FOLLOW_table_name_in_create_index_statement26831);
			table_name768=table_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name768.getTree());

			LPAREN769=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_create_index_statement26833); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN769_tree = (Object)adaptor.create(LPAREN769);
			adaptor.addChild(root_0, LPAREN769_tree);
			}

			pushFollow(FOLLOW_index_column_name_in_create_index_statement26835);
			index_column_name770=index_column_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name770.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1941:42: ( COMMA index_column_name )*
			loop247:
			while (true) {
				int alt247=2;
				int LA247_0 = input.LA(1);
				if ( (LA247_0==COMMA) ) {
					alt247=1;
				}

				switch (alt247) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1941:43: COMMA index_column_name
					{
					COMMA771=(Token)match(input,COMMA,FOLLOW_COMMA_in_create_index_statement26838); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA771_tree = (Object)adaptor.create(COMMA771);
					adaptor.addChild(root_0, COMMA771_tree);
					}

					pushFollow(FOLLOW_index_column_name_in_create_index_statement26840);
					index_column_name772=index_column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name772.getTree());

					}
					break;

				default :
					break loop247;
				}
			}

			RPAREN773=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_create_index_statement26844); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN773_tree = (Object)adaptor.create(RPAREN773);
			adaptor.addChild(root_0, RPAREN773_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1942:3: ( algorithm_option | lock_option )*
			loop248:
			while (true) {
				int alt248=3;
				int LA248_0 = input.LA(1);
				if ( (LA248_0==ALGORITHM_SYM) ) {
					alt248=1;
				}
				else if ( (LA248_0==LOCK) ) {
					alt248=2;
				}

				switch (alt248) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1942:4: algorithm_option
					{
					pushFollow(FOLLOW_algorithm_option_in_create_index_statement26849);
					algorithm_option774=algorithm_option();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, algorithm_option774.getTree());

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1942:23: lock_option
					{
					pushFollow(FOLLOW_lock_option_in_create_index_statement26853);
					lock_option775=lock_option();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, lock_option775.getTree());

					}
					break;

				default :
					break loop248;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_index_statement"


	public static class algorithm_option_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "algorithm_option"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1944:1: algorithm_option : ALGORITHM_SYM ( EQ_SYM )? ( DEFAULT | INPLACE_SYM | COPY_SYM ) ;
	public final SQLParser.algorithm_option_return algorithm_option() throws RecognitionException {
		SQLParser.algorithm_option_return retval = new SQLParser.algorithm_option_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token ALGORITHM_SYM776=null;
		Token EQ_SYM777=null;
		Token set778=null;

		Object ALGORITHM_SYM776_tree=null;
		Object EQ_SYM777_tree=null;
		Object set778_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1944:17: ( ALGORITHM_SYM ( EQ_SYM )? ( DEFAULT | INPLACE_SYM | COPY_SYM ) )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1945:3: ALGORITHM_SYM ( EQ_SYM )? ( DEFAULT | INPLACE_SYM | COPY_SYM )
			{
			root_0 = (Object)adaptor.nil();


			ALGORITHM_SYM776=(Token)match(input,ALGORITHM_SYM,FOLLOW_ALGORITHM_SYM_in_algorithm_option26864); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			ALGORITHM_SYM776_tree = (Object)adaptor.create(ALGORITHM_SYM776);
			adaptor.addChild(root_0, ALGORITHM_SYM776_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1945:17: ( EQ_SYM )?
			int alt249=2;
			int LA249_0 = input.LA(1);
			if ( (LA249_0==EQ_SYM) ) {
				alt249=1;
			}
			switch (alt249) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1945:18: EQ_SYM
					{
					EQ_SYM777=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_algorithm_option26867); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EQ_SYM777_tree = (Object)adaptor.create(EQ_SYM777);
					adaptor.addChild(root_0, EQ_SYM777_tree);
					}

					}
					break;

			}

			set778=input.LT(1);
			if ( input.LA(1)==COPY_SYM||input.LA(1)==DEFAULT||input.LA(1)==INPLACE_SYM ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set778));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "algorithm_option"


	public static class lock_option_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "lock_option"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1947:1: lock_option : LOCK ( EQ_SYM )? ( DEFAULT | NONE_SYM | SHARED_SYM | EXCLUSIVE_SYM ) ;
	public final SQLParser.lock_option_return lock_option() throws RecognitionException {
		SQLParser.lock_option_return retval = new SQLParser.lock_option_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LOCK779=null;
		Token EQ_SYM780=null;
		Token set781=null;

		Object LOCK779_tree=null;
		Object EQ_SYM780_tree=null;
		Object set781_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1947:12: ( LOCK ( EQ_SYM )? ( DEFAULT | NONE_SYM | SHARED_SYM | EXCLUSIVE_SYM ) )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1948:3: LOCK ( EQ_SYM )? ( DEFAULT | NONE_SYM | SHARED_SYM | EXCLUSIVE_SYM )
			{
			root_0 = (Object)adaptor.nil();


			LOCK779=(Token)match(input,LOCK,FOLLOW_LOCK_in_lock_option26886); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LOCK779_tree = (Object)adaptor.create(LOCK779);
			adaptor.addChild(root_0, LOCK779_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1948:8: ( EQ_SYM )?
			int alt250=2;
			int LA250_0 = input.LA(1);
			if ( (LA250_0==EQ_SYM) ) {
				alt250=1;
			}
			switch (alt250) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1948:9: EQ_SYM
					{
					EQ_SYM780=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_lock_option26889); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EQ_SYM780_tree = (Object)adaptor.create(EQ_SYM780);
					adaptor.addChild(root_0, EQ_SYM780_tree);
					}

					}
					break;

			}

			set781=input.LT(1);
			if ( input.LA(1)==DEFAULT||input.LA(1)==EXCLUSIVE_SYM||input.LA(1)==NONE_SYM||input.LA(1)==SHARED_SYM ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set781));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "lock_option"


	public static class drop_index_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "drop_index_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1953:1: drop_index_statement : DROP INDEX_SYM index_name ON table_name ( algorithm_option | lock_option )* ;
	public final SQLParser.drop_index_statement_return drop_index_statement() throws RecognitionException {
		SQLParser.drop_index_statement_return retval = new SQLParser.drop_index_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token DROP782=null;
		Token INDEX_SYM783=null;
		Token ON785=null;
		ParserRuleReturnScope index_name784 =null;
		ParserRuleReturnScope table_name786 =null;
		ParserRuleReturnScope algorithm_option787 =null;
		ParserRuleReturnScope lock_option788 =null;

		Object DROP782_tree=null;
		Object INDEX_SYM783_tree=null;
		Object ON785_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1953:21: ( DROP INDEX_SYM index_name ON table_name ( algorithm_option | lock_option )* )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1954:3: DROP INDEX_SYM index_name ON table_name ( algorithm_option | lock_option )*
			{
			root_0 = (Object)adaptor.nil();


			DROP782=(Token)match(input,DROP,FOLLOW_DROP_in_drop_index_statement26913); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DROP782_tree = (Object)adaptor.create(DROP782);
			adaptor.addChild(root_0, DROP782_tree);
			}

			INDEX_SYM783=(Token)match(input,INDEX_SYM,FOLLOW_INDEX_SYM_in_drop_index_statement26915); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			INDEX_SYM783_tree = (Object)adaptor.create(INDEX_SYM783);
			adaptor.addChild(root_0, INDEX_SYM783_tree);
			}

			pushFollow(FOLLOW_index_name_in_drop_index_statement26917);
			index_name784=index_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name784.getTree());

			ON785=(Token)match(input,ON,FOLLOW_ON_in_drop_index_statement26919); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			ON785_tree = (Object)adaptor.create(ON785);
			adaptor.addChild(root_0, ON785_tree);
			}

			pushFollow(FOLLOW_table_name_in_drop_index_statement26921);
			table_name786=table_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name786.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1955:3: ( algorithm_option | lock_option )*
			loop251:
			while (true) {
				int alt251=3;
				int LA251_0 = input.LA(1);
				if ( (LA251_0==ALGORITHM_SYM) ) {
					alt251=1;
				}
				else if ( (LA251_0==LOCK) ) {
					alt251=2;
				}

				switch (alt251) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1955:4: algorithm_option
					{
					pushFollow(FOLLOW_algorithm_option_in_drop_index_statement26926);
					algorithm_option787=algorithm_option();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, algorithm_option787.getTree());

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1955:23: lock_option
					{
					pushFollow(FOLLOW_lock_option_in_drop_index_statement26930);
					lock_option788=lock_option();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, lock_option788.getTree());

					}
					break;

				default :
					break loop251;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_index_statement"


	public static class create_server_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "create_server_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1987:1: create_server_statement : CREATE SERVER_SYM server_name FOREIGN DATA_SYM WRAPPER_SYM wrapper_name OPTIONS_SYM LPAREN create_server_option ( COMMA create_server_option )* RPAREN ;
	public final SQLParser.create_server_statement_return create_server_statement() throws RecognitionException {
		SQLParser.create_server_statement_return retval = new SQLParser.create_server_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token CREATE789=null;
		Token SERVER_SYM790=null;
		Token FOREIGN792=null;
		Token DATA_SYM793=null;
		Token WRAPPER_SYM794=null;
		Token OPTIONS_SYM796=null;
		Token LPAREN797=null;
		Token COMMA799=null;
		Token RPAREN801=null;
		ParserRuleReturnScope server_name791 =null;
		ParserRuleReturnScope wrapper_name795 =null;
		ParserRuleReturnScope create_server_option798 =null;
		ParserRuleReturnScope create_server_option800 =null;

		Object CREATE789_tree=null;
		Object SERVER_SYM790_tree=null;
		Object FOREIGN792_tree=null;
		Object DATA_SYM793_tree=null;
		Object WRAPPER_SYM794_tree=null;
		Object OPTIONS_SYM796_tree=null;
		Object LPAREN797_tree=null;
		Object COMMA799_tree=null;
		Object RPAREN801_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1987:24: ( CREATE SERVER_SYM server_name FOREIGN DATA_SYM WRAPPER_SYM wrapper_name OPTIONS_SYM LPAREN create_server_option ( COMMA create_server_option )* RPAREN )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1988:3: CREATE SERVER_SYM server_name FOREIGN DATA_SYM WRAPPER_SYM wrapper_name OPTIONS_SYM LPAREN create_server_option ( COMMA create_server_option )* RPAREN
			{
			root_0 = (Object)adaptor.nil();


			CREATE789=(Token)match(input,CREATE,FOLLOW_CREATE_in_create_server_statement26957); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			CREATE789_tree = (Object)adaptor.create(CREATE789);
			adaptor.addChild(root_0, CREATE789_tree);
			}

			SERVER_SYM790=(Token)match(input,SERVER_SYM,FOLLOW_SERVER_SYM_in_create_server_statement26959); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			SERVER_SYM790_tree = (Object)adaptor.create(SERVER_SYM790);
			adaptor.addChild(root_0, SERVER_SYM790_tree);
			}

			pushFollow(FOLLOW_server_name_in_create_server_statement26961);
			server_name791=server_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, server_name791.getTree());

			FOREIGN792=(Token)match(input,FOREIGN,FOLLOW_FOREIGN_in_create_server_statement26965); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			FOREIGN792_tree = (Object)adaptor.create(FOREIGN792);
			adaptor.addChild(root_0, FOREIGN792_tree);
			}

			DATA_SYM793=(Token)match(input,DATA_SYM,FOLLOW_DATA_SYM_in_create_server_statement26967); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DATA_SYM793_tree = (Object)adaptor.create(DATA_SYM793);
			adaptor.addChild(root_0, DATA_SYM793_tree);
			}

			WRAPPER_SYM794=(Token)match(input,WRAPPER_SYM,FOLLOW_WRAPPER_SYM_in_create_server_statement26969); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			WRAPPER_SYM794_tree = (Object)adaptor.create(WRAPPER_SYM794);
			adaptor.addChild(root_0, WRAPPER_SYM794_tree);
			}

			pushFollow(FOLLOW_wrapper_name_in_create_server_statement26971);
			wrapper_name795=wrapper_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, wrapper_name795.getTree());

			OPTIONS_SYM796=(Token)match(input,OPTIONS_SYM,FOLLOW_OPTIONS_SYM_in_create_server_statement26975); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			OPTIONS_SYM796_tree = (Object)adaptor.create(OPTIONS_SYM796);
			adaptor.addChild(root_0, OPTIONS_SYM796_tree);
			}

			LPAREN797=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_create_server_statement26977); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN797_tree = (Object)adaptor.create(LPAREN797);
			adaptor.addChild(root_0, LPAREN797_tree);
			}

			pushFollow(FOLLOW_create_server_option_in_create_server_statement26979);
			create_server_option798=create_server_option();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, create_server_option798.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1990:43: ( COMMA create_server_option )*
			loop252:
			while (true) {
				int alt252=2;
				int LA252_0 = input.LA(1);
				if ( (LA252_0==COMMA) ) {
					alt252=1;
				}

				switch (alt252) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1990:44: COMMA create_server_option
					{
					COMMA799=(Token)match(input,COMMA,FOLLOW_COMMA_in_create_server_statement26982); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA799_tree = (Object)adaptor.create(COMMA799);
					adaptor.addChild(root_0, COMMA799_tree);
					}

					pushFollow(FOLLOW_create_server_option_in_create_server_statement26984);
					create_server_option800=create_server_option();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_server_option800.getTree());

					}
					break;

				default :
					break loop252;
				}
			}

			RPAREN801=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_create_server_statement26988); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN801_tree = (Object)adaptor.create(RPAREN801);
			adaptor.addChild(root_0, RPAREN801_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_server_statement"


	public static class create_server_option_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "create_server_option"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1992:1: create_server_option : (| ( HOST_SYM string_literal ) | ( DATABASE string_literal ) | ( USER string_literal ) | ( PASSWORD string_literal ) | ( SOCKET_SYM string_literal ) | ( OWNER_SYM string_literal ) | ( PORT_SYM number_literal ) );
	public final SQLParser.create_server_option_return create_server_option() throws RecognitionException {
		SQLParser.create_server_option_return retval = new SQLParser.create_server_option_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token HOST_SYM802=null;
		Token DATABASE804=null;
		Token USER806=null;
		Token PASSWORD808=null;
		Token SOCKET_SYM810=null;
		Token OWNER_SYM812=null;
		Token PORT_SYM814=null;
		ParserRuleReturnScope string_literal803 =null;
		ParserRuleReturnScope string_literal805 =null;
		ParserRuleReturnScope string_literal807 =null;
		ParserRuleReturnScope string_literal809 =null;
		ParserRuleReturnScope string_literal811 =null;
		ParserRuleReturnScope string_literal813 =null;
		ParserRuleReturnScope number_literal815 =null;

		Object HOST_SYM802_tree=null;
		Object DATABASE804_tree=null;
		Object USER806_tree=null;
		Object PASSWORD808_tree=null;
		Object SOCKET_SYM810_tree=null;
		Object OWNER_SYM812_tree=null;
		Object PORT_SYM814_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1992:21: (| ( HOST_SYM string_literal ) | ( DATABASE string_literal ) | ( USER string_literal ) | ( PASSWORD string_literal ) | ( SOCKET_SYM string_literal ) | ( OWNER_SYM string_literal ) | ( PORT_SYM number_literal ) )
			int alt253=8;
			switch ( input.LA(1) ) {
			case EOF:
			case COMMA:
			case RPAREN:
				{
				alt253=1;
				}
				break;
			case HOST_SYM:
				{
				alt253=2;
				}
				break;
			case DATABASE:
				{
				alt253=3;
				}
				break;
			case USER:
				{
				alt253=4;
				}
				break;
			case PASSWORD:
				{
				alt253=5;
				}
				break;
			case SOCKET_SYM:
				{
				alt253=6;
				}
				break;
			case OWNER_SYM:
				{
				alt253=7;
				}
				break;
			case PORT_SYM:
				{
				alt253=8;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 253, 0, input);
				throw nvae;
			}
			switch (alt253) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1993:3: 
					{
					root_0 = (Object)adaptor.nil();


					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1993:5: ( HOST_SYM string_literal )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1993:5: ( HOST_SYM string_literal )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1993:7: HOST_SYM string_literal
					{
					HOST_SYM802=(Token)match(input,HOST_SYM,FOLLOW_HOST_SYM_in_create_server_option27001); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					HOST_SYM802_tree = (Object)adaptor.create(HOST_SYM802);
					adaptor.addChild(root_0, HOST_SYM802_tree);
					}

					pushFollow(FOLLOW_string_literal_in_create_server_option27003);
					string_literal803=string_literal();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, string_literal803.getTree());

					}

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1994:5: ( DATABASE string_literal )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1994:5: ( DATABASE string_literal )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1994:7: DATABASE string_literal
					{
					DATABASE804=(Token)match(input,DATABASE,FOLLOW_DATABASE_in_create_server_option27013); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DATABASE804_tree = (Object)adaptor.create(DATABASE804);
					adaptor.addChild(root_0, DATABASE804_tree);
					}

					pushFollow(FOLLOW_string_literal_in_create_server_option27015);
					string_literal805=string_literal();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, string_literal805.getTree());

					}

					}
					break;
				case 4 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1995:5: ( USER string_literal )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1995:5: ( USER string_literal )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1995:7: USER string_literal
					{
					USER806=(Token)match(input,USER,FOLLOW_USER_in_create_server_option27025); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					USER806_tree = (Object)adaptor.create(USER806);
					adaptor.addChild(root_0, USER806_tree);
					}

					pushFollow(FOLLOW_string_literal_in_create_server_option27027);
					string_literal807=string_literal();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, string_literal807.getTree());

					}

					}
					break;
				case 5 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1996:5: ( PASSWORD string_literal )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1996:5: ( PASSWORD string_literal )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1996:7: PASSWORD string_literal
					{
					PASSWORD808=(Token)match(input,PASSWORD,FOLLOW_PASSWORD_in_create_server_option27037); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PASSWORD808_tree = (Object)adaptor.create(PASSWORD808);
					adaptor.addChild(root_0, PASSWORD808_tree);
					}

					pushFollow(FOLLOW_string_literal_in_create_server_option27039);
					string_literal809=string_literal();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, string_literal809.getTree());

					}

					}
					break;
				case 6 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1997:5: ( SOCKET_SYM string_literal )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1997:5: ( SOCKET_SYM string_literal )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1997:7: SOCKET_SYM string_literal
					{
					SOCKET_SYM810=(Token)match(input,SOCKET_SYM,FOLLOW_SOCKET_SYM_in_create_server_option27049); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SOCKET_SYM810_tree = (Object)adaptor.create(SOCKET_SYM810);
					adaptor.addChild(root_0, SOCKET_SYM810_tree);
					}

					pushFollow(FOLLOW_string_literal_in_create_server_option27051);
					string_literal811=string_literal();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, string_literal811.getTree());

					}

					}
					break;
				case 7 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1998:5: ( OWNER_SYM string_literal )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1998:5: ( OWNER_SYM string_literal )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1998:7: OWNER_SYM string_literal
					{
					OWNER_SYM812=(Token)match(input,OWNER_SYM,FOLLOW_OWNER_SYM_in_create_server_option27061); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					OWNER_SYM812_tree = (Object)adaptor.create(OWNER_SYM812);
					adaptor.addChild(root_0, OWNER_SYM812_tree);
					}

					pushFollow(FOLLOW_string_literal_in_create_server_option27063);
					string_literal813=string_literal();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, string_literal813.getTree());

					}

					}
					break;
				case 8 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1999:5: ( PORT_SYM number_literal )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1999:5: ( PORT_SYM number_literal )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1999:7: PORT_SYM number_literal
					{
					PORT_SYM814=(Token)match(input,PORT_SYM,FOLLOW_PORT_SYM_in_create_server_option27073); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PORT_SYM814_tree = (Object)adaptor.create(PORT_SYM814);
					adaptor.addChild(root_0, PORT_SYM814_tree);
					}

					pushFollow(FOLLOW_number_literal_in_create_server_option27075);
					number_literal815=number_literal();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal815.getTree());

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_server_option"


	public static class alter_server_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "alter_server_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2004:1: alter_server_statement : ALTER SERVER_SYM server_name OPTIONS_SYM LPAREN alter_server_option ( COMMA alter_server_option )* RPAREN ;
	public final SQLParser.alter_server_statement_return alter_server_statement() throws RecognitionException {
		SQLParser.alter_server_statement_return retval = new SQLParser.alter_server_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token ALTER816=null;
		Token SERVER_SYM817=null;
		Token OPTIONS_SYM819=null;
		Token LPAREN820=null;
		Token COMMA822=null;
		Token RPAREN824=null;
		ParserRuleReturnScope server_name818 =null;
		ParserRuleReturnScope alter_server_option821 =null;
		ParserRuleReturnScope alter_server_option823 =null;

		Object ALTER816_tree=null;
		Object SERVER_SYM817_tree=null;
		Object OPTIONS_SYM819_tree=null;
		Object LPAREN820_tree=null;
		Object COMMA822_tree=null;
		Object RPAREN824_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2004:23: ( ALTER SERVER_SYM server_name OPTIONS_SYM LPAREN alter_server_option ( COMMA alter_server_option )* RPAREN )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2005:3: ALTER SERVER_SYM server_name OPTIONS_SYM LPAREN alter_server_option ( COMMA alter_server_option )* RPAREN
			{
			root_0 = (Object)adaptor.nil();


			ALTER816=(Token)match(input,ALTER,FOLLOW_ALTER_in_alter_server_statement27089); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			ALTER816_tree = (Object)adaptor.create(ALTER816);
			adaptor.addChild(root_0, ALTER816_tree);
			}

			SERVER_SYM817=(Token)match(input,SERVER_SYM,FOLLOW_SERVER_SYM_in_alter_server_statement27091); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			SERVER_SYM817_tree = (Object)adaptor.create(SERVER_SYM817);
			adaptor.addChild(root_0, SERVER_SYM817_tree);
			}

			pushFollow(FOLLOW_server_name_in_alter_server_statement27093);
			server_name818=server_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, server_name818.getTree());

			OPTIONS_SYM819=(Token)match(input,OPTIONS_SYM,FOLLOW_OPTIONS_SYM_in_alter_server_statement27097); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			OPTIONS_SYM819_tree = (Object)adaptor.create(OPTIONS_SYM819);
			adaptor.addChild(root_0, OPTIONS_SYM819_tree);
			}

			LPAREN820=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alter_server_statement27099); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN820_tree = (Object)adaptor.create(LPAREN820);
			adaptor.addChild(root_0, LPAREN820_tree);
			}

			pushFollow(FOLLOW_alter_server_option_in_alter_server_statement27101);
			alter_server_option821=alter_server_option();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_server_option821.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2006:42: ( COMMA alter_server_option )*
			loop254:
			while (true) {
				int alt254=2;
				int LA254_0 = input.LA(1);
				if ( (LA254_0==COMMA) ) {
					alt254=1;
				}

				switch (alt254) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2006:43: COMMA alter_server_option
					{
					COMMA822=(Token)match(input,COMMA,FOLLOW_COMMA_in_alter_server_statement27104); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA822_tree = (Object)adaptor.create(COMMA822);
					adaptor.addChild(root_0, COMMA822_tree);
					}

					pushFollow(FOLLOW_alter_server_option_in_alter_server_statement27106);
					alter_server_option823=alter_server_option();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_server_option823.getTree());

					}
					break;

				default :
					break loop254;
				}
			}

			RPAREN824=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alter_server_statement27110); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN824_tree = (Object)adaptor.create(RPAREN824);
			adaptor.addChild(root_0, RPAREN824_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_server_statement"


	public static class alter_server_option_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "alter_server_option"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2008:1: alter_server_option : ( USER ) ( ID | TEXT_STRING ) ;
	public final SQLParser.alter_server_option_return alter_server_option() throws RecognitionException {
		SQLParser.alter_server_option_return retval = new SQLParser.alter_server_option_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token USER825=null;
		Token set826=null;

		Object USER825_tree=null;
		Object set826_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2008:20: ( ( USER ) ( ID | TEXT_STRING ) )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2009:3: ( USER ) ( ID | TEXT_STRING )
			{
			root_0 = (Object)adaptor.nil();


			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2009:3: ( USER )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2009:4: USER
			{
			USER825=(Token)match(input,USER,FOLLOW_USER_in_alter_server_option27120); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			USER825_tree = (Object)adaptor.create(USER825);
			adaptor.addChild(root_0, USER825_tree);
			}

			}

			set826=input.LT(1);
			if ( input.LA(1)==ID||input.LA(1)==TEXT_STRING ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set826));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_server_option"


	public static class drop_server_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "drop_server_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2014:1: drop_server_statement : DROP SERVER_SYM ( IF EXISTS )? server_name ;
	public final SQLParser.drop_server_statement_return drop_server_statement() throws RecognitionException {
		SQLParser.drop_server_statement_return retval = new SQLParser.drop_server_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token DROP827=null;
		Token SERVER_SYM828=null;
		Token IF829=null;
		Token EXISTS830=null;
		ParserRuleReturnScope server_name831 =null;

		Object DROP827_tree=null;
		Object SERVER_SYM828_tree=null;
		Object IF829_tree=null;
		Object EXISTS830_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2014:22: ( DROP SERVER_SYM ( IF EXISTS )? server_name )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2015:3: DROP SERVER_SYM ( IF EXISTS )? server_name
			{
			root_0 = (Object)adaptor.nil();


			DROP827=(Token)match(input,DROP,FOLLOW_DROP_in_drop_server_statement27139); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DROP827_tree = (Object)adaptor.create(DROP827);
			adaptor.addChild(root_0, DROP827_tree);
			}

			SERVER_SYM828=(Token)match(input,SERVER_SYM,FOLLOW_SERVER_SYM_in_drop_server_statement27141); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			SERVER_SYM828_tree = (Object)adaptor.create(SERVER_SYM828);
			adaptor.addChild(root_0, SERVER_SYM828_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2015:19: ( IF EXISTS )?
			int alt255=2;
			int LA255_0 = input.LA(1);
			if ( (LA255_0==IF) ) {
				alt255=1;
			}
			switch (alt255) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2015:20: IF EXISTS
					{
					IF829=(Token)match(input,IF,FOLLOW_IF_in_drop_server_statement27144); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IF829_tree = (Object)adaptor.create(IF829);
					adaptor.addChild(root_0, IF829_tree);
					}

					EXISTS830=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_drop_server_statement27146); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXISTS830_tree = (Object)adaptor.create(EXISTS830);
					adaptor.addChild(root_0, EXISTS830_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_server_name_in_drop_server_statement27150);
			server_name831=server_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, server_name831.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_server_statement"


	public static class create_table_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "create_table_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2024:1: create_table_statement : ( create_table_statement1 | create_table_statement2 | create_table_statement3 );
	public final SQLParser.create_table_statement_return create_table_statement() throws RecognitionException {
		SQLParser.create_table_statement_return retval = new SQLParser.create_table_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope create_table_statement1832 =null;
		ParserRuleReturnScope create_table_statement2833 =null;
		ParserRuleReturnScope create_table_statement3834 =null;


		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2024:23: ( create_table_statement1 | create_table_statement2 | create_table_statement3 )
			int alt256=3;
			int LA256_0 = input.LA(1);
			if ( (LA256_0==CREATE) ) {
				int LA256_1 = input.LA(2);
				if ( (LA256_1==TEMPORARY) ) {
					int LA256_2 = input.LA(3);
					if ( (LA256_2==TABLE) ) {
						int LA256_3 = input.LA(4);
						if ( (LA256_3==IF) ) {
							int LA256_4 = input.LA(5);
							if ( (LA256_4==NOT_SYM) ) {
								int LA256_6 = input.LA(6);
								if ( (LA256_6==EXISTS) ) {
									int LA256_10 = input.LA(7);
									if ( (LA256_10==ID) ) {
										switch ( input.LA(8) ) {
										case LPAREN:
											{
											int LA256_7 = input.LA(9);
											if ( (LA256_7==LIKE_SYM) ) {
												alt256=3;
											}
											else if ( (LA256_7==CHECK_SYM||LA256_7==CONSTRAINT||LA256_7==FOREIGN||LA256_7==FULLTEXT_SYM||LA256_7==ID||LA256_7==INDEX_SYM||LA256_7==KEY_SYM||LA256_7==PRIMARY_SYM||LA256_7==SPATIAL_SYM||LA256_7==UNIQUE_SYM) ) {
												alt256=1;
											}

											else {
												if (state.backtracking>0) {state.failed=true; return retval;}
												int nvaeMark = input.mark();
												try {
													for (int nvaeConsume = 0; nvaeConsume < 9 - 1; nvaeConsume++) {
														input.consume();
													}
													NoViableAltException nvae =
														new NoViableAltException("", 256, 7, input);
													throw nvae;
												} finally {
													input.rewind(nvaeMark);
												}
											}

											}
											break;
										case AUTO_INCREMENT:
										case AVG_ROW_LENGTH:
										case CHARACTER_SYM:
										case CHECKSUM_SYM:
										case COLLATE_SYM:
										case COMMENT_SYM:
										case CONNECTION_SYM:
										case DATA_SYM:
										case DEFAULT:
										case DELAY_KEY_WRITE_SYM:
										case ENGINE_SYM:
										case INDEX_SYM:
										case INSERT_METHOD:
										case KEY_BLOCK_SIZE:
										case MAX_ROWS:
										case MIN_ROWS:
										case PACK_KEYS_SYM:
										case PARTITION_SYM:
										case PASSWORD:
										case ROW_FORMAT_SYM:
										case SELECT:
										case STATS_AUTO_RECALC:
										case STATS_PERSISTENT:
										case UNION_SYM:
											{
											alt256=2;
											}
											break;
										case LIKE_SYM:
											{
											alt256=3;
											}
											break;
										default:
											if (state.backtracking>0) {state.failed=true; return retval;}
											int nvaeMark = input.mark();
											try {
												for (int nvaeConsume = 0; nvaeConsume < 8 - 1; nvaeConsume++) {
													input.consume();
												}
												NoViableAltException nvae =
													new NoViableAltException("", 256, 5, input);
												throw nvae;
											} finally {
												input.rewind(nvaeMark);
											}
										}
									}

									else {
										if (state.backtracking>0) {state.failed=true; return retval;}
										int nvaeMark = input.mark();
										try {
											for (int nvaeConsume = 0; nvaeConsume < 7 - 1; nvaeConsume++) {
												input.consume();
											}
											NoViableAltException nvae =
												new NoViableAltException("", 256, 10, input);
											throw nvae;
										} finally {
											input.rewind(nvaeMark);
										}
									}

								}

								else {
									if (state.backtracking>0) {state.failed=true; return retval;}
									int nvaeMark = input.mark();
									try {
										for (int nvaeConsume = 0; nvaeConsume < 6 - 1; nvaeConsume++) {
											input.consume();
										}
										NoViableAltException nvae =
											new NoViableAltException("", 256, 6, input);
										throw nvae;
									} finally {
										input.rewind(nvaeMark);
									}
								}

							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 256, 4, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}

						}
						else if ( (LA256_3==ID) ) {
							switch ( input.LA(5) ) {
							case LPAREN:
								{
								int LA256_7 = input.LA(6);
								if ( (LA256_7==LIKE_SYM) ) {
									alt256=3;
								}
								else if ( (LA256_7==CHECK_SYM||LA256_7==CONSTRAINT||LA256_7==FOREIGN||LA256_7==FULLTEXT_SYM||LA256_7==ID||LA256_7==INDEX_SYM||LA256_7==KEY_SYM||LA256_7==PRIMARY_SYM||LA256_7==SPATIAL_SYM||LA256_7==UNIQUE_SYM) ) {
									alt256=1;
								}

								else {
									if (state.backtracking>0) {state.failed=true; return retval;}
									int nvaeMark = input.mark();
									try {
										for (int nvaeConsume = 0; nvaeConsume < 6 - 1; nvaeConsume++) {
											input.consume();
										}
										NoViableAltException nvae =
											new NoViableAltException("", 256, 7, input);
										throw nvae;
									} finally {
										input.rewind(nvaeMark);
									}
								}

								}
								break;
							case AUTO_INCREMENT:
							case AVG_ROW_LENGTH:
							case CHARACTER_SYM:
							case CHECKSUM_SYM:
							case COLLATE_SYM:
							case COMMENT_SYM:
							case CONNECTION_SYM:
							case DATA_SYM:
							case DEFAULT:
							case DELAY_KEY_WRITE_SYM:
							case ENGINE_SYM:
							case INDEX_SYM:
							case INSERT_METHOD:
							case KEY_BLOCK_SIZE:
							case MAX_ROWS:
							case MIN_ROWS:
							case PACK_KEYS_SYM:
							case PARTITION_SYM:
							case PASSWORD:
							case ROW_FORMAT_SYM:
							case SELECT:
							case STATS_AUTO_RECALC:
							case STATS_PERSISTENT:
							case UNION_SYM:
								{
								alt256=2;
								}
								break;
							case LIKE_SYM:
								{
								alt256=3;
								}
								break;
							default:
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 256, 5, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 256, 3, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 256, 2, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}
				else if ( (LA256_1==TABLE) ) {
					int LA256_3 = input.LA(3);
					if ( (LA256_3==IF) ) {
						int LA256_4 = input.LA(4);
						if ( (LA256_4==NOT_SYM) ) {
							int LA256_6 = input.LA(5);
							if ( (LA256_6==EXISTS) ) {
								int LA256_10 = input.LA(6);
								if ( (LA256_10==ID) ) {
									switch ( input.LA(7) ) {
									case LPAREN:
										{
										int LA256_7 = input.LA(8);
										if ( (LA256_7==LIKE_SYM) ) {
											alt256=3;
										}
										else if ( (LA256_7==CHECK_SYM||LA256_7==CONSTRAINT||LA256_7==FOREIGN||LA256_7==FULLTEXT_SYM||LA256_7==ID||LA256_7==INDEX_SYM||LA256_7==KEY_SYM||LA256_7==PRIMARY_SYM||LA256_7==SPATIAL_SYM||LA256_7==UNIQUE_SYM) ) {
											alt256=1;
										}

										else {
											if (state.backtracking>0) {state.failed=true; return retval;}
											int nvaeMark = input.mark();
											try {
												for (int nvaeConsume = 0; nvaeConsume < 8 - 1; nvaeConsume++) {
													input.consume();
												}
												NoViableAltException nvae =
													new NoViableAltException("", 256, 7, input);
												throw nvae;
											} finally {
												input.rewind(nvaeMark);
											}
										}

										}
										break;
									case AUTO_INCREMENT:
									case AVG_ROW_LENGTH:
									case CHARACTER_SYM:
									case CHECKSUM_SYM:
									case COLLATE_SYM:
									case COMMENT_SYM:
									case CONNECTION_SYM:
									case DATA_SYM:
									case DEFAULT:
									case DELAY_KEY_WRITE_SYM:
									case ENGINE_SYM:
									case INDEX_SYM:
									case INSERT_METHOD:
									case KEY_BLOCK_SIZE:
									case MAX_ROWS:
									case MIN_ROWS:
									case PACK_KEYS_SYM:
									case PARTITION_SYM:
									case PASSWORD:
									case ROW_FORMAT_SYM:
									case SELECT:
									case STATS_AUTO_RECALC:
									case STATS_PERSISTENT:
									case UNION_SYM:
										{
										alt256=2;
										}
										break;
									case LIKE_SYM:
										{
										alt256=3;
										}
										break;
									default:
										if (state.backtracking>0) {state.failed=true; return retval;}
										int nvaeMark = input.mark();
										try {
											for (int nvaeConsume = 0; nvaeConsume < 7 - 1; nvaeConsume++) {
												input.consume();
											}
											NoViableAltException nvae =
												new NoViableAltException("", 256, 5, input);
											throw nvae;
										} finally {
											input.rewind(nvaeMark);
										}
									}
								}

								else {
									if (state.backtracking>0) {state.failed=true; return retval;}
									int nvaeMark = input.mark();
									try {
										for (int nvaeConsume = 0; nvaeConsume < 6 - 1; nvaeConsume++) {
											input.consume();
										}
										NoViableAltException nvae =
											new NoViableAltException("", 256, 10, input);
										throw nvae;
									} finally {
										input.rewind(nvaeMark);
									}
								}

							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 256, 6, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}

						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 256, 4, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}
					else if ( (LA256_3==ID) ) {
						switch ( input.LA(4) ) {
						case LPAREN:
							{
							int LA256_7 = input.LA(5);
							if ( (LA256_7==LIKE_SYM) ) {
								alt256=3;
							}
							else if ( (LA256_7==CHECK_SYM||LA256_7==CONSTRAINT||LA256_7==FOREIGN||LA256_7==FULLTEXT_SYM||LA256_7==ID||LA256_7==INDEX_SYM||LA256_7==KEY_SYM||LA256_7==PRIMARY_SYM||LA256_7==SPATIAL_SYM||LA256_7==UNIQUE_SYM) ) {
								alt256=1;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 256, 7, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}

							}
							break;
						case AUTO_INCREMENT:
						case AVG_ROW_LENGTH:
						case CHARACTER_SYM:
						case CHECKSUM_SYM:
						case COLLATE_SYM:
						case COMMENT_SYM:
						case CONNECTION_SYM:
						case DATA_SYM:
						case DEFAULT:
						case DELAY_KEY_WRITE_SYM:
						case ENGINE_SYM:
						case INDEX_SYM:
						case INSERT_METHOD:
						case KEY_BLOCK_SIZE:
						case MAX_ROWS:
						case MIN_ROWS:
						case PACK_KEYS_SYM:
						case PARTITION_SYM:
						case PASSWORD:
						case ROW_FORMAT_SYM:
						case SELECT:
						case STATS_AUTO_RECALC:
						case STATS_PERSISTENT:
						case UNION_SYM:
							{
							alt256=2;
							}
							break;
						case LIKE_SYM:
							{
							alt256=3;
							}
							break;
						default:
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 256, 5, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 256, 3, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 256, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 256, 0, input);
				throw nvae;
			}

			switch (alt256) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2025:3: create_table_statement1
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_create_table_statement1_in_create_table_statement27166);
					create_table_statement1832=create_table_statement1();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_table_statement1832.getTree());

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2025:29: create_table_statement2
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_create_table_statement2_in_create_table_statement27170);
					create_table_statement2833=create_table_statement2();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_table_statement2833.getTree());

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2025:55: create_table_statement3
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_create_table_statement3_in_create_table_statement27174);
					create_table_statement3834=create_table_statement3();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_table_statement3834.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_table_statement"


	public static class create_table_statement1_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "create_table_statement1"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2028:1: create_table_statement1 : CREATE ( TEMPORARY )? TABLE ( IF NOT_SYM EXISTS )? table_name LPAREN create_definition ( COMMA create_definition )* RPAREN ( table_options )? ( partition_options )? ( select_statement )? ;
	public final SQLParser.create_table_statement1_return create_table_statement1() throws RecognitionException {
		SQLParser.create_table_statement1_return retval = new SQLParser.create_table_statement1_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token CREATE835=null;
		Token TEMPORARY836=null;
		Token TABLE837=null;
		Token IF838=null;
		Token NOT_SYM839=null;
		Token EXISTS840=null;
		Token LPAREN842=null;
		Token COMMA844=null;
		Token RPAREN846=null;
		ParserRuleReturnScope table_name841 =null;
		ParserRuleReturnScope create_definition843 =null;
		ParserRuleReturnScope create_definition845 =null;
		ParserRuleReturnScope table_options847 =null;
		ParserRuleReturnScope partition_options848 =null;
		ParserRuleReturnScope select_statement849 =null;

		Object CREATE835_tree=null;
		Object TEMPORARY836_tree=null;
		Object TABLE837_tree=null;
		Object IF838_tree=null;
		Object NOT_SYM839_tree=null;
		Object EXISTS840_tree=null;
		Object LPAREN842_tree=null;
		Object COMMA844_tree=null;
		Object RPAREN846_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2028:24: ( CREATE ( TEMPORARY )? TABLE ( IF NOT_SYM EXISTS )? table_name LPAREN create_definition ( COMMA create_definition )* RPAREN ( table_options )? ( partition_options )? ( select_statement )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2029:3: CREATE ( TEMPORARY )? TABLE ( IF NOT_SYM EXISTS )? table_name LPAREN create_definition ( COMMA create_definition )* RPAREN ( table_options )? ( partition_options )? ( select_statement )?
			{
			root_0 = (Object)adaptor.nil();


			CREATE835=(Token)match(input,CREATE,FOLLOW_CREATE_in_create_table_statement127186); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			CREATE835_tree = (Object)adaptor.create(CREATE835);
			adaptor.addChild(root_0, CREATE835_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2029:10: ( TEMPORARY )?
			int alt257=2;
			int LA257_0 = input.LA(1);
			if ( (LA257_0==TEMPORARY) ) {
				alt257=1;
			}
			switch (alt257) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2029:11: TEMPORARY
					{
					TEMPORARY836=(Token)match(input,TEMPORARY,FOLLOW_TEMPORARY_in_create_table_statement127189); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEMPORARY836_tree = (Object)adaptor.create(TEMPORARY836);
					adaptor.addChild(root_0, TEMPORARY836_tree);
					}

					}
					break;

			}

			TABLE837=(Token)match(input,TABLE,FOLLOW_TABLE_in_create_table_statement127193); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			TABLE837_tree = (Object)adaptor.create(TABLE837);
			adaptor.addChild(root_0, TABLE837_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2029:29: ( IF NOT_SYM EXISTS )?
			int alt258=2;
			int LA258_0 = input.LA(1);
			if ( (LA258_0==IF) ) {
				alt258=1;
			}
			switch (alt258) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2029:30: IF NOT_SYM EXISTS
					{
					IF838=(Token)match(input,IF,FOLLOW_IF_in_create_table_statement127196); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IF838_tree = (Object)adaptor.create(IF838);
					adaptor.addChild(root_0, IF838_tree);
					}

					NOT_SYM839=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_create_table_statement127198); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NOT_SYM839_tree = (Object)adaptor.create(NOT_SYM839);
					adaptor.addChild(root_0, NOT_SYM839_tree);
					}

					EXISTS840=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_create_table_statement127200); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXISTS840_tree = (Object)adaptor.create(EXISTS840);
					adaptor.addChild(root_0, EXISTS840_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_table_name_in_create_table_statement127204);
			table_name841=table_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name841.getTree());

			LPAREN842=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_create_table_statement127208); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN842_tree = (Object)adaptor.create(LPAREN842);
			adaptor.addChild(root_0, LPAREN842_tree);
			}

			pushFollow(FOLLOW_create_definition_in_create_table_statement127210);
			create_definition843=create_definition();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, create_definition843.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2030:28: ( COMMA create_definition )*
			loop259:
			while (true) {
				int alt259=2;
				int LA259_0 = input.LA(1);
				if ( (LA259_0==COMMA) ) {
					alt259=1;
				}

				switch (alt259) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2030:29: COMMA create_definition
					{
					COMMA844=(Token)match(input,COMMA,FOLLOW_COMMA_in_create_table_statement127213); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA844_tree = (Object)adaptor.create(COMMA844);
					adaptor.addChild(root_0, COMMA844_tree);
					}

					pushFollow(FOLLOW_create_definition_in_create_table_statement127215);
					create_definition845=create_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_definition845.getTree());

					}
					break;

				default :
					break loop259;
				}
			}

			RPAREN846=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_create_table_statement127219); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN846_tree = (Object)adaptor.create(RPAREN846);
			adaptor.addChild(root_0, RPAREN846_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2031:3: ( table_options )?
			int alt260=2;
			int LA260_0 = input.LA(1);
			if ( (LA260_0==AUTO_INCREMENT||LA260_0==AVG_ROW_LENGTH||LA260_0==CHARACTER_SYM||LA260_0==CHECKSUM_SYM||LA260_0==COLLATE_SYM||LA260_0==COMMENT_SYM||LA260_0==CONNECTION_SYM||LA260_0==DATA_SYM||LA260_0==DEFAULT||LA260_0==DELAY_KEY_WRITE_SYM||LA260_0==ENGINE_SYM||LA260_0==INDEX_SYM||LA260_0==INSERT_METHOD||LA260_0==KEY_BLOCK_SIZE||LA260_0==MAX_ROWS||LA260_0==MIN_ROWS||LA260_0==PACK_KEYS_SYM||LA260_0==PASSWORD||LA260_0==ROW_FORMAT_SYM||(LA260_0 >= STATS_AUTO_RECALC && LA260_0 <= STATS_PERSISTENT)||LA260_0==UNION_SYM) ) {
				alt260=1;
			}
			switch (alt260) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2031:4: table_options
					{
					pushFollow(FOLLOW_table_options_in_create_table_statement127224);
					table_options847=table_options();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_options847.getTree());

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2032:3: ( partition_options )?
			int alt261=2;
			int LA261_0 = input.LA(1);
			if ( (LA261_0==PARTITION_SYM) ) {
				alt261=1;
			}
			switch (alt261) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2032:4: partition_options
					{
					pushFollow(FOLLOW_partition_options_in_create_table_statement127231);
					partition_options848=partition_options();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_options848.getTree());

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2033:3: ( select_statement )?
			int alt262=2;
			int LA262_0 = input.LA(1);
			if ( (LA262_0==SELECT) ) {
				alt262=1;
			}
			switch (alt262) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2033:4: select_statement
					{
					pushFollow(FOLLOW_select_statement_in_create_table_statement127238);
					select_statement849=select_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement849.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_table_statement1"


	public static class create_table_statement2_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "create_table_statement2"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2036:1: create_table_statement2 : CREATE ( TEMPORARY )? TABLE ( IF NOT_SYM EXISTS )? table_name ( table_options )? ( partition_options )? select_statement ;
	public final SQLParser.create_table_statement2_return create_table_statement2() throws RecognitionException {
		SQLParser.create_table_statement2_return retval = new SQLParser.create_table_statement2_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token CREATE850=null;
		Token TEMPORARY851=null;
		Token TABLE852=null;
		Token IF853=null;
		Token NOT_SYM854=null;
		Token EXISTS855=null;
		ParserRuleReturnScope table_name856 =null;
		ParserRuleReturnScope table_options857 =null;
		ParserRuleReturnScope partition_options858 =null;
		ParserRuleReturnScope select_statement859 =null;

		Object CREATE850_tree=null;
		Object TEMPORARY851_tree=null;
		Object TABLE852_tree=null;
		Object IF853_tree=null;
		Object NOT_SYM854_tree=null;
		Object EXISTS855_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2036:24: ( CREATE ( TEMPORARY )? TABLE ( IF NOT_SYM EXISTS )? table_name ( table_options )? ( partition_options )? select_statement )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2037:3: CREATE ( TEMPORARY )? TABLE ( IF NOT_SYM EXISTS )? table_name ( table_options )? ( partition_options )? select_statement
			{
			root_0 = (Object)adaptor.nil();


			CREATE850=(Token)match(input,CREATE,FOLLOW_CREATE_in_create_table_statement227250); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			CREATE850_tree = (Object)adaptor.create(CREATE850);
			adaptor.addChild(root_0, CREATE850_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2037:10: ( TEMPORARY )?
			int alt263=2;
			int LA263_0 = input.LA(1);
			if ( (LA263_0==TEMPORARY) ) {
				alt263=1;
			}
			switch (alt263) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2037:11: TEMPORARY
					{
					TEMPORARY851=(Token)match(input,TEMPORARY,FOLLOW_TEMPORARY_in_create_table_statement227253); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEMPORARY851_tree = (Object)adaptor.create(TEMPORARY851);
					adaptor.addChild(root_0, TEMPORARY851_tree);
					}

					}
					break;

			}

			TABLE852=(Token)match(input,TABLE,FOLLOW_TABLE_in_create_table_statement227257); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			TABLE852_tree = (Object)adaptor.create(TABLE852);
			adaptor.addChild(root_0, TABLE852_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2037:29: ( IF NOT_SYM EXISTS )?
			int alt264=2;
			int LA264_0 = input.LA(1);
			if ( (LA264_0==IF) ) {
				alt264=1;
			}
			switch (alt264) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2037:30: IF NOT_SYM EXISTS
					{
					IF853=(Token)match(input,IF,FOLLOW_IF_in_create_table_statement227260); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IF853_tree = (Object)adaptor.create(IF853);
					adaptor.addChild(root_0, IF853_tree);
					}

					NOT_SYM854=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_create_table_statement227262); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NOT_SYM854_tree = (Object)adaptor.create(NOT_SYM854);
					adaptor.addChild(root_0, NOT_SYM854_tree);
					}

					EXISTS855=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_create_table_statement227264); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXISTS855_tree = (Object)adaptor.create(EXISTS855);
					adaptor.addChild(root_0, EXISTS855_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_table_name_in_create_table_statement227268);
			table_name856=table_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name856.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2038:3: ( table_options )?
			int alt265=2;
			int LA265_0 = input.LA(1);
			if ( (LA265_0==AUTO_INCREMENT||LA265_0==AVG_ROW_LENGTH||LA265_0==CHARACTER_SYM||LA265_0==CHECKSUM_SYM||LA265_0==COLLATE_SYM||LA265_0==COMMENT_SYM||LA265_0==CONNECTION_SYM||LA265_0==DATA_SYM||LA265_0==DEFAULT||LA265_0==DELAY_KEY_WRITE_SYM||LA265_0==ENGINE_SYM||LA265_0==INDEX_SYM||LA265_0==INSERT_METHOD||LA265_0==KEY_BLOCK_SIZE||LA265_0==MAX_ROWS||LA265_0==MIN_ROWS||LA265_0==PACK_KEYS_SYM||LA265_0==PASSWORD||LA265_0==ROW_FORMAT_SYM||(LA265_0 >= STATS_AUTO_RECALC && LA265_0 <= STATS_PERSISTENT)||LA265_0==UNION_SYM) ) {
				alt265=1;
			}
			switch (alt265) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2038:4: table_options
					{
					pushFollow(FOLLOW_table_options_in_create_table_statement227273);
					table_options857=table_options();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_options857.getTree());

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2039:3: ( partition_options )?
			int alt266=2;
			int LA266_0 = input.LA(1);
			if ( (LA266_0==PARTITION_SYM) ) {
				alt266=1;
			}
			switch (alt266) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2039:4: partition_options
					{
					pushFollow(FOLLOW_partition_options_in_create_table_statement227280);
					partition_options858=partition_options();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_options858.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_select_statement_in_create_table_statement227286);
			select_statement859=select_statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement859.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_table_statement2"


	public static class create_table_statement3_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "create_table_statement3"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2043:1: create_table_statement3 : CREATE ( TEMPORARY )? TABLE ( IF NOT_SYM EXISTS )? table_name ( ( LIKE_SYM table_name ) | ( LPAREN LIKE_SYM table_name RPAREN ) ) ;
	public final SQLParser.create_table_statement3_return create_table_statement3() throws RecognitionException {
		SQLParser.create_table_statement3_return retval = new SQLParser.create_table_statement3_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token CREATE860=null;
		Token TEMPORARY861=null;
		Token TABLE862=null;
		Token IF863=null;
		Token NOT_SYM864=null;
		Token EXISTS865=null;
		Token LIKE_SYM867=null;
		Token LPAREN869=null;
		Token LIKE_SYM870=null;
		Token RPAREN872=null;
		ParserRuleReturnScope table_name866 =null;
		ParserRuleReturnScope table_name868 =null;
		ParserRuleReturnScope table_name871 =null;

		Object CREATE860_tree=null;
		Object TEMPORARY861_tree=null;
		Object TABLE862_tree=null;
		Object IF863_tree=null;
		Object NOT_SYM864_tree=null;
		Object EXISTS865_tree=null;
		Object LIKE_SYM867_tree=null;
		Object LPAREN869_tree=null;
		Object LIKE_SYM870_tree=null;
		Object RPAREN872_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2043:24: ( CREATE ( TEMPORARY )? TABLE ( IF NOT_SYM EXISTS )? table_name ( ( LIKE_SYM table_name ) | ( LPAREN LIKE_SYM table_name RPAREN ) ) )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2044:3: CREATE ( TEMPORARY )? TABLE ( IF NOT_SYM EXISTS )? table_name ( ( LIKE_SYM table_name ) | ( LPAREN LIKE_SYM table_name RPAREN ) )
			{
			root_0 = (Object)adaptor.nil();


			CREATE860=(Token)match(input,CREATE,FOLLOW_CREATE_in_create_table_statement327296); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			CREATE860_tree = (Object)adaptor.create(CREATE860);
			adaptor.addChild(root_0, CREATE860_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2044:10: ( TEMPORARY )?
			int alt267=2;
			int LA267_0 = input.LA(1);
			if ( (LA267_0==TEMPORARY) ) {
				alt267=1;
			}
			switch (alt267) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2044:11: TEMPORARY
					{
					TEMPORARY861=(Token)match(input,TEMPORARY,FOLLOW_TEMPORARY_in_create_table_statement327299); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEMPORARY861_tree = (Object)adaptor.create(TEMPORARY861);
					adaptor.addChild(root_0, TEMPORARY861_tree);
					}

					}
					break;

			}

			TABLE862=(Token)match(input,TABLE,FOLLOW_TABLE_in_create_table_statement327303); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			TABLE862_tree = (Object)adaptor.create(TABLE862);
			adaptor.addChild(root_0, TABLE862_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2044:29: ( IF NOT_SYM EXISTS )?
			int alt268=2;
			int LA268_0 = input.LA(1);
			if ( (LA268_0==IF) ) {
				alt268=1;
			}
			switch (alt268) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2044:30: IF NOT_SYM EXISTS
					{
					IF863=(Token)match(input,IF,FOLLOW_IF_in_create_table_statement327306); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IF863_tree = (Object)adaptor.create(IF863);
					adaptor.addChild(root_0, IF863_tree);
					}

					NOT_SYM864=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_create_table_statement327308); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NOT_SYM864_tree = (Object)adaptor.create(NOT_SYM864);
					adaptor.addChild(root_0, NOT_SYM864_tree);
					}

					EXISTS865=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_create_table_statement327310); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXISTS865_tree = (Object)adaptor.create(EXISTS865);
					adaptor.addChild(root_0, EXISTS865_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_table_name_in_create_table_statement327314);
			table_name866=table_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name866.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2045:3: ( ( LIKE_SYM table_name ) | ( LPAREN LIKE_SYM table_name RPAREN ) )
			int alt269=2;
			int LA269_0 = input.LA(1);
			if ( (LA269_0==LIKE_SYM) ) {
				alt269=1;
			}
			else if ( (LA269_0==LPAREN) ) {
				alt269=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 269, 0, input);
				throw nvae;
			}

			switch (alt269) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2045:5: ( LIKE_SYM table_name )
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2045:5: ( LIKE_SYM table_name )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2045:6: LIKE_SYM table_name
					{
					LIKE_SYM867=(Token)match(input,LIKE_SYM,FOLLOW_LIKE_SYM_in_create_table_statement327321); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LIKE_SYM867_tree = (Object)adaptor.create(LIKE_SYM867);
					adaptor.addChild(root_0, LIKE_SYM867_tree);
					}

					pushFollow(FOLLOW_table_name_in_create_table_statement327323);
					table_name868=table_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name868.getTree());

					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2045:29: ( LPAREN LIKE_SYM table_name RPAREN )
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2045:29: ( LPAREN LIKE_SYM table_name RPAREN )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2045:30: LPAREN LIKE_SYM table_name RPAREN
					{
					LPAREN869=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_create_table_statement327329); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN869_tree = (Object)adaptor.create(LPAREN869);
					adaptor.addChild(root_0, LPAREN869_tree);
					}

					LIKE_SYM870=(Token)match(input,LIKE_SYM,FOLLOW_LIKE_SYM_in_create_table_statement327331); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LIKE_SYM870_tree = (Object)adaptor.create(LIKE_SYM870);
					adaptor.addChild(root_0, LIKE_SYM870_tree);
					}

					pushFollow(FOLLOW_table_name_in_create_table_statement327333);
					table_name871=table_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name871.getTree());

					RPAREN872=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_create_table_statement327335); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN872_tree = (Object)adaptor.create(RPAREN872);
					adaptor.addChild(root_0, RPAREN872_tree);
					}

					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_table_statement3"


	public static class create_definition_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "create_definition"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2048:1: create_definition : ( ( column_name column_definition ) | ( ( CONSTRAINT ( constraint_symbol_name )? )? PRIMARY_SYM KEY_SYM ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* ) | ( ( INDEX_SYM | KEY_SYM ) ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* ) | ( ( CONSTRAINT ( constraint_symbol_name )? )? UNIQUE_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* ) | ( ( FULLTEXT_SYM | SPATIAL_SYM ) ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* ) | ( ( CONSTRAINT ( constraint_symbol_name )? )? FOREIGN KEY_SYM ( index_name )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN reference_definition ) | ( CHECK_SYM LPAREN expression RPAREN ) );
	public final SQLParser.create_definition_return create_definition() throws RecognitionException {
		SQLParser.create_definition_return retval = new SQLParser.create_definition_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token CONSTRAINT875=null;
		Token PRIMARY_SYM877=null;
		Token KEY_SYM878=null;
		Token LPAREN880=null;
		Token COMMA882=null;
		Token RPAREN884=null;
		Token set886=null;
		Token LPAREN889=null;
		Token COMMA891=null;
		Token RPAREN893=null;
		Token CONSTRAINT895=null;
		Token UNIQUE_SYM897=null;
		Token set898=null;
		Token LPAREN901=null;
		Token COMMA903=null;
		Token RPAREN905=null;
		Token set907=null;
		Token set908=null;
		Token LPAREN910=null;
		Token COMMA912=null;
		Token RPAREN914=null;
		Token CONSTRAINT916=null;
		Token FOREIGN918=null;
		Token KEY_SYM919=null;
		Token LPAREN921=null;
		Token COMMA923=null;
		Token RPAREN925=null;
		Token CHECK_SYM927=null;
		Token LPAREN928=null;
		Token RPAREN930=null;
		ParserRuleReturnScope column_name873 =null;
		ParserRuleReturnScope column_definition874 =null;
		ParserRuleReturnScope constraint_symbol_name876 =null;
		ParserRuleReturnScope index_type879 =null;
		ParserRuleReturnScope index_column_name881 =null;
		ParserRuleReturnScope index_column_name883 =null;
		ParserRuleReturnScope index_option885 =null;
		ParserRuleReturnScope index_name887 =null;
		ParserRuleReturnScope index_type888 =null;
		ParserRuleReturnScope index_column_name890 =null;
		ParserRuleReturnScope index_column_name892 =null;
		ParserRuleReturnScope index_option894 =null;
		ParserRuleReturnScope constraint_symbol_name896 =null;
		ParserRuleReturnScope index_name899 =null;
		ParserRuleReturnScope index_type900 =null;
		ParserRuleReturnScope index_column_name902 =null;
		ParserRuleReturnScope index_column_name904 =null;
		ParserRuleReturnScope index_option906 =null;
		ParserRuleReturnScope index_name909 =null;
		ParserRuleReturnScope index_column_name911 =null;
		ParserRuleReturnScope index_column_name913 =null;
		ParserRuleReturnScope index_option915 =null;
		ParserRuleReturnScope constraint_symbol_name917 =null;
		ParserRuleReturnScope index_name920 =null;
		ParserRuleReturnScope index_column_name922 =null;
		ParserRuleReturnScope index_column_name924 =null;
		ParserRuleReturnScope reference_definition926 =null;
		ParserRuleReturnScope expression929 =null;

		Object CONSTRAINT875_tree=null;
		Object PRIMARY_SYM877_tree=null;
		Object KEY_SYM878_tree=null;
		Object LPAREN880_tree=null;
		Object COMMA882_tree=null;
		Object RPAREN884_tree=null;
		Object set886_tree=null;
		Object LPAREN889_tree=null;
		Object COMMA891_tree=null;
		Object RPAREN893_tree=null;
		Object CONSTRAINT895_tree=null;
		Object UNIQUE_SYM897_tree=null;
		Object set898_tree=null;
		Object LPAREN901_tree=null;
		Object COMMA903_tree=null;
		Object RPAREN905_tree=null;
		Object set907_tree=null;
		Object set908_tree=null;
		Object LPAREN910_tree=null;
		Object COMMA912_tree=null;
		Object RPAREN914_tree=null;
		Object CONSTRAINT916_tree=null;
		Object FOREIGN918_tree=null;
		Object KEY_SYM919_tree=null;
		Object LPAREN921_tree=null;
		Object COMMA923_tree=null;
		Object RPAREN925_tree=null;
		Object CHECK_SYM927_tree=null;
		Object LPAREN928_tree=null;
		Object RPAREN930_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2048:18: ( ( column_name column_definition ) | ( ( CONSTRAINT ( constraint_symbol_name )? )? PRIMARY_SYM KEY_SYM ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* ) | ( ( INDEX_SYM | KEY_SYM ) ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* ) | ( ( CONSTRAINT ( constraint_symbol_name )? )? UNIQUE_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* ) | ( ( FULLTEXT_SYM | SPATIAL_SYM ) ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* ) | ( ( CONSTRAINT ( constraint_symbol_name )? )? FOREIGN KEY_SYM ( index_name )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN reference_definition ) | ( CHECK_SYM LPAREN expression RPAREN ) )
			int alt294=7;
			switch ( input.LA(1) ) {
			case ID:
				{
				alt294=1;
				}
				break;
			case CONSTRAINT:
				{
				switch ( input.LA(2) ) {
				case ID:
					{
					switch ( input.LA(3) ) {
					case PRIMARY_SYM:
						{
						alt294=2;
						}
						break;
					case UNIQUE_SYM:
						{
						alt294=4;
						}
						break;
					case FOREIGN:
						{
						alt294=6;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 294, 9, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}
					}
					break;
				case PRIMARY_SYM:
					{
					alt294=2;
					}
					break;
				case UNIQUE_SYM:
					{
					alt294=4;
					}
					break;
				case FOREIGN:
					{
					alt294=6;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 294, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case PRIMARY_SYM:
				{
				alt294=2;
				}
				break;
			case INDEX_SYM:
			case KEY_SYM:
				{
				alt294=3;
				}
				break;
			case UNIQUE_SYM:
				{
				alt294=4;
				}
				break;
			case FULLTEXT_SYM:
			case SPATIAL_SYM:
				{
				alt294=5;
				}
				break;
			case FOREIGN:
				{
				alt294=6;
				}
				break;
			case CHECK_SYM:
				{
				alt294=7;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 294, 0, input);
				throw nvae;
			}
			switch (alt294) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2049:5: ( column_name column_definition )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2049:5: ( column_name column_definition )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2049:8: column_name column_definition
					{
					pushFollow(FOLLOW_column_name_in_create_definition27353);
					column_name873=column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name873.getTree());

					pushFollow(FOLLOW_column_definition_in_create_definition27355);
					column_definition874=column_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_definition874.getTree());

					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2050:5: ( ( CONSTRAINT ( constraint_symbol_name )? )? PRIMARY_SYM KEY_SYM ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2050:5: ( ( CONSTRAINT ( constraint_symbol_name )? )? PRIMARY_SYM KEY_SYM ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2050:8: ( CONSTRAINT ( constraint_symbol_name )? )? PRIMARY_SYM KEY_SYM ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )*
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2050:8: ( CONSTRAINT ( constraint_symbol_name )? )?
					int alt271=2;
					int LA271_0 = input.LA(1);
					if ( (LA271_0==CONSTRAINT) ) {
						alt271=1;
					}
					switch (alt271) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2050:9: CONSTRAINT ( constraint_symbol_name )?
							{
							CONSTRAINT875=(Token)match(input,CONSTRAINT,FOLLOW_CONSTRAINT_in_create_definition27368); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CONSTRAINT875_tree = (Object)adaptor.create(CONSTRAINT875);
							adaptor.addChild(root_0, CONSTRAINT875_tree);
							}

							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2050:20: ( constraint_symbol_name )?
							int alt270=2;
							int LA270_0 = input.LA(1);
							if ( (LA270_0==ID) ) {
								alt270=1;
							}
							switch (alt270) {
								case 1 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2050:21: constraint_symbol_name
									{
									pushFollow(FOLLOW_constraint_symbol_name_in_create_definition27371);
									constraint_symbol_name876=constraint_symbol_name();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint_symbol_name876.getTree());

									}
									break;

							}

							}
							break;

					}

					PRIMARY_SYM877=(Token)match(input,PRIMARY_SYM,FOLLOW_PRIMARY_SYM_in_create_definition27377); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PRIMARY_SYM877_tree = (Object)adaptor.create(PRIMARY_SYM877);
					adaptor.addChild(root_0, PRIMARY_SYM877_tree);
					}

					KEY_SYM878=(Token)match(input,KEY_SYM,FOLLOW_KEY_SYM_in_create_definition27379); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KEY_SYM878_tree = (Object)adaptor.create(KEY_SYM878);
					adaptor.addChild(root_0, KEY_SYM878_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2050:68: ( index_type )?
					int alt272=2;
					int LA272_0 = input.LA(1);
					if ( (LA272_0==USING_SYM) ) {
						alt272=1;
					}
					switch (alt272) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2050:69: index_type
							{
							pushFollow(FOLLOW_index_type_in_create_definition27382);
							index_type879=index_type();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_type879.getTree());

							}
							break;

					}

					LPAREN880=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_create_definition27386); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN880_tree = (Object)adaptor.create(LPAREN880);
					adaptor.addChild(root_0, LPAREN880_tree);
					}

					pushFollow(FOLLOW_index_column_name_in_create_definition27388);
					index_column_name881=index_column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name881.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2050:107: ( COMMA index_column_name )*
					loop273:
					while (true) {
						int alt273=2;
						int LA273_0 = input.LA(1);
						if ( (LA273_0==COMMA) ) {
							alt273=1;
						}

						switch (alt273) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2050:108: COMMA index_column_name
							{
							COMMA882=(Token)match(input,COMMA,FOLLOW_COMMA_in_create_definition27391); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA882_tree = (Object)adaptor.create(COMMA882);
							adaptor.addChild(root_0, COMMA882_tree);
							}

							pushFollow(FOLLOW_index_column_name_in_create_definition27393);
							index_column_name883=index_column_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name883.getTree());

							}
							break;

						default :
							break loop273;
						}
					}

					RPAREN884=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_create_definition27397); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN884_tree = (Object)adaptor.create(RPAREN884);
					adaptor.addChild(root_0, RPAREN884_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2050:141: ( index_option )*
					loop274:
					while (true) {
						int alt274=2;
						int LA274_0 = input.LA(1);
						if ( (LA274_0==COMMENT_SYM||LA274_0==KEY_BLOCK_SIZE||LA274_0==USING_SYM||LA274_0==WITH) ) {
							alt274=1;
						}

						switch (alt274) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2050:142: index_option
							{
							pushFollow(FOLLOW_index_option_in_create_definition27400);
							index_option885=index_option();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_option885.getTree());

							}
							break;

						default :
							break loop274;
						}
					}

					}

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2051:5: ( ( INDEX_SYM | KEY_SYM ) ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2051:5: ( ( INDEX_SYM | KEY_SYM ) ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2051:8: ( INDEX_SYM | KEY_SYM ) ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )*
					{
					set886=input.LT(1);
					if ( input.LA(1)==INDEX_SYM||input.LA(1)==KEY_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set886));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2051:28: ( index_name )?
					int alt275=2;
					int LA275_0 = input.LA(1);
					if ( (LA275_0==ID) ) {
						alt275=1;
					}
					switch (alt275) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2051:29: index_name
							{
							pushFollow(FOLLOW_index_name_in_create_definition27421);
							index_name887=index_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name887.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2051:42: ( index_type )?
					int alt276=2;
					int LA276_0 = input.LA(1);
					if ( (LA276_0==USING_SYM) ) {
						alt276=1;
					}
					switch (alt276) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2051:43: index_type
							{
							pushFollow(FOLLOW_index_type_in_create_definition27426);
							index_type888=index_type();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_type888.getTree());

							}
							break;

					}

					LPAREN889=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_create_definition27430); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN889_tree = (Object)adaptor.create(LPAREN889);
					adaptor.addChild(root_0, LPAREN889_tree);
					}

					pushFollow(FOLLOW_index_column_name_in_create_definition27432);
					index_column_name890=index_column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name890.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2051:81: ( COMMA index_column_name )*
					loop277:
					while (true) {
						int alt277=2;
						int LA277_0 = input.LA(1);
						if ( (LA277_0==COMMA) ) {
							alt277=1;
						}

						switch (alt277) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2051:82: COMMA index_column_name
							{
							COMMA891=(Token)match(input,COMMA,FOLLOW_COMMA_in_create_definition27435); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA891_tree = (Object)adaptor.create(COMMA891);
							adaptor.addChild(root_0, COMMA891_tree);
							}

							pushFollow(FOLLOW_index_column_name_in_create_definition27437);
							index_column_name892=index_column_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name892.getTree());

							}
							break;

						default :
							break loop277;
						}
					}

					RPAREN893=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_create_definition27441); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN893_tree = (Object)adaptor.create(RPAREN893);
					adaptor.addChild(root_0, RPAREN893_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2051:115: ( index_option )*
					loop278:
					while (true) {
						int alt278=2;
						int LA278_0 = input.LA(1);
						if ( (LA278_0==COMMENT_SYM||LA278_0==KEY_BLOCK_SIZE||LA278_0==USING_SYM||LA278_0==WITH) ) {
							alt278=1;
						}

						switch (alt278) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2051:116: index_option
							{
							pushFollow(FOLLOW_index_option_in_create_definition27444);
							index_option894=index_option();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_option894.getTree());

							}
							break;

						default :
							break loop278;
						}
					}

					}

					}
					break;
				case 4 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2052:5: ( ( CONSTRAINT ( constraint_symbol_name )? )? UNIQUE_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2052:5: ( ( CONSTRAINT ( constraint_symbol_name )? )? UNIQUE_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2052:8: ( CONSTRAINT ( constraint_symbol_name )? )? UNIQUE_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )*
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2052:8: ( CONSTRAINT ( constraint_symbol_name )? )?
					int alt280=2;
					int LA280_0 = input.LA(1);
					if ( (LA280_0==CONSTRAINT) ) {
						alt280=1;
					}
					switch (alt280) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2052:9: CONSTRAINT ( constraint_symbol_name )?
							{
							CONSTRAINT895=(Token)match(input,CONSTRAINT,FOLLOW_CONSTRAINT_in_create_definition27459); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CONSTRAINT895_tree = (Object)adaptor.create(CONSTRAINT895);
							adaptor.addChild(root_0, CONSTRAINT895_tree);
							}

							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2052:20: ( constraint_symbol_name )?
							int alt279=2;
							int LA279_0 = input.LA(1);
							if ( (LA279_0==ID) ) {
								alt279=1;
							}
							switch (alt279) {
								case 1 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2052:21: constraint_symbol_name
									{
									pushFollow(FOLLOW_constraint_symbol_name_in_create_definition27462);
									constraint_symbol_name896=constraint_symbol_name();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint_symbol_name896.getTree());

									}
									break;

							}

							}
							break;

					}

					UNIQUE_SYM897=(Token)match(input,UNIQUE_SYM,FOLLOW_UNIQUE_SYM_in_create_definition27468); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					UNIQUE_SYM897_tree = (Object)adaptor.create(UNIQUE_SYM897);
					adaptor.addChild(root_0, UNIQUE_SYM897_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2052:59: ( INDEX_SYM | KEY_SYM )?
					int alt281=2;
					int LA281_0 = input.LA(1);
					if ( (LA281_0==INDEX_SYM||LA281_0==KEY_SYM) ) {
						alt281=1;
					}
					switch (alt281) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
							{
							set898=input.LT(1);
							if ( input.LA(1)==INDEX_SYM||input.LA(1)==KEY_SYM ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set898));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2052:80: ( index_name )?
					int alt282=2;
					int LA282_0 = input.LA(1);
					if ( (LA282_0==ID) ) {
						alt282=1;
					}
					switch (alt282) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2052:81: index_name
							{
							pushFollow(FOLLOW_index_name_in_create_definition27478);
							index_name899=index_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name899.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2052:94: ( index_type )?
					int alt283=2;
					int LA283_0 = input.LA(1);
					if ( (LA283_0==USING_SYM) ) {
						alt283=1;
					}
					switch (alt283) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2052:95: index_type
							{
							pushFollow(FOLLOW_index_type_in_create_definition27483);
							index_type900=index_type();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_type900.getTree());

							}
							break;

					}

					LPAREN901=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_create_definition27487); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN901_tree = (Object)adaptor.create(LPAREN901);
					adaptor.addChild(root_0, LPAREN901_tree);
					}

					pushFollow(FOLLOW_index_column_name_in_create_definition27489);
					index_column_name902=index_column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name902.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2052:133: ( COMMA index_column_name )*
					loop284:
					while (true) {
						int alt284=2;
						int LA284_0 = input.LA(1);
						if ( (LA284_0==COMMA) ) {
							alt284=1;
						}

						switch (alt284) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2052:134: COMMA index_column_name
							{
							COMMA903=(Token)match(input,COMMA,FOLLOW_COMMA_in_create_definition27492); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA903_tree = (Object)adaptor.create(COMMA903);
							adaptor.addChild(root_0, COMMA903_tree);
							}

							pushFollow(FOLLOW_index_column_name_in_create_definition27494);
							index_column_name904=index_column_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name904.getTree());

							}
							break;

						default :
							break loop284;
						}
					}

					RPAREN905=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_create_definition27498); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN905_tree = (Object)adaptor.create(RPAREN905);
					adaptor.addChild(root_0, RPAREN905_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2052:167: ( index_option )*
					loop285:
					while (true) {
						int alt285=2;
						int LA285_0 = input.LA(1);
						if ( (LA285_0==COMMENT_SYM||LA285_0==KEY_BLOCK_SIZE||LA285_0==USING_SYM||LA285_0==WITH) ) {
							alt285=1;
						}

						switch (alt285) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2052:168: index_option
							{
							pushFollow(FOLLOW_index_option_in_create_definition27501);
							index_option906=index_option();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_option906.getTree());

							}
							break;

						default :
							break loop285;
						}
					}

					}

					}
					break;
				case 5 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2053:5: ( ( FULLTEXT_SYM | SPATIAL_SYM ) ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2053:5: ( ( FULLTEXT_SYM | SPATIAL_SYM ) ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2053:8: ( FULLTEXT_SYM | SPATIAL_SYM ) ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )*
					{
					set907=input.LT(1);
					if ( input.LA(1)==FULLTEXT_SYM||input.LA(1)==SPATIAL_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set907));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2053:35: ( INDEX_SYM | KEY_SYM )?
					int alt286=2;
					int LA286_0 = input.LA(1);
					if ( (LA286_0==INDEX_SYM||LA286_0==KEY_SYM) ) {
						alt286=1;
					}
					switch (alt286) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
							{
							set908=input.LT(1);
							if ( input.LA(1)==INDEX_SYM||input.LA(1)==KEY_SYM ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set908));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2053:56: ( index_name )?
					int alt287=2;
					int LA287_0 = input.LA(1);
					if ( (LA287_0==ID) ) {
						alt287=1;
					}
					switch (alt287) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2053:57: index_name
							{
							pushFollow(FOLLOW_index_name_in_create_definition27529);
							index_name909=index_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name909.getTree());

							}
							break;

					}

					LPAREN910=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_create_definition27533); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN910_tree = (Object)adaptor.create(LPAREN910);
					adaptor.addChild(root_0, LPAREN910_tree);
					}

					pushFollow(FOLLOW_index_column_name_in_create_definition27535);
					index_column_name911=index_column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name911.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2053:95: ( COMMA index_column_name )*
					loop288:
					while (true) {
						int alt288=2;
						int LA288_0 = input.LA(1);
						if ( (LA288_0==COMMA) ) {
							alt288=1;
						}

						switch (alt288) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2053:96: COMMA index_column_name
							{
							COMMA912=(Token)match(input,COMMA,FOLLOW_COMMA_in_create_definition27538); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA912_tree = (Object)adaptor.create(COMMA912);
							adaptor.addChild(root_0, COMMA912_tree);
							}

							pushFollow(FOLLOW_index_column_name_in_create_definition27540);
							index_column_name913=index_column_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name913.getTree());

							}
							break;

						default :
							break loop288;
						}
					}

					RPAREN914=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_create_definition27544); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN914_tree = (Object)adaptor.create(RPAREN914);
					adaptor.addChild(root_0, RPAREN914_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2053:129: ( index_option )*
					loop289:
					while (true) {
						int alt289=2;
						int LA289_0 = input.LA(1);
						if ( (LA289_0==COMMENT_SYM||LA289_0==KEY_BLOCK_SIZE||LA289_0==USING_SYM||LA289_0==WITH) ) {
							alt289=1;
						}

						switch (alt289) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2053:130: index_option
							{
							pushFollow(FOLLOW_index_option_in_create_definition27547);
							index_option915=index_option();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_option915.getTree());

							}
							break;

						default :
							break loop289;
						}
					}

					}

					}
					break;
				case 6 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2054:5: ( ( CONSTRAINT ( constraint_symbol_name )? )? FOREIGN KEY_SYM ( index_name )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN reference_definition )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2054:5: ( ( CONSTRAINT ( constraint_symbol_name )? )? FOREIGN KEY_SYM ( index_name )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN reference_definition )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2054:8: ( CONSTRAINT ( constraint_symbol_name )? )? FOREIGN KEY_SYM ( index_name )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN reference_definition
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2054:8: ( CONSTRAINT ( constraint_symbol_name )? )?
					int alt291=2;
					int LA291_0 = input.LA(1);
					if ( (LA291_0==CONSTRAINT) ) {
						alt291=1;
					}
					switch (alt291) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2054:9: CONSTRAINT ( constraint_symbol_name )?
							{
							CONSTRAINT916=(Token)match(input,CONSTRAINT,FOLLOW_CONSTRAINT_in_create_definition27562); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CONSTRAINT916_tree = (Object)adaptor.create(CONSTRAINT916);
							adaptor.addChild(root_0, CONSTRAINT916_tree);
							}

							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2054:20: ( constraint_symbol_name )?
							int alt290=2;
							int LA290_0 = input.LA(1);
							if ( (LA290_0==ID) ) {
								alt290=1;
							}
							switch (alt290) {
								case 1 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2054:21: constraint_symbol_name
									{
									pushFollow(FOLLOW_constraint_symbol_name_in_create_definition27565);
									constraint_symbol_name917=constraint_symbol_name();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint_symbol_name917.getTree());

									}
									break;

							}

							}
							break;

					}

					FOREIGN918=(Token)match(input,FOREIGN,FOLLOW_FOREIGN_in_create_definition27571); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					FOREIGN918_tree = (Object)adaptor.create(FOREIGN918);
					adaptor.addChild(root_0, FOREIGN918_tree);
					}

					KEY_SYM919=(Token)match(input,KEY_SYM,FOLLOW_KEY_SYM_in_create_definition27573); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KEY_SYM919_tree = (Object)adaptor.create(KEY_SYM919);
					adaptor.addChild(root_0, KEY_SYM919_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2054:64: ( index_name )?
					int alt292=2;
					int LA292_0 = input.LA(1);
					if ( (LA292_0==ID) ) {
						alt292=1;
					}
					switch (alt292) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2054:65: index_name
							{
							pushFollow(FOLLOW_index_name_in_create_definition27576);
							index_name920=index_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name920.getTree());

							}
							break;

					}

					LPAREN921=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_create_definition27580); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN921_tree = (Object)adaptor.create(LPAREN921);
					adaptor.addChild(root_0, LPAREN921_tree);
					}

					pushFollow(FOLLOW_index_column_name_in_create_definition27582);
					index_column_name922=index_column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name922.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2054:103: ( COMMA index_column_name )*
					loop293:
					while (true) {
						int alt293=2;
						int LA293_0 = input.LA(1);
						if ( (LA293_0==COMMA) ) {
							alt293=1;
						}

						switch (alt293) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2054:104: COMMA index_column_name
							{
							COMMA923=(Token)match(input,COMMA,FOLLOW_COMMA_in_create_definition27585); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA923_tree = (Object)adaptor.create(COMMA923);
							adaptor.addChild(root_0, COMMA923_tree);
							}

							pushFollow(FOLLOW_index_column_name_in_create_definition27587);
							index_column_name924=index_column_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name924.getTree());

							}
							break;

						default :
							break loop293;
						}
					}

					RPAREN925=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_create_definition27591); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN925_tree = (Object)adaptor.create(RPAREN925);
					adaptor.addChild(root_0, RPAREN925_tree);
					}

					pushFollow(FOLLOW_reference_definition_in_create_definition27593);
					reference_definition926=reference_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, reference_definition926.getTree());

					}

					}
					break;
				case 7 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2055:5: ( CHECK_SYM LPAREN expression RPAREN )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2055:5: ( CHECK_SYM LPAREN expression RPAREN )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2055:8: CHECK_SYM LPAREN expression RPAREN
					{
					CHECK_SYM927=(Token)match(input,CHECK_SYM,FOLLOW_CHECK_SYM_in_create_definition27605); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CHECK_SYM927_tree = (Object)adaptor.create(CHECK_SYM927);
					adaptor.addChild(root_0, CHECK_SYM927_tree);
					}

					LPAREN928=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_create_definition27607); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN928_tree = (Object)adaptor.create(LPAREN928);
					adaptor.addChild(root_0, LPAREN928_tree);
					}

					pushFollow(FOLLOW_expression_in_create_definition27609);
					expression929=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression929.getTree());

					RPAREN930=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_create_definition27611); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN930_tree = (Object)adaptor.create(RPAREN930);
					adaptor.addChild(root_0, RPAREN930_tree);
					}

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_definition"


	public static class column_definition_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "column_definition"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2058:1: column_definition : column_data_type_header ( AUTO_INCREMENT )? ( ( UNIQUE_SYM ( KEY_SYM )? ) | ( PRIMARY_SYM ( KEY_SYM )? ) )? ( COMMENT_SYM TEXT_STRING )? ( COLUMN_FORMAT ( FIXED_SYM | DYNAMIC_SYM | DEFAULT ) )? ( reference_definition )? ;
	public final SQLParser.column_definition_return column_definition() throws RecognitionException {
		SQLParser.column_definition_return retval = new SQLParser.column_definition_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token AUTO_INCREMENT932=null;
		Token UNIQUE_SYM933=null;
		Token KEY_SYM934=null;
		Token PRIMARY_SYM935=null;
		Token KEY_SYM936=null;
		Token COMMENT_SYM937=null;
		Token TEXT_STRING938=null;
		Token COLUMN_FORMAT939=null;
		Token set940=null;
		ParserRuleReturnScope column_data_type_header931 =null;
		ParserRuleReturnScope reference_definition941 =null;

		Object AUTO_INCREMENT932_tree=null;
		Object UNIQUE_SYM933_tree=null;
		Object KEY_SYM934_tree=null;
		Object PRIMARY_SYM935_tree=null;
		Object KEY_SYM936_tree=null;
		Object COMMENT_SYM937_tree=null;
		Object TEXT_STRING938_tree=null;
		Object COLUMN_FORMAT939_tree=null;
		Object set940_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2058:18: ( column_data_type_header ( AUTO_INCREMENT )? ( ( UNIQUE_SYM ( KEY_SYM )? ) | ( PRIMARY_SYM ( KEY_SYM )? ) )? ( COMMENT_SYM TEXT_STRING )? ( COLUMN_FORMAT ( FIXED_SYM | DYNAMIC_SYM | DEFAULT ) )? ( reference_definition )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2059:3: column_data_type_header ( AUTO_INCREMENT )? ( ( UNIQUE_SYM ( KEY_SYM )? ) | ( PRIMARY_SYM ( KEY_SYM )? ) )? ( COMMENT_SYM TEXT_STRING )? ( COLUMN_FORMAT ( FIXED_SYM | DYNAMIC_SYM | DEFAULT ) )? ( reference_definition )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_column_data_type_header_in_column_definition27624);
			column_data_type_header931=column_data_type_header();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, column_data_type_header931.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2060:3: ( AUTO_INCREMENT )?
			int alt295=2;
			int LA295_0 = input.LA(1);
			if ( (LA295_0==AUTO_INCREMENT) ) {
				alt295=1;
			}
			switch (alt295) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2060:4: AUTO_INCREMENT
					{
					AUTO_INCREMENT932=(Token)match(input,AUTO_INCREMENT,FOLLOW_AUTO_INCREMENT_in_column_definition27629); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					AUTO_INCREMENT932_tree = (Object)adaptor.create(AUTO_INCREMENT932);
					adaptor.addChild(root_0, AUTO_INCREMENT932_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2060:21: ( ( UNIQUE_SYM ( KEY_SYM )? ) | ( PRIMARY_SYM ( KEY_SYM )? ) )?
			int alt298=3;
			int LA298_0 = input.LA(1);
			if ( (LA298_0==UNIQUE_SYM) ) {
				alt298=1;
			}
			else if ( (LA298_0==PRIMARY_SYM) ) {
				alt298=2;
			}
			switch (alt298) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2060:23: ( UNIQUE_SYM ( KEY_SYM )? )
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2060:23: ( UNIQUE_SYM ( KEY_SYM )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2060:24: UNIQUE_SYM ( KEY_SYM )?
					{
					UNIQUE_SYM933=(Token)match(input,UNIQUE_SYM,FOLLOW_UNIQUE_SYM_in_column_definition27636); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					UNIQUE_SYM933_tree = (Object)adaptor.create(UNIQUE_SYM933);
					adaptor.addChild(root_0, UNIQUE_SYM933_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2060:35: ( KEY_SYM )?
					int alt296=2;
					int LA296_0 = input.LA(1);
					if ( (LA296_0==KEY_SYM) ) {
						alt296=1;
					}
					switch (alt296) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2060:36: KEY_SYM
							{
							KEY_SYM934=(Token)match(input,KEY_SYM,FOLLOW_KEY_SYM_in_column_definition27639); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							KEY_SYM934_tree = (Object)adaptor.create(KEY_SYM934);
							adaptor.addChild(root_0, KEY_SYM934_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2060:49: ( PRIMARY_SYM ( KEY_SYM )? )
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2060:49: ( PRIMARY_SYM ( KEY_SYM )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2060:50: PRIMARY_SYM ( KEY_SYM )?
					{
					PRIMARY_SYM935=(Token)match(input,PRIMARY_SYM,FOLLOW_PRIMARY_SYM_in_column_definition27647); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PRIMARY_SYM935_tree = (Object)adaptor.create(PRIMARY_SYM935);
					adaptor.addChild(root_0, PRIMARY_SYM935_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2060:62: ( KEY_SYM )?
					int alt297=2;
					int LA297_0 = input.LA(1);
					if ( (LA297_0==KEY_SYM) ) {
						alt297=1;
					}
					switch (alt297) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2060:63: KEY_SYM
							{
							KEY_SYM936=(Token)match(input,KEY_SYM,FOLLOW_KEY_SYM_in_column_definition27650); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							KEY_SYM936_tree = (Object)adaptor.create(KEY_SYM936);
							adaptor.addChild(root_0, KEY_SYM936_tree);
							}

							}
							break;

					}

					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2061:3: ( COMMENT_SYM TEXT_STRING )?
			int alt299=2;
			int LA299_0 = input.LA(1);
			if ( (LA299_0==COMMENT_SYM) ) {
				alt299=1;
			}
			switch (alt299) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2061:4: COMMENT_SYM TEXT_STRING
					{
					COMMENT_SYM937=(Token)match(input,COMMENT_SYM,FOLLOW_COMMENT_SYM_in_column_definition27661); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMENT_SYM937_tree = (Object)adaptor.create(COMMENT_SYM937);
					adaptor.addChild(root_0, COMMENT_SYM937_tree);
					}

					TEXT_STRING938=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_column_definition27663); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING938_tree = (Object)adaptor.create(TEXT_STRING938);
					adaptor.addChild(root_0, TEXT_STRING938_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2062:3: ( COLUMN_FORMAT ( FIXED_SYM | DYNAMIC_SYM | DEFAULT ) )?
			int alt300=2;
			int LA300_0 = input.LA(1);
			if ( (LA300_0==COLUMN_FORMAT) ) {
				alt300=1;
			}
			switch (alt300) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2062:4: COLUMN_FORMAT ( FIXED_SYM | DYNAMIC_SYM | DEFAULT )
					{
					COLUMN_FORMAT939=(Token)match(input,COLUMN_FORMAT,FOLLOW_COLUMN_FORMAT_in_column_definition27670); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COLUMN_FORMAT939_tree = (Object)adaptor.create(COLUMN_FORMAT939);
					adaptor.addChild(root_0, COLUMN_FORMAT939_tree);
					}

					set940=input.LT(1);
					if ( input.LA(1)==DEFAULT||input.LA(1)==DYNAMIC_SYM||input.LA(1)==FIXED_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set940));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2063:3: ( reference_definition )?
			int alt301=2;
			int LA301_0 = input.LA(1);
			if ( (LA301_0==REFERENCES) ) {
				alt301=1;
			}
			switch (alt301) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2063:4: reference_definition
					{
					pushFollow(FOLLOW_reference_definition_in_column_definition27685);
					reference_definition941=reference_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, reference_definition941.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "column_definition"


	public static class null_or_notnull_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "null_or_notnull"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2066:1: null_or_notnull : ( ( NOT_SYM NULL_SYM ) | NULL_SYM );
	public final SQLParser.null_or_notnull_return null_or_notnull() throws RecognitionException {
		SQLParser.null_or_notnull_return retval = new SQLParser.null_or_notnull_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token NOT_SYM942=null;
		Token NULL_SYM943=null;
		Token NULL_SYM944=null;

		Object NOT_SYM942_tree=null;
		Object NULL_SYM943_tree=null;
		Object NULL_SYM944_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2066:16: ( ( NOT_SYM NULL_SYM ) | NULL_SYM )
			int alt302=2;
			int LA302_0 = input.LA(1);
			if ( (LA302_0==NOT_SYM) ) {
				alt302=1;
			}
			else if ( (LA302_0==NULL_SYM) ) {
				alt302=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 302, 0, input);
				throw nvae;
			}

			switch (alt302) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2067:3: ( NOT_SYM NULL_SYM )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2067:3: ( NOT_SYM NULL_SYM )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2067:4: NOT_SYM NULL_SYM
					{
					NOT_SYM942=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_null_or_notnull27698); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NOT_SYM942_tree = (Object)adaptor.create(NOT_SYM942);
					adaptor.addChild(root_0, NOT_SYM942_tree);
					}

					NULL_SYM943=(Token)match(input,NULL_SYM,FOLLOW_NULL_SYM_in_null_or_notnull27700); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NULL_SYM943_tree = (Object)adaptor.create(NULL_SYM943);
					adaptor.addChild(root_0, NULL_SYM943_tree);
					}

					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2067:24: NULL_SYM
					{
					root_0 = (Object)adaptor.nil();


					NULL_SYM944=(Token)match(input,NULL_SYM,FOLLOW_NULL_SYM_in_null_or_notnull27705); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NULL_SYM944_tree = (Object)adaptor.create(NULL_SYM944);
					adaptor.addChild(root_0, NULL_SYM944_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "null_or_notnull"


	public static class column_data_type_header_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "column_data_type_header"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2070:1: column_data_type_header : ( ( BIT_SYM ( LPAREN length RPAREN )? ( null_or_notnull )? ( DEFAULT bit_literal )? ) | ( TINYINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( SMALLINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( MEDIUMINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( INT_SYM ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( INTEGER_SYM ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( BIGINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( REAL ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( DOUBLE_SYM ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( FLOAT_SYM ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( DECIMAL_SYM ( LPAREN length ( COMMA number_literal )? RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( NUMERIC_SYM ( LPAREN length ( COMMA number_literal )? RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( DATE_SYM ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) | ( TIME_SYM ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) | ( TIMESTAMP ( null_or_notnull )? ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING ) )? ) | ( DATETIME ( null_or_notnull )? ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING ) )? ) | ( YEAR ( null_or_notnull )? ( DEFAULT INTEGER_NUM )? ) | ( CHAR ( LPAREN length RPAREN )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) | ( VARCHAR LPAREN length RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) | ( BINARY ( LPAREN length RPAREN )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) | ( VARBINARY LPAREN length RPAREN ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) | ( TINYBLOB ( null_or_notnull )? ) | ( BLOB_SYM ( null_or_notnull )? ) | ( MEDIUMBLOB ( null_or_notnull )? ) | ( LONGBLOB ( null_or_notnull )? ) | ( TINYTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ) | ( TEXT_SYM ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ) | ( MEDIUMTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ) | ( LONGTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ) | ( ENUM LPAREN TEXT_STRING ( COMMA TEXT_STRING )* RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) | ( SET_SYM LPAREN TEXT_STRING ( COMMA TEXT_STRING )* RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) );
	public final SQLParser.column_data_type_header_return column_data_type_header() throws RecognitionException {
		SQLParser.column_data_type_header_return retval = new SQLParser.column_data_type_header_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token BIT_SYM945=null;
		Token LPAREN946=null;
		Token RPAREN948=null;
		Token DEFAULT950=null;
		Token TINYINT952=null;
		Token LPAREN953=null;
		Token RPAREN955=null;
		Token UNSIGNED_SYM956=null;
		Token ZEROFILL957=null;
		Token DEFAULT959=null;
		Token SMALLINT961=null;
		Token LPAREN962=null;
		Token RPAREN964=null;
		Token UNSIGNED_SYM965=null;
		Token ZEROFILL966=null;
		Token DEFAULT968=null;
		Token MEDIUMINT970=null;
		Token LPAREN971=null;
		Token RPAREN973=null;
		Token UNSIGNED_SYM974=null;
		Token ZEROFILL975=null;
		Token DEFAULT977=null;
		Token INT_SYM979=null;
		Token LPAREN980=null;
		Token RPAREN982=null;
		Token UNSIGNED_SYM983=null;
		Token ZEROFILL984=null;
		Token DEFAULT986=null;
		Token INTEGER_SYM988=null;
		Token LPAREN989=null;
		Token RPAREN991=null;
		Token UNSIGNED_SYM992=null;
		Token ZEROFILL993=null;
		Token DEFAULT995=null;
		Token BIGINT997=null;
		Token LPAREN998=null;
		Token RPAREN1000=null;
		Token UNSIGNED_SYM1001=null;
		Token ZEROFILL1002=null;
		Token DEFAULT1004=null;
		Token REAL1006=null;
		Token LPAREN1007=null;
		Token COMMA1009=null;
		Token RPAREN1011=null;
		Token UNSIGNED_SYM1012=null;
		Token ZEROFILL1013=null;
		Token DEFAULT1015=null;
		Token DOUBLE_SYM1017=null;
		Token LPAREN1018=null;
		Token COMMA1020=null;
		Token RPAREN1022=null;
		Token UNSIGNED_SYM1023=null;
		Token ZEROFILL1024=null;
		Token DEFAULT1026=null;
		Token FLOAT_SYM1028=null;
		Token LPAREN1029=null;
		Token COMMA1031=null;
		Token RPAREN1033=null;
		Token UNSIGNED_SYM1034=null;
		Token ZEROFILL1035=null;
		Token DEFAULT1037=null;
		Token DECIMAL_SYM1039=null;
		Token LPAREN1040=null;
		Token COMMA1042=null;
		Token RPAREN1044=null;
		Token UNSIGNED_SYM1045=null;
		Token ZEROFILL1046=null;
		Token DEFAULT1048=null;
		Token NUMERIC_SYM1050=null;
		Token LPAREN1051=null;
		Token COMMA1053=null;
		Token RPAREN1055=null;
		Token UNSIGNED_SYM1056=null;
		Token ZEROFILL1057=null;
		Token DEFAULT1059=null;
		Token DATE_SYM1061=null;
		Token DEFAULT1063=null;
		Token TEXT_STRING1064=null;
		Token TIME_SYM1065=null;
		Token DEFAULT1067=null;
		Token TEXT_STRING1068=null;
		Token TIMESTAMP1069=null;
		Token DEFAULT1071=null;
		Token set1072=null;
		Token DATETIME1073=null;
		Token DEFAULT1075=null;
		Token set1076=null;
		Token YEAR1077=null;
		Token DEFAULT1079=null;
		Token INTEGER_NUM1080=null;
		Token CHAR1081=null;
		Token LPAREN1082=null;
		Token RPAREN1084=null;
		Token CHARACTER_SYM1085=null;
		Token SET_SYM1086=null;
		Token COLLATE_SYM1088=null;
		Token DEFAULT1091=null;
		Token TEXT_STRING1092=null;
		Token VARCHAR1093=null;
		Token LPAREN1094=null;
		Token RPAREN1096=null;
		Token CHARACTER_SYM1097=null;
		Token SET_SYM1098=null;
		Token COLLATE_SYM1100=null;
		Token DEFAULT1103=null;
		Token TEXT_STRING1104=null;
		Token BINARY1105=null;
		Token LPAREN1106=null;
		Token RPAREN1108=null;
		Token DEFAULT1110=null;
		Token TEXT_STRING1111=null;
		Token VARBINARY1112=null;
		Token LPAREN1113=null;
		Token RPAREN1115=null;
		Token DEFAULT1117=null;
		Token TEXT_STRING1118=null;
		Token TINYBLOB1119=null;
		Token BLOB_SYM1121=null;
		Token MEDIUMBLOB1123=null;
		Token LONGBLOB1125=null;
		Token TINYTEXT1127=null;
		Token BINARY1128=null;
		Token CHARACTER_SYM1129=null;
		Token SET_SYM1130=null;
		Token COLLATE_SYM1132=null;
		Token TEXT_SYM1135=null;
		Token BINARY1136=null;
		Token CHARACTER_SYM1137=null;
		Token SET_SYM1138=null;
		Token COLLATE_SYM1140=null;
		Token MEDIUMTEXT1143=null;
		Token BINARY1144=null;
		Token CHARACTER_SYM1145=null;
		Token SET_SYM1146=null;
		Token COLLATE_SYM1148=null;
		Token LONGTEXT1151=null;
		Token BINARY1152=null;
		Token CHARACTER_SYM1153=null;
		Token SET_SYM1154=null;
		Token COLLATE_SYM1156=null;
		Token ENUM1159=null;
		Token LPAREN1160=null;
		Token TEXT_STRING1161=null;
		Token COMMA1162=null;
		Token TEXT_STRING1163=null;
		Token RPAREN1164=null;
		Token CHARACTER_SYM1165=null;
		Token SET_SYM1166=null;
		Token COLLATE_SYM1168=null;
		Token DEFAULT1171=null;
		Token TEXT_STRING1172=null;
		Token SET_SYM1173=null;
		Token LPAREN1174=null;
		Token TEXT_STRING1175=null;
		Token COMMA1176=null;
		Token TEXT_STRING1177=null;
		Token RPAREN1178=null;
		Token CHARACTER_SYM1179=null;
		Token SET_SYM1180=null;
		Token COLLATE_SYM1182=null;
		Token DEFAULT1185=null;
		Token TEXT_STRING1186=null;
		ParserRuleReturnScope length947 =null;
		ParserRuleReturnScope null_or_notnull949 =null;
		ParserRuleReturnScope bit_literal951 =null;
		ParserRuleReturnScope length954 =null;
		ParserRuleReturnScope null_or_notnull958 =null;
		ParserRuleReturnScope number_literal960 =null;
		ParserRuleReturnScope length963 =null;
		ParserRuleReturnScope null_or_notnull967 =null;
		ParserRuleReturnScope number_literal969 =null;
		ParserRuleReturnScope length972 =null;
		ParserRuleReturnScope null_or_notnull976 =null;
		ParserRuleReturnScope number_literal978 =null;
		ParserRuleReturnScope length981 =null;
		ParserRuleReturnScope null_or_notnull985 =null;
		ParserRuleReturnScope number_literal987 =null;
		ParserRuleReturnScope length990 =null;
		ParserRuleReturnScope null_or_notnull994 =null;
		ParserRuleReturnScope number_literal996 =null;
		ParserRuleReturnScope length999 =null;
		ParserRuleReturnScope null_or_notnull1003 =null;
		ParserRuleReturnScope number_literal1005 =null;
		ParserRuleReturnScope length1008 =null;
		ParserRuleReturnScope number_literal1010 =null;
		ParserRuleReturnScope null_or_notnull1014 =null;
		ParserRuleReturnScope number_literal1016 =null;
		ParserRuleReturnScope length1019 =null;
		ParserRuleReturnScope number_literal1021 =null;
		ParserRuleReturnScope null_or_notnull1025 =null;
		ParserRuleReturnScope number_literal1027 =null;
		ParserRuleReturnScope length1030 =null;
		ParserRuleReturnScope number_literal1032 =null;
		ParserRuleReturnScope null_or_notnull1036 =null;
		ParserRuleReturnScope number_literal1038 =null;
		ParserRuleReturnScope length1041 =null;
		ParserRuleReturnScope number_literal1043 =null;
		ParserRuleReturnScope null_or_notnull1047 =null;
		ParserRuleReturnScope number_literal1049 =null;
		ParserRuleReturnScope length1052 =null;
		ParserRuleReturnScope number_literal1054 =null;
		ParserRuleReturnScope null_or_notnull1058 =null;
		ParserRuleReturnScope number_literal1060 =null;
		ParserRuleReturnScope null_or_notnull1062 =null;
		ParserRuleReturnScope null_or_notnull1066 =null;
		ParserRuleReturnScope null_or_notnull1070 =null;
		ParserRuleReturnScope null_or_notnull1074 =null;
		ParserRuleReturnScope null_or_notnull1078 =null;
		ParserRuleReturnScope length1083 =null;
		ParserRuleReturnScope charset_name1087 =null;
		ParserRuleReturnScope collation_name1089 =null;
		ParserRuleReturnScope null_or_notnull1090 =null;
		ParserRuleReturnScope length1095 =null;
		ParserRuleReturnScope charset_name1099 =null;
		ParserRuleReturnScope collation_name1101 =null;
		ParserRuleReturnScope null_or_notnull1102 =null;
		ParserRuleReturnScope length1107 =null;
		ParserRuleReturnScope null_or_notnull1109 =null;
		ParserRuleReturnScope length1114 =null;
		ParserRuleReturnScope null_or_notnull1116 =null;
		ParserRuleReturnScope null_or_notnull1120 =null;
		ParserRuleReturnScope null_or_notnull1122 =null;
		ParserRuleReturnScope null_or_notnull1124 =null;
		ParserRuleReturnScope null_or_notnull1126 =null;
		ParserRuleReturnScope charset_name1131 =null;
		ParserRuleReturnScope collation_name1133 =null;
		ParserRuleReturnScope null_or_notnull1134 =null;
		ParserRuleReturnScope charset_name1139 =null;
		ParserRuleReturnScope collation_name1141 =null;
		ParserRuleReturnScope null_or_notnull1142 =null;
		ParserRuleReturnScope charset_name1147 =null;
		ParserRuleReturnScope collation_name1149 =null;
		ParserRuleReturnScope null_or_notnull1150 =null;
		ParserRuleReturnScope charset_name1155 =null;
		ParserRuleReturnScope collation_name1157 =null;
		ParserRuleReturnScope null_or_notnull1158 =null;
		ParserRuleReturnScope charset_name1167 =null;
		ParserRuleReturnScope collation_name1169 =null;
		ParserRuleReturnScope null_or_notnull1170 =null;
		ParserRuleReturnScope charset_name1181 =null;
		ParserRuleReturnScope collation_name1183 =null;
		ParserRuleReturnScope null_or_notnull1184 =null;

		Object BIT_SYM945_tree=null;
		Object LPAREN946_tree=null;
		Object RPAREN948_tree=null;
		Object DEFAULT950_tree=null;
		Object TINYINT952_tree=null;
		Object LPAREN953_tree=null;
		Object RPAREN955_tree=null;
		Object UNSIGNED_SYM956_tree=null;
		Object ZEROFILL957_tree=null;
		Object DEFAULT959_tree=null;
		Object SMALLINT961_tree=null;
		Object LPAREN962_tree=null;
		Object RPAREN964_tree=null;
		Object UNSIGNED_SYM965_tree=null;
		Object ZEROFILL966_tree=null;
		Object DEFAULT968_tree=null;
		Object MEDIUMINT970_tree=null;
		Object LPAREN971_tree=null;
		Object RPAREN973_tree=null;
		Object UNSIGNED_SYM974_tree=null;
		Object ZEROFILL975_tree=null;
		Object DEFAULT977_tree=null;
		Object INT_SYM979_tree=null;
		Object LPAREN980_tree=null;
		Object RPAREN982_tree=null;
		Object UNSIGNED_SYM983_tree=null;
		Object ZEROFILL984_tree=null;
		Object DEFAULT986_tree=null;
		Object INTEGER_SYM988_tree=null;
		Object LPAREN989_tree=null;
		Object RPAREN991_tree=null;
		Object UNSIGNED_SYM992_tree=null;
		Object ZEROFILL993_tree=null;
		Object DEFAULT995_tree=null;
		Object BIGINT997_tree=null;
		Object LPAREN998_tree=null;
		Object RPAREN1000_tree=null;
		Object UNSIGNED_SYM1001_tree=null;
		Object ZEROFILL1002_tree=null;
		Object DEFAULT1004_tree=null;
		Object REAL1006_tree=null;
		Object LPAREN1007_tree=null;
		Object COMMA1009_tree=null;
		Object RPAREN1011_tree=null;
		Object UNSIGNED_SYM1012_tree=null;
		Object ZEROFILL1013_tree=null;
		Object DEFAULT1015_tree=null;
		Object DOUBLE_SYM1017_tree=null;
		Object LPAREN1018_tree=null;
		Object COMMA1020_tree=null;
		Object RPAREN1022_tree=null;
		Object UNSIGNED_SYM1023_tree=null;
		Object ZEROFILL1024_tree=null;
		Object DEFAULT1026_tree=null;
		Object FLOAT_SYM1028_tree=null;
		Object LPAREN1029_tree=null;
		Object COMMA1031_tree=null;
		Object RPAREN1033_tree=null;
		Object UNSIGNED_SYM1034_tree=null;
		Object ZEROFILL1035_tree=null;
		Object DEFAULT1037_tree=null;
		Object DECIMAL_SYM1039_tree=null;
		Object LPAREN1040_tree=null;
		Object COMMA1042_tree=null;
		Object RPAREN1044_tree=null;
		Object UNSIGNED_SYM1045_tree=null;
		Object ZEROFILL1046_tree=null;
		Object DEFAULT1048_tree=null;
		Object NUMERIC_SYM1050_tree=null;
		Object LPAREN1051_tree=null;
		Object COMMA1053_tree=null;
		Object RPAREN1055_tree=null;
		Object UNSIGNED_SYM1056_tree=null;
		Object ZEROFILL1057_tree=null;
		Object DEFAULT1059_tree=null;
		Object DATE_SYM1061_tree=null;
		Object DEFAULT1063_tree=null;
		Object TEXT_STRING1064_tree=null;
		Object TIME_SYM1065_tree=null;
		Object DEFAULT1067_tree=null;
		Object TEXT_STRING1068_tree=null;
		Object TIMESTAMP1069_tree=null;
		Object DEFAULT1071_tree=null;
		Object set1072_tree=null;
		Object DATETIME1073_tree=null;
		Object DEFAULT1075_tree=null;
		Object set1076_tree=null;
		Object YEAR1077_tree=null;
		Object DEFAULT1079_tree=null;
		Object INTEGER_NUM1080_tree=null;
		Object CHAR1081_tree=null;
		Object LPAREN1082_tree=null;
		Object RPAREN1084_tree=null;
		Object CHARACTER_SYM1085_tree=null;
		Object SET_SYM1086_tree=null;
		Object COLLATE_SYM1088_tree=null;
		Object DEFAULT1091_tree=null;
		Object TEXT_STRING1092_tree=null;
		Object VARCHAR1093_tree=null;
		Object LPAREN1094_tree=null;
		Object RPAREN1096_tree=null;
		Object CHARACTER_SYM1097_tree=null;
		Object SET_SYM1098_tree=null;
		Object COLLATE_SYM1100_tree=null;
		Object DEFAULT1103_tree=null;
		Object TEXT_STRING1104_tree=null;
		Object BINARY1105_tree=null;
		Object LPAREN1106_tree=null;
		Object RPAREN1108_tree=null;
		Object DEFAULT1110_tree=null;
		Object TEXT_STRING1111_tree=null;
		Object VARBINARY1112_tree=null;
		Object LPAREN1113_tree=null;
		Object RPAREN1115_tree=null;
		Object DEFAULT1117_tree=null;
		Object TEXT_STRING1118_tree=null;
		Object TINYBLOB1119_tree=null;
		Object BLOB_SYM1121_tree=null;
		Object MEDIUMBLOB1123_tree=null;
		Object LONGBLOB1125_tree=null;
		Object TINYTEXT1127_tree=null;
		Object BINARY1128_tree=null;
		Object CHARACTER_SYM1129_tree=null;
		Object SET_SYM1130_tree=null;
		Object COLLATE_SYM1132_tree=null;
		Object TEXT_SYM1135_tree=null;
		Object BINARY1136_tree=null;
		Object CHARACTER_SYM1137_tree=null;
		Object SET_SYM1138_tree=null;
		Object COLLATE_SYM1140_tree=null;
		Object MEDIUMTEXT1143_tree=null;
		Object BINARY1144_tree=null;
		Object CHARACTER_SYM1145_tree=null;
		Object SET_SYM1146_tree=null;
		Object COLLATE_SYM1148_tree=null;
		Object LONGTEXT1151_tree=null;
		Object BINARY1152_tree=null;
		Object CHARACTER_SYM1153_tree=null;
		Object SET_SYM1154_tree=null;
		Object COLLATE_SYM1156_tree=null;
		Object ENUM1159_tree=null;
		Object LPAREN1160_tree=null;
		Object TEXT_STRING1161_tree=null;
		Object COMMA1162_tree=null;
		Object TEXT_STRING1163_tree=null;
		Object RPAREN1164_tree=null;
		Object CHARACTER_SYM1165_tree=null;
		Object SET_SYM1166_tree=null;
		Object COLLATE_SYM1168_tree=null;
		Object DEFAULT1171_tree=null;
		Object TEXT_STRING1172_tree=null;
		Object SET_SYM1173_tree=null;
		Object LPAREN1174_tree=null;
		Object TEXT_STRING1175_tree=null;
		Object COMMA1176_tree=null;
		Object TEXT_STRING1177_tree=null;
		Object RPAREN1178_tree=null;
		Object CHARACTER_SYM1179_tree=null;
		Object SET_SYM1180_tree=null;
		Object COLLATE_SYM1182_tree=null;
		Object DEFAULT1185_tree=null;
		Object TEXT_STRING1186_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2070:24: ( ( BIT_SYM ( LPAREN length RPAREN )? ( null_or_notnull )? ( DEFAULT bit_literal )? ) | ( TINYINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( SMALLINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( MEDIUMINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( INT_SYM ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( INTEGER_SYM ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( BIGINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( REAL ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( DOUBLE_SYM ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( FLOAT_SYM ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( DECIMAL_SYM ( LPAREN length ( COMMA number_literal )? RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( NUMERIC_SYM ( LPAREN length ( COMMA number_literal )? RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( DATE_SYM ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) | ( TIME_SYM ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) | ( TIMESTAMP ( null_or_notnull )? ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING ) )? ) | ( DATETIME ( null_or_notnull )? ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING ) )? ) | ( YEAR ( null_or_notnull )? ( DEFAULT INTEGER_NUM )? ) | ( CHAR ( LPAREN length RPAREN )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) | ( VARCHAR LPAREN length RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) | ( BINARY ( LPAREN length RPAREN )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) | ( VARBINARY LPAREN length RPAREN ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) | ( TINYBLOB ( null_or_notnull )? ) | ( BLOB_SYM ( null_or_notnull )? ) | ( MEDIUMBLOB ( null_or_notnull )? ) | ( LONGBLOB ( null_or_notnull )? ) | ( TINYTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ) | ( TEXT_SYM ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ) | ( MEDIUMTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ) | ( LONGTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ) | ( ENUM LPAREN TEXT_STRING ( COMMA TEXT_STRING )* RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) | ( SET_SYM LPAREN TEXT_STRING ( COMMA TEXT_STRING )* RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) )
			int alt417=31;
			switch ( input.LA(1) ) {
			case BIT_SYM:
				{
				alt417=1;
				}
				break;
			case TINYINT:
				{
				alt417=2;
				}
				break;
			case SMALLINT:
				{
				alt417=3;
				}
				break;
			case MEDIUMINT:
				{
				alt417=4;
				}
				break;
			case INT_SYM:
				{
				alt417=5;
				}
				break;
			case INTEGER_SYM:
				{
				alt417=6;
				}
				break;
			case BIGINT:
				{
				alt417=7;
				}
				break;
			case REAL:
				{
				alt417=8;
				}
				break;
			case DOUBLE_SYM:
				{
				alt417=9;
				}
				break;
			case FLOAT_SYM:
				{
				alt417=10;
				}
				break;
			case DECIMAL_SYM:
				{
				alt417=11;
				}
				break;
			case NUMERIC_SYM:
				{
				alt417=12;
				}
				break;
			case DATE_SYM:
				{
				alt417=13;
				}
				break;
			case TIME_SYM:
				{
				alt417=14;
				}
				break;
			case TIMESTAMP:
				{
				alt417=15;
				}
				break;
			case DATETIME:
				{
				alt417=16;
				}
				break;
			case YEAR:
				{
				alt417=17;
				}
				break;
			case CHAR:
				{
				alt417=18;
				}
				break;
			case VARCHAR:
				{
				alt417=19;
				}
				break;
			case BINARY:
				{
				alt417=20;
				}
				break;
			case VARBINARY:
				{
				alt417=21;
				}
				break;
			case TINYBLOB:
				{
				alt417=22;
				}
				break;
			case BLOB_SYM:
				{
				alt417=23;
				}
				break;
			case MEDIUMBLOB:
				{
				alt417=24;
				}
				break;
			case LONGBLOB:
				{
				alt417=25;
				}
				break;
			case TINYTEXT:
				{
				alt417=26;
				}
				break;
			case TEXT_SYM:
				{
				alt417=27;
				}
				break;
			case MEDIUMTEXT:
				{
				alt417=28;
				}
				break;
			case LONGTEXT:
				{
				alt417=29;
				}
				break;
			case ENUM:
				{
				alt417=30;
				}
				break;
			case SET_SYM:
				{
				alt417=31;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 417, 0, input);
				throw nvae;
			}
			switch (alt417) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2071:5: ( BIT_SYM ( LPAREN length RPAREN )? ( null_or_notnull )? ( DEFAULT bit_literal )? )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2071:5: ( BIT_SYM ( LPAREN length RPAREN )? ( null_or_notnull )? ( DEFAULT bit_literal )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2071:8: BIT_SYM ( LPAREN length RPAREN )? ( null_or_notnull )? ( DEFAULT bit_literal )?
					{
					BIT_SYM945=(Token)match(input,BIT_SYM,FOLLOW_BIT_SYM_in_column_data_type_header27720); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BIT_SYM945_tree = (Object)adaptor.create(BIT_SYM945);
					adaptor.addChild(root_0, BIT_SYM945_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2071:15: ( LPAREN length RPAREN )?
					int alt303=2;
					int LA303_0 = input.LA(1);
					if ( (LA303_0==LPAREN) ) {
						alt303=1;
					}
					switch (alt303) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2071:16: LPAREN length RPAREN
							{
							LPAREN946=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header27722); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN946_tree = (Object)adaptor.create(LPAREN946);
							adaptor.addChild(root_0, LPAREN946_tree);
							}

							pushFollow(FOLLOW_length_in_column_data_type_header27724);
							length947=length();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, length947.getTree());

							RPAREN948=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header27726); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN948_tree = (Object)adaptor.create(RPAREN948);
							adaptor.addChild(root_0, RPAREN948_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2071:39: ( null_or_notnull )?
					int alt304=2;
					int LA304_0 = input.LA(1);
					if ( (LA304_0==NOT_SYM||LA304_0==NULL_SYM) ) {
						alt304=1;
					}
					switch (alt304) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2071:40: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header27731);
							null_or_notnull949=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull949.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2071:58: ( DEFAULT bit_literal )?
					int alt305=2;
					int LA305_0 = input.LA(1);
					if ( (LA305_0==DEFAULT) ) {
						alt305=1;
					}
					switch (alt305) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2071:59: DEFAULT bit_literal
							{
							DEFAULT950=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header27736); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT950_tree = (Object)adaptor.create(DEFAULT950);
							adaptor.addChild(root_0, DEFAULT950_tree);
							}

							pushFollow(FOLLOW_bit_literal_in_column_data_type_header27738);
							bit_literal951=bit_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_literal951.getTree());

							}
							break;

					}

					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2072:5: ( TINYINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2072:5: ( TINYINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2072:8: TINYINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )?
					{
					TINYINT952=(Token)match(input,TINYINT,FOLLOW_TINYINT_in_column_data_type_header27752); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TINYINT952_tree = (Object)adaptor.create(TINYINT952);
					adaptor.addChild(root_0, TINYINT952_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2072:15: ( LPAREN length RPAREN )?
					int alt306=2;
					int LA306_0 = input.LA(1);
					if ( (LA306_0==LPAREN) ) {
						alt306=1;
					}
					switch (alt306) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2072:16: LPAREN length RPAREN
							{
							LPAREN953=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header27754); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN953_tree = (Object)adaptor.create(LPAREN953);
							adaptor.addChild(root_0, LPAREN953_tree);
							}

							pushFollow(FOLLOW_length_in_column_data_type_header27756);
							length954=length();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, length954.getTree());

							RPAREN955=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header27758); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN955_tree = (Object)adaptor.create(RPAREN955);
							adaptor.addChild(root_0, RPAREN955_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2072:39: ( UNSIGNED_SYM )?
					int alt307=2;
					int LA307_0 = input.LA(1);
					if ( (LA307_0==UNSIGNED_SYM) ) {
						alt307=1;
					}
					switch (alt307) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2072:40: UNSIGNED_SYM
							{
							UNSIGNED_SYM956=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_column_data_type_header27763); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							UNSIGNED_SYM956_tree = (Object)adaptor.create(UNSIGNED_SYM956);
							adaptor.addChild(root_0, UNSIGNED_SYM956_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2072:55: ( ZEROFILL )?
					int alt308=2;
					int LA308_0 = input.LA(1);
					if ( (LA308_0==ZEROFILL) ) {
						alt308=1;
					}
					switch (alt308) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2072:56: ZEROFILL
							{
							ZEROFILL957=(Token)match(input,ZEROFILL,FOLLOW_ZEROFILL_in_column_data_type_header27768); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ZEROFILL957_tree = (Object)adaptor.create(ZEROFILL957);
							adaptor.addChild(root_0, ZEROFILL957_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2072:67: ( null_or_notnull )?
					int alt309=2;
					int LA309_0 = input.LA(1);
					if ( (LA309_0==NOT_SYM||LA309_0==NULL_SYM) ) {
						alt309=1;
					}
					switch (alt309) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2072:68: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header27773);
							null_or_notnull958=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull958.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2072:86: ( DEFAULT number_literal )?
					int alt310=2;
					int LA310_0 = input.LA(1);
					if ( (LA310_0==DEFAULT) ) {
						alt310=1;
					}
					switch (alt310) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2072:87: DEFAULT number_literal
							{
							DEFAULT959=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header27778); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT959_tree = (Object)adaptor.create(DEFAULT959);
							adaptor.addChild(root_0, DEFAULT959_tree);
							}

							pushFollow(FOLLOW_number_literal_in_column_data_type_header27780);
							number_literal960=number_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal960.getTree());

							}
							break;

					}

					}

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2073:5: ( SMALLINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2073:5: ( SMALLINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2073:8: SMALLINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )?
					{
					SMALLINT961=(Token)match(input,SMALLINT,FOLLOW_SMALLINT_in_column_data_type_header27794); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SMALLINT961_tree = (Object)adaptor.create(SMALLINT961);
					adaptor.addChild(root_0, SMALLINT961_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2073:16: ( LPAREN length RPAREN )?
					int alt311=2;
					int LA311_0 = input.LA(1);
					if ( (LA311_0==LPAREN) ) {
						alt311=1;
					}
					switch (alt311) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2073:17: LPAREN length RPAREN
							{
							LPAREN962=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header27796); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN962_tree = (Object)adaptor.create(LPAREN962);
							adaptor.addChild(root_0, LPAREN962_tree);
							}

							pushFollow(FOLLOW_length_in_column_data_type_header27798);
							length963=length();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, length963.getTree());

							RPAREN964=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header27800); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN964_tree = (Object)adaptor.create(RPAREN964);
							adaptor.addChild(root_0, RPAREN964_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2073:40: ( UNSIGNED_SYM )?
					int alt312=2;
					int LA312_0 = input.LA(1);
					if ( (LA312_0==UNSIGNED_SYM) ) {
						alt312=1;
					}
					switch (alt312) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2073:41: UNSIGNED_SYM
							{
							UNSIGNED_SYM965=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_column_data_type_header27805); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							UNSIGNED_SYM965_tree = (Object)adaptor.create(UNSIGNED_SYM965);
							adaptor.addChild(root_0, UNSIGNED_SYM965_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2073:56: ( ZEROFILL )?
					int alt313=2;
					int LA313_0 = input.LA(1);
					if ( (LA313_0==ZEROFILL) ) {
						alt313=1;
					}
					switch (alt313) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2073:57: ZEROFILL
							{
							ZEROFILL966=(Token)match(input,ZEROFILL,FOLLOW_ZEROFILL_in_column_data_type_header27810); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ZEROFILL966_tree = (Object)adaptor.create(ZEROFILL966);
							adaptor.addChild(root_0, ZEROFILL966_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2073:68: ( null_or_notnull )?
					int alt314=2;
					int LA314_0 = input.LA(1);
					if ( (LA314_0==NOT_SYM||LA314_0==NULL_SYM) ) {
						alt314=1;
					}
					switch (alt314) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2073:69: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header27815);
							null_or_notnull967=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull967.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2073:87: ( DEFAULT number_literal )?
					int alt315=2;
					int LA315_0 = input.LA(1);
					if ( (LA315_0==DEFAULT) ) {
						alt315=1;
					}
					switch (alt315) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2073:88: DEFAULT number_literal
							{
							DEFAULT968=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header27820); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT968_tree = (Object)adaptor.create(DEFAULT968);
							adaptor.addChild(root_0, DEFAULT968_tree);
							}

							pushFollow(FOLLOW_number_literal_in_column_data_type_header27822);
							number_literal969=number_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal969.getTree());

							}
							break;

					}

					}

					}
					break;
				case 4 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2074:5: ( MEDIUMINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2074:5: ( MEDIUMINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2074:8: MEDIUMINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )?
					{
					MEDIUMINT970=(Token)match(input,MEDIUMINT,FOLLOW_MEDIUMINT_in_column_data_type_header27836); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MEDIUMINT970_tree = (Object)adaptor.create(MEDIUMINT970);
					adaptor.addChild(root_0, MEDIUMINT970_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2074:17: ( LPAREN length RPAREN )?
					int alt316=2;
					int LA316_0 = input.LA(1);
					if ( (LA316_0==LPAREN) ) {
						alt316=1;
					}
					switch (alt316) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2074:18: LPAREN length RPAREN
							{
							LPAREN971=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header27838); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN971_tree = (Object)adaptor.create(LPAREN971);
							adaptor.addChild(root_0, LPAREN971_tree);
							}

							pushFollow(FOLLOW_length_in_column_data_type_header27840);
							length972=length();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, length972.getTree());

							RPAREN973=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header27842); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN973_tree = (Object)adaptor.create(RPAREN973);
							adaptor.addChild(root_0, RPAREN973_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2074:41: ( UNSIGNED_SYM )?
					int alt317=2;
					int LA317_0 = input.LA(1);
					if ( (LA317_0==UNSIGNED_SYM) ) {
						alt317=1;
					}
					switch (alt317) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2074:42: UNSIGNED_SYM
							{
							UNSIGNED_SYM974=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_column_data_type_header27847); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							UNSIGNED_SYM974_tree = (Object)adaptor.create(UNSIGNED_SYM974);
							adaptor.addChild(root_0, UNSIGNED_SYM974_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2074:57: ( ZEROFILL )?
					int alt318=2;
					int LA318_0 = input.LA(1);
					if ( (LA318_0==ZEROFILL) ) {
						alt318=1;
					}
					switch (alt318) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2074:58: ZEROFILL
							{
							ZEROFILL975=(Token)match(input,ZEROFILL,FOLLOW_ZEROFILL_in_column_data_type_header27852); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ZEROFILL975_tree = (Object)adaptor.create(ZEROFILL975);
							adaptor.addChild(root_0, ZEROFILL975_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2074:69: ( null_or_notnull )?
					int alt319=2;
					int LA319_0 = input.LA(1);
					if ( (LA319_0==NOT_SYM||LA319_0==NULL_SYM) ) {
						alt319=1;
					}
					switch (alt319) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2074:70: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header27857);
							null_or_notnull976=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull976.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2074:88: ( DEFAULT number_literal )?
					int alt320=2;
					int LA320_0 = input.LA(1);
					if ( (LA320_0==DEFAULT) ) {
						alt320=1;
					}
					switch (alt320) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2074:89: DEFAULT number_literal
							{
							DEFAULT977=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header27862); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT977_tree = (Object)adaptor.create(DEFAULT977);
							adaptor.addChild(root_0, DEFAULT977_tree);
							}

							pushFollow(FOLLOW_number_literal_in_column_data_type_header27864);
							number_literal978=number_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal978.getTree());

							}
							break;

					}

					}

					}
					break;
				case 5 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2075:5: ( INT_SYM ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2075:5: ( INT_SYM ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2075:8: INT_SYM ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )?
					{
					INT_SYM979=(Token)match(input,INT_SYM,FOLLOW_INT_SYM_in_column_data_type_header27878); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INT_SYM979_tree = (Object)adaptor.create(INT_SYM979);
					adaptor.addChild(root_0, INT_SYM979_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2075:15: ( LPAREN length RPAREN )?
					int alt321=2;
					int LA321_0 = input.LA(1);
					if ( (LA321_0==LPAREN) ) {
						alt321=1;
					}
					switch (alt321) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2075:16: LPAREN length RPAREN
							{
							LPAREN980=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header27880); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN980_tree = (Object)adaptor.create(LPAREN980);
							adaptor.addChild(root_0, LPAREN980_tree);
							}

							pushFollow(FOLLOW_length_in_column_data_type_header27882);
							length981=length();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, length981.getTree());

							RPAREN982=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header27884); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN982_tree = (Object)adaptor.create(RPAREN982);
							adaptor.addChild(root_0, RPAREN982_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2075:39: ( UNSIGNED_SYM )?
					int alt322=2;
					int LA322_0 = input.LA(1);
					if ( (LA322_0==UNSIGNED_SYM) ) {
						alt322=1;
					}
					switch (alt322) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2075:40: UNSIGNED_SYM
							{
							UNSIGNED_SYM983=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_column_data_type_header27889); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							UNSIGNED_SYM983_tree = (Object)adaptor.create(UNSIGNED_SYM983);
							adaptor.addChild(root_0, UNSIGNED_SYM983_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2075:55: ( ZEROFILL )?
					int alt323=2;
					int LA323_0 = input.LA(1);
					if ( (LA323_0==ZEROFILL) ) {
						alt323=1;
					}
					switch (alt323) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2075:56: ZEROFILL
							{
							ZEROFILL984=(Token)match(input,ZEROFILL,FOLLOW_ZEROFILL_in_column_data_type_header27894); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ZEROFILL984_tree = (Object)adaptor.create(ZEROFILL984);
							adaptor.addChild(root_0, ZEROFILL984_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2075:67: ( null_or_notnull )?
					int alt324=2;
					int LA324_0 = input.LA(1);
					if ( (LA324_0==NOT_SYM||LA324_0==NULL_SYM) ) {
						alt324=1;
					}
					switch (alt324) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2075:68: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header27899);
							null_or_notnull985=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull985.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2075:86: ( DEFAULT number_literal )?
					int alt325=2;
					int LA325_0 = input.LA(1);
					if ( (LA325_0==DEFAULT) ) {
						alt325=1;
					}
					switch (alt325) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2075:87: DEFAULT number_literal
							{
							DEFAULT986=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header27904); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT986_tree = (Object)adaptor.create(DEFAULT986);
							adaptor.addChild(root_0, DEFAULT986_tree);
							}

							pushFollow(FOLLOW_number_literal_in_column_data_type_header27906);
							number_literal987=number_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal987.getTree());

							}
							break;

					}

					}

					}
					break;
				case 6 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2076:5: ( INTEGER_SYM ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2076:5: ( INTEGER_SYM ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2076:8: INTEGER_SYM ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )?
					{
					INTEGER_SYM988=(Token)match(input,INTEGER_SYM,FOLLOW_INTEGER_SYM_in_column_data_type_header27920); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_SYM988_tree = (Object)adaptor.create(INTEGER_SYM988);
					adaptor.addChild(root_0, INTEGER_SYM988_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2076:19: ( LPAREN length RPAREN )?
					int alt326=2;
					int LA326_0 = input.LA(1);
					if ( (LA326_0==LPAREN) ) {
						alt326=1;
					}
					switch (alt326) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2076:20: LPAREN length RPAREN
							{
							LPAREN989=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header27922); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN989_tree = (Object)adaptor.create(LPAREN989);
							adaptor.addChild(root_0, LPAREN989_tree);
							}

							pushFollow(FOLLOW_length_in_column_data_type_header27924);
							length990=length();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, length990.getTree());

							RPAREN991=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header27926); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN991_tree = (Object)adaptor.create(RPAREN991);
							adaptor.addChild(root_0, RPAREN991_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2076:43: ( UNSIGNED_SYM )?
					int alt327=2;
					int LA327_0 = input.LA(1);
					if ( (LA327_0==UNSIGNED_SYM) ) {
						alt327=1;
					}
					switch (alt327) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2076:44: UNSIGNED_SYM
							{
							UNSIGNED_SYM992=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_column_data_type_header27931); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							UNSIGNED_SYM992_tree = (Object)adaptor.create(UNSIGNED_SYM992);
							adaptor.addChild(root_0, UNSIGNED_SYM992_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2076:59: ( ZEROFILL )?
					int alt328=2;
					int LA328_0 = input.LA(1);
					if ( (LA328_0==ZEROFILL) ) {
						alt328=1;
					}
					switch (alt328) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2076:60: ZEROFILL
							{
							ZEROFILL993=(Token)match(input,ZEROFILL,FOLLOW_ZEROFILL_in_column_data_type_header27936); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ZEROFILL993_tree = (Object)adaptor.create(ZEROFILL993);
							adaptor.addChild(root_0, ZEROFILL993_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2076:71: ( null_or_notnull )?
					int alt329=2;
					int LA329_0 = input.LA(1);
					if ( (LA329_0==NOT_SYM||LA329_0==NULL_SYM) ) {
						alt329=1;
					}
					switch (alt329) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2076:72: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header27941);
							null_or_notnull994=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull994.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2076:90: ( DEFAULT number_literal )?
					int alt330=2;
					int LA330_0 = input.LA(1);
					if ( (LA330_0==DEFAULT) ) {
						alt330=1;
					}
					switch (alt330) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2076:91: DEFAULT number_literal
							{
							DEFAULT995=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header27946); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT995_tree = (Object)adaptor.create(DEFAULT995);
							adaptor.addChild(root_0, DEFAULT995_tree);
							}

							pushFollow(FOLLOW_number_literal_in_column_data_type_header27948);
							number_literal996=number_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal996.getTree());

							}
							break;

					}

					}

					}
					break;
				case 7 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2077:5: ( BIGINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2077:5: ( BIGINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2077:8: BIGINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )?
					{
					BIGINT997=(Token)match(input,BIGINT,FOLLOW_BIGINT_in_column_data_type_header27962); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BIGINT997_tree = (Object)adaptor.create(BIGINT997);
					adaptor.addChild(root_0, BIGINT997_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2077:14: ( LPAREN length RPAREN )?
					int alt331=2;
					int LA331_0 = input.LA(1);
					if ( (LA331_0==LPAREN) ) {
						alt331=1;
					}
					switch (alt331) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2077:15: LPAREN length RPAREN
							{
							LPAREN998=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header27964); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN998_tree = (Object)adaptor.create(LPAREN998);
							adaptor.addChild(root_0, LPAREN998_tree);
							}

							pushFollow(FOLLOW_length_in_column_data_type_header27966);
							length999=length();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, length999.getTree());

							RPAREN1000=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header27968); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN1000_tree = (Object)adaptor.create(RPAREN1000);
							adaptor.addChild(root_0, RPAREN1000_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2077:38: ( UNSIGNED_SYM )?
					int alt332=2;
					int LA332_0 = input.LA(1);
					if ( (LA332_0==UNSIGNED_SYM) ) {
						alt332=1;
					}
					switch (alt332) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2077:39: UNSIGNED_SYM
							{
							UNSIGNED_SYM1001=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_column_data_type_header27973); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							UNSIGNED_SYM1001_tree = (Object)adaptor.create(UNSIGNED_SYM1001);
							adaptor.addChild(root_0, UNSIGNED_SYM1001_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2077:54: ( ZEROFILL )?
					int alt333=2;
					int LA333_0 = input.LA(1);
					if ( (LA333_0==ZEROFILL) ) {
						alt333=1;
					}
					switch (alt333) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2077:55: ZEROFILL
							{
							ZEROFILL1002=(Token)match(input,ZEROFILL,FOLLOW_ZEROFILL_in_column_data_type_header27978); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ZEROFILL1002_tree = (Object)adaptor.create(ZEROFILL1002);
							adaptor.addChild(root_0, ZEROFILL1002_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2077:66: ( null_or_notnull )?
					int alt334=2;
					int LA334_0 = input.LA(1);
					if ( (LA334_0==NOT_SYM||LA334_0==NULL_SYM) ) {
						alt334=1;
					}
					switch (alt334) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2077:67: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header27983);
							null_or_notnull1003=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1003.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2077:85: ( DEFAULT number_literal )?
					int alt335=2;
					int LA335_0 = input.LA(1);
					if ( (LA335_0==DEFAULT) ) {
						alt335=1;
					}
					switch (alt335) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2077:86: DEFAULT number_literal
							{
							DEFAULT1004=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header27988); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1004_tree = (Object)adaptor.create(DEFAULT1004);
							adaptor.addChild(root_0, DEFAULT1004_tree);
							}

							pushFollow(FOLLOW_number_literal_in_column_data_type_header27990);
							number_literal1005=number_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal1005.getTree());

							}
							break;

					}

					}

					}
					break;
				case 8 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2078:5: ( REAL ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2078:5: ( REAL ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2078:8: REAL ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )?
					{
					REAL1006=(Token)match(input,REAL,FOLLOW_REAL_in_column_data_type_header28004); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					REAL1006_tree = (Object)adaptor.create(REAL1006);
					adaptor.addChild(root_0, REAL1006_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2078:12: ( LPAREN length COMMA number_literal RPAREN )?
					int alt336=2;
					int LA336_0 = input.LA(1);
					if ( (LA336_0==LPAREN) ) {
						alt336=1;
					}
					switch (alt336) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2078:13: LPAREN length COMMA number_literal RPAREN
							{
							LPAREN1007=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header28006); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN1007_tree = (Object)adaptor.create(LPAREN1007);
							adaptor.addChild(root_0, LPAREN1007_tree);
							}

							pushFollow(FOLLOW_length_in_column_data_type_header28008);
							length1008=length();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, length1008.getTree());

							COMMA1009=(Token)match(input,COMMA,FOLLOW_COMMA_in_column_data_type_header28010); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA1009_tree = (Object)adaptor.create(COMMA1009);
							adaptor.addChild(root_0, COMMA1009_tree);
							}

							pushFollow(FOLLOW_number_literal_in_column_data_type_header28012);
							number_literal1010=number_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal1010.getTree());

							RPAREN1011=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header28014); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN1011_tree = (Object)adaptor.create(RPAREN1011);
							adaptor.addChild(root_0, RPAREN1011_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2078:57: ( UNSIGNED_SYM )?
					int alt337=2;
					int LA337_0 = input.LA(1);
					if ( (LA337_0==UNSIGNED_SYM) ) {
						alt337=1;
					}
					switch (alt337) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2078:58: UNSIGNED_SYM
							{
							UNSIGNED_SYM1012=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_column_data_type_header28019); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							UNSIGNED_SYM1012_tree = (Object)adaptor.create(UNSIGNED_SYM1012);
							adaptor.addChild(root_0, UNSIGNED_SYM1012_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2078:73: ( ZEROFILL )?
					int alt338=2;
					int LA338_0 = input.LA(1);
					if ( (LA338_0==ZEROFILL) ) {
						alt338=1;
					}
					switch (alt338) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2078:74: ZEROFILL
							{
							ZEROFILL1013=(Token)match(input,ZEROFILL,FOLLOW_ZEROFILL_in_column_data_type_header28024); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ZEROFILL1013_tree = (Object)adaptor.create(ZEROFILL1013);
							adaptor.addChild(root_0, ZEROFILL1013_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2078:85: ( null_or_notnull )?
					int alt339=2;
					int LA339_0 = input.LA(1);
					if ( (LA339_0==NOT_SYM||LA339_0==NULL_SYM) ) {
						alt339=1;
					}
					switch (alt339) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2078:86: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header28029);
							null_or_notnull1014=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1014.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2078:104: ( DEFAULT number_literal )?
					int alt340=2;
					int LA340_0 = input.LA(1);
					if ( (LA340_0==DEFAULT) ) {
						alt340=1;
					}
					switch (alt340) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2078:105: DEFAULT number_literal
							{
							DEFAULT1015=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header28034); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1015_tree = (Object)adaptor.create(DEFAULT1015);
							adaptor.addChild(root_0, DEFAULT1015_tree);
							}

							pushFollow(FOLLOW_number_literal_in_column_data_type_header28036);
							number_literal1016=number_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal1016.getTree());

							}
							break;

					}

					}

					}
					break;
				case 9 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2079:5: ( DOUBLE_SYM ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2079:5: ( DOUBLE_SYM ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2079:8: DOUBLE_SYM ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )?
					{
					DOUBLE_SYM1017=(Token)match(input,DOUBLE_SYM,FOLLOW_DOUBLE_SYM_in_column_data_type_header28050); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DOUBLE_SYM1017_tree = (Object)adaptor.create(DOUBLE_SYM1017);
					adaptor.addChild(root_0, DOUBLE_SYM1017_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2079:18: ( LPAREN length COMMA number_literal RPAREN )?
					int alt341=2;
					int LA341_0 = input.LA(1);
					if ( (LA341_0==LPAREN) ) {
						alt341=1;
					}
					switch (alt341) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2079:19: LPAREN length COMMA number_literal RPAREN
							{
							LPAREN1018=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header28052); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN1018_tree = (Object)adaptor.create(LPAREN1018);
							adaptor.addChild(root_0, LPAREN1018_tree);
							}

							pushFollow(FOLLOW_length_in_column_data_type_header28054);
							length1019=length();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, length1019.getTree());

							COMMA1020=(Token)match(input,COMMA,FOLLOW_COMMA_in_column_data_type_header28056); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA1020_tree = (Object)adaptor.create(COMMA1020);
							adaptor.addChild(root_0, COMMA1020_tree);
							}

							pushFollow(FOLLOW_number_literal_in_column_data_type_header28058);
							number_literal1021=number_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal1021.getTree());

							RPAREN1022=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header28060); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN1022_tree = (Object)adaptor.create(RPAREN1022);
							adaptor.addChild(root_0, RPAREN1022_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2079:63: ( UNSIGNED_SYM )?
					int alt342=2;
					int LA342_0 = input.LA(1);
					if ( (LA342_0==UNSIGNED_SYM) ) {
						alt342=1;
					}
					switch (alt342) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2079:64: UNSIGNED_SYM
							{
							UNSIGNED_SYM1023=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_column_data_type_header28065); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							UNSIGNED_SYM1023_tree = (Object)adaptor.create(UNSIGNED_SYM1023);
							adaptor.addChild(root_0, UNSIGNED_SYM1023_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2079:79: ( ZEROFILL )?
					int alt343=2;
					int LA343_0 = input.LA(1);
					if ( (LA343_0==ZEROFILL) ) {
						alt343=1;
					}
					switch (alt343) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2079:80: ZEROFILL
							{
							ZEROFILL1024=(Token)match(input,ZEROFILL,FOLLOW_ZEROFILL_in_column_data_type_header28070); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ZEROFILL1024_tree = (Object)adaptor.create(ZEROFILL1024);
							adaptor.addChild(root_0, ZEROFILL1024_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2079:91: ( null_or_notnull )?
					int alt344=2;
					int LA344_0 = input.LA(1);
					if ( (LA344_0==NOT_SYM||LA344_0==NULL_SYM) ) {
						alt344=1;
					}
					switch (alt344) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2079:92: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header28075);
							null_or_notnull1025=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1025.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2079:110: ( DEFAULT number_literal )?
					int alt345=2;
					int LA345_0 = input.LA(1);
					if ( (LA345_0==DEFAULT) ) {
						alt345=1;
					}
					switch (alt345) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2079:111: DEFAULT number_literal
							{
							DEFAULT1026=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header28080); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1026_tree = (Object)adaptor.create(DEFAULT1026);
							adaptor.addChild(root_0, DEFAULT1026_tree);
							}

							pushFollow(FOLLOW_number_literal_in_column_data_type_header28082);
							number_literal1027=number_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal1027.getTree());

							}
							break;

					}

					}

					}
					break;
				case 10 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2080:5: ( FLOAT_SYM ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2080:5: ( FLOAT_SYM ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2080:8: FLOAT_SYM ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )?
					{
					FLOAT_SYM1028=(Token)match(input,FLOAT_SYM,FOLLOW_FLOAT_SYM_in_column_data_type_header28096); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					FLOAT_SYM1028_tree = (Object)adaptor.create(FLOAT_SYM1028);
					adaptor.addChild(root_0, FLOAT_SYM1028_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2080:17: ( LPAREN length COMMA number_literal RPAREN )?
					int alt346=2;
					int LA346_0 = input.LA(1);
					if ( (LA346_0==LPAREN) ) {
						alt346=1;
					}
					switch (alt346) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2080:18: LPAREN length COMMA number_literal RPAREN
							{
							LPAREN1029=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header28098); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN1029_tree = (Object)adaptor.create(LPAREN1029);
							adaptor.addChild(root_0, LPAREN1029_tree);
							}

							pushFollow(FOLLOW_length_in_column_data_type_header28100);
							length1030=length();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, length1030.getTree());

							COMMA1031=(Token)match(input,COMMA,FOLLOW_COMMA_in_column_data_type_header28102); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA1031_tree = (Object)adaptor.create(COMMA1031);
							adaptor.addChild(root_0, COMMA1031_tree);
							}

							pushFollow(FOLLOW_number_literal_in_column_data_type_header28104);
							number_literal1032=number_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal1032.getTree());

							RPAREN1033=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header28106); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN1033_tree = (Object)adaptor.create(RPAREN1033);
							adaptor.addChild(root_0, RPAREN1033_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2080:62: ( UNSIGNED_SYM )?
					int alt347=2;
					int LA347_0 = input.LA(1);
					if ( (LA347_0==UNSIGNED_SYM) ) {
						alt347=1;
					}
					switch (alt347) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2080:63: UNSIGNED_SYM
							{
							UNSIGNED_SYM1034=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_column_data_type_header28111); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							UNSIGNED_SYM1034_tree = (Object)adaptor.create(UNSIGNED_SYM1034);
							adaptor.addChild(root_0, UNSIGNED_SYM1034_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2080:78: ( ZEROFILL )?
					int alt348=2;
					int LA348_0 = input.LA(1);
					if ( (LA348_0==ZEROFILL) ) {
						alt348=1;
					}
					switch (alt348) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2080:79: ZEROFILL
							{
							ZEROFILL1035=(Token)match(input,ZEROFILL,FOLLOW_ZEROFILL_in_column_data_type_header28116); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ZEROFILL1035_tree = (Object)adaptor.create(ZEROFILL1035);
							adaptor.addChild(root_0, ZEROFILL1035_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2080:90: ( null_or_notnull )?
					int alt349=2;
					int LA349_0 = input.LA(1);
					if ( (LA349_0==NOT_SYM||LA349_0==NULL_SYM) ) {
						alt349=1;
					}
					switch (alt349) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2080:91: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header28121);
							null_or_notnull1036=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1036.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2080:109: ( DEFAULT number_literal )?
					int alt350=2;
					int LA350_0 = input.LA(1);
					if ( (LA350_0==DEFAULT) ) {
						alt350=1;
					}
					switch (alt350) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2080:110: DEFAULT number_literal
							{
							DEFAULT1037=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header28126); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1037_tree = (Object)adaptor.create(DEFAULT1037);
							adaptor.addChild(root_0, DEFAULT1037_tree);
							}

							pushFollow(FOLLOW_number_literal_in_column_data_type_header28128);
							number_literal1038=number_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal1038.getTree());

							}
							break;

					}

					}

					}
					break;
				case 11 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2081:5: ( DECIMAL_SYM ( LPAREN length ( COMMA number_literal )? RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2081:5: ( DECIMAL_SYM ( LPAREN length ( COMMA number_literal )? RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2081:8: DECIMAL_SYM ( LPAREN length ( COMMA number_literal )? RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )?
					{
					DECIMAL_SYM1039=(Token)match(input,DECIMAL_SYM,FOLLOW_DECIMAL_SYM_in_column_data_type_header28142); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DECIMAL_SYM1039_tree = (Object)adaptor.create(DECIMAL_SYM1039);
					adaptor.addChild(root_0, DECIMAL_SYM1039_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2081:19: ( LPAREN length ( COMMA number_literal )? RPAREN )?
					int alt352=2;
					int LA352_0 = input.LA(1);
					if ( (LA352_0==LPAREN) ) {
						alt352=1;
					}
					switch (alt352) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2081:20: LPAREN length ( COMMA number_literal )? RPAREN
							{
							LPAREN1040=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header28144); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN1040_tree = (Object)adaptor.create(LPAREN1040);
							adaptor.addChild(root_0, LPAREN1040_tree);
							}

							pushFollow(FOLLOW_length_in_column_data_type_header28146);
							length1041=length();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, length1041.getTree());

							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2081:33: ( COMMA number_literal )?
							int alt351=2;
							int LA351_0 = input.LA(1);
							if ( (LA351_0==COMMA) ) {
								alt351=1;
							}
							switch (alt351) {
								case 1 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2081:35: COMMA number_literal
									{
									COMMA1042=(Token)match(input,COMMA,FOLLOW_COMMA_in_column_data_type_header28149); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									COMMA1042_tree = (Object)adaptor.create(COMMA1042);
									adaptor.addChild(root_0, COMMA1042_tree);
									}

									pushFollow(FOLLOW_number_literal_in_column_data_type_header28151);
									number_literal1043=number_literal();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal1043.getTree());

									}
									break;

							}

							RPAREN1044=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header28155); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN1044_tree = (Object)adaptor.create(RPAREN1044);
							adaptor.addChild(root_0, RPAREN1044_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2081:67: ( UNSIGNED_SYM )?
					int alt353=2;
					int LA353_0 = input.LA(1);
					if ( (LA353_0==UNSIGNED_SYM) ) {
						alt353=1;
					}
					switch (alt353) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2081:68: UNSIGNED_SYM
							{
							UNSIGNED_SYM1045=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_column_data_type_header28160); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							UNSIGNED_SYM1045_tree = (Object)adaptor.create(UNSIGNED_SYM1045);
							adaptor.addChild(root_0, UNSIGNED_SYM1045_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2081:83: ( ZEROFILL )?
					int alt354=2;
					int LA354_0 = input.LA(1);
					if ( (LA354_0==ZEROFILL) ) {
						alt354=1;
					}
					switch (alt354) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2081:84: ZEROFILL
							{
							ZEROFILL1046=(Token)match(input,ZEROFILL,FOLLOW_ZEROFILL_in_column_data_type_header28165); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ZEROFILL1046_tree = (Object)adaptor.create(ZEROFILL1046);
							adaptor.addChild(root_0, ZEROFILL1046_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2081:95: ( null_or_notnull )?
					int alt355=2;
					int LA355_0 = input.LA(1);
					if ( (LA355_0==NOT_SYM||LA355_0==NULL_SYM) ) {
						alt355=1;
					}
					switch (alt355) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2081:96: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header28170);
							null_or_notnull1047=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1047.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2081:114: ( DEFAULT number_literal )?
					int alt356=2;
					int LA356_0 = input.LA(1);
					if ( (LA356_0==DEFAULT) ) {
						alt356=1;
					}
					switch (alt356) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2081:115: DEFAULT number_literal
							{
							DEFAULT1048=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header28175); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1048_tree = (Object)adaptor.create(DEFAULT1048);
							adaptor.addChild(root_0, DEFAULT1048_tree);
							}

							pushFollow(FOLLOW_number_literal_in_column_data_type_header28177);
							number_literal1049=number_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal1049.getTree());

							}
							break;

					}

					}

					}
					break;
				case 12 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2082:5: ( NUMERIC_SYM ( LPAREN length ( COMMA number_literal )? RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2082:5: ( NUMERIC_SYM ( LPAREN length ( COMMA number_literal )? RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2082:8: NUMERIC_SYM ( LPAREN length ( COMMA number_literal )? RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )?
					{
					NUMERIC_SYM1050=(Token)match(input,NUMERIC_SYM,FOLLOW_NUMERIC_SYM_in_column_data_type_header28191); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NUMERIC_SYM1050_tree = (Object)adaptor.create(NUMERIC_SYM1050);
					adaptor.addChild(root_0, NUMERIC_SYM1050_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2082:19: ( LPAREN length ( COMMA number_literal )? RPAREN )?
					int alt358=2;
					int LA358_0 = input.LA(1);
					if ( (LA358_0==LPAREN) ) {
						alt358=1;
					}
					switch (alt358) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2082:20: LPAREN length ( COMMA number_literal )? RPAREN
							{
							LPAREN1051=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header28193); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN1051_tree = (Object)adaptor.create(LPAREN1051);
							adaptor.addChild(root_0, LPAREN1051_tree);
							}

							pushFollow(FOLLOW_length_in_column_data_type_header28195);
							length1052=length();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, length1052.getTree());

							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2082:33: ( COMMA number_literal )?
							int alt357=2;
							int LA357_0 = input.LA(1);
							if ( (LA357_0==COMMA) ) {
								alt357=1;
							}
							switch (alt357) {
								case 1 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2082:35: COMMA number_literal
									{
									COMMA1053=(Token)match(input,COMMA,FOLLOW_COMMA_in_column_data_type_header28198); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									COMMA1053_tree = (Object)adaptor.create(COMMA1053);
									adaptor.addChild(root_0, COMMA1053_tree);
									}

									pushFollow(FOLLOW_number_literal_in_column_data_type_header28200);
									number_literal1054=number_literal();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal1054.getTree());

									}
									break;

							}

							RPAREN1055=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header28204); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN1055_tree = (Object)adaptor.create(RPAREN1055);
							adaptor.addChild(root_0, RPAREN1055_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2082:67: ( UNSIGNED_SYM )?
					int alt359=2;
					int LA359_0 = input.LA(1);
					if ( (LA359_0==UNSIGNED_SYM) ) {
						alt359=1;
					}
					switch (alt359) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2082:68: UNSIGNED_SYM
							{
							UNSIGNED_SYM1056=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_column_data_type_header28209); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							UNSIGNED_SYM1056_tree = (Object)adaptor.create(UNSIGNED_SYM1056);
							adaptor.addChild(root_0, UNSIGNED_SYM1056_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2082:83: ( ZEROFILL )?
					int alt360=2;
					int LA360_0 = input.LA(1);
					if ( (LA360_0==ZEROFILL) ) {
						alt360=1;
					}
					switch (alt360) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2082:84: ZEROFILL
							{
							ZEROFILL1057=(Token)match(input,ZEROFILL,FOLLOW_ZEROFILL_in_column_data_type_header28214); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ZEROFILL1057_tree = (Object)adaptor.create(ZEROFILL1057);
							adaptor.addChild(root_0, ZEROFILL1057_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2082:95: ( null_or_notnull )?
					int alt361=2;
					int LA361_0 = input.LA(1);
					if ( (LA361_0==NOT_SYM||LA361_0==NULL_SYM) ) {
						alt361=1;
					}
					switch (alt361) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2082:96: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header28219);
							null_or_notnull1058=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1058.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2082:114: ( DEFAULT number_literal )?
					int alt362=2;
					int LA362_0 = input.LA(1);
					if ( (LA362_0==DEFAULT) ) {
						alt362=1;
					}
					switch (alt362) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2082:115: DEFAULT number_literal
							{
							DEFAULT1059=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header28224); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1059_tree = (Object)adaptor.create(DEFAULT1059);
							adaptor.addChild(root_0, DEFAULT1059_tree);
							}

							pushFollow(FOLLOW_number_literal_in_column_data_type_header28226);
							number_literal1060=number_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal1060.getTree());

							}
							break;

					}

					}

					}
					break;
				case 13 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2083:5: ( DATE_SYM ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2083:5: ( DATE_SYM ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2083:8: DATE_SYM ( null_or_notnull )? ( DEFAULT TEXT_STRING )?
					{
					DATE_SYM1061=(Token)match(input,DATE_SYM,FOLLOW_DATE_SYM_in_column_data_type_header28240); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DATE_SYM1061_tree = (Object)adaptor.create(DATE_SYM1061);
					adaptor.addChild(root_0, DATE_SYM1061_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2083:17: ( null_or_notnull )?
					int alt363=2;
					int LA363_0 = input.LA(1);
					if ( (LA363_0==NOT_SYM||LA363_0==NULL_SYM) ) {
						alt363=1;
					}
					switch (alt363) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2083:18: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header28243);
							null_or_notnull1062=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1062.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2083:36: ( DEFAULT TEXT_STRING )?
					int alt364=2;
					int LA364_0 = input.LA(1);
					if ( (LA364_0==DEFAULT) ) {
						alt364=1;
					}
					switch (alt364) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2083:37: DEFAULT TEXT_STRING
							{
							DEFAULT1063=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header28248); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1063_tree = (Object)adaptor.create(DEFAULT1063);
							adaptor.addChild(root_0, DEFAULT1063_tree);
							}

							TEXT_STRING1064=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_column_data_type_header28250); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TEXT_STRING1064_tree = (Object)adaptor.create(TEXT_STRING1064);
							adaptor.addChild(root_0, TEXT_STRING1064_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 14 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2084:5: ( TIME_SYM ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2084:5: ( TIME_SYM ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2084:8: TIME_SYM ( null_or_notnull )? ( DEFAULT TEXT_STRING )?
					{
					TIME_SYM1065=(Token)match(input,TIME_SYM,FOLLOW_TIME_SYM_in_column_data_type_header28264); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TIME_SYM1065_tree = (Object)adaptor.create(TIME_SYM1065);
					adaptor.addChild(root_0, TIME_SYM1065_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2084:17: ( null_or_notnull )?
					int alt365=2;
					int LA365_0 = input.LA(1);
					if ( (LA365_0==NOT_SYM||LA365_0==NULL_SYM) ) {
						alt365=1;
					}
					switch (alt365) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2084:18: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header28267);
							null_or_notnull1066=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1066.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2084:36: ( DEFAULT TEXT_STRING )?
					int alt366=2;
					int LA366_0 = input.LA(1);
					if ( (LA366_0==DEFAULT) ) {
						alt366=1;
					}
					switch (alt366) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2084:37: DEFAULT TEXT_STRING
							{
							DEFAULT1067=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header28272); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1067_tree = (Object)adaptor.create(DEFAULT1067);
							adaptor.addChild(root_0, DEFAULT1067_tree);
							}

							TEXT_STRING1068=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_column_data_type_header28274); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TEXT_STRING1068_tree = (Object)adaptor.create(TEXT_STRING1068);
							adaptor.addChild(root_0, TEXT_STRING1068_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 15 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2085:5: ( TIMESTAMP ( null_or_notnull )? ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING ) )? )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2085:5: ( TIMESTAMP ( null_or_notnull )? ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING ) )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2085:8: TIMESTAMP ( null_or_notnull )? ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING ) )?
					{
					TIMESTAMP1069=(Token)match(input,TIMESTAMP,FOLLOW_TIMESTAMP_in_column_data_type_header28288); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TIMESTAMP1069_tree = (Object)adaptor.create(TIMESTAMP1069);
					adaptor.addChild(root_0, TIMESTAMP1069_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2085:18: ( null_or_notnull )?
					int alt367=2;
					int LA367_0 = input.LA(1);
					if ( (LA367_0==NOT_SYM||LA367_0==NULL_SYM) ) {
						alt367=1;
					}
					switch (alt367) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2085:19: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header28291);
							null_or_notnull1070=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1070.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2085:37: ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING ) )?
					int alt368=2;
					int LA368_0 = input.LA(1);
					if ( (LA368_0==DEFAULT) ) {
						alt368=1;
					}
					switch (alt368) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2085:38: DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING )
							{
							DEFAULT1071=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header28296); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1071_tree = (Object)adaptor.create(DEFAULT1071);
							adaptor.addChild(root_0, DEFAULT1071_tree);
							}

							set1072=input.LT(1);
							if ( input.LA(1)==CURRENT_TIMESTAMP||input.LA(1)==TEXT_STRING ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1072));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					}

					}
					break;
				case 16 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2086:5: ( DATETIME ( null_or_notnull )? ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING ) )? )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2086:5: ( DATETIME ( null_or_notnull )? ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING ) )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2086:8: DATETIME ( null_or_notnull )? ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING ) )?
					{
					DATETIME1073=(Token)match(input,DATETIME,FOLLOW_DATETIME_in_column_data_type_header28316); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DATETIME1073_tree = (Object)adaptor.create(DATETIME1073);
					adaptor.addChild(root_0, DATETIME1073_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2086:17: ( null_or_notnull )?
					int alt369=2;
					int LA369_0 = input.LA(1);
					if ( (LA369_0==NOT_SYM||LA369_0==NULL_SYM) ) {
						alt369=1;
					}
					switch (alt369) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2086:18: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header28319);
							null_or_notnull1074=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1074.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2086:36: ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING ) )?
					int alt370=2;
					int LA370_0 = input.LA(1);
					if ( (LA370_0==DEFAULT) ) {
						alt370=1;
					}
					switch (alt370) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2086:37: DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING )
							{
							DEFAULT1075=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header28324); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1075_tree = (Object)adaptor.create(DEFAULT1075);
							adaptor.addChild(root_0, DEFAULT1075_tree);
							}

							set1076=input.LT(1);
							if ( input.LA(1)==CURRENT_TIMESTAMP||input.LA(1)==TEXT_STRING ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1076));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					}

					}
					break;
				case 17 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2087:5: ( YEAR ( null_or_notnull )? ( DEFAULT INTEGER_NUM )? )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2087:5: ( YEAR ( null_or_notnull )? ( DEFAULT INTEGER_NUM )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2087:8: YEAR ( null_or_notnull )? ( DEFAULT INTEGER_NUM )?
					{
					YEAR1077=(Token)match(input,YEAR,FOLLOW_YEAR_in_column_data_type_header28344); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					YEAR1077_tree = (Object)adaptor.create(YEAR1077);
					adaptor.addChild(root_0, YEAR1077_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2087:13: ( null_or_notnull )?
					int alt371=2;
					int LA371_0 = input.LA(1);
					if ( (LA371_0==NOT_SYM||LA371_0==NULL_SYM) ) {
						alt371=1;
					}
					switch (alt371) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2087:14: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header28347);
							null_or_notnull1078=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1078.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2087:32: ( DEFAULT INTEGER_NUM )?
					int alt372=2;
					int LA372_0 = input.LA(1);
					if ( (LA372_0==DEFAULT) ) {
						alt372=1;
					}
					switch (alt372) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2087:33: DEFAULT INTEGER_NUM
							{
							DEFAULT1079=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header28352); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1079_tree = (Object)adaptor.create(DEFAULT1079);
							adaptor.addChild(root_0, DEFAULT1079_tree);
							}

							INTEGER_NUM1080=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_column_data_type_header28354); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							INTEGER_NUM1080_tree = (Object)adaptor.create(INTEGER_NUM1080);
							adaptor.addChild(root_0, INTEGER_NUM1080_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 18 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2088:5: ( CHAR ( LPAREN length RPAREN )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2088:5: ( CHAR ( LPAREN length RPAREN )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2088:8: CHAR ( LPAREN length RPAREN )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )?
					{
					CHAR1081=(Token)match(input,CHAR,FOLLOW_CHAR_in_column_data_type_header28368); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CHAR1081_tree = (Object)adaptor.create(CHAR1081);
					adaptor.addChild(root_0, CHAR1081_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2088:15: ( LPAREN length RPAREN )?
					int alt373=2;
					int LA373_0 = input.LA(1);
					if ( (LA373_0==LPAREN) ) {
						alt373=1;
					}
					switch (alt373) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2088:16: LPAREN length RPAREN
							{
							LPAREN1082=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header28373); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN1082_tree = (Object)adaptor.create(LPAREN1082);
							adaptor.addChild(root_0, LPAREN1082_tree);
							}

							pushFollow(FOLLOW_length_in_column_data_type_header28375);
							length1083=length();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, length1083.getTree());

							RPAREN1084=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header28377); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN1084_tree = (Object)adaptor.create(RPAREN1084);
							adaptor.addChild(root_0, RPAREN1084_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2088:39: ( CHARACTER_SYM SET_SYM charset_name )?
					int alt374=2;
					int LA374_0 = input.LA(1);
					if ( (LA374_0==CHARACTER_SYM) ) {
						alt374=1;
					}
					switch (alt374) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2088:40: CHARACTER_SYM SET_SYM charset_name
							{
							CHARACTER_SYM1085=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_column_data_type_header28382); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CHARACTER_SYM1085_tree = (Object)adaptor.create(CHARACTER_SYM1085);
							adaptor.addChild(root_0, CHARACTER_SYM1085_tree);
							}

							SET_SYM1086=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_column_data_type_header28384); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							SET_SYM1086_tree = (Object)adaptor.create(SET_SYM1086);
							adaptor.addChild(root_0, SET_SYM1086_tree);
							}

							pushFollow(FOLLOW_charset_name_in_column_data_type_header28386);
							charset_name1087=charset_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name1087.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2088:77: ( COLLATE_SYM collation_name )?
					int alt375=2;
					int LA375_0 = input.LA(1);
					if ( (LA375_0==COLLATE_SYM) ) {
						alt375=1;
					}
					switch (alt375) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2088:78: COLLATE_SYM collation_name
							{
							COLLATE_SYM1088=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_column_data_type_header28391); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLLATE_SYM1088_tree = (Object)adaptor.create(COLLATE_SYM1088);
							adaptor.addChild(root_0, COLLATE_SYM1088_tree);
							}

							pushFollow(FOLLOW_collation_name_in_column_data_type_header28393);
							collation_name1089=collation_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name1089.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2088:107: ( null_or_notnull )?
					int alt376=2;
					int LA376_0 = input.LA(1);
					if ( (LA376_0==NOT_SYM||LA376_0==NULL_SYM) ) {
						alt376=1;
					}
					switch (alt376) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2088:108: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header28398);
							null_or_notnull1090=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1090.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2088:126: ( DEFAULT TEXT_STRING )?
					int alt377=2;
					int LA377_0 = input.LA(1);
					if ( (LA377_0==DEFAULT) ) {
						alt377=1;
					}
					switch (alt377) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2088:127: DEFAULT TEXT_STRING
							{
							DEFAULT1091=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header28403); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1091_tree = (Object)adaptor.create(DEFAULT1091);
							adaptor.addChild(root_0, DEFAULT1091_tree);
							}

							TEXT_STRING1092=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_column_data_type_header28405); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TEXT_STRING1092_tree = (Object)adaptor.create(TEXT_STRING1092);
							adaptor.addChild(root_0, TEXT_STRING1092_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 19 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2089:5: ( VARCHAR LPAREN length RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2089:5: ( VARCHAR LPAREN length RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2089:8: VARCHAR LPAREN length RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )?
					{
					VARCHAR1093=(Token)match(input,VARCHAR,FOLLOW_VARCHAR_in_column_data_type_header28419); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					VARCHAR1093_tree = (Object)adaptor.create(VARCHAR1093);
					adaptor.addChild(root_0, VARCHAR1093_tree);
					}

					LPAREN1094=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header28421); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1094_tree = (Object)adaptor.create(LPAREN1094);
					adaptor.addChild(root_0, LPAREN1094_tree);
					}

					pushFollow(FOLLOW_length_in_column_data_type_header28423);
					length1095=length();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, length1095.getTree());

					RPAREN1096=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header28425); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1096_tree = (Object)adaptor.create(RPAREN1096);
					adaptor.addChild(root_0, RPAREN1096_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2089:39: ( CHARACTER_SYM SET_SYM charset_name )?
					int alt378=2;
					int LA378_0 = input.LA(1);
					if ( (LA378_0==CHARACTER_SYM) ) {
						alt378=1;
					}
					switch (alt378) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2089:40: CHARACTER_SYM SET_SYM charset_name
							{
							CHARACTER_SYM1097=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_column_data_type_header28430); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CHARACTER_SYM1097_tree = (Object)adaptor.create(CHARACTER_SYM1097);
							adaptor.addChild(root_0, CHARACTER_SYM1097_tree);
							}

							SET_SYM1098=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_column_data_type_header28432); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							SET_SYM1098_tree = (Object)adaptor.create(SET_SYM1098);
							adaptor.addChild(root_0, SET_SYM1098_tree);
							}

							pushFollow(FOLLOW_charset_name_in_column_data_type_header28434);
							charset_name1099=charset_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name1099.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2089:77: ( COLLATE_SYM collation_name )?
					int alt379=2;
					int LA379_0 = input.LA(1);
					if ( (LA379_0==COLLATE_SYM) ) {
						alt379=1;
					}
					switch (alt379) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2089:78: COLLATE_SYM collation_name
							{
							COLLATE_SYM1100=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_column_data_type_header28439); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLLATE_SYM1100_tree = (Object)adaptor.create(COLLATE_SYM1100);
							adaptor.addChild(root_0, COLLATE_SYM1100_tree);
							}

							pushFollow(FOLLOW_collation_name_in_column_data_type_header28441);
							collation_name1101=collation_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name1101.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2089:107: ( null_or_notnull )?
					int alt380=2;
					int LA380_0 = input.LA(1);
					if ( (LA380_0==NOT_SYM||LA380_0==NULL_SYM) ) {
						alt380=1;
					}
					switch (alt380) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2089:108: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header28446);
							null_or_notnull1102=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1102.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2089:126: ( DEFAULT TEXT_STRING )?
					int alt381=2;
					int LA381_0 = input.LA(1);
					if ( (LA381_0==DEFAULT) ) {
						alt381=1;
					}
					switch (alt381) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2089:127: DEFAULT TEXT_STRING
							{
							DEFAULT1103=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header28451); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1103_tree = (Object)adaptor.create(DEFAULT1103);
							adaptor.addChild(root_0, DEFAULT1103_tree);
							}

							TEXT_STRING1104=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_column_data_type_header28453); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TEXT_STRING1104_tree = (Object)adaptor.create(TEXT_STRING1104);
							adaptor.addChild(root_0, TEXT_STRING1104_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 20 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2090:5: ( BINARY ( LPAREN length RPAREN )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2090:5: ( BINARY ( LPAREN length RPAREN )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2090:8: BINARY ( LPAREN length RPAREN )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )?
					{
					BINARY1105=(Token)match(input,BINARY,FOLLOW_BINARY_in_column_data_type_header28467); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BINARY1105_tree = (Object)adaptor.create(BINARY1105);
					adaptor.addChild(root_0, BINARY1105_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2090:17: ( LPAREN length RPAREN )?
					int alt382=2;
					int LA382_0 = input.LA(1);
					if ( (LA382_0==LPAREN) ) {
						alt382=1;
					}
					switch (alt382) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2090:18: LPAREN length RPAREN
							{
							LPAREN1106=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header28472); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN1106_tree = (Object)adaptor.create(LPAREN1106);
							adaptor.addChild(root_0, LPAREN1106_tree);
							}

							pushFollow(FOLLOW_length_in_column_data_type_header28474);
							length1107=length();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, length1107.getTree());

							RPAREN1108=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header28476); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN1108_tree = (Object)adaptor.create(RPAREN1108);
							adaptor.addChild(root_0, RPAREN1108_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2090:41: ( null_or_notnull )?
					int alt383=2;
					int LA383_0 = input.LA(1);
					if ( (LA383_0==NOT_SYM||LA383_0==NULL_SYM) ) {
						alt383=1;
					}
					switch (alt383) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2090:42: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header28481);
							null_or_notnull1109=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1109.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2090:60: ( DEFAULT TEXT_STRING )?
					int alt384=2;
					int LA384_0 = input.LA(1);
					if ( (LA384_0==DEFAULT) ) {
						alt384=1;
					}
					switch (alt384) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2090:61: DEFAULT TEXT_STRING
							{
							DEFAULT1110=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header28486); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1110_tree = (Object)adaptor.create(DEFAULT1110);
							adaptor.addChild(root_0, DEFAULT1110_tree);
							}

							TEXT_STRING1111=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_column_data_type_header28488); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TEXT_STRING1111_tree = (Object)adaptor.create(TEXT_STRING1111);
							adaptor.addChild(root_0, TEXT_STRING1111_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 21 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2091:5: ( VARBINARY LPAREN length RPAREN ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2091:5: ( VARBINARY LPAREN length RPAREN ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2091:8: VARBINARY LPAREN length RPAREN ( null_or_notnull )? ( DEFAULT TEXT_STRING )?
					{
					VARBINARY1112=(Token)match(input,VARBINARY,FOLLOW_VARBINARY_in_column_data_type_header28502); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					VARBINARY1112_tree = (Object)adaptor.create(VARBINARY1112);
					adaptor.addChild(root_0, VARBINARY1112_tree);
					}

					LPAREN1113=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header28504); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1113_tree = (Object)adaptor.create(LPAREN1113);
					adaptor.addChild(root_0, LPAREN1113_tree);
					}

					pushFollow(FOLLOW_length_in_column_data_type_header28506);
					length1114=length();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, length1114.getTree());

					RPAREN1115=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header28508); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1115_tree = (Object)adaptor.create(RPAREN1115);
					adaptor.addChild(root_0, RPAREN1115_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2091:39: ( null_or_notnull )?
					int alt385=2;
					int LA385_0 = input.LA(1);
					if ( (LA385_0==NOT_SYM||LA385_0==NULL_SYM) ) {
						alt385=1;
					}
					switch (alt385) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2091:40: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header28511);
							null_or_notnull1116=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1116.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2091:58: ( DEFAULT TEXT_STRING )?
					int alt386=2;
					int LA386_0 = input.LA(1);
					if ( (LA386_0==DEFAULT) ) {
						alt386=1;
					}
					switch (alt386) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2091:59: DEFAULT TEXT_STRING
							{
							DEFAULT1117=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header28516); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1117_tree = (Object)adaptor.create(DEFAULT1117);
							adaptor.addChild(root_0, DEFAULT1117_tree);
							}

							TEXT_STRING1118=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_column_data_type_header28518); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TEXT_STRING1118_tree = (Object)adaptor.create(TEXT_STRING1118);
							adaptor.addChild(root_0, TEXT_STRING1118_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 22 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2092:5: ( TINYBLOB ( null_or_notnull )? )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2092:5: ( TINYBLOB ( null_or_notnull )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2092:8: TINYBLOB ( null_or_notnull )?
					{
					TINYBLOB1119=(Token)match(input,TINYBLOB,FOLLOW_TINYBLOB_in_column_data_type_header28532); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TINYBLOB1119_tree = (Object)adaptor.create(TINYBLOB1119);
					adaptor.addChild(root_0, TINYBLOB1119_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2092:17: ( null_or_notnull )?
					int alt387=2;
					int LA387_0 = input.LA(1);
					if ( (LA387_0==NOT_SYM||LA387_0==NULL_SYM) ) {
						alt387=1;
					}
					switch (alt387) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2092:18: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header28535);
							null_or_notnull1120=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1120.getTree());

							}
							break;

					}

					}

					}
					break;
				case 23 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2093:5: ( BLOB_SYM ( null_or_notnull )? )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2093:5: ( BLOB_SYM ( null_or_notnull )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2093:8: BLOB_SYM ( null_or_notnull )?
					{
					BLOB_SYM1121=(Token)match(input,BLOB_SYM,FOLLOW_BLOB_SYM_in_column_data_type_header28549); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BLOB_SYM1121_tree = (Object)adaptor.create(BLOB_SYM1121);
					adaptor.addChild(root_0, BLOB_SYM1121_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2093:17: ( null_or_notnull )?
					int alt388=2;
					int LA388_0 = input.LA(1);
					if ( (LA388_0==NOT_SYM||LA388_0==NULL_SYM) ) {
						alt388=1;
					}
					switch (alt388) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2093:18: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header28552);
							null_or_notnull1122=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1122.getTree());

							}
							break;

					}

					}

					}
					break;
				case 24 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2094:5: ( MEDIUMBLOB ( null_or_notnull )? )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2094:5: ( MEDIUMBLOB ( null_or_notnull )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2094:8: MEDIUMBLOB ( null_or_notnull )?
					{
					MEDIUMBLOB1123=(Token)match(input,MEDIUMBLOB,FOLLOW_MEDIUMBLOB_in_column_data_type_header28566); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MEDIUMBLOB1123_tree = (Object)adaptor.create(MEDIUMBLOB1123);
					adaptor.addChild(root_0, MEDIUMBLOB1123_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2094:19: ( null_or_notnull )?
					int alt389=2;
					int LA389_0 = input.LA(1);
					if ( (LA389_0==NOT_SYM||LA389_0==NULL_SYM) ) {
						alt389=1;
					}
					switch (alt389) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2094:20: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header28569);
							null_or_notnull1124=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1124.getTree());

							}
							break;

					}

					}

					}
					break;
				case 25 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2095:5: ( LONGBLOB ( null_or_notnull )? )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2095:5: ( LONGBLOB ( null_or_notnull )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2095:8: LONGBLOB ( null_or_notnull )?
					{
					LONGBLOB1125=(Token)match(input,LONGBLOB,FOLLOW_LONGBLOB_in_column_data_type_header28583); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LONGBLOB1125_tree = (Object)adaptor.create(LONGBLOB1125);
					adaptor.addChild(root_0, LONGBLOB1125_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2095:17: ( null_or_notnull )?
					int alt390=2;
					int LA390_0 = input.LA(1);
					if ( (LA390_0==NOT_SYM||LA390_0==NULL_SYM) ) {
						alt390=1;
					}
					switch (alt390) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2095:18: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header28586);
							null_or_notnull1126=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1126.getTree());

							}
							break;

					}

					}

					}
					break;
				case 26 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2096:5: ( TINYTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2096:5: ( TINYTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2096:8: TINYTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )?
					{
					TINYTEXT1127=(Token)match(input,TINYTEXT,FOLLOW_TINYTEXT_in_column_data_type_header28600); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TINYTEXT1127_tree = (Object)adaptor.create(TINYTEXT1127);
					adaptor.addChild(root_0, TINYTEXT1127_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2096:19: ( BINARY )?
					int alt391=2;
					int LA391_0 = input.LA(1);
					if ( (LA391_0==BINARY) ) {
						alt391=1;
					}
					switch (alt391) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2096:20: BINARY
							{
							BINARY1128=(Token)match(input,BINARY,FOLLOW_BINARY_in_column_data_type_header28605); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							BINARY1128_tree = (Object)adaptor.create(BINARY1128);
							adaptor.addChild(root_0, BINARY1128_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2096:29: ( CHARACTER_SYM SET_SYM charset_name )?
					int alt392=2;
					int LA392_0 = input.LA(1);
					if ( (LA392_0==CHARACTER_SYM) ) {
						alt392=1;
					}
					switch (alt392) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2096:30: CHARACTER_SYM SET_SYM charset_name
							{
							CHARACTER_SYM1129=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_column_data_type_header28610); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CHARACTER_SYM1129_tree = (Object)adaptor.create(CHARACTER_SYM1129);
							adaptor.addChild(root_0, CHARACTER_SYM1129_tree);
							}

							SET_SYM1130=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_column_data_type_header28612); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							SET_SYM1130_tree = (Object)adaptor.create(SET_SYM1130);
							adaptor.addChild(root_0, SET_SYM1130_tree);
							}

							pushFollow(FOLLOW_charset_name_in_column_data_type_header28614);
							charset_name1131=charset_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name1131.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2096:67: ( COLLATE_SYM collation_name )?
					int alt393=2;
					int LA393_0 = input.LA(1);
					if ( (LA393_0==COLLATE_SYM) ) {
						alt393=1;
					}
					switch (alt393) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2096:68: COLLATE_SYM collation_name
							{
							COLLATE_SYM1132=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_column_data_type_header28619); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLLATE_SYM1132_tree = (Object)adaptor.create(COLLATE_SYM1132);
							adaptor.addChild(root_0, COLLATE_SYM1132_tree);
							}

							pushFollow(FOLLOW_collation_name_in_column_data_type_header28621);
							collation_name1133=collation_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name1133.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2096:97: ( null_or_notnull )?
					int alt394=2;
					int LA394_0 = input.LA(1);
					if ( (LA394_0==NOT_SYM||LA394_0==NULL_SYM) ) {
						alt394=1;
					}
					switch (alt394) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2096:98: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header28626);
							null_or_notnull1134=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1134.getTree());

							}
							break;

					}

					}

					}
					break;
				case 27 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2097:5: ( TEXT_SYM ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2097:5: ( TEXT_SYM ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2097:8: TEXT_SYM ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )?
					{
					TEXT_SYM1135=(Token)match(input,TEXT_SYM,FOLLOW_TEXT_SYM_in_column_data_type_header28640); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_SYM1135_tree = (Object)adaptor.create(TEXT_SYM1135);
					adaptor.addChild(root_0, TEXT_SYM1135_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2097:19: ( BINARY )?
					int alt395=2;
					int LA395_0 = input.LA(1);
					if ( (LA395_0==BINARY) ) {
						alt395=1;
					}
					switch (alt395) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2097:20: BINARY
							{
							BINARY1136=(Token)match(input,BINARY,FOLLOW_BINARY_in_column_data_type_header28645); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							BINARY1136_tree = (Object)adaptor.create(BINARY1136);
							adaptor.addChild(root_0, BINARY1136_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2097:29: ( CHARACTER_SYM SET_SYM charset_name )?
					int alt396=2;
					int LA396_0 = input.LA(1);
					if ( (LA396_0==CHARACTER_SYM) ) {
						alt396=1;
					}
					switch (alt396) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2097:30: CHARACTER_SYM SET_SYM charset_name
							{
							CHARACTER_SYM1137=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_column_data_type_header28650); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CHARACTER_SYM1137_tree = (Object)adaptor.create(CHARACTER_SYM1137);
							adaptor.addChild(root_0, CHARACTER_SYM1137_tree);
							}

							SET_SYM1138=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_column_data_type_header28652); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							SET_SYM1138_tree = (Object)adaptor.create(SET_SYM1138);
							adaptor.addChild(root_0, SET_SYM1138_tree);
							}

							pushFollow(FOLLOW_charset_name_in_column_data_type_header28654);
							charset_name1139=charset_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name1139.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2097:67: ( COLLATE_SYM collation_name )?
					int alt397=2;
					int LA397_0 = input.LA(1);
					if ( (LA397_0==COLLATE_SYM) ) {
						alt397=1;
					}
					switch (alt397) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2097:68: COLLATE_SYM collation_name
							{
							COLLATE_SYM1140=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_column_data_type_header28659); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLLATE_SYM1140_tree = (Object)adaptor.create(COLLATE_SYM1140);
							adaptor.addChild(root_0, COLLATE_SYM1140_tree);
							}

							pushFollow(FOLLOW_collation_name_in_column_data_type_header28661);
							collation_name1141=collation_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name1141.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2097:97: ( null_or_notnull )?
					int alt398=2;
					int LA398_0 = input.LA(1);
					if ( (LA398_0==NOT_SYM||LA398_0==NULL_SYM) ) {
						alt398=1;
					}
					switch (alt398) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2097:98: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header28666);
							null_or_notnull1142=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1142.getTree());

							}
							break;

					}

					}

					}
					break;
				case 28 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2098:5: ( MEDIUMTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2098:5: ( MEDIUMTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2098:8: MEDIUMTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )?
					{
					MEDIUMTEXT1143=(Token)match(input,MEDIUMTEXT,FOLLOW_MEDIUMTEXT_in_column_data_type_header28680); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MEDIUMTEXT1143_tree = (Object)adaptor.create(MEDIUMTEXT1143);
					adaptor.addChild(root_0, MEDIUMTEXT1143_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2098:19: ( BINARY )?
					int alt399=2;
					int LA399_0 = input.LA(1);
					if ( (LA399_0==BINARY) ) {
						alt399=1;
					}
					switch (alt399) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2098:20: BINARY
							{
							BINARY1144=(Token)match(input,BINARY,FOLLOW_BINARY_in_column_data_type_header28683); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							BINARY1144_tree = (Object)adaptor.create(BINARY1144);
							adaptor.addChild(root_0, BINARY1144_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2098:29: ( CHARACTER_SYM SET_SYM charset_name )?
					int alt400=2;
					int LA400_0 = input.LA(1);
					if ( (LA400_0==CHARACTER_SYM) ) {
						alt400=1;
					}
					switch (alt400) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2098:30: CHARACTER_SYM SET_SYM charset_name
							{
							CHARACTER_SYM1145=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_column_data_type_header28688); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CHARACTER_SYM1145_tree = (Object)adaptor.create(CHARACTER_SYM1145);
							adaptor.addChild(root_0, CHARACTER_SYM1145_tree);
							}

							SET_SYM1146=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_column_data_type_header28690); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							SET_SYM1146_tree = (Object)adaptor.create(SET_SYM1146);
							adaptor.addChild(root_0, SET_SYM1146_tree);
							}

							pushFollow(FOLLOW_charset_name_in_column_data_type_header28692);
							charset_name1147=charset_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name1147.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2098:67: ( COLLATE_SYM collation_name )?
					int alt401=2;
					int LA401_0 = input.LA(1);
					if ( (LA401_0==COLLATE_SYM) ) {
						alt401=1;
					}
					switch (alt401) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2098:68: COLLATE_SYM collation_name
							{
							COLLATE_SYM1148=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_column_data_type_header28697); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLLATE_SYM1148_tree = (Object)adaptor.create(COLLATE_SYM1148);
							adaptor.addChild(root_0, COLLATE_SYM1148_tree);
							}

							pushFollow(FOLLOW_collation_name_in_column_data_type_header28699);
							collation_name1149=collation_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name1149.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2098:97: ( null_or_notnull )?
					int alt402=2;
					int LA402_0 = input.LA(1);
					if ( (LA402_0==NOT_SYM||LA402_0==NULL_SYM) ) {
						alt402=1;
					}
					switch (alt402) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2098:98: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header28704);
							null_or_notnull1150=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1150.getTree());

							}
							break;

					}

					}

					}
					break;
				case 29 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2099:5: ( LONGTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2099:5: ( LONGTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2099:8: LONGTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )?
					{
					LONGTEXT1151=(Token)match(input,LONGTEXT,FOLLOW_LONGTEXT_in_column_data_type_header28718); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LONGTEXT1151_tree = (Object)adaptor.create(LONGTEXT1151);
					adaptor.addChild(root_0, LONGTEXT1151_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2099:19: ( BINARY )?
					int alt403=2;
					int LA403_0 = input.LA(1);
					if ( (LA403_0==BINARY) ) {
						alt403=1;
					}
					switch (alt403) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2099:20: BINARY
							{
							BINARY1152=(Token)match(input,BINARY,FOLLOW_BINARY_in_column_data_type_header28723); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							BINARY1152_tree = (Object)adaptor.create(BINARY1152);
							adaptor.addChild(root_0, BINARY1152_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2099:29: ( CHARACTER_SYM SET_SYM charset_name )?
					int alt404=2;
					int LA404_0 = input.LA(1);
					if ( (LA404_0==CHARACTER_SYM) ) {
						alt404=1;
					}
					switch (alt404) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2099:30: CHARACTER_SYM SET_SYM charset_name
							{
							CHARACTER_SYM1153=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_column_data_type_header28728); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CHARACTER_SYM1153_tree = (Object)adaptor.create(CHARACTER_SYM1153);
							adaptor.addChild(root_0, CHARACTER_SYM1153_tree);
							}

							SET_SYM1154=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_column_data_type_header28730); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							SET_SYM1154_tree = (Object)adaptor.create(SET_SYM1154);
							adaptor.addChild(root_0, SET_SYM1154_tree);
							}

							pushFollow(FOLLOW_charset_name_in_column_data_type_header28732);
							charset_name1155=charset_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name1155.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2099:67: ( COLLATE_SYM collation_name )?
					int alt405=2;
					int LA405_0 = input.LA(1);
					if ( (LA405_0==COLLATE_SYM) ) {
						alt405=1;
					}
					switch (alt405) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2099:68: COLLATE_SYM collation_name
							{
							COLLATE_SYM1156=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_column_data_type_header28737); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLLATE_SYM1156_tree = (Object)adaptor.create(COLLATE_SYM1156);
							adaptor.addChild(root_0, COLLATE_SYM1156_tree);
							}

							pushFollow(FOLLOW_collation_name_in_column_data_type_header28739);
							collation_name1157=collation_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name1157.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2099:97: ( null_or_notnull )?
					int alt406=2;
					int LA406_0 = input.LA(1);
					if ( (LA406_0==NOT_SYM||LA406_0==NULL_SYM) ) {
						alt406=1;
					}
					switch (alt406) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2099:98: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header28744);
							null_or_notnull1158=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1158.getTree());

							}
							break;

					}

					}

					}
					break;
				case 30 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2100:5: ( ENUM LPAREN TEXT_STRING ( COMMA TEXT_STRING )* RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2100:5: ( ENUM LPAREN TEXT_STRING ( COMMA TEXT_STRING )* RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2100:8: ENUM LPAREN TEXT_STRING ( COMMA TEXT_STRING )* RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )?
					{
					ENUM1159=(Token)match(input,ENUM,FOLLOW_ENUM_in_column_data_type_header28758); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ENUM1159_tree = (Object)adaptor.create(ENUM1159);
					adaptor.addChild(root_0, ENUM1159_tree);
					}

					LPAREN1160=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header28763); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1160_tree = (Object)adaptor.create(LPAREN1160);
					adaptor.addChild(root_0, LPAREN1160_tree);
					}

					TEXT_STRING1161=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_column_data_type_header28765); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING1161_tree = (Object)adaptor.create(TEXT_STRING1161);
					adaptor.addChild(root_0, TEXT_STRING1161_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2100:35: ( COMMA TEXT_STRING )*
					loop407:
					while (true) {
						int alt407=2;
						int LA407_0 = input.LA(1);
						if ( (LA407_0==COMMA) ) {
							alt407=1;
						}

						switch (alt407) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2100:36: COMMA TEXT_STRING
							{
							COMMA1162=(Token)match(input,COMMA,FOLLOW_COMMA_in_column_data_type_header28768); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA1162_tree = (Object)adaptor.create(COMMA1162);
							adaptor.addChild(root_0, COMMA1162_tree);
							}

							TEXT_STRING1163=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_column_data_type_header28770); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TEXT_STRING1163_tree = (Object)adaptor.create(TEXT_STRING1163);
							adaptor.addChild(root_0, TEXT_STRING1163_tree);
							}

							}
							break;

						default :
							break loop407;
						}
					}

					RPAREN1164=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header28774); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1164_tree = (Object)adaptor.create(RPAREN1164);
					adaptor.addChild(root_0, RPAREN1164_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2100:63: ( CHARACTER_SYM SET_SYM charset_name )?
					int alt408=2;
					int LA408_0 = input.LA(1);
					if ( (LA408_0==CHARACTER_SYM) ) {
						alt408=1;
					}
					switch (alt408) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2100:64: CHARACTER_SYM SET_SYM charset_name
							{
							CHARACTER_SYM1165=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_column_data_type_header28777); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CHARACTER_SYM1165_tree = (Object)adaptor.create(CHARACTER_SYM1165);
							adaptor.addChild(root_0, CHARACTER_SYM1165_tree);
							}

							SET_SYM1166=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_column_data_type_header28779); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							SET_SYM1166_tree = (Object)adaptor.create(SET_SYM1166);
							adaptor.addChild(root_0, SET_SYM1166_tree);
							}

							pushFollow(FOLLOW_charset_name_in_column_data_type_header28781);
							charset_name1167=charset_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name1167.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2100:101: ( COLLATE_SYM collation_name )?
					int alt409=2;
					int LA409_0 = input.LA(1);
					if ( (LA409_0==COLLATE_SYM) ) {
						alt409=1;
					}
					switch (alt409) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2100:102: COLLATE_SYM collation_name
							{
							COLLATE_SYM1168=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_column_data_type_header28786); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLLATE_SYM1168_tree = (Object)adaptor.create(COLLATE_SYM1168);
							adaptor.addChild(root_0, COLLATE_SYM1168_tree);
							}

							pushFollow(FOLLOW_collation_name_in_column_data_type_header28788);
							collation_name1169=collation_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name1169.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2100:131: ( null_or_notnull )?
					int alt410=2;
					int LA410_0 = input.LA(1);
					if ( (LA410_0==NOT_SYM||LA410_0==NULL_SYM) ) {
						alt410=1;
					}
					switch (alt410) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2100:132: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header28793);
							null_or_notnull1170=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1170.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2100:150: ( DEFAULT TEXT_STRING )?
					int alt411=2;
					int LA411_0 = input.LA(1);
					if ( (LA411_0==DEFAULT) ) {
						alt411=1;
					}
					switch (alt411) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2100:151: DEFAULT TEXT_STRING
							{
							DEFAULT1171=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header28798); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1171_tree = (Object)adaptor.create(DEFAULT1171);
							adaptor.addChild(root_0, DEFAULT1171_tree);
							}

							TEXT_STRING1172=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_column_data_type_header28800); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TEXT_STRING1172_tree = (Object)adaptor.create(TEXT_STRING1172);
							adaptor.addChild(root_0, TEXT_STRING1172_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 31 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2101:5: ( SET_SYM LPAREN TEXT_STRING ( COMMA TEXT_STRING )* RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2101:5: ( SET_SYM LPAREN TEXT_STRING ( COMMA TEXT_STRING )* RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2101:8: SET_SYM LPAREN TEXT_STRING ( COMMA TEXT_STRING )* RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )?
					{
					SET_SYM1173=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_column_data_type_header28814); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SET_SYM1173_tree = (Object)adaptor.create(SET_SYM1173);
					adaptor.addChild(root_0, SET_SYM1173_tree);
					}

					LPAREN1174=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header28816); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1174_tree = (Object)adaptor.create(LPAREN1174);
					adaptor.addChild(root_0, LPAREN1174_tree);
					}

					TEXT_STRING1175=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_column_data_type_header28818); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING1175_tree = (Object)adaptor.create(TEXT_STRING1175);
					adaptor.addChild(root_0, TEXT_STRING1175_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2101:35: ( COMMA TEXT_STRING )*
					loop412:
					while (true) {
						int alt412=2;
						int LA412_0 = input.LA(1);
						if ( (LA412_0==COMMA) ) {
							alt412=1;
						}

						switch (alt412) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2101:36: COMMA TEXT_STRING
							{
							COMMA1176=(Token)match(input,COMMA,FOLLOW_COMMA_in_column_data_type_header28821); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA1176_tree = (Object)adaptor.create(COMMA1176);
							adaptor.addChild(root_0, COMMA1176_tree);
							}

							TEXT_STRING1177=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_column_data_type_header28823); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TEXT_STRING1177_tree = (Object)adaptor.create(TEXT_STRING1177);
							adaptor.addChild(root_0, TEXT_STRING1177_tree);
							}

							}
							break;

						default :
							break loop412;
						}
					}

					RPAREN1178=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header28827); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1178_tree = (Object)adaptor.create(RPAREN1178);
					adaptor.addChild(root_0, RPAREN1178_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2101:63: ( CHARACTER_SYM SET_SYM charset_name )?
					int alt413=2;
					int LA413_0 = input.LA(1);
					if ( (LA413_0==CHARACTER_SYM) ) {
						alt413=1;
					}
					switch (alt413) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2101:64: CHARACTER_SYM SET_SYM charset_name
							{
							CHARACTER_SYM1179=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_column_data_type_header28830); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CHARACTER_SYM1179_tree = (Object)adaptor.create(CHARACTER_SYM1179);
							adaptor.addChild(root_0, CHARACTER_SYM1179_tree);
							}

							SET_SYM1180=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_column_data_type_header28832); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							SET_SYM1180_tree = (Object)adaptor.create(SET_SYM1180);
							adaptor.addChild(root_0, SET_SYM1180_tree);
							}

							pushFollow(FOLLOW_charset_name_in_column_data_type_header28834);
							charset_name1181=charset_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name1181.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2101:101: ( COLLATE_SYM collation_name )?
					int alt414=2;
					int LA414_0 = input.LA(1);
					if ( (LA414_0==COLLATE_SYM) ) {
						alt414=1;
					}
					switch (alt414) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2101:102: COLLATE_SYM collation_name
							{
							COLLATE_SYM1182=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_column_data_type_header28839); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLLATE_SYM1182_tree = (Object)adaptor.create(COLLATE_SYM1182);
							adaptor.addChild(root_0, COLLATE_SYM1182_tree);
							}

							pushFollow(FOLLOW_collation_name_in_column_data_type_header28841);
							collation_name1183=collation_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name1183.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2101:131: ( null_or_notnull )?
					int alt415=2;
					int LA415_0 = input.LA(1);
					if ( (LA415_0==NOT_SYM||LA415_0==NULL_SYM) ) {
						alt415=1;
					}
					switch (alt415) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2101:132: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header28846);
							null_or_notnull1184=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1184.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2101:150: ( DEFAULT TEXT_STRING )?
					int alt416=2;
					int LA416_0 = input.LA(1);
					if ( (LA416_0==DEFAULT) ) {
						alt416=1;
					}
					switch (alt416) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2101:151: DEFAULT TEXT_STRING
							{
							DEFAULT1185=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header28851); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1185_tree = (Object)adaptor.create(DEFAULT1185);
							adaptor.addChild(root_0, DEFAULT1185_tree);
							}

							TEXT_STRING1186=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_column_data_type_header28853); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TEXT_STRING1186_tree = (Object)adaptor.create(TEXT_STRING1186);
							adaptor.addChild(root_0, TEXT_STRING1186_tree);
							}

							}
							break;

					}

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "column_data_type_header"


	public static class index_column_name_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "index_column_name"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2105:1: index_column_name : column_name ( LPAREN INTEGER_NUM RPAREN )? ( ASC | DESC )? ;
	public final SQLParser.index_column_name_return index_column_name() throws RecognitionException {
		SQLParser.index_column_name_return retval = new SQLParser.index_column_name_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LPAREN1188=null;
		Token INTEGER_NUM1189=null;
		Token RPAREN1190=null;
		Token set1191=null;
		ParserRuleReturnScope column_name1187 =null;

		Object LPAREN1188_tree=null;
		Object INTEGER_NUM1189_tree=null;
		Object RPAREN1190_tree=null;
		Object set1191_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2105:18: ( column_name ( LPAREN INTEGER_NUM RPAREN )? ( ASC | DESC )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2106:3: column_name ( LPAREN INTEGER_NUM RPAREN )? ( ASC | DESC )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_column_name_in_index_column_name28871);
			column_name1187=column_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1187.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2106:15: ( LPAREN INTEGER_NUM RPAREN )?
			int alt418=2;
			int LA418_0 = input.LA(1);
			if ( (LA418_0==LPAREN) ) {
				alt418=1;
			}
			switch (alt418) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2106:16: LPAREN INTEGER_NUM RPAREN
					{
					LPAREN1188=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_index_column_name28874); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1188_tree = (Object)adaptor.create(LPAREN1188);
					adaptor.addChild(root_0, LPAREN1188_tree);
					}

					INTEGER_NUM1189=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_index_column_name28876); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM1189_tree = (Object)adaptor.create(INTEGER_NUM1189);
					adaptor.addChild(root_0, INTEGER_NUM1189_tree);
					}

					RPAREN1190=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_index_column_name28878); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1190_tree = (Object)adaptor.create(RPAREN1190);
					adaptor.addChild(root_0, RPAREN1190_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2106:44: ( ASC | DESC )?
			int alt419=2;
			int LA419_0 = input.LA(1);
			if ( (LA419_0==ASC||LA419_0==DESC) ) {
				alt419=1;
			}
			switch (alt419) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
					{
					set1191=input.LT(1);
					if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1191));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "index_column_name"


	public static class reference_definition_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "reference_definition"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2109:1: reference_definition : REFERENCES table_name LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( ( MATCH FULL ) | ( MATCH PARTIAL ) | ( MATCH SIMPLE_SYM ) )? ( ON DELETE_SYM reference_option )? ( ON UPDATE reference_option )? ;
	public final SQLParser.reference_definition_return reference_definition() throws RecognitionException {
		SQLParser.reference_definition_return retval = new SQLParser.reference_definition_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token REFERENCES1192=null;
		Token LPAREN1194=null;
		Token COMMA1196=null;
		Token RPAREN1198=null;
		Token MATCH1199=null;
		Token FULL1200=null;
		Token MATCH1201=null;
		Token PARTIAL1202=null;
		Token MATCH1203=null;
		Token SIMPLE_SYM1204=null;
		Token ON1205=null;
		Token DELETE_SYM1206=null;
		Token ON1208=null;
		Token UPDATE1209=null;
		ParserRuleReturnScope table_name1193 =null;
		ParserRuleReturnScope index_column_name1195 =null;
		ParserRuleReturnScope index_column_name1197 =null;
		ParserRuleReturnScope reference_option1207 =null;
		ParserRuleReturnScope reference_option1210 =null;

		Object REFERENCES1192_tree=null;
		Object LPAREN1194_tree=null;
		Object COMMA1196_tree=null;
		Object RPAREN1198_tree=null;
		Object MATCH1199_tree=null;
		Object FULL1200_tree=null;
		Object MATCH1201_tree=null;
		Object PARTIAL1202_tree=null;
		Object MATCH1203_tree=null;
		Object SIMPLE_SYM1204_tree=null;
		Object ON1205_tree=null;
		Object DELETE_SYM1206_tree=null;
		Object ON1208_tree=null;
		Object UPDATE1209_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2109:21: ( REFERENCES table_name LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( ( MATCH FULL ) | ( MATCH PARTIAL ) | ( MATCH SIMPLE_SYM ) )? ( ON DELETE_SYM reference_option )? ( ON UPDATE reference_option )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2110:3: REFERENCES table_name LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( ( MATCH FULL ) | ( MATCH PARTIAL ) | ( MATCH SIMPLE_SYM ) )? ( ON DELETE_SYM reference_option )? ( ON UPDATE reference_option )?
			{
			root_0 = (Object)adaptor.nil();


			REFERENCES1192=(Token)match(input,REFERENCES,FOLLOW_REFERENCES_in_reference_definition28899); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			REFERENCES1192_tree = (Object)adaptor.create(REFERENCES1192);
			adaptor.addChild(root_0, REFERENCES1192_tree);
			}

			pushFollow(FOLLOW_table_name_in_reference_definition28901);
			table_name1193=table_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1193.getTree());

			LPAREN1194=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_reference_definition28903); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN1194_tree = (Object)adaptor.create(LPAREN1194);
			adaptor.addChild(root_0, LPAREN1194_tree);
			}

			pushFollow(FOLLOW_index_column_name_in_reference_definition28905);
			index_column_name1195=index_column_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name1195.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2110:50: ( COMMA index_column_name )*
			loop420:
			while (true) {
				int alt420=2;
				int LA420_0 = input.LA(1);
				if ( (LA420_0==COMMA) ) {
					alt420=1;
				}

				switch (alt420) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2110:51: COMMA index_column_name
					{
					COMMA1196=(Token)match(input,COMMA,FOLLOW_COMMA_in_reference_definition28908); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA1196_tree = (Object)adaptor.create(COMMA1196);
					adaptor.addChild(root_0, COMMA1196_tree);
					}

					pushFollow(FOLLOW_index_column_name_in_reference_definition28910);
					index_column_name1197=index_column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name1197.getTree());

					}
					break;

				default :
					break loop420;
				}
			}

			RPAREN1198=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_reference_definition28914); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN1198_tree = (Object)adaptor.create(RPAREN1198);
			adaptor.addChild(root_0, RPAREN1198_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2111:3: ( ( MATCH FULL ) | ( MATCH PARTIAL ) | ( MATCH SIMPLE_SYM ) )?
			int alt421=4;
			int LA421_0 = input.LA(1);
			if ( (LA421_0==MATCH) ) {
				switch ( input.LA(2) ) {
					case FULL:
						{
						alt421=1;
						}
						break;
					case PARTIAL:
						{
						alt421=2;
						}
						break;
					case SIMPLE_SYM:
						{
						alt421=3;
						}
						break;
				}
			}
			switch (alt421) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2111:5: ( MATCH FULL )
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2111:5: ( MATCH FULL )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2111:6: MATCH FULL
					{
					MATCH1199=(Token)match(input,MATCH,FOLLOW_MATCH_in_reference_definition28921); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MATCH1199_tree = (Object)adaptor.create(MATCH1199);
					adaptor.addChild(root_0, MATCH1199_tree);
					}

					FULL1200=(Token)match(input,FULL,FOLLOW_FULL_in_reference_definition28923); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					FULL1200_tree = (Object)adaptor.create(FULL1200);
					adaptor.addChild(root_0, FULL1200_tree);
					}

					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2111:20: ( MATCH PARTIAL )
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2111:20: ( MATCH PARTIAL )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2111:21: MATCH PARTIAL
					{
					MATCH1201=(Token)match(input,MATCH,FOLLOW_MATCH_in_reference_definition28929); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MATCH1201_tree = (Object)adaptor.create(MATCH1201);
					adaptor.addChild(root_0, MATCH1201_tree);
					}

					PARTIAL1202=(Token)match(input,PARTIAL,FOLLOW_PARTIAL_in_reference_definition28931); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PARTIAL1202_tree = (Object)adaptor.create(PARTIAL1202);
					adaptor.addChild(root_0, PARTIAL1202_tree);
					}

					}

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2111:38: ( MATCH SIMPLE_SYM )
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2111:38: ( MATCH SIMPLE_SYM )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2111:39: MATCH SIMPLE_SYM
					{
					MATCH1203=(Token)match(input,MATCH,FOLLOW_MATCH_in_reference_definition28937); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MATCH1203_tree = (Object)adaptor.create(MATCH1203);
					adaptor.addChild(root_0, MATCH1203_tree);
					}

					SIMPLE_SYM1204=(Token)match(input,SIMPLE_SYM,FOLLOW_SIMPLE_SYM_in_reference_definition28939); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SIMPLE_SYM1204_tree = (Object)adaptor.create(SIMPLE_SYM1204);
					adaptor.addChild(root_0, SIMPLE_SYM1204_tree);
					}

					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2112:3: ( ON DELETE_SYM reference_option )?
			int alt422=2;
			int LA422_0 = input.LA(1);
			if ( (LA422_0==ON) ) {
				int LA422_1 = input.LA(2);
				if ( (LA422_1==DELETE_SYM) ) {
					alt422=1;
				}
			}
			switch (alt422) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2112:4: ON DELETE_SYM reference_option
					{
					ON1205=(Token)match(input,ON,FOLLOW_ON_in_reference_definition28948); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ON1205_tree = (Object)adaptor.create(ON1205);
					adaptor.addChild(root_0, ON1205_tree);
					}

					DELETE_SYM1206=(Token)match(input,DELETE_SYM,FOLLOW_DELETE_SYM_in_reference_definition28950); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DELETE_SYM1206_tree = (Object)adaptor.create(DELETE_SYM1206);
					adaptor.addChild(root_0, DELETE_SYM1206_tree);
					}

					pushFollow(FOLLOW_reference_option_in_reference_definition28952);
					reference_option1207=reference_option();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, reference_option1207.getTree());

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2113:3: ( ON UPDATE reference_option )?
			int alt423=2;
			int LA423_0 = input.LA(1);
			if ( (LA423_0==ON) ) {
				alt423=1;
			}
			switch (alt423) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2113:4: ON UPDATE reference_option
					{
					ON1208=(Token)match(input,ON,FOLLOW_ON_in_reference_definition28959); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ON1208_tree = (Object)adaptor.create(ON1208);
					adaptor.addChild(root_0, ON1208_tree);
					}

					UPDATE1209=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_reference_definition28961); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					UPDATE1209_tree = (Object)adaptor.create(UPDATE1209);
					adaptor.addChild(root_0, UPDATE1209_tree);
					}

					pushFollow(FOLLOW_reference_option_in_reference_definition28963);
					reference_option1210=reference_option();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, reference_option1210.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "reference_definition"


	public static class reference_option_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "reference_option"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2115:1: reference_option : ( ( RESTRICT ) | ( CASCADE ) | ( SET_SYM NULL_SYM ) | ( NO_SYM ACTION ) );
	public final SQLParser.reference_option_return reference_option() throws RecognitionException {
		SQLParser.reference_option_return retval = new SQLParser.reference_option_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token RESTRICT1211=null;
		Token CASCADE1212=null;
		Token SET_SYM1213=null;
		Token NULL_SYM1214=null;
		Token NO_SYM1215=null;
		Token ACTION1216=null;

		Object RESTRICT1211_tree=null;
		Object CASCADE1212_tree=null;
		Object SET_SYM1213_tree=null;
		Object NULL_SYM1214_tree=null;
		Object NO_SYM1215_tree=null;
		Object ACTION1216_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2115:17: ( ( RESTRICT ) | ( CASCADE ) | ( SET_SYM NULL_SYM ) | ( NO_SYM ACTION ) )
			int alt424=4;
			switch ( input.LA(1) ) {
			case RESTRICT:
				{
				alt424=1;
				}
				break;
			case CASCADE:
				{
				alt424=2;
				}
				break;
			case SET_SYM:
				{
				alt424=3;
				}
				break;
			case NO_SYM:
				{
				alt424=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 424, 0, input);
				throw nvae;
			}
			switch (alt424) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2116:3: ( RESTRICT )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2116:3: ( RESTRICT )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2116:4: RESTRICT
					{
					RESTRICT1211=(Token)match(input,RESTRICT,FOLLOW_RESTRICT_in_reference_option28975); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RESTRICT1211_tree = (Object)adaptor.create(RESTRICT1211);
					adaptor.addChild(root_0, RESTRICT1211_tree);
					}

					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2116:16: ( CASCADE )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2116:16: ( CASCADE )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2116:17: CASCADE
					{
					CASCADE1212=(Token)match(input,CASCADE,FOLLOW_CASCADE_in_reference_option28981); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CASCADE1212_tree = (Object)adaptor.create(CASCADE1212);
					adaptor.addChild(root_0, CASCADE1212_tree);
					}

					}

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2116:28: ( SET_SYM NULL_SYM )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2116:28: ( SET_SYM NULL_SYM )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2116:29: SET_SYM NULL_SYM
					{
					SET_SYM1213=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_reference_option28987); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SET_SYM1213_tree = (Object)adaptor.create(SET_SYM1213);
					adaptor.addChild(root_0, SET_SYM1213_tree);
					}

					NULL_SYM1214=(Token)match(input,NULL_SYM,FOLLOW_NULL_SYM_in_reference_option28989); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NULL_SYM1214_tree = (Object)adaptor.create(NULL_SYM1214);
					adaptor.addChild(root_0, NULL_SYM1214_tree);
					}

					}

					}
					break;
				case 4 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2116:49: ( NO_SYM ACTION )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2116:49: ( NO_SYM ACTION )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2116:50: NO_SYM ACTION
					{
					NO_SYM1215=(Token)match(input,NO_SYM,FOLLOW_NO_SYM_in_reference_option28995); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NO_SYM1215_tree = (Object)adaptor.create(NO_SYM1215);
					adaptor.addChild(root_0, NO_SYM1215_tree);
					}

					ACTION1216=(Token)match(input,ACTION,FOLLOW_ACTION_in_reference_option28997); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ACTION1216_tree = (Object)adaptor.create(ACTION1216);
					adaptor.addChild(root_0, ACTION1216_tree);
					}

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "reference_option"


	public static class table_options_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "table_options"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2119:1: table_options : table_option ( ( COMMA )? table_option )* ;
	public final SQLParser.table_options_return table_options() throws RecognitionException {
		SQLParser.table_options_return retval = new SQLParser.table_options_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token COMMA1218=null;
		ParserRuleReturnScope table_option1217 =null;
		ParserRuleReturnScope table_option1219 =null;

		Object COMMA1218_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2119:14: ( table_option ( ( COMMA )? table_option )* )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2120:3: table_option ( ( COMMA )? table_option )*
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_table_option_in_table_options29008);
			table_option1217=table_option();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_option1217.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2120:16: ( ( COMMA )? table_option )*
			loop426:
			while (true) {
				int alt426=2;
				alt426 = dfa426.predict(input);
				switch (alt426) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2120:17: ( COMMA )? table_option
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2120:17: ( COMMA )?
					int alt425=2;
					int LA425_0 = input.LA(1);
					if ( (LA425_0==COMMA) ) {
						alt425=1;
					}
					switch (alt425) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2120:19: COMMA
							{
							COMMA1218=(Token)match(input,COMMA,FOLLOW_COMMA_in_table_options29013); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA1218_tree = (Object)adaptor.create(COMMA1218);
							adaptor.addChild(root_0, COMMA1218_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_table_option_in_table_options29018);
					table_option1219=table_option();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_option1219.getTree());

					}
					break;

				default :
					break loop426;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_options"


	public static class table_option_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "table_option"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2122:1: table_option : ( ( ENGINE_SYM ( EQ_SYM )? engine_name ) | ( AUTO_INCREMENT ( EQ_SYM )? INTEGER_NUM ) | ( AVG_ROW_LENGTH ( EQ_SYM )? INTEGER_NUM ) | ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ) | ( CHECKSUM_SYM ( EQ_SYM )? INTEGER_NUM ) | ( ( DEFAULT )? COLLATE_SYM ( EQ_SYM )? collation_name ) | ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING ) | ( CONNECTION_SYM ( EQ_SYM )? TEXT_STRING ) | ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING ) | ( DELAY_KEY_WRITE_SYM ( EQ_SYM )? INTEGER_NUM ) | ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING ) | ( INSERT_METHOD ( EQ_SYM )? ( NO_SYM | FIRST_SYM | LAST_SYM ) ) | ( KEY_BLOCK_SIZE ( EQ_SYM )? INTEGER_NUM ) | ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM ) | ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM ) | ( PACK_KEYS_SYM ( EQ_SYM )? ( INTEGER_NUM | DEFAULT ) ) | ( PASSWORD ( EQ_SYM )? TEXT_STRING ) | ( ROW_FORMAT_SYM ( EQ_SYM )? ( DEFAULT | DYNAMIC_SYM | FIXED_SYM | COMPRESSED_SYM | REDUNDANT_SYM | COMPACT_SYM ) ) | ( STATS_AUTO_RECALC ( EQ_SYM )? ( DEFAULT | INTEGER_NUM ) ) | ( STATS_PERSISTENT ( EQ_SYM )? ( DEFAULT | INTEGER_NUM ) ) | ( UNION_SYM ( EQ_SYM )? LPAREN table_name ( COMMA table_name )* RPAREN ) );
	public final SQLParser.table_option_return table_option() throws RecognitionException {
		SQLParser.table_option_return retval = new SQLParser.table_option_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token ENGINE_SYM1220=null;
		Token EQ_SYM1221=null;
		Token AUTO_INCREMENT1223=null;
		Token EQ_SYM1224=null;
		Token INTEGER_NUM1225=null;
		Token AVG_ROW_LENGTH1226=null;
		Token EQ_SYM1227=null;
		Token INTEGER_NUM1228=null;
		Token DEFAULT1229=null;
		Token CHARACTER_SYM1230=null;
		Token SET_SYM1231=null;
		Token EQ_SYM1232=null;
		Token CHECKSUM_SYM1234=null;
		Token EQ_SYM1235=null;
		Token INTEGER_NUM1236=null;
		Token DEFAULT1237=null;
		Token COLLATE_SYM1238=null;
		Token EQ_SYM1239=null;
		Token COMMENT_SYM1241=null;
		Token EQ_SYM1242=null;
		Token TEXT_STRING1243=null;
		Token CONNECTION_SYM1244=null;
		Token EQ_SYM1245=null;
		Token TEXT_STRING1246=null;
		Token DATA_SYM1247=null;
		Token DIRECTORY_SYM1248=null;
		Token EQ_SYM1249=null;
		Token TEXT_STRING1250=null;
		Token DELAY_KEY_WRITE_SYM1251=null;
		Token EQ_SYM1252=null;
		Token INTEGER_NUM1253=null;
		Token INDEX_SYM1254=null;
		Token DIRECTORY_SYM1255=null;
		Token EQ_SYM1256=null;
		Token TEXT_STRING1257=null;
		Token INSERT_METHOD1258=null;
		Token EQ_SYM1259=null;
		Token set1260=null;
		Token KEY_BLOCK_SIZE1261=null;
		Token EQ_SYM1262=null;
		Token INTEGER_NUM1263=null;
		Token MAX_ROWS1264=null;
		Token EQ_SYM1265=null;
		Token INTEGER_NUM1266=null;
		Token MIN_ROWS1267=null;
		Token EQ_SYM1268=null;
		Token INTEGER_NUM1269=null;
		Token PACK_KEYS_SYM1270=null;
		Token EQ_SYM1271=null;
		Token set1272=null;
		Token PASSWORD1273=null;
		Token EQ_SYM1274=null;
		Token TEXT_STRING1275=null;
		Token ROW_FORMAT_SYM1276=null;
		Token EQ_SYM1277=null;
		Token set1278=null;
		Token STATS_AUTO_RECALC1279=null;
		Token EQ_SYM1280=null;
		Token set1281=null;
		Token STATS_PERSISTENT1282=null;
		Token EQ_SYM1283=null;
		Token set1284=null;
		Token UNION_SYM1285=null;
		Token EQ_SYM1286=null;
		Token LPAREN1287=null;
		Token COMMA1289=null;
		Token RPAREN1291=null;
		ParserRuleReturnScope engine_name1222 =null;
		ParserRuleReturnScope charset_name1233 =null;
		ParserRuleReturnScope collation_name1240 =null;
		ParserRuleReturnScope table_name1288 =null;
		ParserRuleReturnScope table_name1290 =null;

		Object ENGINE_SYM1220_tree=null;
		Object EQ_SYM1221_tree=null;
		Object AUTO_INCREMENT1223_tree=null;
		Object EQ_SYM1224_tree=null;
		Object INTEGER_NUM1225_tree=null;
		Object AVG_ROW_LENGTH1226_tree=null;
		Object EQ_SYM1227_tree=null;
		Object INTEGER_NUM1228_tree=null;
		Object DEFAULT1229_tree=null;
		Object CHARACTER_SYM1230_tree=null;
		Object SET_SYM1231_tree=null;
		Object EQ_SYM1232_tree=null;
		Object CHECKSUM_SYM1234_tree=null;
		Object EQ_SYM1235_tree=null;
		Object INTEGER_NUM1236_tree=null;
		Object DEFAULT1237_tree=null;
		Object COLLATE_SYM1238_tree=null;
		Object EQ_SYM1239_tree=null;
		Object COMMENT_SYM1241_tree=null;
		Object EQ_SYM1242_tree=null;
		Object TEXT_STRING1243_tree=null;
		Object CONNECTION_SYM1244_tree=null;
		Object EQ_SYM1245_tree=null;
		Object TEXT_STRING1246_tree=null;
		Object DATA_SYM1247_tree=null;
		Object DIRECTORY_SYM1248_tree=null;
		Object EQ_SYM1249_tree=null;
		Object TEXT_STRING1250_tree=null;
		Object DELAY_KEY_WRITE_SYM1251_tree=null;
		Object EQ_SYM1252_tree=null;
		Object INTEGER_NUM1253_tree=null;
		Object INDEX_SYM1254_tree=null;
		Object DIRECTORY_SYM1255_tree=null;
		Object EQ_SYM1256_tree=null;
		Object TEXT_STRING1257_tree=null;
		Object INSERT_METHOD1258_tree=null;
		Object EQ_SYM1259_tree=null;
		Object set1260_tree=null;
		Object KEY_BLOCK_SIZE1261_tree=null;
		Object EQ_SYM1262_tree=null;
		Object INTEGER_NUM1263_tree=null;
		Object MAX_ROWS1264_tree=null;
		Object EQ_SYM1265_tree=null;
		Object INTEGER_NUM1266_tree=null;
		Object MIN_ROWS1267_tree=null;
		Object EQ_SYM1268_tree=null;
		Object INTEGER_NUM1269_tree=null;
		Object PACK_KEYS_SYM1270_tree=null;
		Object EQ_SYM1271_tree=null;
		Object set1272_tree=null;
		Object PASSWORD1273_tree=null;
		Object EQ_SYM1274_tree=null;
		Object TEXT_STRING1275_tree=null;
		Object ROW_FORMAT_SYM1276_tree=null;
		Object EQ_SYM1277_tree=null;
		Object set1278_tree=null;
		Object STATS_AUTO_RECALC1279_tree=null;
		Object EQ_SYM1280_tree=null;
		Object set1281_tree=null;
		Object STATS_PERSISTENT1282_tree=null;
		Object EQ_SYM1283_tree=null;
		Object set1284_tree=null;
		Object UNION_SYM1285_tree=null;
		Object EQ_SYM1286_tree=null;
		Object LPAREN1287_tree=null;
		Object COMMA1289_tree=null;
		Object RPAREN1291_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2122:13: ( ( ENGINE_SYM ( EQ_SYM )? engine_name ) | ( AUTO_INCREMENT ( EQ_SYM )? INTEGER_NUM ) | ( AVG_ROW_LENGTH ( EQ_SYM )? INTEGER_NUM ) | ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ) | ( CHECKSUM_SYM ( EQ_SYM )? INTEGER_NUM ) | ( ( DEFAULT )? COLLATE_SYM ( EQ_SYM )? collation_name ) | ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING ) | ( CONNECTION_SYM ( EQ_SYM )? TEXT_STRING ) | ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING ) | ( DELAY_KEY_WRITE_SYM ( EQ_SYM )? INTEGER_NUM ) | ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING ) | ( INSERT_METHOD ( EQ_SYM )? ( NO_SYM | FIRST_SYM | LAST_SYM ) ) | ( KEY_BLOCK_SIZE ( EQ_SYM )? INTEGER_NUM ) | ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM ) | ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM ) | ( PACK_KEYS_SYM ( EQ_SYM )? ( INTEGER_NUM | DEFAULT ) ) | ( PASSWORD ( EQ_SYM )? TEXT_STRING ) | ( ROW_FORMAT_SYM ( EQ_SYM )? ( DEFAULT | DYNAMIC_SYM | FIXED_SYM | COMPRESSED_SYM | REDUNDANT_SYM | COMPACT_SYM ) ) | ( STATS_AUTO_RECALC ( EQ_SYM )? ( DEFAULT | INTEGER_NUM ) ) | ( STATS_PERSISTENT ( EQ_SYM )? ( DEFAULT | INTEGER_NUM ) ) | ( UNION_SYM ( EQ_SYM )? LPAREN table_name ( COMMA table_name )* RPAREN ) )
			int alt451=21;
			switch ( input.LA(1) ) {
			case ENGINE_SYM:
				{
				alt451=1;
				}
				break;
			case AUTO_INCREMENT:
				{
				alt451=2;
				}
				break;
			case AVG_ROW_LENGTH:
				{
				alt451=3;
				}
				break;
			case DEFAULT:
				{
				int LA451_4 = input.LA(2);
				if ( (LA451_4==CHARACTER_SYM) ) {
					alt451=4;
				}
				else if ( (LA451_4==COLLATE_SYM) ) {
					alt451=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 451, 4, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CHARACTER_SYM:
				{
				alt451=4;
				}
				break;
			case CHECKSUM_SYM:
				{
				alt451=5;
				}
				break;
			case COLLATE_SYM:
				{
				alt451=6;
				}
				break;
			case COMMENT_SYM:
				{
				alt451=7;
				}
				break;
			case CONNECTION_SYM:
				{
				alt451=8;
				}
				break;
			case DATA_SYM:
				{
				alt451=9;
				}
				break;
			case DELAY_KEY_WRITE_SYM:
				{
				alt451=10;
				}
				break;
			case INDEX_SYM:
				{
				alt451=11;
				}
				break;
			case INSERT_METHOD:
				{
				alt451=12;
				}
				break;
			case KEY_BLOCK_SIZE:
				{
				alt451=13;
				}
				break;
			case MAX_ROWS:
				{
				alt451=14;
				}
				break;
			case MIN_ROWS:
				{
				alt451=15;
				}
				break;
			case PACK_KEYS_SYM:
				{
				alt451=16;
				}
				break;
			case PASSWORD:
				{
				alt451=17;
				}
				break;
			case ROW_FORMAT_SYM:
				{
				alt451=18;
				}
				break;
			case STATS_AUTO_RECALC:
				{
				alt451=19;
				}
				break;
			case STATS_PERSISTENT:
				{
				alt451=20;
				}
				break;
			case UNION_SYM:
				{
				alt451=21;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 451, 0, input);
				throw nvae;
			}
			switch (alt451) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2123:5: ( ENGINE_SYM ( EQ_SYM )? engine_name )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2123:5: ( ENGINE_SYM ( EQ_SYM )? engine_name )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2123:8: ENGINE_SYM ( EQ_SYM )? engine_name
					{
					ENGINE_SYM1220=(Token)match(input,ENGINE_SYM,FOLLOW_ENGINE_SYM_in_table_option29034); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ENGINE_SYM1220_tree = (Object)adaptor.create(ENGINE_SYM1220);
					adaptor.addChild(root_0, ENGINE_SYM1220_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2123:19: ( EQ_SYM )?
					int alt427=2;
					int LA427_0 = input.LA(1);
					if ( (LA427_0==EQ_SYM) ) {
						alt427=1;
					}
					switch (alt427) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2123:20: EQ_SYM
							{
							EQ_SYM1221=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option29037); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1221_tree = (Object)adaptor.create(EQ_SYM1221);
							adaptor.addChild(root_0, EQ_SYM1221_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_engine_name_in_table_option29041);
					engine_name1222=engine_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, engine_name1222.getTree());

					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2124:5: ( AUTO_INCREMENT ( EQ_SYM )? INTEGER_NUM )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2124:5: ( AUTO_INCREMENT ( EQ_SYM )? INTEGER_NUM )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2124:8: AUTO_INCREMENT ( EQ_SYM )? INTEGER_NUM
					{
					AUTO_INCREMENT1223=(Token)match(input,AUTO_INCREMENT,FOLLOW_AUTO_INCREMENT_in_table_option29053); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					AUTO_INCREMENT1223_tree = (Object)adaptor.create(AUTO_INCREMENT1223);
					adaptor.addChild(root_0, AUTO_INCREMENT1223_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2124:23: ( EQ_SYM )?
					int alt428=2;
					int LA428_0 = input.LA(1);
					if ( (LA428_0==EQ_SYM) ) {
						alt428=1;
					}
					switch (alt428) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2124:24: EQ_SYM
							{
							EQ_SYM1224=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option29056); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1224_tree = (Object)adaptor.create(EQ_SYM1224);
							adaptor.addChild(root_0, EQ_SYM1224_tree);
							}

							}
							break;

					}

					INTEGER_NUM1225=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_table_option29060); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM1225_tree = (Object)adaptor.create(INTEGER_NUM1225);
					adaptor.addChild(root_0, INTEGER_NUM1225_tree);
					}

					}

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2125:5: ( AVG_ROW_LENGTH ( EQ_SYM )? INTEGER_NUM )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2125:5: ( AVG_ROW_LENGTH ( EQ_SYM )? INTEGER_NUM )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2125:8: AVG_ROW_LENGTH ( EQ_SYM )? INTEGER_NUM
					{
					AVG_ROW_LENGTH1226=(Token)match(input,AVG_ROW_LENGTH,FOLLOW_AVG_ROW_LENGTH_in_table_option29072); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					AVG_ROW_LENGTH1226_tree = (Object)adaptor.create(AVG_ROW_LENGTH1226);
					adaptor.addChild(root_0, AVG_ROW_LENGTH1226_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2125:23: ( EQ_SYM )?
					int alt429=2;
					int LA429_0 = input.LA(1);
					if ( (LA429_0==EQ_SYM) ) {
						alt429=1;
					}
					switch (alt429) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2125:24: EQ_SYM
							{
							EQ_SYM1227=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option29075); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1227_tree = (Object)adaptor.create(EQ_SYM1227);
							adaptor.addChild(root_0, EQ_SYM1227_tree);
							}

							}
							break;

					}

					INTEGER_NUM1228=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_table_option29079); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM1228_tree = (Object)adaptor.create(INTEGER_NUM1228);
					adaptor.addChild(root_0, INTEGER_NUM1228_tree);
					}

					}

					}
					break;
				case 4 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2126:5: ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2126:5: ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2126:8: ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2126:8: ( DEFAULT )?
					int alt430=2;
					int LA430_0 = input.LA(1);
					if ( (LA430_0==DEFAULT) ) {
						alt430=1;
					}
					switch (alt430) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2126:9: DEFAULT
							{
							DEFAULT1229=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_table_option29092); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1229_tree = (Object)adaptor.create(DEFAULT1229);
							adaptor.addChild(root_0, DEFAULT1229_tree);
							}

							}
							break;

					}

					CHARACTER_SYM1230=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_table_option29096); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CHARACTER_SYM1230_tree = (Object)adaptor.create(CHARACTER_SYM1230);
					adaptor.addChild(root_0, CHARACTER_SYM1230_tree);
					}

					SET_SYM1231=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_table_option29098); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SET_SYM1231_tree = (Object)adaptor.create(SET_SYM1231);
					adaptor.addChild(root_0, SET_SYM1231_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2126:41: ( EQ_SYM )?
					int alt431=2;
					int LA431_0 = input.LA(1);
					if ( (LA431_0==EQ_SYM) ) {
						alt431=1;
					}
					switch (alt431) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2126:42: EQ_SYM
							{
							EQ_SYM1232=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option29101); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1232_tree = (Object)adaptor.create(EQ_SYM1232);
							adaptor.addChild(root_0, EQ_SYM1232_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_charset_name_in_table_option29105);
					charset_name1233=charset_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name1233.getTree());

					}

					}
					break;
				case 5 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2127:5: ( CHECKSUM_SYM ( EQ_SYM )? INTEGER_NUM )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2127:5: ( CHECKSUM_SYM ( EQ_SYM )? INTEGER_NUM )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2127:8: CHECKSUM_SYM ( EQ_SYM )? INTEGER_NUM
					{
					CHECKSUM_SYM1234=(Token)match(input,CHECKSUM_SYM,FOLLOW_CHECKSUM_SYM_in_table_option29117); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CHECKSUM_SYM1234_tree = (Object)adaptor.create(CHECKSUM_SYM1234);
					adaptor.addChild(root_0, CHECKSUM_SYM1234_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2127:21: ( EQ_SYM )?
					int alt432=2;
					int LA432_0 = input.LA(1);
					if ( (LA432_0==EQ_SYM) ) {
						alt432=1;
					}
					switch (alt432) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2127:22: EQ_SYM
							{
							EQ_SYM1235=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option29120); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1235_tree = (Object)adaptor.create(EQ_SYM1235);
							adaptor.addChild(root_0, EQ_SYM1235_tree);
							}

							}
							break;

					}

					INTEGER_NUM1236=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_table_option29124); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM1236_tree = (Object)adaptor.create(INTEGER_NUM1236);
					adaptor.addChild(root_0, INTEGER_NUM1236_tree);
					}

					}

					}
					break;
				case 6 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2128:5: ( ( DEFAULT )? COLLATE_SYM ( EQ_SYM )? collation_name )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2128:5: ( ( DEFAULT )? COLLATE_SYM ( EQ_SYM )? collation_name )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2128:8: ( DEFAULT )? COLLATE_SYM ( EQ_SYM )? collation_name
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2128:8: ( DEFAULT )?
					int alt433=2;
					int LA433_0 = input.LA(1);
					if ( (LA433_0==DEFAULT) ) {
						alt433=1;
					}
					switch (alt433) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2128:9: DEFAULT
							{
							DEFAULT1237=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_table_option29137); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1237_tree = (Object)adaptor.create(DEFAULT1237);
							adaptor.addChild(root_0, DEFAULT1237_tree);
							}

							}
							break;

					}

					COLLATE_SYM1238=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_table_option29141); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COLLATE_SYM1238_tree = (Object)adaptor.create(COLLATE_SYM1238);
					adaptor.addChild(root_0, COLLATE_SYM1238_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2128:31: ( EQ_SYM )?
					int alt434=2;
					int LA434_0 = input.LA(1);
					if ( (LA434_0==EQ_SYM) ) {
						alt434=1;
					}
					switch (alt434) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2128:32: EQ_SYM
							{
							EQ_SYM1239=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option29144); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1239_tree = (Object)adaptor.create(EQ_SYM1239);
							adaptor.addChild(root_0, EQ_SYM1239_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_collation_name_in_table_option29148);
					collation_name1240=collation_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name1240.getTree());

					}

					}
					break;
				case 7 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2129:5: ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2129:5: ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2129:8: COMMENT_SYM ( EQ_SYM )? TEXT_STRING
					{
					COMMENT_SYM1241=(Token)match(input,COMMENT_SYM,FOLLOW_COMMENT_SYM_in_table_option29160); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMENT_SYM1241_tree = (Object)adaptor.create(COMMENT_SYM1241);
					adaptor.addChild(root_0, COMMENT_SYM1241_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2129:20: ( EQ_SYM )?
					int alt435=2;
					int LA435_0 = input.LA(1);
					if ( (LA435_0==EQ_SYM) ) {
						alt435=1;
					}
					switch (alt435) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2129:21: EQ_SYM
							{
							EQ_SYM1242=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option29163); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1242_tree = (Object)adaptor.create(EQ_SYM1242);
							adaptor.addChild(root_0, EQ_SYM1242_tree);
							}

							}
							break;

					}

					TEXT_STRING1243=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_table_option29167); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING1243_tree = (Object)adaptor.create(TEXT_STRING1243);
					adaptor.addChild(root_0, TEXT_STRING1243_tree);
					}

					}

					}
					break;
				case 8 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2130:5: ( CONNECTION_SYM ( EQ_SYM )? TEXT_STRING )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2130:5: ( CONNECTION_SYM ( EQ_SYM )? TEXT_STRING )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2130:8: CONNECTION_SYM ( EQ_SYM )? TEXT_STRING
					{
					CONNECTION_SYM1244=(Token)match(input,CONNECTION_SYM,FOLLOW_CONNECTION_SYM_in_table_option29179); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CONNECTION_SYM1244_tree = (Object)adaptor.create(CONNECTION_SYM1244);
					adaptor.addChild(root_0, CONNECTION_SYM1244_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2130:23: ( EQ_SYM )?
					int alt436=2;
					int LA436_0 = input.LA(1);
					if ( (LA436_0==EQ_SYM) ) {
						alt436=1;
					}
					switch (alt436) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2130:24: EQ_SYM
							{
							EQ_SYM1245=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option29182); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1245_tree = (Object)adaptor.create(EQ_SYM1245);
							adaptor.addChild(root_0, EQ_SYM1245_tree);
							}

							}
							break;

					}

					TEXT_STRING1246=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_table_option29186); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING1246_tree = (Object)adaptor.create(TEXT_STRING1246);
					adaptor.addChild(root_0, TEXT_STRING1246_tree);
					}

					}

					}
					break;
				case 9 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2131:5: ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2131:5: ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2131:8: DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING
					{
					DATA_SYM1247=(Token)match(input,DATA_SYM,FOLLOW_DATA_SYM_in_table_option29198); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DATA_SYM1247_tree = (Object)adaptor.create(DATA_SYM1247);
					adaptor.addChild(root_0, DATA_SYM1247_tree);
					}

					DIRECTORY_SYM1248=(Token)match(input,DIRECTORY_SYM,FOLLOW_DIRECTORY_SYM_in_table_option29200); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DIRECTORY_SYM1248_tree = (Object)adaptor.create(DIRECTORY_SYM1248);
					adaptor.addChild(root_0, DIRECTORY_SYM1248_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2131:31: ( EQ_SYM )?
					int alt437=2;
					int LA437_0 = input.LA(1);
					if ( (LA437_0==EQ_SYM) ) {
						alt437=1;
					}
					switch (alt437) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2131:32: EQ_SYM
							{
							EQ_SYM1249=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option29203); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1249_tree = (Object)adaptor.create(EQ_SYM1249);
							adaptor.addChild(root_0, EQ_SYM1249_tree);
							}

							}
							break;

					}

					TEXT_STRING1250=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_table_option29207); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING1250_tree = (Object)adaptor.create(TEXT_STRING1250);
					adaptor.addChild(root_0, TEXT_STRING1250_tree);
					}

					}

					}
					break;
				case 10 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2132:5: ( DELAY_KEY_WRITE_SYM ( EQ_SYM )? INTEGER_NUM )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2132:5: ( DELAY_KEY_WRITE_SYM ( EQ_SYM )? INTEGER_NUM )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2132:8: DELAY_KEY_WRITE_SYM ( EQ_SYM )? INTEGER_NUM
					{
					DELAY_KEY_WRITE_SYM1251=(Token)match(input,DELAY_KEY_WRITE_SYM,FOLLOW_DELAY_KEY_WRITE_SYM_in_table_option29219); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DELAY_KEY_WRITE_SYM1251_tree = (Object)adaptor.create(DELAY_KEY_WRITE_SYM1251);
					adaptor.addChild(root_0, DELAY_KEY_WRITE_SYM1251_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2132:28: ( EQ_SYM )?
					int alt438=2;
					int LA438_0 = input.LA(1);
					if ( (LA438_0==EQ_SYM) ) {
						alt438=1;
					}
					switch (alt438) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2132:29: EQ_SYM
							{
							EQ_SYM1252=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option29222); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1252_tree = (Object)adaptor.create(EQ_SYM1252);
							adaptor.addChild(root_0, EQ_SYM1252_tree);
							}

							}
							break;

					}

					INTEGER_NUM1253=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_table_option29226); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM1253_tree = (Object)adaptor.create(INTEGER_NUM1253);
					adaptor.addChild(root_0, INTEGER_NUM1253_tree);
					}

					}

					}
					break;
				case 11 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2133:5: ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2133:5: ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2133:8: INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING
					{
					INDEX_SYM1254=(Token)match(input,INDEX_SYM,FOLLOW_INDEX_SYM_in_table_option29238); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INDEX_SYM1254_tree = (Object)adaptor.create(INDEX_SYM1254);
					adaptor.addChild(root_0, INDEX_SYM1254_tree);
					}

					DIRECTORY_SYM1255=(Token)match(input,DIRECTORY_SYM,FOLLOW_DIRECTORY_SYM_in_table_option29240); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DIRECTORY_SYM1255_tree = (Object)adaptor.create(DIRECTORY_SYM1255);
					adaptor.addChild(root_0, DIRECTORY_SYM1255_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2133:32: ( EQ_SYM )?
					int alt439=2;
					int LA439_0 = input.LA(1);
					if ( (LA439_0==EQ_SYM) ) {
						alt439=1;
					}
					switch (alt439) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2133:33: EQ_SYM
							{
							EQ_SYM1256=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option29243); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1256_tree = (Object)adaptor.create(EQ_SYM1256);
							adaptor.addChild(root_0, EQ_SYM1256_tree);
							}

							}
							break;

					}

					TEXT_STRING1257=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_table_option29247); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING1257_tree = (Object)adaptor.create(TEXT_STRING1257);
					adaptor.addChild(root_0, TEXT_STRING1257_tree);
					}

					}

					}
					break;
				case 12 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2134:5: ( INSERT_METHOD ( EQ_SYM )? ( NO_SYM | FIRST_SYM | LAST_SYM ) )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2134:5: ( INSERT_METHOD ( EQ_SYM )? ( NO_SYM | FIRST_SYM | LAST_SYM ) )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2134:8: INSERT_METHOD ( EQ_SYM )? ( NO_SYM | FIRST_SYM | LAST_SYM )
					{
					INSERT_METHOD1258=(Token)match(input,INSERT_METHOD,FOLLOW_INSERT_METHOD_in_table_option29259); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INSERT_METHOD1258_tree = (Object)adaptor.create(INSERT_METHOD1258);
					adaptor.addChild(root_0, INSERT_METHOD1258_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2134:22: ( EQ_SYM )?
					int alt440=2;
					int LA440_0 = input.LA(1);
					if ( (LA440_0==EQ_SYM) ) {
						alt440=1;
					}
					switch (alt440) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2134:23: EQ_SYM
							{
							EQ_SYM1259=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option29262); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1259_tree = (Object)adaptor.create(EQ_SYM1259);
							adaptor.addChild(root_0, EQ_SYM1259_tree);
							}

							}
							break;

					}

					set1260=input.LT(1);
					if ( input.LA(1)==FIRST_SYM||input.LA(1)==LAST_SYM||input.LA(1)==NO_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1260));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}

					}
					break;
				case 13 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2135:5: ( KEY_BLOCK_SIZE ( EQ_SYM )? INTEGER_NUM )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2135:5: ( KEY_BLOCK_SIZE ( EQ_SYM )? INTEGER_NUM )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2135:8: KEY_BLOCK_SIZE ( EQ_SYM )? INTEGER_NUM
					{
					KEY_BLOCK_SIZE1261=(Token)match(input,KEY_BLOCK_SIZE,FOLLOW_KEY_BLOCK_SIZE_in_table_option29290); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KEY_BLOCK_SIZE1261_tree = (Object)adaptor.create(KEY_BLOCK_SIZE1261);
					adaptor.addChild(root_0, KEY_BLOCK_SIZE1261_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2135:23: ( EQ_SYM )?
					int alt441=2;
					int LA441_0 = input.LA(1);
					if ( (LA441_0==EQ_SYM) ) {
						alt441=1;
					}
					switch (alt441) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2135:24: EQ_SYM
							{
							EQ_SYM1262=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option29293); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1262_tree = (Object)adaptor.create(EQ_SYM1262);
							adaptor.addChild(root_0, EQ_SYM1262_tree);
							}

							}
							break;

					}

					INTEGER_NUM1263=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_table_option29297); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM1263_tree = (Object)adaptor.create(INTEGER_NUM1263);
					adaptor.addChild(root_0, INTEGER_NUM1263_tree);
					}

					}

					}
					break;
				case 14 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2136:5: ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2136:5: ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2136:8: MAX_ROWS ( EQ_SYM )? INTEGER_NUM
					{
					MAX_ROWS1264=(Token)match(input,MAX_ROWS,FOLLOW_MAX_ROWS_in_table_option29309); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MAX_ROWS1264_tree = (Object)adaptor.create(MAX_ROWS1264);
					adaptor.addChild(root_0, MAX_ROWS1264_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2136:17: ( EQ_SYM )?
					int alt442=2;
					int LA442_0 = input.LA(1);
					if ( (LA442_0==EQ_SYM) ) {
						alt442=1;
					}
					switch (alt442) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2136:18: EQ_SYM
							{
							EQ_SYM1265=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option29312); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1265_tree = (Object)adaptor.create(EQ_SYM1265);
							adaptor.addChild(root_0, EQ_SYM1265_tree);
							}

							}
							break;

					}

					INTEGER_NUM1266=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_table_option29316); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM1266_tree = (Object)adaptor.create(INTEGER_NUM1266);
					adaptor.addChild(root_0, INTEGER_NUM1266_tree);
					}

					}

					}
					break;
				case 15 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2137:5: ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2137:5: ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2137:8: MIN_ROWS ( EQ_SYM )? INTEGER_NUM
					{
					MIN_ROWS1267=(Token)match(input,MIN_ROWS,FOLLOW_MIN_ROWS_in_table_option29328); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MIN_ROWS1267_tree = (Object)adaptor.create(MIN_ROWS1267);
					adaptor.addChild(root_0, MIN_ROWS1267_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2137:17: ( EQ_SYM )?
					int alt443=2;
					int LA443_0 = input.LA(1);
					if ( (LA443_0==EQ_SYM) ) {
						alt443=1;
					}
					switch (alt443) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2137:18: EQ_SYM
							{
							EQ_SYM1268=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option29331); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1268_tree = (Object)adaptor.create(EQ_SYM1268);
							adaptor.addChild(root_0, EQ_SYM1268_tree);
							}

							}
							break;

					}

					INTEGER_NUM1269=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_table_option29335); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM1269_tree = (Object)adaptor.create(INTEGER_NUM1269);
					adaptor.addChild(root_0, INTEGER_NUM1269_tree);
					}

					}

					}
					break;
				case 16 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2138:5: ( PACK_KEYS_SYM ( EQ_SYM )? ( INTEGER_NUM | DEFAULT ) )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2138:5: ( PACK_KEYS_SYM ( EQ_SYM )? ( INTEGER_NUM | DEFAULT ) )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2138:8: PACK_KEYS_SYM ( EQ_SYM )? ( INTEGER_NUM | DEFAULT )
					{
					PACK_KEYS_SYM1270=(Token)match(input,PACK_KEYS_SYM,FOLLOW_PACK_KEYS_SYM_in_table_option29347); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PACK_KEYS_SYM1270_tree = (Object)adaptor.create(PACK_KEYS_SYM1270);
					adaptor.addChild(root_0, PACK_KEYS_SYM1270_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2138:22: ( EQ_SYM )?
					int alt444=2;
					int LA444_0 = input.LA(1);
					if ( (LA444_0==EQ_SYM) ) {
						alt444=1;
					}
					switch (alt444) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2138:23: EQ_SYM
							{
							EQ_SYM1271=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option29350); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1271_tree = (Object)adaptor.create(EQ_SYM1271);
							adaptor.addChild(root_0, EQ_SYM1271_tree);
							}

							}
							break;

					}

					set1272=input.LT(1);
					if ( input.LA(1)==DEFAULT||input.LA(1)==INTEGER_NUM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1272));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}

					}
					break;
				case 17 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2139:5: ( PASSWORD ( EQ_SYM )? TEXT_STRING )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2139:5: ( PASSWORD ( EQ_SYM )? TEXT_STRING )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2139:8: PASSWORD ( EQ_SYM )? TEXT_STRING
					{
					PASSWORD1273=(Token)match(input,PASSWORD,FOLLOW_PASSWORD_in_table_option29372); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PASSWORD1273_tree = (Object)adaptor.create(PASSWORD1273);
					adaptor.addChild(root_0, PASSWORD1273_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2139:17: ( EQ_SYM )?
					int alt445=2;
					int LA445_0 = input.LA(1);
					if ( (LA445_0==EQ_SYM) ) {
						alt445=1;
					}
					switch (alt445) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2139:18: EQ_SYM
							{
							EQ_SYM1274=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option29375); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1274_tree = (Object)adaptor.create(EQ_SYM1274);
							adaptor.addChild(root_0, EQ_SYM1274_tree);
							}

							}
							break;

					}

					TEXT_STRING1275=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_table_option29379); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING1275_tree = (Object)adaptor.create(TEXT_STRING1275);
					adaptor.addChild(root_0, TEXT_STRING1275_tree);
					}

					}

					}
					break;
				case 18 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2140:5: ( ROW_FORMAT_SYM ( EQ_SYM )? ( DEFAULT | DYNAMIC_SYM | FIXED_SYM | COMPRESSED_SYM | REDUNDANT_SYM | COMPACT_SYM ) )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2140:5: ( ROW_FORMAT_SYM ( EQ_SYM )? ( DEFAULT | DYNAMIC_SYM | FIXED_SYM | COMPRESSED_SYM | REDUNDANT_SYM | COMPACT_SYM ) )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2140:8: ROW_FORMAT_SYM ( EQ_SYM )? ( DEFAULT | DYNAMIC_SYM | FIXED_SYM | COMPRESSED_SYM | REDUNDANT_SYM | COMPACT_SYM )
					{
					ROW_FORMAT_SYM1276=(Token)match(input,ROW_FORMAT_SYM,FOLLOW_ROW_FORMAT_SYM_in_table_option29391); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ROW_FORMAT_SYM1276_tree = (Object)adaptor.create(ROW_FORMAT_SYM1276);
					adaptor.addChild(root_0, ROW_FORMAT_SYM1276_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2140:23: ( EQ_SYM )?
					int alt446=2;
					int LA446_0 = input.LA(1);
					if ( (LA446_0==EQ_SYM) ) {
						alt446=1;
					}
					switch (alt446) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2140:24: EQ_SYM
							{
							EQ_SYM1277=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option29394); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1277_tree = (Object)adaptor.create(EQ_SYM1277);
							adaptor.addChild(root_0, EQ_SYM1277_tree);
							}

							}
							break;

					}

					set1278=input.LT(1);
					if ( input.LA(1)==COMPACT_SYM||input.LA(1)==COMPRESSED_SYM||input.LA(1)==DEFAULT||input.LA(1)==DYNAMIC_SYM||input.LA(1)==FIXED_SYM||input.LA(1)==REDUNDANT_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1278));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}

					}
					break;
				case 19 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2141:5: ( STATS_AUTO_RECALC ( EQ_SYM )? ( DEFAULT | INTEGER_NUM ) )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2141:5: ( STATS_AUTO_RECALC ( EQ_SYM )? ( DEFAULT | INTEGER_NUM ) )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2141:8: STATS_AUTO_RECALC ( EQ_SYM )? ( DEFAULT | INTEGER_NUM )
					{
					STATS_AUTO_RECALC1279=(Token)match(input,STATS_AUTO_RECALC,FOLLOW_STATS_AUTO_RECALC_in_table_option29422); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					STATS_AUTO_RECALC1279_tree = (Object)adaptor.create(STATS_AUTO_RECALC1279);
					adaptor.addChild(root_0, STATS_AUTO_RECALC1279_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2141:26: ( EQ_SYM )?
					int alt447=2;
					int LA447_0 = input.LA(1);
					if ( (LA447_0==EQ_SYM) ) {
						alt447=1;
					}
					switch (alt447) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2141:27: EQ_SYM
							{
							EQ_SYM1280=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option29425); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1280_tree = (Object)adaptor.create(EQ_SYM1280);
							adaptor.addChild(root_0, EQ_SYM1280_tree);
							}

							}
							break;

					}

					set1281=input.LT(1);
					if ( input.LA(1)==DEFAULT||input.LA(1)==INTEGER_NUM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1281));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}

					}
					break;
				case 20 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2142:5: ( STATS_PERSISTENT ( EQ_SYM )? ( DEFAULT | INTEGER_NUM ) )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2142:5: ( STATS_PERSISTENT ( EQ_SYM )? ( DEFAULT | INTEGER_NUM ) )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2142:8: STATS_PERSISTENT ( EQ_SYM )? ( DEFAULT | INTEGER_NUM )
					{
					STATS_PERSISTENT1282=(Token)match(input,STATS_PERSISTENT,FOLLOW_STATS_PERSISTENT_in_table_option29447); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					STATS_PERSISTENT1282_tree = (Object)adaptor.create(STATS_PERSISTENT1282);
					adaptor.addChild(root_0, STATS_PERSISTENT1282_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2142:25: ( EQ_SYM )?
					int alt448=2;
					int LA448_0 = input.LA(1);
					if ( (LA448_0==EQ_SYM) ) {
						alt448=1;
					}
					switch (alt448) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2142:26: EQ_SYM
							{
							EQ_SYM1283=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option29450); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1283_tree = (Object)adaptor.create(EQ_SYM1283);
							adaptor.addChild(root_0, EQ_SYM1283_tree);
							}

							}
							break;

					}

					set1284=input.LT(1);
					if ( input.LA(1)==DEFAULT||input.LA(1)==INTEGER_NUM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1284));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}

					}
					break;
				case 21 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2143:5: ( UNION_SYM ( EQ_SYM )? LPAREN table_name ( COMMA table_name )* RPAREN )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2143:5: ( UNION_SYM ( EQ_SYM )? LPAREN table_name ( COMMA table_name )* RPAREN )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2143:8: UNION_SYM ( EQ_SYM )? LPAREN table_name ( COMMA table_name )* RPAREN
					{
					UNION_SYM1285=(Token)match(input,UNION_SYM,FOLLOW_UNION_SYM_in_table_option29472); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					UNION_SYM1285_tree = (Object)adaptor.create(UNION_SYM1285);
					adaptor.addChild(root_0, UNION_SYM1285_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2143:18: ( EQ_SYM )?
					int alt449=2;
					int LA449_0 = input.LA(1);
					if ( (LA449_0==EQ_SYM) ) {
						alt449=1;
					}
					switch (alt449) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2143:19: EQ_SYM
							{
							EQ_SYM1286=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option29475); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1286_tree = (Object)adaptor.create(EQ_SYM1286);
							adaptor.addChild(root_0, EQ_SYM1286_tree);
							}

							}
							break;

					}

					LPAREN1287=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_table_option29479); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1287_tree = (Object)adaptor.create(LPAREN1287);
					adaptor.addChild(root_0, LPAREN1287_tree);
					}

					pushFollow(FOLLOW_table_name_in_table_option29481);
					table_name1288=table_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1288.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2143:45: ( COMMA table_name )*
					loop450:
					while (true) {
						int alt450=2;
						int LA450_0 = input.LA(1);
						if ( (LA450_0==COMMA) ) {
							alt450=1;
						}

						switch (alt450) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2143:47: COMMA table_name
							{
							COMMA1289=(Token)match(input,COMMA,FOLLOW_COMMA_in_table_option29484); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA1289_tree = (Object)adaptor.create(COMMA1289);
							adaptor.addChild(root_0, COMMA1289_tree);
							}

							pushFollow(FOLLOW_table_name_in_table_option29486);
							table_name1290=table_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1290.getTree());

							}
							break;

						default :
							break loop450;
						}
					}

					RPAREN1291=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_table_option29490); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1291_tree = (Object)adaptor.create(RPAREN1291);
					adaptor.addChild(root_0, RPAREN1291_tree);
					}

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_option"


	public static class partition_options_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "partition_options"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2146:1: partition_options : PARTITION_SYM BY_SYM ( ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN ) | ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN ) | ( RANGE_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) ) | ( LIST_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) ) ) ( PARTITIONS_SYM INTEGER_NUM )? ( SUBPARTITION_SYM BY_SYM ( ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN ) | ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN ) ) ( SUBPARTITIONS_SYM INTEGER_NUM )? )? ( LPAREN partition_definition ( COMMA partition_definition )* RPAREN )? ;
	public final SQLParser.partition_options_return partition_options() throws RecognitionException {
		SQLParser.partition_options_return retval = new SQLParser.partition_options_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token PARTITION_SYM1292=null;
		Token BY_SYM1293=null;
		Token LINEAR_SYM1294=null;
		Token HASH_SYM1295=null;
		Token LPAREN1296=null;
		Token RPAREN1298=null;
		Token LINEAR_SYM1299=null;
		Token KEY_SYM1300=null;
		Token LPAREN1301=null;
		Token RPAREN1303=null;
		Token RANGE_SYM1304=null;
		Token LPAREN1305=null;
		Token RPAREN1307=null;
		Token COLUMNS_SYM1308=null;
		Token LPAREN1309=null;
		Token RPAREN1311=null;
		Token LIST_SYM1312=null;
		Token LPAREN1313=null;
		Token RPAREN1315=null;
		Token COLUMNS_SYM1316=null;
		Token LPAREN1317=null;
		Token RPAREN1319=null;
		Token PARTITIONS_SYM1320=null;
		Token INTEGER_NUM1321=null;
		Token SUBPARTITION_SYM1322=null;
		Token BY_SYM1323=null;
		Token LINEAR_SYM1324=null;
		Token HASH_SYM1325=null;
		Token LPAREN1326=null;
		Token RPAREN1328=null;
		Token LINEAR_SYM1329=null;
		Token KEY_SYM1330=null;
		Token LPAREN1331=null;
		Token RPAREN1333=null;
		Token SUBPARTITIONS_SYM1334=null;
		Token INTEGER_NUM1335=null;
		Token LPAREN1336=null;
		Token COMMA1338=null;
		Token RPAREN1340=null;
		ParserRuleReturnScope expression1297 =null;
		ParserRuleReturnScope column_list1302 =null;
		ParserRuleReturnScope expression1306 =null;
		ParserRuleReturnScope column_list1310 =null;
		ParserRuleReturnScope expression1314 =null;
		ParserRuleReturnScope column_list1318 =null;
		ParserRuleReturnScope expression1327 =null;
		ParserRuleReturnScope column_list1332 =null;
		ParserRuleReturnScope partition_definition1337 =null;
		ParserRuleReturnScope partition_definition1339 =null;

		Object PARTITION_SYM1292_tree=null;
		Object BY_SYM1293_tree=null;
		Object LINEAR_SYM1294_tree=null;
		Object HASH_SYM1295_tree=null;
		Object LPAREN1296_tree=null;
		Object RPAREN1298_tree=null;
		Object LINEAR_SYM1299_tree=null;
		Object KEY_SYM1300_tree=null;
		Object LPAREN1301_tree=null;
		Object RPAREN1303_tree=null;
		Object RANGE_SYM1304_tree=null;
		Object LPAREN1305_tree=null;
		Object RPAREN1307_tree=null;
		Object COLUMNS_SYM1308_tree=null;
		Object LPAREN1309_tree=null;
		Object RPAREN1311_tree=null;
		Object LIST_SYM1312_tree=null;
		Object LPAREN1313_tree=null;
		Object RPAREN1315_tree=null;
		Object COLUMNS_SYM1316_tree=null;
		Object LPAREN1317_tree=null;
		Object RPAREN1319_tree=null;
		Object PARTITIONS_SYM1320_tree=null;
		Object INTEGER_NUM1321_tree=null;
		Object SUBPARTITION_SYM1322_tree=null;
		Object BY_SYM1323_tree=null;
		Object LINEAR_SYM1324_tree=null;
		Object HASH_SYM1325_tree=null;
		Object LPAREN1326_tree=null;
		Object RPAREN1328_tree=null;
		Object LINEAR_SYM1329_tree=null;
		Object KEY_SYM1330_tree=null;
		Object LPAREN1331_tree=null;
		Object RPAREN1333_tree=null;
		Object SUBPARTITIONS_SYM1334_tree=null;
		Object INTEGER_NUM1335_tree=null;
		Object LPAREN1336_tree=null;
		Object COMMA1338_tree=null;
		Object RPAREN1340_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2146:18: ( PARTITION_SYM BY_SYM ( ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN ) | ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN ) | ( RANGE_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) ) | ( LIST_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) ) ) ( PARTITIONS_SYM INTEGER_NUM )? ( SUBPARTITION_SYM BY_SYM ( ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN ) | ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN ) ) ( SUBPARTITIONS_SYM INTEGER_NUM )? )? ( LPAREN partition_definition ( COMMA partition_definition )* RPAREN )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2147:3: PARTITION_SYM BY_SYM ( ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN ) | ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN ) | ( RANGE_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) ) | ( LIST_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) ) ) ( PARTITIONS_SYM INTEGER_NUM )? ( SUBPARTITION_SYM BY_SYM ( ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN ) | ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN ) ) ( SUBPARTITIONS_SYM INTEGER_NUM )? )? ( LPAREN partition_definition ( COMMA partition_definition )* RPAREN )?
			{
			root_0 = (Object)adaptor.nil();


			PARTITION_SYM1292=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_partition_options29503); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			PARTITION_SYM1292_tree = (Object)adaptor.create(PARTITION_SYM1292);
			adaptor.addChild(root_0, PARTITION_SYM1292_tree);
			}

			BY_SYM1293=(Token)match(input,BY_SYM,FOLLOW_BY_SYM_in_partition_options29505); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			BY_SYM1293_tree = (Object)adaptor.create(BY_SYM1293);
			adaptor.addChild(root_0, BY_SYM1293_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2148:3: ( ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN ) | ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN ) | ( RANGE_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) ) | ( LIST_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) ) )
			int alt456=4;
			switch ( input.LA(1) ) {
			case LINEAR_SYM:
				{
				int LA456_1 = input.LA(2);
				if ( (LA456_1==HASH_SYM) ) {
					alt456=1;
				}
				else if ( (LA456_1==KEY_SYM) ) {
					alt456=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 456, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case HASH_SYM:
				{
				alt456=1;
				}
				break;
			case KEY_SYM:
				{
				alt456=2;
				}
				break;
			case RANGE_SYM:
				{
				alt456=3;
				}
				break;
			case LIST_SYM:
				{
				alt456=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 456, 0, input);
				throw nvae;
			}
			switch (alt456) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2149:7: ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN )
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2149:7: ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2149:9: ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2149:9: ( LINEAR_SYM )?
					int alt452=2;
					int LA452_0 = input.LA(1);
					if ( (LA452_0==LINEAR_SYM) ) {
						alt452=1;
					}
					switch (alt452) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2149:10: LINEAR_SYM
							{
							LINEAR_SYM1294=(Token)match(input,LINEAR_SYM,FOLLOW_LINEAR_SYM_in_partition_options29521); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LINEAR_SYM1294_tree = (Object)adaptor.create(LINEAR_SYM1294);
							adaptor.addChild(root_0, LINEAR_SYM1294_tree);
							}

							}
							break;

					}

					HASH_SYM1295=(Token)match(input,HASH_SYM,FOLLOW_HASH_SYM_in_partition_options29525); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					HASH_SYM1295_tree = (Object)adaptor.create(HASH_SYM1295);
					adaptor.addChild(root_0, HASH_SYM1295_tree);
					}

					LPAREN1296=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_options29527); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1296_tree = (Object)adaptor.create(LPAREN1296);
					adaptor.addChild(root_0, LPAREN1296_tree);
					}

					pushFollow(FOLLOW_expression_in_partition_options29529);
					expression1297=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression1297.getTree());

					RPAREN1298=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_options29531); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1298_tree = (Object)adaptor.create(RPAREN1298);
					adaptor.addChild(root_0, RPAREN1298_tree);
					}

					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2150:7: ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN )
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2150:7: ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2150:9: ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2150:9: ( LINEAR_SYM )?
					int alt453=2;
					int LA453_0 = input.LA(1);
					if ( (LA453_0==LINEAR_SYM) ) {
						alt453=1;
					}
					switch (alt453) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2150:10: LINEAR_SYM
							{
							LINEAR_SYM1299=(Token)match(input,LINEAR_SYM,FOLLOW_LINEAR_SYM_in_partition_options29544); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LINEAR_SYM1299_tree = (Object)adaptor.create(LINEAR_SYM1299);
							adaptor.addChild(root_0, LINEAR_SYM1299_tree);
							}

							}
							break;

					}

					KEY_SYM1300=(Token)match(input,KEY_SYM,FOLLOW_KEY_SYM_in_partition_options29548); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KEY_SYM1300_tree = (Object)adaptor.create(KEY_SYM1300);
					adaptor.addChild(root_0, KEY_SYM1300_tree);
					}

					LPAREN1301=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_options29550); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1301_tree = (Object)adaptor.create(LPAREN1301);
					adaptor.addChild(root_0, LPAREN1301_tree);
					}

					pushFollow(FOLLOW_column_list_in_partition_options29552);
					column_list1302=column_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_list1302.getTree());

					RPAREN1303=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_options29554); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1303_tree = (Object)adaptor.create(RPAREN1303);
					adaptor.addChild(root_0, RPAREN1303_tree);
					}

					}

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2151:7: ( RANGE_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) )
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2151:7: ( RANGE_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2151:9: RANGE_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN )
					{
					RANGE_SYM1304=(Token)match(input,RANGE_SYM,FOLLOW_RANGE_SYM_in_partition_options29566); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RANGE_SYM1304_tree = (Object)adaptor.create(RANGE_SYM1304);
					adaptor.addChild(root_0, RANGE_SYM1304_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2151:18: ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN )
					int alt454=2;
					int LA454_0 = input.LA(1);
					if ( (LA454_0==LPAREN) ) {
						alt454=1;
					}
					else if ( (LA454_0==COLUMNS_SYM) ) {
						alt454=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 454, 0, input);
						throw nvae;
					}

					switch (alt454) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2151:19: LPAREN expression RPAREN
							{
							LPAREN1305=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_options29568); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN1305_tree = (Object)adaptor.create(LPAREN1305);
							adaptor.addChild(root_0, LPAREN1305_tree);
							}

							pushFollow(FOLLOW_expression_in_partition_options29570);
							expression1306=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression1306.getTree());

							RPAREN1307=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_options29572); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN1307_tree = (Object)adaptor.create(RPAREN1307);
							adaptor.addChild(root_0, RPAREN1307_tree);
							}

							}
							break;
						case 2 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2151:46: COLUMNS_SYM LPAREN column_list RPAREN
							{
							COLUMNS_SYM1308=(Token)match(input,COLUMNS_SYM,FOLLOW_COLUMNS_SYM_in_partition_options29576); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLUMNS_SYM1308_tree = (Object)adaptor.create(COLUMNS_SYM1308);
							adaptor.addChild(root_0, COLUMNS_SYM1308_tree);
							}

							LPAREN1309=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_options29578); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN1309_tree = (Object)adaptor.create(LPAREN1309);
							adaptor.addChild(root_0, LPAREN1309_tree);
							}

							pushFollow(FOLLOW_column_list_in_partition_options29580);
							column_list1310=column_list();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, column_list1310.getTree());

							RPAREN1311=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_options29582); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN1311_tree = (Object)adaptor.create(RPAREN1311);
							adaptor.addChild(root_0, RPAREN1311_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 4 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2152:7: ( LIST_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) )
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2152:7: ( LIST_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2152:9: LIST_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN )
					{
					LIST_SYM1312=(Token)match(input,LIST_SYM,FOLLOW_LIST_SYM_in_partition_options29595); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LIST_SYM1312_tree = (Object)adaptor.create(LIST_SYM1312);
					adaptor.addChild(root_0, LIST_SYM1312_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2152:17: ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN )
					int alt455=2;
					int LA455_0 = input.LA(1);
					if ( (LA455_0==LPAREN) ) {
						alt455=1;
					}
					else if ( (LA455_0==COLUMNS_SYM) ) {
						alt455=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 455, 0, input);
						throw nvae;
					}

					switch (alt455) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2152:18: LPAREN expression RPAREN
							{
							LPAREN1313=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_options29597); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN1313_tree = (Object)adaptor.create(LPAREN1313);
							adaptor.addChild(root_0, LPAREN1313_tree);
							}

							pushFollow(FOLLOW_expression_in_partition_options29599);
							expression1314=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression1314.getTree());

							RPAREN1315=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_options29601); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN1315_tree = (Object)adaptor.create(RPAREN1315);
							adaptor.addChild(root_0, RPAREN1315_tree);
							}

							}
							break;
						case 2 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2152:45: COLUMNS_SYM LPAREN column_list RPAREN
							{
							COLUMNS_SYM1316=(Token)match(input,COLUMNS_SYM,FOLLOW_COLUMNS_SYM_in_partition_options29605); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLUMNS_SYM1316_tree = (Object)adaptor.create(COLUMNS_SYM1316);
							adaptor.addChild(root_0, COLUMNS_SYM1316_tree);
							}

							LPAREN1317=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_options29607); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN1317_tree = (Object)adaptor.create(LPAREN1317);
							adaptor.addChild(root_0, LPAREN1317_tree);
							}

							pushFollow(FOLLOW_column_list_in_partition_options29609);
							column_list1318=column_list();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, column_list1318.getTree());

							RPAREN1319=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_options29611); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN1319_tree = (Object)adaptor.create(RPAREN1319);
							adaptor.addChild(root_0, RPAREN1319_tree);
							}

							}
							break;

					}

					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2155:3: ( PARTITIONS_SYM INTEGER_NUM )?
			int alt457=2;
			int LA457_0 = input.LA(1);
			if ( (LA457_0==PARTITIONS_SYM) ) {
				alt457=1;
			}
			switch (alt457) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2155:4: PARTITIONS_SYM INTEGER_NUM
					{
					PARTITIONS_SYM1320=(Token)match(input,PARTITIONS_SYM,FOLLOW_PARTITIONS_SYM_in_partition_options29626); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PARTITIONS_SYM1320_tree = (Object)adaptor.create(PARTITIONS_SYM1320);
					adaptor.addChild(root_0, PARTITIONS_SYM1320_tree);
					}

					INTEGER_NUM1321=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_partition_options29628); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM1321_tree = (Object)adaptor.create(INTEGER_NUM1321);
					adaptor.addChild(root_0, INTEGER_NUM1321_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2157:3: ( SUBPARTITION_SYM BY_SYM ( ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN ) | ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN ) ) ( SUBPARTITIONS_SYM INTEGER_NUM )? )?
			int alt462=2;
			int LA462_0 = input.LA(1);
			if ( (LA462_0==SUBPARTITION_SYM) ) {
				alt462=1;
			}
			switch (alt462) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2158:5: SUBPARTITION_SYM BY_SYM ( ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN ) | ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN ) ) ( SUBPARTITIONS_SYM INTEGER_NUM )?
					{
					SUBPARTITION_SYM1322=(Token)match(input,SUBPARTITION_SYM,FOLLOW_SUBPARTITION_SYM_in_partition_options29643); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SUBPARTITION_SYM1322_tree = (Object)adaptor.create(SUBPARTITION_SYM1322);
					adaptor.addChild(root_0, SUBPARTITION_SYM1322_tree);
					}

					BY_SYM1323=(Token)match(input,BY_SYM,FOLLOW_BY_SYM_in_partition_options29645); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BY_SYM1323_tree = (Object)adaptor.create(BY_SYM1323);
					adaptor.addChild(root_0, BY_SYM1323_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2159:5: ( ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN ) | ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN ) )
					int alt460=2;
					switch ( input.LA(1) ) {
					case LINEAR_SYM:
						{
						int LA460_1 = input.LA(2);
						if ( (LA460_1==HASH_SYM) ) {
							alt460=1;
						}
						else if ( (LA460_1==KEY_SYM) ) {
							alt460=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 460, 1, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case HASH_SYM:
						{
						alt460=1;
						}
						break;
					case KEY_SYM:
						{
						alt460=2;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 460, 0, input);
						throw nvae;
					}
					switch (alt460) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2159:7: ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN )
							{
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2159:7: ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN )
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2159:9: ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN
							{
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2159:9: ( LINEAR_SYM )?
							int alt458=2;
							int LA458_0 = input.LA(1);
							if ( (LA458_0==LINEAR_SYM) ) {
								alt458=1;
							}
							switch (alt458) {
								case 1 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2159:10: LINEAR_SYM
									{
									LINEAR_SYM1324=(Token)match(input,LINEAR_SYM,FOLLOW_LINEAR_SYM_in_partition_options29656); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									LINEAR_SYM1324_tree = (Object)adaptor.create(LINEAR_SYM1324);
									adaptor.addChild(root_0, LINEAR_SYM1324_tree);
									}

									}
									break;

							}

							HASH_SYM1325=(Token)match(input,HASH_SYM,FOLLOW_HASH_SYM_in_partition_options29660); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							HASH_SYM1325_tree = (Object)adaptor.create(HASH_SYM1325);
							adaptor.addChild(root_0, HASH_SYM1325_tree);
							}

							LPAREN1326=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_options29662); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN1326_tree = (Object)adaptor.create(LPAREN1326);
							adaptor.addChild(root_0, LPAREN1326_tree);
							}

							pushFollow(FOLLOW_expression_in_partition_options29664);
							expression1327=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression1327.getTree());

							RPAREN1328=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_options29666); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN1328_tree = (Object)adaptor.create(RPAREN1328);
							adaptor.addChild(root_0, RPAREN1328_tree);
							}

							}

							}
							break;
						case 2 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2159:61: ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN )
							{
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2159:61: ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN )
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2159:63: ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN
							{
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2159:63: ( LINEAR_SYM )?
							int alt459=2;
							int LA459_0 = input.LA(1);
							if ( (LA459_0==LINEAR_SYM) ) {
								alt459=1;
							}
							switch (alt459) {
								case 1 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2159:64: LINEAR_SYM
									{
									LINEAR_SYM1329=(Token)match(input,LINEAR_SYM,FOLLOW_LINEAR_SYM_in_partition_options29675); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									LINEAR_SYM1329_tree = (Object)adaptor.create(LINEAR_SYM1329);
									adaptor.addChild(root_0, LINEAR_SYM1329_tree);
									}

									}
									break;

							}

							KEY_SYM1330=(Token)match(input,KEY_SYM,FOLLOW_KEY_SYM_in_partition_options29679); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							KEY_SYM1330_tree = (Object)adaptor.create(KEY_SYM1330);
							adaptor.addChild(root_0, KEY_SYM1330_tree);
							}

							LPAREN1331=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_options29681); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN1331_tree = (Object)adaptor.create(LPAREN1331);
							adaptor.addChild(root_0, LPAREN1331_tree);
							}

							pushFollow(FOLLOW_column_list_in_partition_options29683);
							column_list1332=column_list();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, column_list1332.getTree());

							RPAREN1333=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_options29685); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN1333_tree = (Object)adaptor.create(RPAREN1333);
							adaptor.addChild(root_0, RPAREN1333_tree);
							}

							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2160:5: ( SUBPARTITIONS_SYM INTEGER_NUM )?
					int alt461=2;
					int LA461_0 = input.LA(1);
					if ( (LA461_0==SUBPARTITIONS_SYM) ) {
						alt461=1;
					}
					switch (alt461) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2160:6: SUBPARTITIONS_SYM INTEGER_NUM
							{
							SUBPARTITIONS_SYM1334=(Token)match(input,SUBPARTITIONS_SYM,FOLLOW_SUBPARTITIONS_SYM_in_partition_options29696); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							SUBPARTITIONS_SYM1334_tree = (Object)adaptor.create(SUBPARTITIONS_SYM1334);
							adaptor.addChild(root_0, SUBPARTITIONS_SYM1334_tree);
							}

							INTEGER_NUM1335=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_partition_options29698); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							INTEGER_NUM1335_tree = (Object)adaptor.create(INTEGER_NUM1335);
							adaptor.addChild(root_0, INTEGER_NUM1335_tree);
							}

							}
							break;

					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2163:3: ( LPAREN partition_definition ( COMMA partition_definition )* RPAREN )?
			int alt464=2;
			int LA464_0 = input.LA(1);
			if ( (LA464_0==LPAREN) ) {
				alt464=1;
			}
			switch (alt464) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2163:4: LPAREN partition_definition ( COMMA partition_definition )* RPAREN
					{
					LPAREN1336=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_options29713); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1336_tree = (Object)adaptor.create(LPAREN1336);
					adaptor.addChild(root_0, LPAREN1336_tree);
					}

					pushFollow(FOLLOW_partition_definition_in_partition_options29715);
					partition_definition1337=partition_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_definition1337.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2163:32: ( COMMA partition_definition )*
					loop463:
					while (true) {
						int alt463=2;
						int LA463_0 = input.LA(1);
						if ( (LA463_0==COMMA) ) {
							alt463=1;
						}

						switch (alt463) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2163:34: COMMA partition_definition
							{
							COMMA1338=(Token)match(input,COMMA,FOLLOW_COMMA_in_partition_options29719); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA1338_tree = (Object)adaptor.create(COMMA1338);
							adaptor.addChild(root_0, COMMA1338_tree);
							}

							pushFollow(FOLLOW_partition_definition_in_partition_options29722);
							partition_definition1339=partition_definition();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_definition1339.getTree());

							}
							break;

						default :
							break loop463;
						}
					}

					RPAREN1340=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_options29726); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1340_tree = (Object)adaptor.create(RPAREN1340);
					adaptor.addChild(root_0, RPAREN1340_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "partition_options"


	public static class partition_definition_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "partition_definition"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2166:1: partition_definition : PARTITION_SYM partition_name ( VALUES ( ( LESS_SYM THAN_SYM ( ( LPAREN expression_list RPAREN ) | MAXVALUE_SYM ) ) | ( IN_SYM LPAREN expression_list RPAREN ) ) )? ( ( STORAGE_SYM )? ENGINE_SYM ( EQ_SYM )? engine_name )? ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING )? ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM )? ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM )? ( LPAREN subpartition_definition ( COMMA subpartition_definition )* RPAREN )? ;
	public final SQLParser.partition_definition_return partition_definition() throws RecognitionException {
		SQLParser.partition_definition_return retval = new SQLParser.partition_definition_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token PARTITION_SYM1341=null;
		Token VALUES1343=null;
		Token LESS_SYM1344=null;
		Token THAN_SYM1345=null;
		Token LPAREN1346=null;
		Token RPAREN1348=null;
		Token MAXVALUE_SYM1349=null;
		Token IN_SYM1350=null;
		Token LPAREN1351=null;
		Token RPAREN1353=null;
		Token STORAGE_SYM1354=null;
		Token ENGINE_SYM1355=null;
		Token EQ_SYM1356=null;
		Token COMMENT_SYM1358=null;
		Token EQ_SYM1359=null;
		Token TEXT_STRING1360=null;
		Token DATA_SYM1361=null;
		Token DIRECTORY_SYM1362=null;
		Token EQ_SYM1363=null;
		Token TEXT_STRING1364=null;
		Token INDEX_SYM1365=null;
		Token DIRECTORY_SYM1366=null;
		Token EQ_SYM1367=null;
		Token TEXT_STRING1368=null;
		Token MAX_ROWS1369=null;
		Token EQ_SYM1370=null;
		Token INTEGER_NUM1371=null;
		Token MIN_ROWS1372=null;
		Token EQ_SYM1373=null;
		Token INTEGER_NUM1374=null;
		Token LPAREN1375=null;
		Token COMMA1377=null;
		Token RPAREN1379=null;
		ParserRuleReturnScope partition_name1342 =null;
		ParserRuleReturnScope expression_list1347 =null;
		ParserRuleReturnScope expression_list1352 =null;
		ParserRuleReturnScope engine_name1357 =null;
		ParserRuleReturnScope subpartition_definition1376 =null;
		ParserRuleReturnScope subpartition_definition1378 =null;

		Object PARTITION_SYM1341_tree=null;
		Object VALUES1343_tree=null;
		Object LESS_SYM1344_tree=null;
		Object THAN_SYM1345_tree=null;
		Object LPAREN1346_tree=null;
		Object RPAREN1348_tree=null;
		Object MAXVALUE_SYM1349_tree=null;
		Object IN_SYM1350_tree=null;
		Object LPAREN1351_tree=null;
		Object RPAREN1353_tree=null;
		Object STORAGE_SYM1354_tree=null;
		Object ENGINE_SYM1355_tree=null;
		Object EQ_SYM1356_tree=null;
		Object COMMENT_SYM1358_tree=null;
		Object EQ_SYM1359_tree=null;
		Object TEXT_STRING1360_tree=null;
		Object DATA_SYM1361_tree=null;
		Object DIRECTORY_SYM1362_tree=null;
		Object EQ_SYM1363_tree=null;
		Object TEXT_STRING1364_tree=null;
		Object INDEX_SYM1365_tree=null;
		Object DIRECTORY_SYM1366_tree=null;
		Object EQ_SYM1367_tree=null;
		Object TEXT_STRING1368_tree=null;
		Object MAX_ROWS1369_tree=null;
		Object EQ_SYM1370_tree=null;
		Object INTEGER_NUM1371_tree=null;
		Object MIN_ROWS1372_tree=null;
		Object EQ_SYM1373_tree=null;
		Object INTEGER_NUM1374_tree=null;
		Object LPAREN1375_tree=null;
		Object COMMA1377_tree=null;
		Object RPAREN1379_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2166:21: ( PARTITION_SYM partition_name ( VALUES ( ( LESS_SYM THAN_SYM ( ( LPAREN expression_list RPAREN ) | MAXVALUE_SYM ) ) | ( IN_SYM LPAREN expression_list RPAREN ) ) )? ( ( STORAGE_SYM )? ENGINE_SYM ( EQ_SYM )? engine_name )? ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING )? ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM )? ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM )? ( LPAREN subpartition_definition ( COMMA subpartition_definition )* RPAREN )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2167:3: PARTITION_SYM partition_name ( VALUES ( ( LESS_SYM THAN_SYM ( ( LPAREN expression_list RPAREN ) | MAXVALUE_SYM ) ) | ( IN_SYM LPAREN expression_list RPAREN ) ) )? ( ( STORAGE_SYM )? ENGINE_SYM ( EQ_SYM )? engine_name )? ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING )? ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM )? ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM )? ( LPAREN subpartition_definition ( COMMA subpartition_definition )* RPAREN )?
			{
			root_0 = (Object)adaptor.nil();


			PARTITION_SYM1341=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_partition_definition29738); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			PARTITION_SYM1341_tree = (Object)adaptor.create(PARTITION_SYM1341);
			adaptor.addChild(root_0, PARTITION_SYM1341_tree);
			}

			pushFollow(FOLLOW_partition_name_in_partition_definition29740);
			partition_name1342=partition_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_name1342.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2169:3: ( VALUES ( ( LESS_SYM THAN_SYM ( ( LPAREN expression_list RPAREN ) | MAXVALUE_SYM ) ) | ( IN_SYM LPAREN expression_list RPAREN ) ) )?
			int alt467=2;
			int LA467_0 = input.LA(1);
			if ( (LA467_0==VALUES) ) {
				alt467=1;
			}
			switch (alt467) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2170:5: VALUES ( ( LESS_SYM THAN_SYM ( ( LPAREN expression_list RPAREN ) | MAXVALUE_SYM ) ) | ( IN_SYM LPAREN expression_list RPAREN ) )
					{
					VALUES1343=(Token)match(input,VALUES,FOLLOW_VALUES_in_partition_definition29753); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					VALUES1343_tree = (Object)adaptor.create(VALUES1343);
					adaptor.addChild(root_0, VALUES1343_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2171:5: ( ( LESS_SYM THAN_SYM ( ( LPAREN expression_list RPAREN ) | MAXVALUE_SYM ) ) | ( IN_SYM LPAREN expression_list RPAREN ) )
					int alt466=2;
					int LA466_0 = input.LA(1);
					if ( (LA466_0==LESS_SYM) ) {
						alt466=1;
					}
					else if ( (LA466_0==IN_SYM) ) {
						alt466=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 466, 0, input);
						throw nvae;
					}

					switch (alt466) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2172:7: ( LESS_SYM THAN_SYM ( ( LPAREN expression_list RPAREN ) | MAXVALUE_SYM ) )
							{
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2172:7: ( LESS_SYM THAN_SYM ( ( LPAREN expression_list RPAREN ) | MAXVALUE_SYM ) )
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2172:8: LESS_SYM THAN_SYM ( ( LPAREN expression_list RPAREN ) | MAXVALUE_SYM )
							{
							LESS_SYM1344=(Token)match(input,LESS_SYM,FOLLOW_LESS_SYM_in_partition_definition29769); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LESS_SYM1344_tree = (Object)adaptor.create(LESS_SYM1344);
							adaptor.addChild(root_0, LESS_SYM1344_tree);
							}

							THAN_SYM1345=(Token)match(input,THAN_SYM,FOLLOW_THAN_SYM_in_partition_definition29771); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							THAN_SYM1345_tree = (Object)adaptor.create(THAN_SYM1345);
							adaptor.addChild(root_0, THAN_SYM1345_tree);
							}

							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2172:26: ( ( LPAREN expression_list RPAREN ) | MAXVALUE_SYM )
							int alt465=2;
							int LA465_0 = input.LA(1);
							if ( (LA465_0==LPAREN) ) {
								alt465=1;
							}
							else if ( (LA465_0==MAXVALUE_SYM) ) {
								alt465=2;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae =
									new NoViableAltException("", 465, 0, input);
								throw nvae;
							}

							switch (alt465) {
								case 1 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2172:28: ( LPAREN expression_list RPAREN )
									{
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2172:28: ( LPAREN expression_list RPAREN )
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2172:29: LPAREN expression_list RPAREN
									{
									LPAREN1346=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_definition29776); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									LPAREN1346_tree = (Object)adaptor.create(LPAREN1346);
									adaptor.addChild(root_0, LPAREN1346_tree);
									}

									pushFollow(FOLLOW_expression_list_in_partition_definition29778);
									expression_list1347=expression_list();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list1347.getTree());

									RPAREN1348=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_definition29780); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									RPAREN1348_tree = (Object)adaptor.create(RPAREN1348);
									adaptor.addChild(root_0, RPAREN1348_tree);
									}

									}

									}
									break;
								case 2 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2172:62: MAXVALUE_SYM
									{
									MAXVALUE_SYM1349=(Token)match(input,MAXVALUE_SYM,FOLLOW_MAXVALUE_SYM_in_partition_definition29785); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									MAXVALUE_SYM1349_tree = (Object)adaptor.create(MAXVALUE_SYM1349);
									adaptor.addChild(root_0, MAXVALUE_SYM1349_tree);
									}

									}
									break;

							}

							}

							}
							break;
						case 2 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2174:7: ( IN_SYM LPAREN expression_list RPAREN )
							{
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2174:7: ( IN_SYM LPAREN expression_list RPAREN )
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2174:8: IN_SYM LPAREN expression_list RPAREN
							{
							IN_SYM1350=(Token)match(input,IN_SYM,FOLLOW_IN_SYM_in_partition_definition29806); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							IN_SYM1350_tree = (Object)adaptor.create(IN_SYM1350);
							adaptor.addChild(root_0, IN_SYM1350_tree);
							}

							LPAREN1351=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_definition29808); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN1351_tree = (Object)adaptor.create(LPAREN1351);
							adaptor.addChild(root_0, LPAREN1351_tree);
							}

							pushFollow(FOLLOW_expression_list_in_partition_definition29810);
							expression_list1352=expression_list();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list1352.getTree());

							RPAREN1353=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_definition29812); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN1353_tree = (Object)adaptor.create(RPAREN1353);
							adaptor.addChild(root_0, RPAREN1353_tree);
							}

							}

							}
							break;

					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2178:3: ( ( STORAGE_SYM )? ENGINE_SYM ( EQ_SYM )? engine_name )?
			int alt470=2;
			int LA470_0 = input.LA(1);
			if ( (LA470_0==ENGINE_SYM||LA470_0==STORAGE_SYM) ) {
				alt470=1;
			}
			switch (alt470) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2178:4: ( STORAGE_SYM )? ENGINE_SYM ( EQ_SYM )? engine_name
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2178:4: ( STORAGE_SYM )?
					int alt468=2;
					int LA468_0 = input.LA(1);
					if ( (LA468_0==STORAGE_SYM) ) {
						alt468=1;
					}
					switch (alt468) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2178:5: STORAGE_SYM
							{
							STORAGE_SYM1354=(Token)match(input,STORAGE_SYM,FOLLOW_STORAGE_SYM_in_partition_definition29833); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							STORAGE_SYM1354_tree = (Object)adaptor.create(STORAGE_SYM1354);
							adaptor.addChild(root_0, STORAGE_SYM1354_tree);
							}

							}
							break;

					}

					ENGINE_SYM1355=(Token)match(input,ENGINE_SYM,FOLLOW_ENGINE_SYM_in_partition_definition29837); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ENGINE_SYM1355_tree = (Object)adaptor.create(ENGINE_SYM1355);
					adaptor.addChild(root_0, ENGINE_SYM1355_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2178:30: ( EQ_SYM )?
					int alt469=2;
					int LA469_0 = input.LA(1);
					if ( (LA469_0==EQ_SYM) ) {
						alt469=1;
					}
					switch (alt469) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2178:31: EQ_SYM
							{
							EQ_SYM1356=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_partition_definition29840); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1356_tree = (Object)adaptor.create(EQ_SYM1356);
							adaptor.addChild(root_0, EQ_SYM1356_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_engine_name_in_partition_definition29844);
					engine_name1357=engine_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, engine_name1357.getTree());

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2179:3: ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING )?
			int alt472=2;
			int LA472_0 = input.LA(1);
			if ( (LA472_0==COMMENT_SYM) ) {
				alt472=1;
			}
			switch (alt472) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2179:4: COMMENT_SYM ( EQ_SYM )? TEXT_STRING
					{
					COMMENT_SYM1358=(Token)match(input,COMMENT_SYM,FOLLOW_COMMENT_SYM_in_partition_definition29851); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMENT_SYM1358_tree = (Object)adaptor.create(COMMENT_SYM1358);
					adaptor.addChild(root_0, COMMENT_SYM1358_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2179:16: ( EQ_SYM )?
					int alt471=2;
					int LA471_0 = input.LA(1);
					if ( (LA471_0==EQ_SYM) ) {
						alt471=1;
					}
					switch (alt471) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2179:17: EQ_SYM
							{
							EQ_SYM1359=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_partition_definition29854); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1359_tree = (Object)adaptor.create(EQ_SYM1359);
							adaptor.addChild(root_0, EQ_SYM1359_tree);
							}

							}
							break;

					}

					TEXT_STRING1360=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_partition_definition29858); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING1360_tree = (Object)adaptor.create(TEXT_STRING1360);
					adaptor.addChild(root_0, TEXT_STRING1360_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2180:3: ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )?
			int alt474=2;
			int LA474_0 = input.LA(1);
			if ( (LA474_0==DATA_SYM) ) {
				alt474=1;
			}
			switch (alt474) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2180:4: DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING
					{
					DATA_SYM1361=(Token)match(input,DATA_SYM,FOLLOW_DATA_SYM_in_partition_definition29866); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DATA_SYM1361_tree = (Object)adaptor.create(DATA_SYM1361);
					adaptor.addChild(root_0, DATA_SYM1361_tree);
					}

					DIRECTORY_SYM1362=(Token)match(input,DIRECTORY_SYM,FOLLOW_DIRECTORY_SYM_in_partition_definition29868); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DIRECTORY_SYM1362_tree = (Object)adaptor.create(DIRECTORY_SYM1362);
					adaptor.addChild(root_0, DIRECTORY_SYM1362_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2180:27: ( EQ_SYM )?
					int alt473=2;
					int LA473_0 = input.LA(1);
					if ( (LA473_0==EQ_SYM) ) {
						alt473=1;
					}
					switch (alt473) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2180:28: EQ_SYM
							{
							EQ_SYM1363=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_partition_definition29871); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1363_tree = (Object)adaptor.create(EQ_SYM1363);
							adaptor.addChild(root_0, EQ_SYM1363_tree);
							}

							}
							break;

					}

					TEXT_STRING1364=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_partition_definition29875); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING1364_tree = (Object)adaptor.create(TEXT_STRING1364);
					adaptor.addChild(root_0, TEXT_STRING1364_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2181:3: ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )?
			int alt476=2;
			int LA476_0 = input.LA(1);
			if ( (LA476_0==INDEX_SYM) ) {
				alt476=1;
			}
			switch (alt476) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2181:4: INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING
					{
					INDEX_SYM1365=(Token)match(input,INDEX_SYM,FOLLOW_INDEX_SYM_in_partition_definition29882); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INDEX_SYM1365_tree = (Object)adaptor.create(INDEX_SYM1365);
					adaptor.addChild(root_0, INDEX_SYM1365_tree);
					}

					DIRECTORY_SYM1366=(Token)match(input,DIRECTORY_SYM,FOLLOW_DIRECTORY_SYM_in_partition_definition29884); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DIRECTORY_SYM1366_tree = (Object)adaptor.create(DIRECTORY_SYM1366);
					adaptor.addChild(root_0, DIRECTORY_SYM1366_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2181:28: ( EQ_SYM )?
					int alt475=2;
					int LA475_0 = input.LA(1);
					if ( (LA475_0==EQ_SYM) ) {
						alt475=1;
					}
					switch (alt475) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2181:29: EQ_SYM
							{
							EQ_SYM1367=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_partition_definition29887); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1367_tree = (Object)adaptor.create(EQ_SYM1367);
							adaptor.addChild(root_0, EQ_SYM1367_tree);
							}

							}
							break;

					}

					TEXT_STRING1368=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_partition_definition29891); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING1368_tree = (Object)adaptor.create(TEXT_STRING1368);
					adaptor.addChild(root_0, TEXT_STRING1368_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2182:3: ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM )?
			int alt478=2;
			int LA478_0 = input.LA(1);
			if ( (LA478_0==MAX_ROWS) ) {
				alt478=1;
			}
			switch (alt478) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2182:4: MAX_ROWS ( EQ_SYM )? INTEGER_NUM
					{
					MAX_ROWS1369=(Token)match(input,MAX_ROWS,FOLLOW_MAX_ROWS_in_partition_definition29898); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MAX_ROWS1369_tree = (Object)adaptor.create(MAX_ROWS1369);
					adaptor.addChild(root_0, MAX_ROWS1369_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2182:13: ( EQ_SYM )?
					int alt477=2;
					int LA477_0 = input.LA(1);
					if ( (LA477_0==EQ_SYM) ) {
						alt477=1;
					}
					switch (alt477) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2182:14: EQ_SYM
							{
							EQ_SYM1370=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_partition_definition29901); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1370_tree = (Object)adaptor.create(EQ_SYM1370);
							adaptor.addChild(root_0, EQ_SYM1370_tree);
							}

							}
							break;

					}

					INTEGER_NUM1371=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_partition_definition29905); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM1371_tree = (Object)adaptor.create(INTEGER_NUM1371);
					adaptor.addChild(root_0, INTEGER_NUM1371_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2183:3: ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM )?
			int alt480=2;
			int LA480_0 = input.LA(1);
			if ( (LA480_0==MIN_ROWS) ) {
				alt480=1;
			}
			switch (alt480) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2183:4: MIN_ROWS ( EQ_SYM )? INTEGER_NUM
					{
					MIN_ROWS1372=(Token)match(input,MIN_ROWS,FOLLOW_MIN_ROWS_in_partition_definition29912); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MIN_ROWS1372_tree = (Object)adaptor.create(MIN_ROWS1372);
					adaptor.addChild(root_0, MIN_ROWS1372_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2183:13: ( EQ_SYM )?
					int alt479=2;
					int LA479_0 = input.LA(1);
					if ( (LA479_0==EQ_SYM) ) {
						alt479=1;
					}
					switch (alt479) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2183:14: EQ_SYM
							{
							EQ_SYM1373=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_partition_definition29915); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1373_tree = (Object)adaptor.create(EQ_SYM1373);
							adaptor.addChild(root_0, EQ_SYM1373_tree);
							}

							}
							break;

					}

					INTEGER_NUM1374=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_partition_definition29919); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM1374_tree = (Object)adaptor.create(INTEGER_NUM1374);
					adaptor.addChild(root_0, INTEGER_NUM1374_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2184:3: ( LPAREN subpartition_definition ( COMMA subpartition_definition )* RPAREN )?
			int alt482=2;
			int LA482_0 = input.LA(1);
			if ( (LA482_0==LPAREN) ) {
				alt482=1;
			}
			switch (alt482) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2184:4: LPAREN subpartition_definition ( COMMA subpartition_definition )* RPAREN
					{
					LPAREN1375=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_definition29926); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1375_tree = (Object)adaptor.create(LPAREN1375);
					adaptor.addChild(root_0, LPAREN1375_tree);
					}

					pushFollow(FOLLOW_subpartition_definition_in_partition_definition29928);
					subpartition_definition1376=subpartition_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, subpartition_definition1376.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2184:35: ( COMMA subpartition_definition )*
					loop481:
					while (true) {
						int alt481=2;
						int LA481_0 = input.LA(1);
						if ( (LA481_0==COMMA) ) {
							alt481=1;
						}

						switch (alt481) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2184:36: COMMA subpartition_definition
							{
							COMMA1377=(Token)match(input,COMMA,FOLLOW_COMMA_in_partition_definition29931); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA1377_tree = (Object)adaptor.create(COMMA1377);
							adaptor.addChild(root_0, COMMA1377_tree);
							}

							pushFollow(FOLLOW_subpartition_definition_in_partition_definition29934);
							subpartition_definition1378=subpartition_definition();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, subpartition_definition1378.getTree());

							}
							break;

						default :
							break loop481;
						}
					}

					RPAREN1379=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_definition29938); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1379_tree = (Object)adaptor.create(RPAREN1379);
					adaptor.addChild(root_0, RPAREN1379_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "partition_definition"


	public static class subpartition_definition_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "subpartition_definition"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2187:1: subpartition_definition : SUBPARTITION_SYM partition_logical_name ( ( STORAGE_SYM )? ENGINE_SYM ( EQ_SYM )? engine_name )? ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING )? ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM )? ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM )? ;
	public final SQLParser.subpartition_definition_return subpartition_definition() throws RecognitionException {
		SQLParser.subpartition_definition_return retval = new SQLParser.subpartition_definition_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token SUBPARTITION_SYM1380=null;
		Token STORAGE_SYM1382=null;
		Token ENGINE_SYM1383=null;
		Token EQ_SYM1384=null;
		Token COMMENT_SYM1386=null;
		Token EQ_SYM1387=null;
		Token TEXT_STRING1388=null;
		Token DATA_SYM1389=null;
		Token DIRECTORY_SYM1390=null;
		Token EQ_SYM1391=null;
		Token TEXT_STRING1392=null;
		Token INDEX_SYM1393=null;
		Token DIRECTORY_SYM1394=null;
		Token EQ_SYM1395=null;
		Token TEXT_STRING1396=null;
		Token MAX_ROWS1397=null;
		Token EQ_SYM1398=null;
		Token INTEGER_NUM1399=null;
		Token MIN_ROWS1400=null;
		Token EQ_SYM1401=null;
		Token INTEGER_NUM1402=null;
		ParserRuleReturnScope partition_logical_name1381 =null;
		ParserRuleReturnScope engine_name1385 =null;

		Object SUBPARTITION_SYM1380_tree=null;
		Object STORAGE_SYM1382_tree=null;
		Object ENGINE_SYM1383_tree=null;
		Object EQ_SYM1384_tree=null;
		Object COMMENT_SYM1386_tree=null;
		Object EQ_SYM1387_tree=null;
		Object TEXT_STRING1388_tree=null;
		Object DATA_SYM1389_tree=null;
		Object DIRECTORY_SYM1390_tree=null;
		Object EQ_SYM1391_tree=null;
		Object TEXT_STRING1392_tree=null;
		Object INDEX_SYM1393_tree=null;
		Object DIRECTORY_SYM1394_tree=null;
		Object EQ_SYM1395_tree=null;
		Object TEXT_STRING1396_tree=null;
		Object MAX_ROWS1397_tree=null;
		Object EQ_SYM1398_tree=null;
		Object INTEGER_NUM1399_tree=null;
		Object MIN_ROWS1400_tree=null;
		Object EQ_SYM1401_tree=null;
		Object INTEGER_NUM1402_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2187:24: ( SUBPARTITION_SYM partition_logical_name ( ( STORAGE_SYM )? ENGINE_SYM ( EQ_SYM )? engine_name )? ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING )? ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM )? ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2188:3: SUBPARTITION_SYM partition_logical_name ( ( STORAGE_SYM )? ENGINE_SYM ( EQ_SYM )? engine_name )? ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING )? ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM )? ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM )?
			{
			root_0 = (Object)adaptor.nil();


			SUBPARTITION_SYM1380=(Token)match(input,SUBPARTITION_SYM,FOLLOW_SUBPARTITION_SYM_in_subpartition_definition29950); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			SUBPARTITION_SYM1380_tree = (Object)adaptor.create(SUBPARTITION_SYM1380);
			adaptor.addChild(root_0, SUBPARTITION_SYM1380_tree);
			}

			pushFollow(FOLLOW_partition_logical_name_in_subpartition_definition29952);
			partition_logical_name1381=partition_logical_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_logical_name1381.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2189:3: ( ( STORAGE_SYM )? ENGINE_SYM ( EQ_SYM )? engine_name )?
			int alt485=2;
			int LA485_0 = input.LA(1);
			if ( (LA485_0==ENGINE_SYM||LA485_0==STORAGE_SYM) ) {
				alt485=1;
			}
			switch (alt485) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2189:4: ( STORAGE_SYM )? ENGINE_SYM ( EQ_SYM )? engine_name
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2189:4: ( STORAGE_SYM )?
					int alt483=2;
					int LA483_0 = input.LA(1);
					if ( (LA483_0==STORAGE_SYM) ) {
						alt483=1;
					}
					switch (alt483) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2189:5: STORAGE_SYM
							{
							STORAGE_SYM1382=(Token)match(input,STORAGE_SYM,FOLLOW_STORAGE_SYM_in_subpartition_definition29958); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							STORAGE_SYM1382_tree = (Object)adaptor.create(STORAGE_SYM1382);
							adaptor.addChild(root_0, STORAGE_SYM1382_tree);
							}

							}
							break;

					}

					ENGINE_SYM1383=(Token)match(input,ENGINE_SYM,FOLLOW_ENGINE_SYM_in_subpartition_definition29962); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ENGINE_SYM1383_tree = (Object)adaptor.create(ENGINE_SYM1383);
					adaptor.addChild(root_0, ENGINE_SYM1383_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2189:30: ( EQ_SYM )?
					int alt484=2;
					int LA484_0 = input.LA(1);
					if ( (LA484_0==EQ_SYM) ) {
						alt484=1;
					}
					switch (alt484) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2189:31: EQ_SYM
							{
							EQ_SYM1384=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_subpartition_definition29965); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1384_tree = (Object)adaptor.create(EQ_SYM1384);
							adaptor.addChild(root_0, EQ_SYM1384_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_engine_name_in_subpartition_definition29969);
					engine_name1385=engine_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, engine_name1385.getTree());

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2190:3: ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING )?
			int alt487=2;
			int LA487_0 = input.LA(1);
			if ( (LA487_0==COMMENT_SYM) ) {
				alt487=1;
			}
			switch (alt487) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2190:4: COMMENT_SYM ( EQ_SYM )? TEXT_STRING
					{
					COMMENT_SYM1386=(Token)match(input,COMMENT_SYM,FOLLOW_COMMENT_SYM_in_subpartition_definition29976); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMENT_SYM1386_tree = (Object)adaptor.create(COMMENT_SYM1386);
					adaptor.addChild(root_0, COMMENT_SYM1386_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2190:16: ( EQ_SYM )?
					int alt486=2;
					int LA486_0 = input.LA(1);
					if ( (LA486_0==EQ_SYM) ) {
						alt486=1;
					}
					switch (alt486) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2190:17: EQ_SYM
							{
							EQ_SYM1387=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_subpartition_definition29979); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1387_tree = (Object)adaptor.create(EQ_SYM1387);
							adaptor.addChild(root_0, EQ_SYM1387_tree);
							}

							}
							break;

					}

					TEXT_STRING1388=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_subpartition_definition29983); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING1388_tree = (Object)adaptor.create(TEXT_STRING1388);
					adaptor.addChild(root_0, TEXT_STRING1388_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2191:3: ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )?
			int alt489=2;
			int LA489_0 = input.LA(1);
			if ( (LA489_0==DATA_SYM) ) {
				alt489=1;
			}
			switch (alt489) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2191:4: DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING
					{
					DATA_SYM1389=(Token)match(input,DATA_SYM,FOLLOW_DATA_SYM_in_subpartition_definition29991); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DATA_SYM1389_tree = (Object)adaptor.create(DATA_SYM1389);
					adaptor.addChild(root_0, DATA_SYM1389_tree);
					}

					DIRECTORY_SYM1390=(Token)match(input,DIRECTORY_SYM,FOLLOW_DIRECTORY_SYM_in_subpartition_definition29993); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DIRECTORY_SYM1390_tree = (Object)adaptor.create(DIRECTORY_SYM1390);
					adaptor.addChild(root_0, DIRECTORY_SYM1390_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2191:27: ( EQ_SYM )?
					int alt488=2;
					int LA488_0 = input.LA(1);
					if ( (LA488_0==EQ_SYM) ) {
						alt488=1;
					}
					switch (alt488) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2191:28: EQ_SYM
							{
							EQ_SYM1391=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_subpartition_definition29996); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1391_tree = (Object)adaptor.create(EQ_SYM1391);
							adaptor.addChild(root_0, EQ_SYM1391_tree);
							}

							}
							break;

					}

					TEXT_STRING1392=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_subpartition_definition30000); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING1392_tree = (Object)adaptor.create(TEXT_STRING1392);
					adaptor.addChild(root_0, TEXT_STRING1392_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2192:3: ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )?
			int alt491=2;
			int LA491_0 = input.LA(1);
			if ( (LA491_0==INDEX_SYM) ) {
				alt491=1;
			}
			switch (alt491) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2192:4: INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING
					{
					INDEX_SYM1393=(Token)match(input,INDEX_SYM,FOLLOW_INDEX_SYM_in_subpartition_definition30007); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INDEX_SYM1393_tree = (Object)adaptor.create(INDEX_SYM1393);
					adaptor.addChild(root_0, INDEX_SYM1393_tree);
					}

					DIRECTORY_SYM1394=(Token)match(input,DIRECTORY_SYM,FOLLOW_DIRECTORY_SYM_in_subpartition_definition30009); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DIRECTORY_SYM1394_tree = (Object)adaptor.create(DIRECTORY_SYM1394);
					adaptor.addChild(root_0, DIRECTORY_SYM1394_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2192:28: ( EQ_SYM )?
					int alt490=2;
					int LA490_0 = input.LA(1);
					if ( (LA490_0==EQ_SYM) ) {
						alt490=1;
					}
					switch (alt490) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2192:29: EQ_SYM
							{
							EQ_SYM1395=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_subpartition_definition30012); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1395_tree = (Object)adaptor.create(EQ_SYM1395);
							adaptor.addChild(root_0, EQ_SYM1395_tree);
							}

							}
							break;

					}

					TEXT_STRING1396=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_subpartition_definition30016); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING1396_tree = (Object)adaptor.create(TEXT_STRING1396);
					adaptor.addChild(root_0, TEXT_STRING1396_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2193:3: ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM )?
			int alt493=2;
			int LA493_0 = input.LA(1);
			if ( (LA493_0==MAX_ROWS) ) {
				alt493=1;
			}
			switch (alt493) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2193:4: MAX_ROWS ( EQ_SYM )? INTEGER_NUM
					{
					MAX_ROWS1397=(Token)match(input,MAX_ROWS,FOLLOW_MAX_ROWS_in_subpartition_definition30023); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MAX_ROWS1397_tree = (Object)adaptor.create(MAX_ROWS1397);
					adaptor.addChild(root_0, MAX_ROWS1397_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2193:13: ( EQ_SYM )?
					int alt492=2;
					int LA492_0 = input.LA(1);
					if ( (LA492_0==EQ_SYM) ) {
						alt492=1;
					}
					switch (alt492) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2193:14: EQ_SYM
							{
							EQ_SYM1398=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_subpartition_definition30026); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1398_tree = (Object)adaptor.create(EQ_SYM1398);
							adaptor.addChild(root_0, EQ_SYM1398_tree);
							}

							}
							break;

					}

					INTEGER_NUM1399=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_subpartition_definition30030); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM1399_tree = (Object)adaptor.create(INTEGER_NUM1399);
					adaptor.addChild(root_0, INTEGER_NUM1399_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2194:3: ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM )?
			int alt495=2;
			int LA495_0 = input.LA(1);
			if ( (LA495_0==MIN_ROWS) ) {
				alt495=1;
			}
			switch (alt495) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2194:4: MIN_ROWS ( EQ_SYM )? INTEGER_NUM
					{
					MIN_ROWS1400=(Token)match(input,MIN_ROWS,FOLLOW_MIN_ROWS_in_subpartition_definition30037); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MIN_ROWS1400_tree = (Object)adaptor.create(MIN_ROWS1400);
					adaptor.addChild(root_0, MIN_ROWS1400_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2194:13: ( EQ_SYM )?
					int alt494=2;
					int LA494_0 = input.LA(1);
					if ( (LA494_0==EQ_SYM) ) {
						alt494=1;
					}
					switch (alt494) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2194:14: EQ_SYM
							{
							EQ_SYM1401=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_subpartition_definition30040); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1401_tree = (Object)adaptor.create(EQ_SYM1401);
							adaptor.addChild(root_0, EQ_SYM1401_tree);
							}

							}
							break;

					}

					INTEGER_NUM1402=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_subpartition_definition30044); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM1402_tree = (Object)adaptor.create(INTEGER_NUM1402);
					adaptor.addChild(root_0, INTEGER_NUM1402_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subpartition_definition"


	public static class length_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "length"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2197:1: length : INTEGER_NUM ;
	public final SQLParser.length_return length() throws RecognitionException {
		SQLParser.length_return retval = new SQLParser.length_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token INTEGER_NUM1403=null;

		Object INTEGER_NUM1403_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2197:9: ( INTEGER_NUM )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2197:11: INTEGER_NUM
			{
			root_0 = (Object)adaptor.nil();


			INTEGER_NUM1403=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_length30056); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			INTEGER_NUM1403_tree = (Object)adaptor.create(INTEGER_NUM1403);
			adaptor.addChild(root_0, INTEGER_NUM1403_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "length"


	public static class alter_table_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "alter_table_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2201:1: alter_table_statement : ALTER ( IGNORE_SYM )? TABLE table_name ( alter_table_specification ( COMMA alter_table_specification )* )? ( partition_options )? ;
	public final SQLParser.alter_table_statement_return alter_table_statement() throws RecognitionException {
		SQLParser.alter_table_statement_return retval = new SQLParser.alter_table_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token ALTER1404=null;
		Token IGNORE_SYM1405=null;
		Token TABLE1406=null;
		Token COMMA1409=null;
		ParserRuleReturnScope table_name1407 =null;
		ParserRuleReturnScope alter_table_specification1408 =null;
		ParserRuleReturnScope alter_table_specification1410 =null;
		ParserRuleReturnScope partition_options1411 =null;

		Object ALTER1404_tree=null;
		Object IGNORE_SYM1405_tree=null;
		Object TABLE1406_tree=null;
		Object COMMA1409_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2201:22: ( ALTER ( IGNORE_SYM )? TABLE table_name ( alter_table_specification ( COMMA alter_table_specification )* )? ( partition_options )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2202:3: ALTER ( IGNORE_SYM )? TABLE table_name ( alter_table_specification ( COMMA alter_table_specification )* )? ( partition_options )?
			{
			root_0 = (Object)adaptor.nil();


			ALTER1404=(Token)match(input,ALTER,FOLLOW_ALTER_in_alter_table_statement30067); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			ALTER1404_tree = (Object)adaptor.create(ALTER1404);
			adaptor.addChild(root_0, ALTER1404_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2202:9: ( IGNORE_SYM )?
			int alt496=2;
			int LA496_0 = input.LA(1);
			if ( (LA496_0==IGNORE_SYM) ) {
				alt496=1;
			}
			switch (alt496) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2202:10: IGNORE_SYM
					{
					IGNORE_SYM1405=(Token)match(input,IGNORE_SYM,FOLLOW_IGNORE_SYM_in_alter_table_statement30070); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IGNORE_SYM1405_tree = (Object)adaptor.create(IGNORE_SYM1405);
					adaptor.addChild(root_0, IGNORE_SYM1405_tree);
					}

					}
					break;

			}

			TABLE1406=(Token)match(input,TABLE,FOLLOW_TABLE_in_alter_table_statement30074); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			TABLE1406_tree = (Object)adaptor.create(TABLE1406);
			adaptor.addChild(root_0, TABLE1406_tree);
			}

			pushFollow(FOLLOW_table_name_in_alter_table_statement30076);
			table_name1407=table_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1407.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2203:3: ( alter_table_specification ( COMMA alter_table_specification )* )?
			int alt498=2;
			int LA498_0 = input.LA(1);
			if ( (LA498_0==ADD_SYM||LA498_0==ALGORITHM_SYM||(LA498_0 >= ALTER && LA498_0 <= ANALYZE_SYM)||LA498_0==AUTO_INCREMENT||LA498_0==AVG_ROW_LENGTH||LA498_0==CHANGE||LA498_0==CHARACTER_SYM||(LA498_0 >= CHECKSUM_SYM && LA498_0 <= CHECK_SYM)||LA498_0==COALESCE||LA498_0==COLLATE_SYM||LA498_0==COMMENT_SYM||LA498_0==CONNECTION_SYM||LA498_0==CONVERT_SYM||LA498_0==DATA_SYM||LA498_0==DEFAULT||LA498_0==DELAY_KEY_WRITE_SYM||(LA498_0 >= DISABLE_SYM && LA498_0 <= DISCARD)||LA498_0==DROP||LA498_0==ENABLE_SYM||LA498_0==ENGINE_SYM||LA498_0==EXCHANGE_SYM||LA498_0==FORCE_SYM||LA498_0==IMPORT||LA498_0==INDEX_SYM||LA498_0==INSERT_METHOD||LA498_0==KEY_BLOCK_SIZE||LA498_0==LOCK||LA498_0==MAX_ROWS||LA498_0==MIN_ROWS||LA498_0==MODIFY_SYM||LA498_0==OPTIMIZE||LA498_0==ORDER_SYM||LA498_0==PACK_KEYS_SYM||LA498_0==PASSWORD||LA498_0==REBUILD_SYM||(LA498_0 >= REMOVE_SYM && LA498_0 <= REPAIR)||LA498_0==ROW_FORMAT_SYM||(LA498_0 >= STATS_AUTO_RECALC && LA498_0 <= STATS_PERSISTENT)||LA498_0==TRUNCATE||LA498_0==UNION_SYM) ) {
				alt498=1;
			}
			switch (alt498) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2203:5: alter_table_specification ( COMMA alter_table_specification )*
					{
					pushFollow(FOLLOW_alter_table_specification_in_alter_table_statement30082);
					alter_table_specification1408=alter_table_specification();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_table_specification1408.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2203:31: ( COMMA alter_table_specification )*
					loop497:
					while (true) {
						int alt497=2;
						int LA497_0 = input.LA(1);
						if ( (LA497_0==COMMA) ) {
							switch ( input.LA(2) ) {
							case ALTER:
								{
								int LA497_3 = input.LA(3);
								if ( (LA497_3==COLUMN_SYM||LA497_3==ID) ) {
									alt497=1;
								}

								}
								break;
							case DROP:
								{
								int LA497_4 = input.LA(3);
								if ( (LA497_4==INDEX_SYM) ) {
									int LA497_8 = input.LA(4);
									if ( (LA497_8==ID) ) {
										int LA497_9 = input.LA(5);
										if ( (LA497_9==EOF||LA497_9==COMMA||LA497_9==PARTITION_SYM||LA497_9==SEMI) ) {
											alt497=1;
										}

									}

								}
								else if ( (LA497_4==COLUMN_SYM||LA497_4==FOREIGN||LA497_4==ID||LA497_4==KEY_SYM||LA497_4==PARTITION_SYM||LA497_4==PRIMARY_SYM) ) {
									alt497=1;
								}

								}
								break;
							case RENAME:
								{
								int LA497_5 = input.LA(3);
								if ( (LA497_5==AS_SYM||LA497_5==ID||LA497_5==TO_SYM) ) {
									alt497=1;
								}

								}
								break;
							case TRUNCATE:
								{
								int LA497_6 = input.LA(3);
								if ( (LA497_6==PARTITION_SYM) ) {
									alt497=1;
								}

								}
								break;
							case ADD_SYM:
							case ALGORITHM_SYM:
							case ANALYZE_SYM:
							case AUTO_INCREMENT:
							case AVG_ROW_LENGTH:
							case CHANGE:
							case CHARACTER_SYM:
							case CHECKSUM_SYM:
							case CHECK_SYM:
							case COALESCE:
							case COLLATE_SYM:
							case COMMENT_SYM:
							case CONNECTION_SYM:
							case CONVERT_SYM:
							case DATA_SYM:
							case DEFAULT:
							case DELAY_KEY_WRITE_SYM:
							case DISABLE_SYM:
							case DISCARD:
							case ENABLE_SYM:
							case ENGINE_SYM:
							case EXCHANGE_SYM:
							case FORCE_SYM:
							case IMPORT:
							case INDEX_SYM:
							case INSERT_METHOD:
							case KEY_BLOCK_SIZE:
							case LOCK:
							case MAX_ROWS:
							case MIN_ROWS:
							case MODIFY_SYM:
							case OPTIMIZE:
							case ORDER_SYM:
							case PACK_KEYS_SYM:
							case PASSWORD:
							case REBUILD_SYM:
							case REMOVE_SYM:
							case REORGANIZE_SYM:
							case REPAIR:
							case ROW_FORMAT_SYM:
							case STATS_AUTO_RECALC:
							case STATS_PERSISTENT:
							case UNION_SYM:
								{
								alt497=1;
								}
								break;
							}
						}

						switch (alt497) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2203:32: COMMA alter_table_specification
							{
							COMMA1409=(Token)match(input,COMMA,FOLLOW_COMMA_in_alter_table_statement30085); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA1409_tree = (Object)adaptor.create(COMMA1409);
							adaptor.addChild(root_0, COMMA1409_tree);
							}

							pushFollow(FOLLOW_alter_table_specification_in_alter_table_statement30087);
							alter_table_specification1410=alter_table_specification();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_table_specification1410.getTree());

							}
							break;

						default :
							break loop497;
						}
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2204:3: ( partition_options )?
			int alt499=2;
			int LA499_0 = input.LA(1);
			if ( (LA499_0==PARTITION_SYM) ) {
				alt499=1;
			}
			switch (alt499) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2204:5: partition_options
					{
					pushFollow(FOLLOW_partition_options_in_alter_table_statement30098);
					partition_options1411=partition_options();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_options1411.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_table_statement"


	public static class alter_table_specification_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "alter_table_specification"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2206:1: alter_table_specification : ( table_options | ( ADD_SYM ( COLUMN_SYM )? column_name column_definition ( ( FIRST_SYM | AFTER_SYM ) column_name )? ) | ( ADD_SYM ( COLUMN_SYM )? LPAREN column_definitions RPAREN ) | ( ADD_SYM ( INDEX_SYM | KEY_SYM ) ( index_name )? ( index_type )? LPAREN index_column_names RPAREN ( index_option )* ) | ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? PRIMARY_SYM KEY_SYM ( index_type )? LPAREN index_column_names RPAREN ( index_option )* ) | ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? UNIQUE_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* ) | ( ADD_SYM FULLTEXT_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_names RPAREN ( index_option )* ) | ( ADD_SYM SPATIAL_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_names RPAREN ( index_option )* ) | ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? FOREIGN KEY_SYM ( index_name )? LPAREN index_column_names RPAREN reference_definition ) | ( ALGORITHM_SYM ( EQ_SYM )? ( DEFAULT | INPLACE_SYM | COPY_SYM ) ) | ( ALTER ( COLUMN_SYM )? column_name ( ( SET_SYM DEFAULT literal_value ) | ( DROP DEFAULT ) ) ) | ( CHANGE ( COLUMN_SYM )? column_name column_name column_definition ( FIRST_SYM | AFTER_SYM column_name )? ) | ( LOCK ( EQ_SYM )? ( DEFAULT | NONE_SYM | SHARED_SYM | EXCLUSIVE_SYM ) ) | ( MODIFY_SYM ( COLUMN_SYM )? column_name column_definition ( FIRST_SYM | AFTER_SYM column_name )? ) | ( DROP ( COLUMN_SYM )? column_name ) | ( DROP PRIMARY_SYM KEY_SYM ) | ( DROP ( INDEX_SYM | KEY_SYM ) index_name ) | ( DROP FOREIGN KEY_SYM foreign_key_symbol_name ) | ( DISABLE_SYM KEYS ) | ( ENABLE_SYM KEYS ) | ( RENAME ( TO_SYM | AS_SYM )? table_name ) | ( ORDER_SYM BY_SYM column_name ( COMMA column_name )* ) | ( CONVERT_SYM TO_SYM CHARACTER_SYM SET_SYM charset_name ( COLLATE_SYM collation_name )? ) | ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ( COLLATE_SYM ( EQ_SYM )? collation_name )? ) | ( DISCARD TABLESPACE ) | ( IMPORT TABLESPACE ) | ( FORCE_SYM ) | ( ADD_SYM PARTITION_SYM LPAREN partition_definition RPAREN ) | ( DROP PARTITION_SYM partition_names ) | ( TRUNCATE PARTITION_SYM ( partition_names | ALL ) ) | ( COALESCE PARTITION_SYM INTEGER_NUM ) | ( REORGANIZE_SYM PARTITION_SYM partition_names INTO LPAREN partition_definition ( COMMA partition_definition )* RPAREN ) | ( EXCHANGE_SYM PARTITION_SYM partition_name WITH TABLE table_name ) | ( ANALYZE_SYM PARTITION_SYM ( partition_names | ALL ) ) | ( CHECK_SYM PARTITION_SYM ( partition_names | ALL ) ) | ( OPTIMIZE PARTITION_SYM ( partition_names | ALL ) ) | ( REBUILD_SYM PARTITION_SYM ( partition_names | ALL ) ) | ( REPAIR PARTITION_SYM ( partition_names | ALL ) ) | ( REMOVE_SYM PARTITIONING_SYM ) );
	public final SQLParser.alter_table_specification_return alter_table_specification() throws RecognitionException {
		SQLParser.alter_table_specification_return retval = new SQLParser.alter_table_specification_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token ADD_SYM1413=null;
		Token COLUMN_SYM1414=null;
		Token set1417=null;
		Token ADD_SYM1419=null;
		Token COLUMN_SYM1420=null;
		Token LPAREN1421=null;
		Token RPAREN1423=null;
		Token ADD_SYM1424=null;
		Token set1425=null;
		Token LPAREN1428=null;
		Token RPAREN1430=null;
		Token ADD_SYM1432=null;
		Token CONSTRAINT1433=null;
		Token PRIMARY_SYM1435=null;
		Token KEY_SYM1436=null;
		Token LPAREN1438=null;
		Token RPAREN1440=null;
		Token ADD_SYM1442=null;
		Token CONSTRAINT1443=null;
		Token UNIQUE_SYM1445=null;
		Token set1446=null;
		Token LPAREN1449=null;
		Token COMMA1451=null;
		Token RPAREN1453=null;
		Token ADD_SYM1455=null;
		Token FULLTEXT_SYM1456=null;
		Token set1457=null;
		Token LPAREN1459=null;
		Token RPAREN1461=null;
		Token ADD_SYM1463=null;
		Token SPATIAL_SYM1464=null;
		Token set1465=null;
		Token LPAREN1467=null;
		Token RPAREN1469=null;
		Token ADD_SYM1471=null;
		Token CONSTRAINT1472=null;
		Token FOREIGN1474=null;
		Token KEY_SYM1475=null;
		Token LPAREN1477=null;
		Token RPAREN1479=null;
		Token ALGORITHM_SYM1481=null;
		Token EQ_SYM1482=null;
		Token set1483=null;
		Token ALTER1484=null;
		Token COLUMN_SYM1485=null;
		Token SET_SYM1487=null;
		Token DEFAULT1488=null;
		Token DROP1490=null;
		Token DEFAULT1491=null;
		Token CHANGE1492=null;
		Token COLUMN_SYM1493=null;
		Token FIRST_SYM1497=null;
		Token AFTER_SYM1498=null;
		Token LOCK1500=null;
		Token EQ_SYM1501=null;
		Token set1502=null;
		Token MODIFY_SYM1503=null;
		Token COLUMN_SYM1504=null;
		Token FIRST_SYM1507=null;
		Token AFTER_SYM1508=null;
		Token DROP1510=null;
		Token COLUMN_SYM1511=null;
		Token DROP1513=null;
		Token PRIMARY_SYM1514=null;
		Token KEY_SYM1515=null;
		Token DROP1516=null;
		Token set1517=null;
		Token DROP1519=null;
		Token FOREIGN1520=null;
		Token KEY_SYM1521=null;
		Token DISABLE_SYM1523=null;
		Token KEYS1524=null;
		Token ENABLE_SYM1525=null;
		Token KEYS1526=null;
		Token RENAME1527=null;
		Token set1528=null;
		Token ORDER_SYM1530=null;
		Token BY_SYM1531=null;
		Token COMMA1533=null;
		Token CONVERT_SYM1535=null;
		Token TO_SYM1536=null;
		Token CHARACTER_SYM1537=null;
		Token SET_SYM1538=null;
		Token COLLATE_SYM1540=null;
		Token DEFAULT1542=null;
		Token CHARACTER_SYM1543=null;
		Token SET_SYM1544=null;
		Token EQ_SYM1545=null;
		Token COLLATE_SYM1547=null;
		Token EQ_SYM1548=null;
		Token DISCARD1550=null;
		Token TABLESPACE1551=null;
		Token IMPORT1552=null;
		Token TABLESPACE1553=null;
		Token FORCE_SYM1554=null;
		Token ADD_SYM1555=null;
		Token PARTITION_SYM1556=null;
		Token LPAREN1557=null;
		Token RPAREN1559=null;
		Token DROP1560=null;
		Token PARTITION_SYM1561=null;
		Token TRUNCATE1563=null;
		Token PARTITION_SYM1564=null;
		Token ALL1566=null;
		Token COALESCE1567=null;
		Token PARTITION_SYM1568=null;
		Token INTEGER_NUM1569=null;
		Token REORGANIZE_SYM1570=null;
		Token PARTITION_SYM1571=null;
		Token INTO1573=null;
		Token LPAREN1574=null;
		Token COMMA1576=null;
		Token RPAREN1578=null;
		Token EXCHANGE_SYM1579=null;
		Token PARTITION_SYM1580=null;
		Token WITH1582=null;
		Token TABLE1583=null;
		Token ANALYZE_SYM1585=null;
		Token PARTITION_SYM1586=null;
		Token ALL1588=null;
		Token CHECK_SYM1589=null;
		Token PARTITION_SYM1590=null;
		Token ALL1592=null;
		Token OPTIMIZE1593=null;
		Token PARTITION_SYM1594=null;
		Token ALL1596=null;
		Token REBUILD_SYM1597=null;
		Token PARTITION_SYM1598=null;
		Token ALL1600=null;
		Token REPAIR1601=null;
		Token PARTITION_SYM1602=null;
		Token ALL1604=null;
		Token REMOVE_SYM1605=null;
		Token PARTITIONING_SYM1606=null;
		ParserRuleReturnScope table_options1412 =null;
		ParserRuleReturnScope column_name1415 =null;
		ParserRuleReturnScope column_definition1416 =null;
		ParserRuleReturnScope column_name1418 =null;
		ParserRuleReturnScope column_definitions1422 =null;
		ParserRuleReturnScope index_name1426 =null;
		ParserRuleReturnScope index_type1427 =null;
		ParserRuleReturnScope index_column_names1429 =null;
		ParserRuleReturnScope index_option1431 =null;
		ParserRuleReturnScope constraint_symbol_name1434 =null;
		ParserRuleReturnScope index_type1437 =null;
		ParserRuleReturnScope index_column_names1439 =null;
		ParserRuleReturnScope index_option1441 =null;
		ParserRuleReturnScope constraint_symbol_name1444 =null;
		ParserRuleReturnScope index_name1447 =null;
		ParserRuleReturnScope index_type1448 =null;
		ParserRuleReturnScope index_column_name1450 =null;
		ParserRuleReturnScope index_column_name1452 =null;
		ParserRuleReturnScope index_option1454 =null;
		ParserRuleReturnScope index_name1458 =null;
		ParserRuleReturnScope index_column_names1460 =null;
		ParserRuleReturnScope index_option1462 =null;
		ParserRuleReturnScope index_name1466 =null;
		ParserRuleReturnScope index_column_names1468 =null;
		ParserRuleReturnScope index_option1470 =null;
		ParserRuleReturnScope constraint_symbol_name1473 =null;
		ParserRuleReturnScope index_name1476 =null;
		ParserRuleReturnScope index_column_names1478 =null;
		ParserRuleReturnScope reference_definition1480 =null;
		ParserRuleReturnScope column_name1486 =null;
		ParserRuleReturnScope literal_value1489 =null;
		ParserRuleReturnScope column_name1494 =null;
		ParserRuleReturnScope column_name1495 =null;
		ParserRuleReturnScope column_definition1496 =null;
		ParserRuleReturnScope column_name1499 =null;
		ParserRuleReturnScope column_name1505 =null;
		ParserRuleReturnScope column_definition1506 =null;
		ParserRuleReturnScope column_name1509 =null;
		ParserRuleReturnScope column_name1512 =null;
		ParserRuleReturnScope index_name1518 =null;
		ParserRuleReturnScope foreign_key_symbol_name1522 =null;
		ParserRuleReturnScope table_name1529 =null;
		ParserRuleReturnScope column_name1532 =null;
		ParserRuleReturnScope column_name1534 =null;
		ParserRuleReturnScope charset_name1539 =null;
		ParserRuleReturnScope collation_name1541 =null;
		ParserRuleReturnScope charset_name1546 =null;
		ParserRuleReturnScope collation_name1549 =null;
		ParserRuleReturnScope partition_definition1558 =null;
		ParserRuleReturnScope partition_names1562 =null;
		ParserRuleReturnScope partition_names1565 =null;
		ParserRuleReturnScope partition_names1572 =null;
		ParserRuleReturnScope partition_definition1575 =null;
		ParserRuleReturnScope partition_definition1577 =null;
		ParserRuleReturnScope partition_name1581 =null;
		ParserRuleReturnScope table_name1584 =null;
		ParserRuleReturnScope partition_names1587 =null;
		ParserRuleReturnScope partition_names1591 =null;
		ParserRuleReturnScope partition_names1595 =null;
		ParserRuleReturnScope partition_names1599 =null;
		ParserRuleReturnScope partition_names1603 =null;

		Object ADD_SYM1413_tree=null;
		Object COLUMN_SYM1414_tree=null;
		Object set1417_tree=null;
		Object ADD_SYM1419_tree=null;
		Object COLUMN_SYM1420_tree=null;
		Object LPAREN1421_tree=null;
		Object RPAREN1423_tree=null;
		Object ADD_SYM1424_tree=null;
		Object set1425_tree=null;
		Object LPAREN1428_tree=null;
		Object RPAREN1430_tree=null;
		Object ADD_SYM1432_tree=null;
		Object CONSTRAINT1433_tree=null;
		Object PRIMARY_SYM1435_tree=null;
		Object KEY_SYM1436_tree=null;
		Object LPAREN1438_tree=null;
		Object RPAREN1440_tree=null;
		Object ADD_SYM1442_tree=null;
		Object CONSTRAINT1443_tree=null;
		Object UNIQUE_SYM1445_tree=null;
		Object set1446_tree=null;
		Object LPAREN1449_tree=null;
		Object COMMA1451_tree=null;
		Object RPAREN1453_tree=null;
		Object ADD_SYM1455_tree=null;
		Object FULLTEXT_SYM1456_tree=null;
		Object set1457_tree=null;
		Object LPAREN1459_tree=null;
		Object RPAREN1461_tree=null;
		Object ADD_SYM1463_tree=null;
		Object SPATIAL_SYM1464_tree=null;
		Object set1465_tree=null;
		Object LPAREN1467_tree=null;
		Object RPAREN1469_tree=null;
		Object ADD_SYM1471_tree=null;
		Object CONSTRAINT1472_tree=null;
		Object FOREIGN1474_tree=null;
		Object KEY_SYM1475_tree=null;
		Object LPAREN1477_tree=null;
		Object RPAREN1479_tree=null;
		Object ALGORITHM_SYM1481_tree=null;
		Object EQ_SYM1482_tree=null;
		Object set1483_tree=null;
		Object ALTER1484_tree=null;
		Object COLUMN_SYM1485_tree=null;
		Object SET_SYM1487_tree=null;
		Object DEFAULT1488_tree=null;
		Object DROP1490_tree=null;
		Object DEFAULT1491_tree=null;
		Object CHANGE1492_tree=null;
		Object COLUMN_SYM1493_tree=null;
		Object FIRST_SYM1497_tree=null;
		Object AFTER_SYM1498_tree=null;
		Object LOCK1500_tree=null;
		Object EQ_SYM1501_tree=null;
		Object set1502_tree=null;
		Object MODIFY_SYM1503_tree=null;
		Object COLUMN_SYM1504_tree=null;
		Object FIRST_SYM1507_tree=null;
		Object AFTER_SYM1508_tree=null;
		Object DROP1510_tree=null;
		Object COLUMN_SYM1511_tree=null;
		Object DROP1513_tree=null;
		Object PRIMARY_SYM1514_tree=null;
		Object KEY_SYM1515_tree=null;
		Object DROP1516_tree=null;
		Object set1517_tree=null;
		Object DROP1519_tree=null;
		Object FOREIGN1520_tree=null;
		Object KEY_SYM1521_tree=null;
		Object DISABLE_SYM1523_tree=null;
		Object KEYS1524_tree=null;
		Object ENABLE_SYM1525_tree=null;
		Object KEYS1526_tree=null;
		Object RENAME1527_tree=null;
		Object set1528_tree=null;
		Object ORDER_SYM1530_tree=null;
		Object BY_SYM1531_tree=null;
		Object COMMA1533_tree=null;
		Object CONVERT_SYM1535_tree=null;
		Object TO_SYM1536_tree=null;
		Object CHARACTER_SYM1537_tree=null;
		Object SET_SYM1538_tree=null;
		Object COLLATE_SYM1540_tree=null;
		Object DEFAULT1542_tree=null;
		Object CHARACTER_SYM1543_tree=null;
		Object SET_SYM1544_tree=null;
		Object EQ_SYM1545_tree=null;
		Object COLLATE_SYM1547_tree=null;
		Object EQ_SYM1548_tree=null;
		Object DISCARD1550_tree=null;
		Object TABLESPACE1551_tree=null;
		Object IMPORT1552_tree=null;
		Object TABLESPACE1553_tree=null;
		Object FORCE_SYM1554_tree=null;
		Object ADD_SYM1555_tree=null;
		Object PARTITION_SYM1556_tree=null;
		Object LPAREN1557_tree=null;
		Object RPAREN1559_tree=null;
		Object DROP1560_tree=null;
		Object PARTITION_SYM1561_tree=null;
		Object TRUNCATE1563_tree=null;
		Object PARTITION_SYM1564_tree=null;
		Object ALL1566_tree=null;
		Object COALESCE1567_tree=null;
		Object PARTITION_SYM1568_tree=null;
		Object INTEGER_NUM1569_tree=null;
		Object REORGANIZE_SYM1570_tree=null;
		Object PARTITION_SYM1571_tree=null;
		Object INTO1573_tree=null;
		Object LPAREN1574_tree=null;
		Object COMMA1576_tree=null;
		Object RPAREN1578_tree=null;
		Object EXCHANGE_SYM1579_tree=null;
		Object PARTITION_SYM1580_tree=null;
		Object WITH1582_tree=null;
		Object TABLE1583_tree=null;
		Object ANALYZE_SYM1585_tree=null;
		Object PARTITION_SYM1586_tree=null;
		Object ALL1588_tree=null;
		Object CHECK_SYM1589_tree=null;
		Object PARTITION_SYM1590_tree=null;
		Object ALL1592_tree=null;
		Object OPTIMIZE1593_tree=null;
		Object PARTITION_SYM1594_tree=null;
		Object ALL1596_tree=null;
		Object REBUILD_SYM1597_tree=null;
		Object PARTITION_SYM1598_tree=null;
		Object ALL1600_tree=null;
		Object REPAIR1601_tree=null;
		Object PARTITION_SYM1602_tree=null;
		Object ALL1604_tree=null;
		Object REMOVE_SYM1605_tree=null;
		Object PARTITIONING_SYM1606_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2206:26: ( table_options | ( ADD_SYM ( COLUMN_SYM )? column_name column_definition ( ( FIRST_SYM | AFTER_SYM ) column_name )? ) | ( ADD_SYM ( COLUMN_SYM )? LPAREN column_definitions RPAREN ) | ( ADD_SYM ( INDEX_SYM | KEY_SYM ) ( index_name )? ( index_type )? LPAREN index_column_names RPAREN ( index_option )* ) | ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? PRIMARY_SYM KEY_SYM ( index_type )? LPAREN index_column_names RPAREN ( index_option )* ) | ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? UNIQUE_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* ) | ( ADD_SYM FULLTEXT_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_names RPAREN ( index_option )* ) | ( ADD_SYM SPATIAL_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_names RPAREN ( index_option )* ) | ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? FOREIGN KEY_SYM ( index_name )? LPAREN index_column_names RPAREN reference_definition ) | ( ALGORITHM_SYM ( EQ_SYM )? ( DEFAULT | INPLACE_SYM | COPY_SYM ) ) | ( ALTER ( COLUMN_SYM )? column_name ( ( SET_SYM DEFAULT literal_value ) | ( DROP DEFAULT ) ) ) | ( CHANGE ( COLUMN_SYM )? column_name column_name column_definition ( FIRST_SYM | AFTER_SYM column_name )? ) | ( LOCK ( EQ_SYM )? ( DEFAULT | NONE_SYM | SHARED_SYM | EXCLUSIVE_SYM ) ) | ( MODIFY_SYM ( COLUMN_SYM )? column_name column_definition ( FIRST_SYM | AFTER_SYM column_name )? ) | ( DROP ( COLUMN_SYM )? column_name ) | ( DROP PRIMARY_SYM KEY_SYM ) | ( DROP ( INDEX_SYM | KEY_SYM ) index_name ) | ( DROP FOREIGN KEY_SYM foreign_key_symbol_name ) | ( DISABLE_SYM KEYS ) | ( ENABLE_SYM KEYS ) | ( RENAME ( TO_SYM | AS_SYM )? table_name ) | ( ORDER_SYM BY_SYM column_name ( COMMA column_name )* ) | ( CONVERT_SYM TO_SYM CHARACTER_SYM SET_SYM charset_name ( COLLATE_SYM collation_name )? ) | ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ( COLLATE_SYM ( EQ_SYM )? collation_name )? ) | ( DISCARD TABLESPACE ) | ( IMPORT TABLESPACE ) | ( FORCE_SYM ) | ( ADD_SYM PARTITION_SYM LPAREN partition_definition RPAREN ) | ( DROP PARTITION_SYM partition_names ) | ( TRUNCATE PARTITION_SYM ( partition_names | ALL ) ) | ( COALESCE PARTITION_SYM INTEGER_NUM ) | ( REORGANIZE_SYM PARTITION_SYM partition_names INTO LPAREN partition_definition ( COMMA partition_definition )* RPAREN ) | ( EXCHANGE_SYM PARTITION_SYM partition_name WITH TABLE table_name ) | ( ANALYZE_SYM PARTITION_SYM ( partition_names | ALL ) ) | ( CHECK_SYM PARTITION_SYM ( partition_names | ALL ) ) | ( OPTIMIZE PARTITION_SYM ( partition_names | ALL ) ) | ( REBUILD_SYM PARTITION_SYM ( partition_names | ALL ) ) | ( REPAIR PARTITION_SYM ( partition_names | ALL ) ) | ( REMOVE_SYM PARTITIONING_SYM ) )
			int alt549=39;
			switch ( input.LA(1) ) {
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case CHECKSUM_SYM:
			case COLLATE_SYM:
			case COMMENT_SYM:
			case CONNECTION_SYM:
			case DATA_SYM:
			case DELAY_KEY_WRITE_SYM:
			case ENGINE_SYM:
			case INDEX_SYM:
			case INSERT_METHOD:
			case KEY_BLOCK_SIZE:
			case MAX_ROWS:
			case MIN_ROWS:
			case PACK_KEYS_SYM:
			case PASSWORD:
			case ROW_FORMAT_SYM:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case UNION_SYM:
				{
				alt549=1;
				}
				break;
			case DEFAULT:
				{
				int LA549_2 = input.LA(2);
				if ( (LA549_2==CHARACTER_SYM) ) {
					int LA549_3 = input.LA(3);
					if ( (LA549_3==SET_SYM) ) {
						int LA549_29 = input.LA(4);
						if ( (LA549_29==EQ_SYM) ) {
							int LA549_46 = input.LA(5);
							if ( (LA549_46==ARMSCII8||LA549_46==ASCII_SYM||LA549_46==BIG5||LA549_46==BINARY||(LA549_46 >= CP1250 && LA549_46 <= CP932)||LA549_46==DEC8||(LA549_46 >= EUCJPMS && LA549_46 <= EUCKR)||(LA549_46 >= GB2312 && LA549_46 <= GBK)||LA549_46==GEOSTD8||LA549_46==GREEK||LA549_46==HEBREW||LA549_46==HP8||LA549_46==KEYBCS2||(LA549_46 >= KOI8R && LA549_46 <= KOI8U)||LA549_46==LATIN1||(LA549_46 >= LATIN2 && LA549_46 <= LATIN7)||(LA549_46 >= MACCE && LA549_46 <= MACROMAN)||LA549_46==SJIS||LA549_46==SWE7||LA549_46==TIS620||(LA549_46 >= UCS2 && LA549_46 <= UJIS)||LA549_46==UTF8) ) {
								int LA549_47 = input.LA(6);
								if ( (synpred963_SQL()) ) {
									alt549=1;
								}
								else if ( (synpred1042_SQL()) ) {
									alt549=24;
								}

								else {
									if (state.backtracking>0) {state.failed=true; return retval;}
									int nvaeMark = input.mark();
									try {
										for (int nvaeConsume = 0; nvaeConsume < 6 - 1; nvaeConsume++) {
											input.consume();
										}
										NoViableAltException nvae =
											new NoViableAltException("", 549, 47, input);
										throw nvae;
									} finally {
										input.rewind(nvaeMark);
									}
								}

							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 549, 46, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}

						}
						else if ( (LA549_29==ARMSCII8||LA549_29==ASCII_SYM||LA549_29==BIG5||LA549_29==BINARY||(LA549_29 >= CP1250 && LA549_29 <= CP932)||LA549_29==DEC8||(LA549_29 >= EUCJPMS && LA549_29 <= EUCKR)||(LA549_29 >= GB2312 && LA549_29 <= GBK)||LA549_29==GEOSTD8||LA549_29==GREEK||LA549_29==HEBREW||LA549_29==HP8||LA549_29==KEYBCS2||(LA549_29 >= KOI8R && LA549_29 <= KOI8U)||LA549_29==LATIN1||(LA549_29 >= LATIN2 && LA549_29 <= LATIN7)||(LA549_29 >= MACCE && LA549_29 <= MACROMAN)||LA549_29==SJIS||LA549_29==SWE7||LA549_29==TIS620||(LA549_29 >= UCS2 && LA549_29 <= UJIS)||LA549_29==UTF8) ) {
							int LA549_47 = input.LA(5);
							if ( (synpred963_SQL()) ) {
								alt549=1;
							}
							else if ( (synpred1042_SQL()) ) {
								alt549=24;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 549, 47, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}

						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 549, 29, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 549, 3, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}
				else if ( (LA549_2==COLLATE_SYM) ) {
					alt549=1;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 549, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CHARACTER_SYM:
				{
				int LA549_3 = input.LA(2);
				if ( (LA549_3==SET_SYM) ) {
					int LA549_29 = input.LA(3);
					if ( (LA549_29==EQ_SYM) ) {
						int LA549_46 = input.LA(4);
						if ( (LA549_46==ARMSCII8||LA549_46==ASCII_SYM||LA549_46==BIG5||LA549_46==BINARY||(LA549_46 >= CP1250 && LA549_46 <= CP932)||LA549_46==DEC8||(LA549_46 >= EUCJPMS && LA549_46 <= EUCKR)||(LA549_46 >= GB2312 && LA549_46 <= GBK)||LA549_46==GEOSTD8||LA549_46==GREEK||LA549_46==HEBREW||LA549_46==HP8||LA549_46==KEYBCS2||(LA549_46 >= KOI8R && LA549_46 <= KOI8U)||LA549_46==LATIN1||(LA549_46 >= LATIN2 && LA549_46 <= LATIN7)||(LA549_46 >= MACCE && LA549_46 <= MACROMAN)||LA549_46==SJIS||LA549_46==SWE7||LA549_46==TIS620||(LA549_46 >= UCS2 && LA549_46 <= UJIS)||LA549_46==UTF8) ) {
							int LA549_47 = input.LA(5);
							if ( (synpred963_SQL()) ) {
								alt549=1;
							}
							else if ( (synpred1042_SQL()) ) {
								alt549=24;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 549, 47, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}

						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 549, 46, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}
					else if ( (LA549_29==ARMSCII8||LA549_29==ASCII_SYM||LA549_29==BIG5||LA549_29==BINARY||(LA549_29 >= CP1250 && LA549_29 <= CP932)||LA549_29==DEC8||(LA549_29 >= EUCJPMS && LA549_29 <= EUCKR)||(LA549_29 >= GB2312 && LA549_29 <= GBK)||LA549_29==GEOSTD8||LA549_29==GREEK||LA549_29==HEBREW||LA549_29==HP8||LA549_29==KEYBCS2||(LA549_29 >= KOI8R && LA549_29 <= KOI8U)||LA549_29==LATIN1||(LA549_29 >= LATIN2 && LA549_29 <= LATIN7)||(LA549_29 >= MACCE && LA549_29 <= MACROMAN)||LA549_29==SJIS||LA549_29==SWE7||LA549_29==TIS620||(LA549_29 >= UCS2 && LA549_29 <= UJIS)||LA549_29==UTF8) ) {
						int LA549_47 = input.LA(4);
						if ( (synpred963_SQL()) ) {
							alt549=1;
						}
						else if ( (synpred1042_SQL()) ) {
							alt549=24;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 549, 47, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 549, 29, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 549, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ADD_SYM:
				{
				switch ( input.LA(2) ) {
				case INDEX_SYM:
				case KEY_SYM:
					{
					alt549=4;
					}
					break;
				case FULLTEXT_SYM:
					{
					alt549=7;
					}
					break;
				case SPATIAL_SYM:
					{
					alt549=8;
					}
					break;
				case PARTITION_SYM:
					{
					alt549=28;
					}
					break;
				case COLUMN_SYM:
					{
					int LA549_34 = input.LA(3);
					if ( (LA549_34==ID) ) {
						alt549=2;
					}
					else if ( (LA549_34==LPAREN) ) {
						alt549=3;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 549, 34, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case ID:
					{
					alt549=2;
					}
					break;
				case LPAREN:
					{
					alt549=3;
					}
					break;
				case CONSTRAINT:
					{
					switch ( input.LA(3) ) {
					case ID:
						{
						switch ( input.LA(4) ) {
						case PRIMARY_SYM:
							{
							alt549=5;
							}
							break;
						case UNIQUE_SYM:
							{
							alt549=6;
							}
							break;
						case FOREIGN:
							{
							alt549=9;
							}
							break;
						default:
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 549, 48, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}
						}
						break;
					case PRIMARY_SYM:
						{
						alt549=5;
						}
						break;
					case UNIQUE_SYM:
						{
						alt549=6;
						}
						break;
					case FOREIGN:
						{
						alt549=9;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 549, 37, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}
					}
					break;
				case PRIMARY_SYM:
					{
					alt549=5;
					}
					break;
				case UNIQUE_SYM:
					{
					alt549=6;
					}
					break;
				case FOREIGN:
					{
					alt549=9;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 549, 4, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case ALGORITHM_SYM:
				{
				alt549=10;
				}
				break;
			case ALTER:
				{
				alt549=11;
				}
				break;
			case CHANGE:
				{
				alt549=12;
				}
				break;
			case LOCK:
				{
				alt549=13;
				}
				break;
			case MODIFY_SYM:
				{
				alt549=14;
				}
				break;
			case DROP:
				{
				switch ( input.LA(2) ) {
				case PRIMARY_SYM:
					{
					alt549=16;
					}
					break;
				case INDEX_SYM:
				case KEY_SYM:
					{
					alt549=17;
					}
					break;
				case FOREIGN:
					{
					alt549=18;
					}
					break;
				case PARTITION_SYM:
					{
					alt549=29;
					}
					break;
				case COLUMN_SYM:
				case ID:
					{
					alt549=15;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 549, 10, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case DISABLE_SYM:
				{
				alt549=19;
				}
				break;
			case ENABLE_SYM:
				{
				alt549=20;
				}
				break;
			case RENAME:
				{
				alt549=21;
				}
				break;
			case ORDER_SYM:
				{
				alt549=22;
				}
				break;
			case CONVERT_SYM:
				{
				alt549=23;
				}
				break;
			case DISCARD:
				{
				alt549=25;
				}
				break;
			case IMPORT:
				{
				alt549=26;
				}
				break;
			case FORCE_SYM:
				{
				alt549=27;
				}
				break;
			case TRUNCATE:
				{
				alt549=30;
				}
				break;
			case COALESCE:
				{
				alt549=31;
				}
				break;
			case REORGANIZE_SYM:
				{
				alt549=32;
				}
				break;
			case EXCHANGE_SYM:
				{
				alt549=33;
				}
				break;
			case ANALYZE_SYM:
				{
				alt549=34;
				}
				break;
			case CHECK_SYM:
				{
				alt549=35;
				}
				break;
			case OPTIMIZE:
				{
				alt549=36;
				}
				break;
			case REBUILD_SYM:
				{
				alt549=37;
				}
				break;
			case REPAIR:
				{
				alt549=38;
				}
				break;
			case REMOVE_SYM:
				{
				alt549=39;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 549, 0, input);
				throw nvae;
			}
			switch (alt549) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2207:5: table_options
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_table_options_in_alter_table_specification30112);
					table_options1412=table_options();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_options1412.getTree());

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2208:5: ( ADD_SYM ( COLUMN_SYM )? column_name column_definition ( ( FIRST_SYM | AFTER_SYM ) column_name )? )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2208:5: ( ADD_SYM ( COLUMN_SYM )? column_name column_definition ( ( FIRST_SYM | AFTER_SYM ) column_name )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2208:7: ADD_SYM ( COLUMN_SYM )? column_name column_definition ( ( FIRST_SYM | AFTER_SYM ) column_name )?
					{
					ADD_SYM1413=(Token)match(input,ADD_SYM,FOLLOW_ADD_SYM_in_alter_table_specification30120); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ADD_SYM1413_tree = (Object)adaptor.create(ADD_SYM1413);
					adaptor.addChild(root_0, ADD_SYM1413_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2208:15: ( COLUMN_SYM )?
					int alt500=2;
					int LA500_0 = input.LA(1);
					if ( (LA500_0==COLUMN_SYM) ) {
						alt500=1;
					}
					switch (alt500) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2208:16: COLUMN_SYM
							{
							COLUMN_SYM1414=(Token)match(input,COLUMN_SYM,FOLLOW_COLUMN_SYM_in_alter_table_specification30123); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLUMN_SYM1414_tree = (Object)adaptor.create(COLUMN_SYM1414);
							adaptor.addChild(root_0, COLUMN_SYM1414_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_column_name_in_alter_table_specification30127);
					column_name1415=column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1415.getTree());

					pushFollow(FOLLOW_column_definition_in_alter_table_specification30129);
					column_definition1416=column_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_definition1416.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2208:59: ( ( FIRST_SYM | AFTER_SYM ) column_name )?
					int alt501=2;
					int LA501_0 = input.LA(1);
					if ( (LA501_0==AFTER_SYM||LA501_0==FIRST_SYM) ) {
						alt501=1;
					}
					switch (alt501) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2208:61: ( FIRST_SYM | AFTER_SYM ) column_name
							{
							set1417=input.LT(1);
							if ( input.LA(1)==AFTER_SYM||input.LA(1)==FIRST_SYM ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1417));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							pushFollow(FOLLOW_column_name_in_alter_table_specification30139);
							column_name1418=column_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1418.getTree());

							}
							break;

					}

					}

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2209:5: ( ADD_SYM ( COLUMN_SYM )? LPAREN column_definitions RPAREN )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2209:5: ( ADD_SYM ( COLUMN_SYM )? LPAREN column_definitions RPAREN )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2209:7: ADD_SYM ( COLUMN_SYM )? LPAREN column_definitions RPAREN
					{
					ADD_SYM1419=(Token)match(input,ADD_SYM,FOLLOW_ADD_SYM_in_alter_table_specification30152); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ADD_SYM1419_tree = (Object)adaptor.create(ADD_SYM1419);
					adaptor.addChild(root_0, ADD_SYM1419_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2209:15: ( COLUMN_SYM )?
					int alt502=2;
					int LA502_0 = input.LA(1);
					if ( (LA502_0==COLUMN_SYM) ) {
						alt502=1;
					}
					switch (alt502) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2209:16: COLUMN_SYM
							{
							COLUMN_SYM1420=(Token)match(input,COLUMN_SYM,FOLLOW_COLUMN_SYM_in_alter_table_specification30155); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLUMN_SYM1420_tree = (Object)adaptor.create(COLUMN_SYM1420);
							adaptor.addChild(root_0, COLUMN_SYM1420_tree);
							}

							}
							break;

					}

					LPAREN1421=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alter_table_specification30159); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1421_tree = (Object)adaptor.create(LPAREN1421);
					adaptor.addChild(root_0, LPAREN1421_tree);
					}

					pushFollow(FOLLOW_column_definitions_in_alter_table_specification30161);
					column_definitions1422=column_definitions();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_definitions1422.getTree());

					RPAREN1423=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alter_table_specification30163); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1423_tree = (Object)adaptor.create(RPAREN1423);
					adaptor.addChild(root_0, RPAREN1423_tree);
					}

					}

					}
					break;
				case 4 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2210:5: ( ADD_SYM ( INDEX_SYM | KEY_SYM ) ( index_name )? ( index_type )? LPAREN index_column_names RPAREN ( index_option )* )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2210:5: ( ADD_SYM ( INDEX_SYM | KEY_SYM ) ( index_name )? ( index_type )? LPAREN index_column_names RPAREN ( index_option )* )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2210:7: ADD_SYM ( INDEX_SYM | KEY_SYM ) ( index_name )? ( index_type )? LPAREN index_column_names RPAREN ( index_option )*
					{
					ADD_SYM1424=(Token)match(input,ADD_SYM,FOLLOW_ADD_SYM_in_alter_table_specification30173); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ADD_SYM1424_tree = (Object)adaptor.create(ADD_SYM1424);
					adaptor.addChild(root_0, ADD_SYM1424_tree);
					}

					set1425=input.LT(1);
					if ( input.LA(1)==INDEX_SYM||input.LA(1)==KEY_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1425));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2210:35: ( index_name )?
					int alt503=2;
					int LA503_0 = input.LA(1);
					if ( (LA503_0==ID) ) {
						alt503=1;
					}
					switch (alt503) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2210:36: index_name
							{
							pushFollow(FOLLOW_index_name_in_alter_table_specification30182);
							index_name1426=index_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name1426.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2210:49: ( index_type )?
					int alt504=2;
					int LA504_0 = input.LA(1);
					if ( (LA504_0==USING_SYM) ) {
						alt504=1;
					}
					switch (alt504) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2210:50: index_type
							{
							pushFollow(FOLLOW_index_type_in_alter_table_specification30187);
							index_type1427=index_type();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_type1427.getTree());

							}
							break;

					}

					LPAREN1428=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alter_table_specification30191); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1428_tree = (Object)adaptor.create(LPAREN1428);
					adaptor.addChild(root_0, LPAREN1428_tree);
					}

					pushFollow(FOLLOW_index_column_names_in_alter_table_specification30193);
					index_column_names1429=index_column_names();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_names1429.getTree());

					RPAREN1430=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alter_table_specification30195); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1430_tree = (Object)adaptor.create(RPAREN1430);
					adaptor.addChild(root_0, RPAREN1430_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2210:96: ( index_option )*
					loop505:
					while (true) {
						int alt505=2;
						int LA505_0 = input.LA(1);
						if ( (LA505_0==COMMENT_SYM||LA505_0==KEY_BLOCK_SIZE||LA505_0==USING_SYM||LA505_0==WITH) ) {
							alt505=1;
						}

						switch (alt505) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2210:97: index_option
							{
							pushFollow(FOLLOW_index_option_in_alter_table_specification30198);
							index_option1431=index_option();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_option1431.getTree());

							}
							break;

						default :
							break loop505;
						}
					}

					}

					}
					break;
				case 5 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2211:5: ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? PRIMARY_SYM KEY_SYM ( index_type )? LPAREN index_column_names RPAREN ( index_option )* )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2211:5: ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? PRIMARY_SYM KEY_SYM ( index_type )? LPAREN index_column_names RPAREN ( index_option )* )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2211:7: ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? PRIMARY_SYM KEY_SYM ( index_type )? LPAREN index_column_names RPAREN ( index_option )*
					{
					ADD_SYM1432=(Token)match(input,ADD_SYM,FOLLOW_ADD_SYM_in_alter_table_specification30210); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ADD_SYM1432_tree = (Object)adaptor.create(ADD_SYM1432);
					adaptor.addChild(root_0, ADD_SYM1432_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2211:15: ( CONSTRAINT ( constraint_symbol_name )? )?
					int alt507=2;
					int LA507_0 = input.LA(1);
					if ( (LA507_0==CONSTRAINT) ) {
						alt507=1;
					}
					switch (alt507) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2211:16: CONSTRAINT ( constraint_symbol_name )?
							{
							CONSTRAINT1433=(Token)match(input,CONSTRAINT,FOLLOW_CONSTRAINT_in_alter_table_specification30213); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CONSTRAINT1433_tree = (Object)adaptor.create(CONSTRAINT1433);
							adaptor.addChild(root_0, CONSTRAINT1433_tree);
							}

							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2211:27: ( constraint_symbol_name )?
							int alt506=2;
							int LA506_0 = input.LA(1);
							if ( (LA506_0==ID) ) {
								alt506=1;
							}
							switch (alt506) {
								case 1 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2211:28: constraint_symbol_name
									{
									pushFollow(FOLLOW_constraint_symbol_name_in_alter_table_specification30216);
									constraint_symbol_name1434=constraint_symbol_name();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint_symbol_name1434.getTree());

									}
									break;

							}

							}
							break;

					}

					PRIMARY_SYM1435=(Token)match(input,PRIMARY_SYM,FOLLOW_PRIMARY_SYM_in_alter_table_specification30222); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PRIMARY_SYM1435_tree = (Object)adaptor.create(PRIMARY_SYM1435);
					adaptor.addChild(root_0, PRIMARY_SYM1435_tree);
					}

					KEY_SYM1436=(Token)match(input,KEY_SYM,FOLLOW_KEY_SYM_in_alter_table_specification30224); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KEY_SYM1436_tree = (Object)adaptor.create(KEY_SYM1436);
					adaptor.addChild(root_0, KEY_SYM1436_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2211:75: ( index_type )?
					int alt508=2;
					int LA508_0 = input.LA(1);
					if ( (LA508_0==USING_SYM) ) {
						alt508=1;
					}
					switch (alt508) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2211:76: index_type
							{
							pushFollow(FOLLOW_index_type_in_alter_table_specification30227);
							index_type1437=index_type();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_type1437.getTree());

							}
							break;

					}

					LPAREN1438=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alter_table_specification30231); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1438_tree = (Object)adaptor.create(LPAREN1438);
					adaptor.addChild(root_0, LPAREN1438_tree);
					}

					pushFollow(FOLLOW_index_column_names_in_alter_table_specification30233);
					index_column_names1439=index_column_names();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_names1439.getTree());

					RPAREN1440=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alter_table_specification30235); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1440_tree = (Object)adaptor.create(RPAREN1440);
					adaptor.addChild(root_0, RPAREN1440_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2211:122: ( index_option )*
					loop509:
					while (true) {
						int alt509=2;
						int LA509_0 = input.LA(1);
						if ( (LA509_0==COMMENT_SYM||LA509_0==KEY_BLOCK_SIZE||LA509_0==USING_SYM||LA509_0==WITH) ) {
							alt509=1;
						}

						switch (alt509) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2211:123: index_option
							{
							pushFollow(FOLLOW_index_option_in_alter_table_specification30238);
							index_option1441=index_option();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_option1441.getTree());

							}
							break;

						default :
							break loop509;
						}
					}

					}

					}
					break;
				case 6 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2213:5: ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? UNIQUE_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2213:5: ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? UNIQUE_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2214:5: ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? UNIQUE_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )*
					{
					ADD_SYM1442=(Token)match(input,ADD_SYM,FOLLOW_ADD_SYM_in_alter_table_specification30260); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ADD_SYM1442_tree = (Object)adaptor.create(ADD_SYM1442);
					adaptor.addChild(root_0, ADD_SYM1442_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2214:13: ( CONSTRAINT ( constraint_symbol_name )? )?
					int alt511=2;
					int LA511_0 = input.LA(1);
					if ( (LA511_0==CONSTRAINT) ) {
						alt511=1;
					}
					switch (alt511) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2214:14: CONSTRAINT ( constraint_symbol_name )?
							{
							CONSTRAINT1443=(Token)match(input,CONSTRAINT,FOLLOW_CONSTRAINT_in_alter_table_specification30263); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CONSTRAINT1443_tree = (Object)adaptor.create(CONSTRAINT1443);
							adaptor.addChild(root_0, CONSTRAINT1443_tree);
							}

							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2214:25: ( constraint_symbol_name )?
							int alt510=2;
							int LA510_0 = input.LA(1);
							if ( (LA510_0==ID) ) {
								alt510=1;
							}
							switch (alt510) {
								case 1 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2214:26: constraint_symbol_name
									{
									pushFollow(FOLLOW_constraint_symbol_name_in_alter_table_specification30266);
									constraint_symbol_name1444=constraint_symbol_name();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint_symbol_name1444.getTree());

									}
									break;

							}

							}
							break;

					}

					UNIQUE_SYM1445=(Token)match(input,UNIQUE_SYM,FOLLOW_UNIQUE_SYM_in_alter_table_specification30272); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					UNIQUE_SYM1445_tree = (Object)adaptor.create(UNIQUE_SYM1445);
					adaptor.addChild(root_0, UNIQUE_SYM1445_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2214:64: ( INDEX_SYM | KEY_SYM )?
					int alt512=2;
					int LA512_0 = input.LA(1);
					if ( (LA512_0==INDEX_SYM||LA512_0==KEY_SYM) ) {
						alt512=1;
					}
					switch (alt512) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
							{
							set1446=input.LT(1);
							if ( input.LA(1)==INDEX_SYM||input.LA(1)==KEY_SYM ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1446));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2214:85: ( index_name )?
					int alt513=2;
					int LA513_0 = input.LA(1);
					if ( (LA513_0==ID) ) {
						alt513=1;
					}
					switch (alt513) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2214:86: index_name
							{
							pushFollow(FOLLOW_index_name_in_alter_table_specification30282);
							index_name1447=index_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name1447.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2215:5: ( index_type )?
					int alt514=2;
					int LA514_0 = input.LA(1);
					if ( (LA514_0==USING_SYM) ) {
						alt514=1;
					}
					switch (alt514) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2215:6: index_type
							{
							pushFollow(FOLLOW_index_type_in_alter_table_specification30292);
							index_type1448=index_type();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_type1448.getTree());

							}
							break;

					}

					LPAREN1449=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alter_table_specification30296); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1449_tree = (Object)adaptor.create(LPAREN1449);
					adaptor.addChild(root_0, LPAREN1449_tree);
					}

					pushFollow(FOLLOW_index_column_name_in_alter_table_specification30298);
					index_column_name1450=index_column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name1450.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2215:44: ( COMMA index_column_name )*
					loop515:
					while (true) {
						int alt515=2;
						int LA515_0 = input.LA(1);
						if ( (LA515_0==COMMA) ) {
							alt515=1;
						}

						switch (alt515) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2215:45: COMMA index_column_name
							{
							COMMA1451=(Token)match(input,COMMA,FOLLOW_COMMA_in_alter_table_specification30301); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA1451_tree = (Object)adaptor.create(COMMA1451);
							adaptor.addChild(root_0, COMMA1451_tree);
							}

							pushFollow(FOLLOW_index_column_name_in_alter_table_specification30303);
							index_column_name1452=index_column_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name1452.getTree());

							}
							break;

						default :
							break loop515;
						}
					}

					RPAREN1453=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alter_table_specification30307); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1453_tree = (Object)adaptor.create(RPAREN1453);
					adaptor.addChild(root_0, RPAREN1453_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2215:78: ( index_option )*
					loop516:
					while (true) {
						int alt516=2;
						int LA516_0 = input.LA(1);
						if ( (LA516_0==COMMENT_SYM||LA516_0==KEY_BLOCK_SIZE||LA516_0==USING_SYM||LA516_0==WITH) ) {
							alt516=1;
						}

						switch (alt516) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2215:79: index_option
							{
							pushFollow(FOLLOW_index_option_in_alter_table_specification30310);
							index_option1454=index_option();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_option1454.getTree());

							}
							break;

						default :
							break loop516;
						}
					}

					}

					}
					break;
				case 7 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2217:5: ( ADD_SYM FULLTEXT_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_names RPAREN ( index_option )* )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2217:5: ( ADD_SYM FULLTEXT_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_names RPAREN ( index_option )* )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2217:7: ADD_SYM FULLTEXT_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_names RPAREN ( index_option )*
					{
					ADD_SYM1455=(Token)match(input,ADD_SYM,FOLLOW_ADD_SYM_in_alter_table_specification30326); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ADD_SYM1455_tree = (Object)adaptor.create(ADD_SYM1455);
					adaptor.addChild(root_0, ADD_SYM1455_tree);
					}

					FULLTEXT_SYM1456=(Token)match(input,FULLTEXT_SYM,FOLLOW_FULLTEXT_SYM_in_alter_table_specification30328); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					FULLTEXT_SYM1456_tree = (Object)adaptor.create(FULLTEXT_SYM1456);
					adaptor.addChild(root_0, FULLTEXT_SYM1456_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2217:28: ( INDEX_SYM | KEY_SYM )?
					int alt517=2;
					int LA517_0 = input.LA(1);
					if ( (LA517_0==INDEX_SYM||LA517_0==KEY_SYM) ) {
						alt517=1;
					}
					switch (alt517) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
							{
							set1457=input.LT(1);
							if ( input.LA(1)==INDEX_SYM||input.LA(1)==KEY_SYM ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1457));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2217:49: ( index_name )?
					int alt518=2;
					int LA518_0 = input.LA(1);
					if ( (LA518_0==ID) ) {
						alt518=1;
					}
					switch (alt518) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2217:50: index_name
							{
							pushFollow(FOLLOW_index_name_in_alter_table_specification30338);
							index_name1458=index_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name1458.getTree());

							}
							break;

					}

					LPAREN1459=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alter_table_specification30342); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1459_tree = (Object)adaptor.create(LPAREN1459);
					adaptor.addChild(root_0, LPAREN1459_tree);
					}

					pushFollow(FOLLOW_index_column_names_in_alter_table_specification30344);
					index_column_names1460=index_column_names();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_names1460.getTree());

					RPAREN1461=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alter_table_specification30346); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1461_tree = (Object)adaptor.create(RPAREN1461);
					adaptor.addChild(root_0, RPAREN1461_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2217:96: ( index_option )*
					loop519:
					while (true) {
						int alt519=2;
						int LA519_0 = input.LA(1);
						if ( (LA519_0==COMMENT_SYM||LA519_0==KEY_BLOCK_SIZE||LA519_0==USING_SYM||LA519_0==WITH) ) {
							alt519=1;
						}

						switch (alt519) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2217:97: index_option
							{
							pushFollow(FOLLOW_index_option_in_alter_table_specification30349);
							index_option1462=index_option();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_option1462.getTree());

							}
							break;

						default :
							break loop519;
						}
					}

					}

					}
					break;
				case 8 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2218:5: ( ADD_SYM SPATIAL_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_names RPAREN ( index_option )* )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2218:5: ( ADD_SYM SPATIAL_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_names RPAREN ( index_option )* )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2218:7: ADD_SYM SPATIAL_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_names RPAREN ( index_option )*
					{
					ADD_SYM1463=(Token)match(input,ADD_SYM,FOLLOW_ADD_SYM_in_alter_table_specification30361); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ADD_SYM1463_tree = (Object)adaptor.create(ADD_SYM1463);
					adaptor.addChild(root_0, ADD_SYM1463_tree);
					}

					SPATIAL_SYM1464=(Token)match(input,SPATIAL_SYM,FOLLOW_SPATIAL_SYM_in_alter_table_specification30363); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SPATIAL_SYM1464_tree = (Object)adaptor.create(SPATIAL_SYM1464);
					adaptor.addChild(root_0, SPATIAL_SYM1464_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2218:27: ( INDEX_SYM | KEY_SYM )?
					int alt520=2;
					int LA520_0 = input.LA(1);
					if ( (LA520_0==INDEX_SYM||LA520_0==KEY_SYM) ) {
						alt520=1;
					}
					switch (alt520) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
							{
							set1465=input.LT(1);
							if ( input.LA(1)==INDEX_SYM||input.LA(1)==KEY_SYM ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1465));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2218:48: ( index_name )?
					int alt521=2;
					int LA521_0 = input.LA(1);
					if ( (LA521_0==ID) ) {
						alt521=1;
					}
					switch (alt521) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2218:49: index_name
							{
							pushFollow(FOLLOW_index_name_in_alter_table_specification30373);
							index_name1466=index_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name1466.getTree());

							}
							break;

					}

					LPAREN1467=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alter_table_specification30377); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1467_tree = (Object)adaptor.create(LPAREN1467);
					adaptor.addChild(root_0, LPAREN1467_tree);
					}

					pushFollow(FOLLOW_index_column_names_in_alter_table_specification30379);
					index_column_names1468=index_column_names();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_names1468.getTree());

					RPAREN1469=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alter_table_specification30381); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1469_tree = (Object)adaptor.create(RPAREN1469);
					adaptor.addChild(root_0, RPAREN1469_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2218:95: ( index_option )*
					loop522:
					while (true) {
						int alt522=2;
						int LA522_0 = input.LA(1);
						if ( (LA522_0==COMMENT_SYM||LA522_0==KEY_BLOCK_SIZE||LA522_0==USING_SYM||LA522_0==WITH) ) {
							alt522=1;
						}

						switch (alt522) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2218:96: index_option
							{
							pushFollow(FOLLOW_index_option_in_alter_table_specification30384);
							index_option1470=index_option();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_option1470.getTree());

							}
							break;

						default :
							break loop522;
						}
					}

					}

					}
					break;
				case 9 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2219:5: ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? FOREIGN KEY_SYM ( index_name )? LPAREN index_column_names RPAREN reference_definition )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2219:5: ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? FOREIGN KEY_SYM ( index_name )? LPAREN index_column_names RPAREN reference_definition )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2219:7: ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? FOREIGN KEY_SYM ( index_name )? LPAREN index_column_names RPAREN reference_definition
					{
					ADD_SYM1471=(Token)match(input,ADD_SYM,FOLLOW_ADD_SYM_in_alter_table_specification30396); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ADD_SYM1471_tree = (Object)adaptor.create(ADD_SYM1471);
					adaptor.addChild(root_0, ADD_SYM1471_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2219:15: ( CONSTRAINT ( constraint_symbol_name )? )?
					int alt524=2;
					int LA524_0 = input.LA(1);
					if ( (LA524_0==CONSTRAINT) ) {
						alt524=1;
					}
					switch (alt524) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2219:16: CONSTRAINT ( constraint_symbol_name )?
							{
							CONSTRAINT1472=(Token)match(input,CONSTRAINT,FOLLOW_CONSTRAINT_in_alter_table_specification30399); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CONSTRAINT1472_tree = (Object)adaptor.create(CONSTRAINT1472);
							adaptor.addChild(root_0, CONSTRAINT1472_tree);
							}

							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2219:27: ( constraint_symbol_name )?
							int alt523=2;
							int LA523_0 = input.LA(1);
							if ( (LA523_0==ID) ) {
								alt523=1;
							}
							switch (alt523) {
								case 1 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2219:28: constraint_symbol_name
									{
									pushFollow(FOLLOW_constraint_symbol_name_in_alter_table_specification30402);
									constraint_symbol_name1473=constraint_symbol_name();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint_symbol_name1473.getTree());

									}
									break;

							}

							}
							break;

					}

					FOREIGN1474=(Token)match(input,FOREIGN,FOLLOW_FOREIGN_in_alter_table_specification30408); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					FOREIGN1474_tree = (Object)adaptor.create(FOREIGN1474);
					adaptor.addChild(root_0, FOREIGN1474_tree);
					}

					KEY_SYM1475=(Token)match(input,KEY_SYM,FOLLOW_KEY_SYM_in_alter_table_specification30410); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KEY_SYM1475_tree = (Object)adaptor.create(KEY_SYM1475);
					adaptor.addChild(root_0, KEY_SYM1475_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2219:71: ( index_name )?
					int alt525=2;
					int LA525_0 = input.LA(1);
					if ( (LA525_0==ID) ) {
						alt525=1;
					}
					switch (alt525) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2219:72: index_name
							{
							pushFollow(FOLLOW_index_name_in_alter_table_specification30413);
							index_name1476=index_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name1476.getTree());

							}
							break;

					}

					LPAREN1477=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alter_table_specification30417); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1477_tree = (Object)adaptor.create(LPAREN1477);
					adaptor.addChild(root_0, LPAREN1477_tree);
					}

					pushFollow(FOLLOW_index_column_names_in_alter_table_specification30419);
					index_column_names1478=index_column_names();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_names1478.getTree());

					RPAREN1479=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alter_table_specification30421); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1479_tree = (Object)adaptor.create(RPAREN1479);
					adaptor.addChild(root_0, RPAREN1479_tree);
					}

					pushFollow(FOLLOW_reference_definition_in_alter_table_specification30423);
					reference_definition1480=reference_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, reference_definition1480.getTree());

					}

					}
					break;
				case 10 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2220:5: ( ALGORITHM_SYM ( EQ_SYM )? ( DEFAULT | INPLACE_SYM | COPY_SYM ) )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2220:5: ( ALGORITHM_SYM ( EQ_SYM )? ( DEFAULT | INPLACE_SYM | COPY_SYM ) )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2220:7: ALGORITHM_SYM ( EQ_SYM )? ( DEFAULT | INPLACE_SYM | COPY_SYM )
					{
					ALGORITHM_SYM1481=(Token)match(input,ALGORITHM_SYM,FOLLOW_ALGORITHM_SYM_in_alter_table_specification30433); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ALGORITHM_SYM1481_tree = (Object)adaptor.create(ALGORITHM_SYM1481);
					adaptor.addChild(root_0, ALGORITHM_SYM1481_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2220:21: ( EQ_SYM )?
					int alt526=2;
					int LA526_0 = input.LA(1);
					if ( (LA526_0==EQ_SYM) ) {
						alt526=1;
					}
					switch (alt526) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2220:22: EQ_SYM
							{
							EQ_SYM1482=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_alter_table_specification30436); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1482_tree = (Object)adaptor.create(EQ_SYM1482);
							adaptor.addChild(root_0, EQ_SYM1482_tree);
							}

							}
							break;

					}

					set1483=input.LT(1);
					if ( input.LA(1)==COPY_SYM||input.LA(1)==DEFAULT||input.LA(1)==INPLACE_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1483));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}

					}
					break;
				case 11 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2221:5: ( ALTER ( COLUMN_SYM )? column_name ( ( SET_SYM DEFAULT literal_value ) | ( DROP DEFAULT ) ) )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2221:5: ( ALTER ( COLUMN_SYM )? column_name ( ( SET_SYM DEFAULT literal_value ) | ( DROP DEFAULT ) ) )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2221:7: ALTER ( COLUMN_SYM )? column_name ( ( SET_SYM DEFAULT literal_value ) | ( DROP DEFAULT ) )
					{
					ALTER1484=(Token)match(input,ALTER,FOLLOW_ALTER_in_alter_table_specification30456); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ALTER1484_tree = (Object)adaptor.create(ALTER1484);
					adaptor.addChild(root_0, ALTER1484_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2221:13: ( COLUMN_SYM )?
					int alt527=2;
					int LA527_0 = input.LA(1);
					if ( (LA527_0==COLUMN_SYM) ) {
						alt527=1;
					}
					switch (alt527) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2221:14: COLUMN_SYM
							{
							COLUMN_SYM1485=(Token)match(input,COLUMN_SYM,FOLLOW_COLUMN_SYM_in_alter_table_specification30459); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLUMN_SYM1485_tree = (Object)adaptor.create(COLUMN_SYM1485);
							adaptor.addChild(root_0, COLUMN_SYM1485_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_column_name_in_alter_table_specification30463);
					column_name1486=column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1486.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2221:39: ( ( SET_SYM DEFAULT literal_value ) | ( DROP DEFAULT ) )
					int alt528=2;
					int LA528_0 = input.LA(1);
					if ( (LA528_0==SET_SYM) ) {
						alt528=1;
					}
					else if ( (LA528_0==DROP) ) {
						alt528=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 528, 0, input);
						throw nvae;
					}

					switch (alt528) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2221:40: ( SET_SYM DEFAULT literal_value )
							{
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2221:40: ( SET_SYM DEFAULT literal_value )
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2221:41: SET_SYM DEFAULT literal_value
							{
							SET_SYM1487=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_alter_table_specification30467); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							SET_SYM1487_tree = (Object)adaptor.create(SET_SYM1487);
							adaptor.addChild(root_0, SET_SYM1487_tree);
							}

							DEFAULT1488=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_alter_table_specification30469); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1488_tree = (Object)adaptor.create(DEFAULT1488);
							adaptor.addChild(root_0, DEFAULT1488_tree);
							}

							pushFollow(FOLLOW_literal_value_in_alter_table_specification30471);
							literal_value1489=literal_value();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, literal_value1489.getTree());

							}

							}
							break;
						case 2 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2221:74: ( DROP DEFAULT )
							{
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2221:74: ( DROP DEFAULT )
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2221:75: DROP DEFAULT
							{
							DROP1490=(Token)match(input,DROP,FOLLOW_DROP_in_alter_table_specification30477); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DROP1490_tree = (Object)adaptor.create(DROP1490);
							adaptor.addChild(root_0, DROP1490_tree);
							}

							DEFAULT1491=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_alter_table_specification30479); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1491_tree = (Object)adaptor.create(DEFAULT1491);
							adaptor.addChild(root_0, DEFAULT1491_tree);
							}

							}

							}
							break;

					}

					}

					}
					break;
				case 12 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2222:5: ( CHANGE ( COLUMN_SYM )? column_name column_name column_definition ( FIRST_SYM | AFTER_SYM column_name )? )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2222:5: ( CHANGE ( COLUMN_SYM )? column_name column_name column_definition ( FIRST_SYM | AFTER_SYM column_name )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2222:7: CHANGE ( COLUMN_SYM )? column_name column_name column_definition ( FIRST_SYM | AFTER_SYM column_name )?
					{
					CHANGE1492=(Token)match(input,CHANGE,FOLLOW_CHANGE_in_alter_table_specification30491); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CHANGE1492_tree = (Object)adaptor.create(CHANGE1492);
					adaptor.addChild(root_0, CHANGE1492_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2222:14: ( COLUMN_SYM )?
					int alt529=2;
					int LA529_0 = input.LA(1);
					if ( (LA529_0==COLUMN_SYM) ) {
						alt529=1;
					}
					switch (alt529) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2222:15: COLUMN_SYM
							{
							COLUMN_SYM1493=(Token)match(input,COLUMN_SYM,FOLLOW_COLUMN_SYM_in_alter_table_specification30494); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLUMN_SYM1493_tree = (Object)adaptor.create(COLUMN_SYM1493);
							adaptor.addChild(root_0, COLUMN_SYM1493_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_column_name_in_alter_table_specification30498);
					column_name1494=column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1494.getTree());

					pushFollow(FOLLOW_column_name_in_alter_table_specification30500);
					column_name1495=column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1495.getTree());

					pushFollow(FOLLOW_column_definition_in_alter_table_specification30502);
					column_definition1496=column_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_definition1496.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2222:70: ( FIRST_SYM | AFTER_SYM column_name )?
					int alt530=3;
					int LA530_0 = input.LA(1);
					if ( (LA530_0==FIRST_SYM) ) {
						alt530=1;
					}
					else if ( (LA530_0==AFTER_SYM) ) {
						alt530=2;
					}
					switch (alt530) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2222:71: FIRST_SYM
							{
							FIRST_SYM1497=(Token)match(input,FIRST_SYM,FOLLOW_FIRST_SYM_in_alter_table_specification30505); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							FIRST_SYM1497_tree = (Object)adaptor.create(FIRST_SYM1497);
							adaptor.addChild(root_0, FIRST_SYM1497_tree);
							}

							}
							break;
						case 2 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2222:81: AFTER_SYM column_name
							{
							AFTER_SYM1498=(Token)match(input,AFTER_SYM,FOLLOW_AFTER_SYM_in_alter_table_specification30507); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							AFTER_SYM1498_tree = (Object)adaptor.create(AFTER_SYM1498);
							adaptor.addChild(root_0, AFTER_SYM1498_tree);
							}

							pushFollow(FOLLOW_column_name_in_alter_table_specification30509);
							column_name1499=column_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1499.getTree());

							}
							break;

					}

					}

					}
					break;
				case 13 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2223:5: ( LOCK ( EQ_SYM )? ( DEFAULT | NONE_SYM | SHARED_SYM | EXCLUSIVE_SYM ) )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2223:5: ( LOCK ( EQ_SYM )? ( DEFAULT | NONE_SYM | SHARED_SYM | EXCLUSIVE_SYM ) )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2223:7: LOCK ( EQ_SYM )? ( DEFAULT | NONE_SYM | SHARED_SYM | EXCLUSIVE_SYM )
					{
					LOCK1500=(Token)match(input,LOCK,FOLLOW_LOCK_in_alter_table_specification30521); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LOCK1500_tree = (Object)adaptor.create(LOCK1500);
					adaptor.addChild(root_0, LOCK1500_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2223:12: ( EQ_SYM )?
					int alt531=2;
					int LA531_0 = input.LA(1);
					if ( (LA531_0==EQ_SYM) ) {
						alt531=1;
					}
					switch (alt531) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2223:13: EQ_SYM
							{
							EQ_SYM1501=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_alter_table_specification30524); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1501_tree = (Object)adaptor.create(EQ_SYM1501);
							adaptor.addChild(root_0, EQ_SYM1501_tree);
							}

							}
							break;

					}

					set1502=input.LT(1);
					if ( input.LA(1)==DEFAULT||input.LA(1)==EXCLUSIVE_SYM||input.LA(1)==NONE_SYM||input.LA(1)==SHARED_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1502));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}

					}
					break;
				case 14 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2224:5: ( MODIFY_SYM ( COLUMN_SYM )? column_name column_definition ( FIRST_SYM | AFTER_SYM column_name )? )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2224:5: ( MODIFY_SYM ( COLUMN_SYM )? column_name column_definition ( FIRST_SYM | AFTER_SYM column_name )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2224:7: MODIFY_SYM ( COLUMN_SYM )? column_name column_definition ( FIRST_SYM | AFTER_SYM column_name )?
					{
					MODIFY_SYM1503=(Token)match(input,MODIFY_SYM,FOLLOW_MODIFY_SYM_in_alter_table_specification30546); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MODIFY_SYM1503_tree = (Object)adaptor.create(MODIFY_SYM1503);
					adaptor.addChild(root_0, MODIFY_SYM1503_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2224:18: ( COLUMN_SYM )?
					int alt532=2;
					int LA532_0 = input.LA(1);
					if ( (LA532_0==COLUMN_SYM) ) {
						alt532=1;
					}
					switch (alt532) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2224:19: COLUMN_SYM
							{
							COLUMN_SYM1504=(Token)match(input,COLUMN_SYM,FOLLOW_COLUMN_SYM_in_alter_table_specification30549); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLUMN_SYM1504_tree = (Object)adaptor.create(COLUMN_SYM1504);
							adaptor.addChild(root_0, COLUMN_SYM1504_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_column_name_in_alter_table_specification30553);
					column_name1505=column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1505.getTree());

					pushFollow(FOLLOW_column_definition_in_alter_table_specification30555);
					column_definition1506=column_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_definition1506.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2224:62: ( FIRST_SYM | AFTER_SYM column_name )?
					int alt533=3;
					int LA533_0 = input.LA(1);
					if ( (LA533_0==FIRST_SYM) ) {
						alt533=1;
					}
					else if ( (LA533_0==AFTER_SYM) ) {
						alt533=2;
					}
					switch (alt533) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2224:63: FIRST_SYM
							{
							FIRST_SYM1507=(Token)match(input,FIRST_SYM,FOLLOW_FIRST_SYM_in_alter_table_specification30558); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							FIRST_SYM1507_tree = (Object)adaptor.create(FIRST_SYM1507);
							adaptor.addChild(root_0, FIRST_SYM1507_tree);
							}

							}
							break;
						case 2 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2224:75: AFTER_SYM column_name
							{
							AFTER_SYM1508=(Token)match(input,AFTER_SYM,FOLLOW_AFTER_SYM_in_alter_table_specification30562); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							AFTER_SYM1508_tree = (Object)adaptor.create(AFTER_SYM1508);
							adaptor.addChild(root_0, AFTER_SYM1508_tree);
							}

							pushFollow(FOLLOW_column_name_in_alter_table_specification30564);
							column_name1509=column_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1509.getTree());

							}
							break;

					}

					}

					}
					break;
				case 15 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2225:5: ( DROP ( COLUMN_SYM )? column_name )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2225:5: ( DROP ( COLUMN_SYM )? column_name )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2225:7: DROP ( COLUMN_SYM )? column_name
					{
					DROP1510=(Token)match(input,DROP,FOLLOW_DROP_in_alter_table_specification30576); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DROP1510_tree = (Object)adaptor.create(DROP1510);
					adaptor.addChild(root_0, DROP1510_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2225:12: ( COLUMN_SYM )?
					int alt534=2;
					int LA534_0 = input.LA(1);
					if ( (LA534_0==COLUMN_SYM) ) {
						alt534=1;
					}
					switch (alt534) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2225:13: COLUMN_SYM
							{
							COLUMN_SYM1511=(Token)match(input,COLUMN_SYM,FOLLOW_COLUMN_SYM_in_alter_table_specification30579); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLUMN_SYM1511_tree = (Object)adaptor.create(COLUMN_SYM1511);
							adaptor.addChild(root_0, COLUMN_SYM1511_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_column_name_in_alter_table_specification30583);
					column_name1512=column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1512.getTree());

					}

					}
					break;
				case 16 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2226:5: ( DROP PRIMARY_SYM KEY_SYM )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2226:5: ( DROP PRIMARY_SYM KEY_SYM )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2226:7: DROP PRIMARY_SYM KEY_SYM
					{
					DROP1513=(Token)match(input,DROP,FOLLOW_DROP_in_alter_table_specification30593); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DROP1513_tree = (Object)adaptor.create(DROP1513);
					adaptor.addChild(root_0, DROP1513_tree);
					}

					PRIMARY_SYM1514=(Token)match(input,PRIMARY_SYM,FOLLOW_PRIMARY_SYM_in_alter_table_specification30595); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PRIMARY_SYM1514_tree = (Object)adaptor.create(PRIMARY_SYM1514);
					adaptor.addChild(root_0, PRIMARY_SYM1514_tree);
					}

					KEY_SYM1515=(Token)match(input,KEY_SYM,FOLLOW_KEY_SYM_in_alter_table_specification30597); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KEY_SYM1515_tree = (Object)adaptor.create(KEY_SYM1515);
					adaptor.addChild(root_0, KEY_SYM1515_tree);
					}

					}

					}
					break;
				case 17 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2227:5: ( DROP ( INDEX_SYM | KEY_SYM ) index_name )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2227:5: ( DROP ( INDEX_SYM | KEY_SYM ) index_name )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2227:7: DROP ( INDEX_SYM | KEY_SYM ) index_name
					{
					DROP1516=(Token)match(input,DROP,FOLLOW_DROP_in_alter_table_specification30607); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DROP1516_tree = (Object)adaptor.create(DROP1516);
					adaptor.addChild(root_0, DROP1516_tree);
					}

					set1517=input.LT(1);
					if ( input.LA(1)==INDEX_SYM||input.LA(1)==KEY_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1517));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					pushFollow(FOLLOW_index_name_in_alter_table_specification30615);
					index_name1518=index_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name1518.getTree());

					}

					}
					break;
				case 18 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2228:5: ( DROP FOREIGN KEY_SYM foreign_key_symbol_name )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2228:5: ( DROP FOREIGN KEY_SYM foreign_key_symbol_name )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2228:7: DROP FOREIGN KEY_SYM foreign_key_symbol_name
					{
					DROP1519=(Token)match(input,DROP,FOLLOW_DROP_in_alter_table_specification30625); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DROP1519_tree = (Object)adaptor.create(DROP1519);
					adaptor.addChild(root_0, DROP1519_tree);
					}

					FOREIGN1520=(Token)match(input,FOREIGN,FOLLOW_FOREIGN_in_alter_table_specification30627); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					FOREIGN1520_tree = (Object)adaptor.create(FOREIGN1520);
					adaptor.addChild(root_0, FOREIGN1520_tree);
					}

					KEY_SYM1521=(Token)match(input,KEY_SYM,FOLLOW_KEY_SYM_in_alter_table_specification30629); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KEY_SYM1521_tree = (Object)adaptor.create(KEY_SYM1521);
					adaptor.addChild(root_0, KEY_SYM1521_tree);
					}

					pushFollow(FOLLOW_foreign_key_symbol_name_in_alter_table_specification30631);
					foreign_key_symbol_name1522=foreign_key_symbol_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, foreign_key_symbol_name1522.getTree());

					}

					}
					break;
				case 19 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2229:5: ( DISABLE_SYM KEYS )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2229:5: ( DISABLE_SYM KEYS )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2229:7: DISABLE_SYM KEYS
					{
					DISABLE_SYM1523=(Token)match(input,DISABLE_SYM,FOLLOW_DISABLE_SYM_in_alter_table_specification30641); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DISABLE_SYM1523_tree = (Object)adaptor.create(DISABLE_SYM1523);
					adaptor.addChild(root_0, DISABLE_SYM1523_tree);
					}

					KEYS1524=(Token)match(input,KEYS,FOLLOW_KEYS_in_alter_table_specification30643); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KEYS1524_tree = (Object)adaptor.create(KEYS1524);
					adaptor.addChild(root_0, KEYS1524_tree);
					}

					}

					}
					break;
				case 20 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2230:5: ( ENABLE_SYM KEYS )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2230:5: ( ENABLE_SYM KEYS )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2230:7: ENABLE_SYM KEYS
					{
					ENABLE_SYM1525=(Token)match(input,ENABLE_SYM,FOLLOW_ENABLE_SYM_in_alter_table_specification30653); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ENABLE_SYM1525_tree = (Object)adaptor.create(ENABLE_SYM1525);
					adaptor.addChild(root_0, ENABLE_SYM1525_tree);
					}

					KEYS1526=(Token)match(input,KEYS,FOLLOW_KEYS_in_alter_table_specification30655); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KEYS1526_tree = (Object)adaptor.create(KEYS1526);
					adaptor.addChild(root_0, KEYS1526_tree);
					}

					}

					}
					break;
				case 21 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2231:5: ( RENAME ( TO_SYM | AS_SYM )? table_name )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2231:5: ( RENAME ( TO_SYM | AS_SYM )? table_name )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2231:7: RENAME ( TO_SYM | AS_SYM )? table_name
					{
					RENAME1527=(Token)match(input,RENAME,FOLLOW_RENAME_in_alter_table_specification30665); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RENAME1527_tree = (Object)adaptor.create(RENAME1527);
					adaptor.addChild(root_0, RENAME1527_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2231:14: ( TO_SYM | AS_SYM )?
					int alt535=2;
					int LA535_0 = input.LA(1);
					if ( (LA535_0==AS_SYM||LA535_0==TO_SYM) ) {
						alt535=1;
					}
					switch (alt535) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
							{
							set1528=input.LT(1);
							if ( input.LA(1)==AS_SYM||input.LA(1)==TO_SYM ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1528));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					pushFollow(FOLLOW_table_name_in_alter_table_specification30674);
					table_name1529=table_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1529.getTree());

					}

					}
					break;
				case 22 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2232:5: ( ORDER_SYM BY_SYM column_name ( COMMA column_name )* )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2232:5: ( ORDER_SYM BY_SYM column_name ( COMMA column_name )* )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2232:7: ORDER_SYM BY_SYM column_name ( COMMA column_name )*
					{
					ORDER_SYM1530=(Token)match(input,ORDER_SYM,FOLLOW_ORDER_SYM_in_alter_table_specification30684); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ORDER_SYM1530_tree = (Object)adaptor.create(ORDER_SYM1530);
					adaptor.addChild(root_0, ORDER_SYM1530_tree);
					}

					BY_SYM1531=(Token)match(input,BY_SYM,FOLLOW_BY_SYM_in_alter_table_specification30686); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BY_SYM1531_tree = (Object)adaptor.create(BY_SYM1531);
					adaptor.addChild(root_0, BY_SYM1531_tree);
					}

					pushFollow(FOLLOW_column_name_in_alter_table_specification30688);
					column_name1532=column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1532.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2232:36: ( COMMA column_name )*
					loop536:
					while (true) {
						int alt536=2;
						int LA536_0 = input.LA(1);
						if ( (LA536_0==COMMA) ) {
							int LA536_1 = input.LA(2);
							if ( (LA536_1==ID) ) {
								alt536=1;
							}

						}

						switch (alt536) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2232:37: COMMA column_name
							{
							COMMA1533=(Token)match(input,COMMA,FOLLOW_COMMA_in_alter_table_specification30691); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA1533_tree = (Object)adaptor.create(COMMA1533);
							adaptor.addChild(root_0, COMMA1533_tree);
							}

							pushFollow(FOLLOW_column_name_in_alter_table_specification30693);
							column_name1534=column_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1534.getTree());

							}
							break;

						default :
							break loop536;
						}
					}

					}

					}
					break;
				case 23 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2233:5: ( CONVERT_SYM TO_SYM CHARACTER_SYM SET_SYM charset_name ( COLLATE_SYM collation_name )? )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2233:5: ( CONVERT_SYM TO_SYM CHARACTER_SYM SET_SYM charset_name ( COLLATE_SYM collation_name )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2233:7: CONVERT_SYM TO_SYM CHARACTER_SYM SET_SYM charset_name ( COLLATE_SYM collation_name )?
					{
					CONVERT_SYM1535=(Token)match(input,CONVERT_SYM,FOLLOW_CONVERT_SYM_in_alter_table_specification30705); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CONVERT_SYM1535_tree = (Object)adaptor.create(CONVERT_SYM1535);
					adaptor.addChild(root_0, CONVERT_SYM1535_tree);
					}

					TO_SYM1536=(Token)match(input,TO_SYM,FOLLOW_TO_SYM_in_alter_table_specification30707); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TO_SYM1536_tree = (Object)adaptor.create(TO_SYM1536);
					adaptor.addChild(root_0, TO_SYM1536_tree);
					}

					CHARACTER_SYM1537=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_alter_table_specification30709); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CHARACTER_SYM1537_tree = (Object)adaptor.create(CHARACTER_SYM1537);
					adaptor.addChild(root_0, CHARACTER_SYM1537_tree);
					}

					SET_SYM1538=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_alter_table_specification30711); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SET_SYM1538_tree = (Object)adaptor.create(SET_SYM1538);
					adaptor.addChild(root_0, SET_SYM1538_tree);
					}

					pushFollow(FOLLOW_charset_name_in_alter_table_specification30713);
					charset_name1539=charset_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name1539.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2233:61: ( COLLATE_SYM collation_name )?
					int alt537=2;
					int LA537_0 = input.LA(1);
					if ( (LA537_0==COLLATE_SYM) ) {
						alt537=1;
					}
					switch (alt537) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2233:62: COLLATE_SYM collation_name
							{
							COLLATE_SYM1540=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_alter_table_specification30716); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLLATE_SYM1540_tree = (Object)adaptor.create(COLLATE_SYM1540);
							adaptor.addChild(root_0, COLLATE_SYM1540_tree);
							}

							pushFollow(FOLLOW_collation_name_in_alter_table_specification30718);
							collation_name1541=collation_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name1541.getTree());

							}
							break;

					}

					}

					}
					break;
				case 24 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2234:5: ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ( COLLATE_SYM ( EQ_SYM )? collation_name )? )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2234:5: ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ( COLLATE_SYM ( EQ_SYM )? collation_name )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2234:7: ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ( COLLATE_SYM ( EQ_SYM )? collation_name )?
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2234:7: ( DEFAULT )?
					int alt538=2;
					int LA538_0 = input.LA(1);
					if ( (LA538_0==DEFAULT) ) {
						alt538=1;
					}
					switch (alt538) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2234:8: DEFAULT
							{
							DEFAULT1542=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_alter_table_specification30731); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1542_tree = (Object)adaptor.create(DEFAULT1542);
							adaptor.addChild(root_0, DEFAULT1542_tree);
							}

							}
							break;

					}

					CHARACTER_SYM1543=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_alter_table_specification30735); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CHARACTER_SYM1543_tree = (Object)adaptor.create(CHARACTER_SYM1543);
					adaptor.addChild(root_0, CHARACTER_SYM1543_tree);
					}

					SET_SYM1544=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_alter_table_specification30737); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SET_SYM1544_tree = (Object)adaptor.create(SET_SYM1544);
					adaptor.addChild(root_0, SET_SYM1544_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2234:40: ( EQ_SYM )?
					int alt539=2;
					int LA539_0 = input.LA(1);
					if ( (LA539_0==EQ_SYM) ) {
						alt539=1;
					}
					switch (alt539) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2234:41: EQ_SYM
							{
							EQ_SYM1545=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_alter_table_specification30740); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1545_tree = (Object)adaptor.create(EQ_SYM1545);
							adaptor.addChild(root_0, EQ_SYM1545_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_charset_name_in_alter_table_specification30744);
					charset_name1546=charset_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name1546.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2234:63: ( COLLATE_SYM ( EQ_SYM )? collation_name )?
					int alt541=2;
					int LA541_0 = input.LA(1);
					if ( (LA541_0==COLLATE_SYM) ) {
						alt541=1;
					}
					switch (alt541) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2234:64: COLLATE_SYM ( EQ_SYM )? collation_name
							{
							COLLATE_SYM1547=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_alter_table_specification30747); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLLATE_SYM1547_tree = (Object)adaptor.create(COLLATE_SYM1547);
							adaptor.addChild(root_0, COLLATE_SYM1547_tree);
							}

							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2234:76: ( EQ_SYM )?
							int alt540=2;
							int LA540_0 = input.LA(1);
							if ( (LA540_0==EQ_SYM) ) {
								alt540=1;
							}
							switch (alt540) {
								case 1 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2234:77: EQ_SYM
									{
									EQ_SYM1548=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_alter_table_specification30750); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									EQ_SYM1548_tree = (Object)adaptor.create(EQ_SYM1548);
									adaptor.addChild(root_0, EQ_SYM1548_tree);
									}

									}
									break;

							}

							pushFollow(FOLLOW_collation_name_in_alter_table_specification30754);
							collation_name1549=collation_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name1549.getTree());

							}
							break;

					}

					}

					}
					break;
				case 25 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2235:5: ( DISCARD TABLESPACE )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2235:5: ( DISCARD TABLESPACE )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2235:7: DISCARD TABLESPACE
					{
					DISCARD1550=(Token)match(input,DISCARD,FOLLOW_DISCARD_in_alter_table_specification30766); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DISCARD1550_tree = (Object)adaptor.create(DISCARD1550);
					adaptor.addChild(root_0, DISCARD1550_tree);
					}

					TABLESPACE1551=(Token)match(input,TABLESPACE,FOLLOW_TABLESPACE_in_alter_table_specification30768); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TABLESPACE1551_tree = (Object)adaptor.create(TABLESPACE1551);
					adaptor.addChild(root_0, TABLESPACE1551_tree);
					}

					}

					}
					break;
				case 26 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2236:5: ( IMPORT TABLESPACE )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2236:5: ( IMPORT TABLESPACE )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2236:7: IMPORT TABLESPACE
					{
					IMPORT1552=(Token)match(input,IMPORT,FOLLOW_IMPORT_in_alter_table_specification30778); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IMPORT1552_tree = (Object)adaptor.create(IMPORT1552);
					adaptor.addChild(root_0, IMPORT1552_tree);
					}

					TABLESPACE1553=(Token)match(input,TABLESPACE,FOLLOW_TABLESPACE_in_alter_table_specification30780); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TABLESPACE1553_tree = (Object)adaptor.create(TABLESPACE1553);
					adaptor.addChild(root_0, TABLESPACE1553_tree);
					}

					}

					}
					break;
				case 27 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2237:5: ( FORCE_SYM )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2237:5: ( FORCE_SYM )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2237:7: FORCE_SYM
					{
					FORCE_SYM1554=(Token)match(input,FORCE_SYM,FOLLOW_FORCE_SYM_in_alter_table_specification30790); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					FORCE_SYM1554_tree = (Object)adaptor.create(FORCE_SYM1554);
					adaptor.addChild(root_0, FORCE_SYM1554_tree);
					}

					}

					}
					break;
				case 28 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2238:5: ( ADD_SYM PARTITION_SYM LPAREN partition_definition RPAREN )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2238:5: ( ADD_SYM PARTITION_SYM LPAREN partition_definition RPAREN )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2238:7: ADD_SYM PARTITION_SYM LPAREN partition_definition RPAREN
					{
					ADD_SYM1555=(Token)match(input,ADD_SYM,FOLLOW_ADD_SYM_in_alter_table_specification30800); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ADD_SYM1555_tree = (Object)adaptor.create(ADD_SYM1555);
					adaptor.addChild(root_0, ADD_SYM1555_tree);
					}

					PARTITION_SYM1556=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_alter_table_specification30802); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PARTITION_SYM1556_tree = (Object)adaptor.create(PARTITION_SYM1556);
					adaptor.addChild(root_0, PARTITION_SYM1556_tree);
					}

					LPAREN1557=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alter_table_specification30804); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1557_tree = (Object)adaptor.create(LPAREN1557);
					adaptor.addChild(root_0, LPAREN1557_tree);
					}

					pushFollow(FOLLOW_partition_definition_in_alter_table_specification30806);
					partition_definition1558=partition_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_definition1558.getTree());

					RPAREN1559=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alter_table_specification30808); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1559_tree = (Object)adaptor.create(RPAREN1559);
					adaptor.addChild(root_0, RPAREN1559_tree);
					}

					}

					}
					break;
				case 29 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2239:5: ( DROP PARTITION_SYM partition_names )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2239:5: ( DROP PARTITION_SYM partition_names )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2239:7: DROP PARTITION_SYM partition_names
					{
					DROP1560=(Token)match(input,DROP,FOLLOW_DROP_in_alter_table_specification30818); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DROP1560_tree = (Object)adaptor.create(DROP1560);
					adaptor.addChild(root_0, DROP1560_tree);
					}

					PARTITION_SYM1561=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_alter_table_specification30820); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PARTITION_SYM1561_tree = (Object)adaptor.create(PARTITION_SYM1561);
					adaptor.addChild(root_0, PARTITION_SYM1561_tree);
					}

					pushFollow(FOLLOW_partition_names_in_alter_table_specification30822);
					partition_names1562=partition_names();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_names1562.getTree());

					}

					}
					break;
				case 30 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2240:5: ( TRUNCATE PARTITION_SYM ( partition_names | ALL ) )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2240:5: ( TRUNCATE PARTITION_SYM ( partition_names | ALL ) )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2240:7: TRUNCATE PARTITION_SYM ( partition_names | ALL )
					{
					TRUNCATE1563=(Token)match(input,TRUNCATE,FOLLOW_TRUNCATE_in_alter_table_specification30832); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TRUNCATE1563_tree = (Object)adaptor.create(TRUNCATE1563);
					adaptor.addChild(root_0, TRUNCATE1563_tree);
					}

					PARTITION_SYM1564=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_alter_table_specification30834); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PARTITION_SYM1564_tree = (Object)adaptor.create(PARTITION_SYM1564);
					adaptor.addChild(root_0, PARTITION_SYM1564_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2240:30: ( partition_names | ALL )
					int alt542=2;
					int LA542_0 = input.LA(1);
					if ( (LA542_0==ID) ) {
						alt542=1;
					}
					else if ( (LA542_0==ALL) ) {
						alt542=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 542, 0, input);
						throw nvae;
					}

					switch (alt542) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2240:31: partition_names
							{
							pushFollow(FOLLOW_partition_names_in_alter_table_specification30837);
							partition_names1565=partition_names();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_names1565.getTree());

							}
							break;
						case 2 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2240:49: ALL
							{
							ALL1566=(Token)match(input,ALL,FOLLOW_ALL_in_alter_table_specification30841); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ALL1566_tree = (Object)adaptor.create(ALL1566);
							adaptor.addChild(root_0, ALL1566_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 31 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2241:5: ( COALESCE PARTITION_SYM INTEGER_NUM )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2241:5: ( COALESCE PARTITION_SYM INTEGER_NUM )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2241:7: COALESCE PARTITION_SYM INTEGER_NUM
					{
					COALESCE1567=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_alter_table_specification30852); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COALESCE1567_tree = (Object)adaptor.create(COALESCE1567);
					adaptor.addChild(root_0, COALESCE1567_tree);
					}

					PARTITION_SYM1568=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_alter_table_specification30854); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PARTITION_SYM1568_tree = (Object)adaptor.create(PARTITION_SYM1568);
					adaptor.addChild(root_0, PARTITION_SYM1568_tree);
					}

					INTEGER_NUM1569=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_alter_table_specification30856); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM1569_tree = (Object)adaptor.create(INTEGER_NUM1569);
					adaptor.addChild(root_0, INTEGER_NUM1569_tree);
					}

					}

					}
					break;
				case 32 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2242:5: ( REORGANIZE_SYM PARTITION_SYM partition_names INTO LPAREN partition_definition ( COMMA partition_definition )* RPAREN )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2242:5: ( REORGANIZE_SYM PARTITION_SYM partition_names INTO LPAREN partition_definition ( COMMA partition_definition )* RPAREN )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2242:7: REORGANIZE_SYM PARTITION_SYM partition_names INTO LPAREN partition_definition ( COMMA partition_definition )* RPAREN
					{
					REORGANIZE_SYM1570=(Token)match(input,REORGANIZE_SYM,FOLLOW_REORGANIZE_SYM_in_alter_table_specification30866); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					REORGANIZE_SYM1570_tree = (Object)adaptor.create(REORGANIZE_SYM1570);
					adaptor.addChild(root_0, REORGANIZE_SYM1570_tree);
					}

					PARTITION_SYM1571=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_alter_table_specification30868); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PARTITION_SYM1571_tree = (Object)adaptor.create(PARTITION_SYM1571);
					adaptor.addChild(root_0, PARTITION_SYM1571_tree);
					}

					pushFollow(FOLLOW_partition_names_in_alter_table_specification30870);
					partition_names1572=partition_names();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_names1572.getTree());

					INTO1573=(Token)match(input,INTO,FOLLOW_INTO_in_alter_table_specification30872); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTO1573_tree = (Object)adaptor.create(INTO1573);
					adaptor.addChild(root_0, INTO1573_tree);
					}

					LPAREN1574=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alter_table_specification30874); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1574_tree = (Object)adaptor.create(LPAREN1574);
					adaptor.addChild(root_0, LPAREN1574_tree);
					}

					pushFollow(FOLLOW_partition_definition_in_alter_table_specification30876);
					partition_definition1575=partition_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_definition1575.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2242:85: ( COMMA partition_definition )*
					loop543:
					while (true) {
						int alt543=2;
						int LA543_0 = input.LA(1);
						if ( (LA543_0==COMMA) ) {
							alt543=1;
						}

						switch (alt543) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2242:86: COMMA partition_definition
							{
							COMMA1576=(Token)match(input,COMMA,FOLLOW_COMMA_in_alter_table_specification30879); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA1576_tree = (Object)adaptor.create(COMMA1576);
							adaptor.addChild(root_0, COMMA1576_tree);
							}

							pushFollow(FOLLOW_partition_definition_in_alter_table_specification30881);
							partition_definition1577=partition_definition();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_definition1577.getTree());

							}
							break;

						default :
							break loop543;
						}
					}

					RPAREN1578=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alter_table_specification30885); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1578_tree = (Object)adaptor.create(RPAREN1578);
					adaptor.addChild(root_0, RPAREN1578_tree);
					}

					}

					}
					break;
				case 33 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2243:5: ( EXCHANGE_SYM PARTITION_SYM partition_name WITH TABLE table_name )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2243:5: ( EXCHANGE_SYM PARTITION_SYM partition_name WITH TABLE table_name )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2243:7: EXCHANGE_SYM PARTITION_SYM partition_name WITH TABLE table_name
					{
					EXCHANGE_SYM1579=(Token)match(input,EXCHANGE_SYM,FOLLOW_EXCHANGE_SYM_in_alter_table_specification30895); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXCHANGE_SYM1579_tree = (Object)adaptor.create(EXCHANGE_SYM1579);
					adaptor.addChild(root_0, EXCHANGE_SYM1579_tree);
					}

					PARTITION_SYM1580=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_alter_table_specification30897); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PARTITION_SYM1580_tree = (Object)adaptor.create(PARTITION_SYM1580);
					adaptor.addChild(root_0, PARTITION_SYM1580_tree);
					}

					pushFollow(FOLLOW_partition_name_in_alter_table_specification30899);
					partition_name1581=partition_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_name1581.getTree());

					WITH1582=(Token)match(input,WITH,FOLLOW_WITH_in_alter_table_specification30901); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					WITH1582_tree = (Object)adaptor.create(WITH1582);
					adaptor.addChild(root_0, WITH1582_tree);
					}

					TABLE1583=(Token)match(input,TABLE,FOLLOW_TABLE_in_alter_table_specification30903); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TABLE1583_tree = (Object)adaptor.create(TABLE1583);
					adaptor.addChild(root_0, TABLE1583_tree);
					}

					pushFollow(FOLLOW_table_name_in_alter_table_specification30905);
					table_name1584=table_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1584.getTree());

					}

					}
					break;
				case 34 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2244:5: ( ANALYZE_SYM PARTITION_SYM ( partition_names | ALL ) )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2244:5: ( ANALYZE_SYM PARTITION_SYM ( partition_names | ALL ) )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2244:7: ANALYZE_SYM PARTITION_SYM ( partition_names | ALL )
					{
					ANALYZE_SYM1585=(Token)match(input,ANALYZE_SYM,FOLLOW_ANALYZE_SYM_in_alter_table_specification30915); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ANALYZE_SYM1585_tree = (Object)adaptor.create(ANALYZE_SYM1585);
					adaptor.addChild(root_0, ANALYZE_SYM1585_tree);
					}

					PARTITION_SYM1586=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_alter_table_specification30917); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PARTITION_SYM1586_tree = (Object)adaptor.create(PARTITION_SYM1586);
					adaptor.addChild(root_0, PARTITION_SYM1586_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2244:33: ( partition_names | ALL )
					int alt544=2;
					int LA544_0 = input.LA(1);
					if ( (LA544_0==ID) ) {
						alt544=1;
					}
					else if ( (LA544_0==ALL) ) {
						alt544=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 544, 0, input);
						throw nvae;
					}

					switch (alt544) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2244:34: partition_names
							{
							pushFollow(FOLLOW_partition_names_in_alter_table_specification30920);
							partition_names1587=partition_names();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_names1587.getTree());

							}
							break;
						case 2 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2244:52: ALL
							{
							ALL1588=(Token)match(input,ALL,FOLLOW_ALL_in_alter_table_specification30924); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ALL1588_tree = (Object)adaptor.create(ALL1588);
							adaptor.addChild(root_0, ALL1588_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 35 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2245:5: ( CHECK_SYM PARTITION_SYM ( partition_names | ALL ) )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2245:5: ( CHECK_SYM PARTITION_SYM ( partition_names | ALL ) )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2245:7: CHECK_SYM PARTITION_SYM ( partition_names | ALL )
					{
					CHECK_SYM1589=(Token)match(input,CHECK_SYM,FOLLOW_CHECK_SYM_in_alter_table_specification30935); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CHECK_SYM1589_tree = (Object)adaptor.create(CHECK_SYM1589);
					adaptor.addChild(root_0, CHECK_SYM1589_tree);
					}

					PARTITION_SYM1590=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_alter_table_specification30937); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PARTITION_SYM1590_tree = (Object)adaptor.create(PARTITION_SYM1590);
					adaptor.addChild(root_0, PARTITION_SYM1590_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2245:31: ( partition_names | ALL )
					int alt545=2;
					int LA545_0 = input.LA(1);
					if ( (LA545_0==ID) ) {
						alt545=1;
					}
					else if ( (LA545_0==ALL) ) {
						alt545=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 545, 0, input);
						throw nvae;
					}

					switch (alt545) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2245:32: partition_names
							{
							pushFollow(FOLLOW_partition_names_in_alter_table_specification30940);
							partition_names1591=partition_names();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_names1591.getTree());

							}
							break;
						case 2 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2245:50: ALL
							{
							ALL1592=(Token)match(input,ALL,FOLLOW_ALL_in_alter_table_specification30944); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ALL1592_tree = (Object)adaptor.create(ALL1592);
							adaptor.addChild(root_0, ALL1592_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 36 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2246:5: ( OPTIMIZE PARTITION_SYM ( partition_names | ALL ) )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2246:5: ( OPTIMIZE PARTITION_SYM ( partition_names | ALL ) )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2246:7: OPTIMIZE PARTITION_SYM ( partition_names | ALL )
					{
					OPTIMIZE1593=(Token)match(input,OPTIMIZE,FOLLOW_OPTIMIZE_in_alter_table_specification30955); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					OPTIMIZE1593_tree = (Object)adaptor.create(OPTIMIZE1593);
					adaptor.addChild(root_0, OPTIMIZE1593_tree);
					}

					PARTITION_SYM1594=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_alter_table_specification30957); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PARTITION_SYM1594_tree = (Object)adaptor.create(PARTITION_SYM1594);
					adaptor.addChild(root_0, PARTITION_SYM1594_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2246:30: ( partition_names | ALL )
					int alt546=2;
					int LA546_0 = input.LA(1);
					if ( (LA546_0==ID) ) {
						alt546=1;
					}
					else if ( (LA546_0==ALL) ) {
						alt546=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 546, 0, input);
						throw nvae;
					}

					switch (alt546) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2246:31: partition_names
							{
							pushFollow(FOLLOW_partition_names_in_alter_table_specification30960);
							partition_names1595=partition_names();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_names1595.getTree());

							}
							break;
						case 2 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2246:49: ALL
							{
							ALL1596=(Token)match(input,ALL,FOLLOW_ALL_in_alter_table_specification30964); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ALL1596_tree = (Object)adaptor.create(ALL1596);
							adaptor.addChild(root_0, ALL1596_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 37 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2247:5: ( REBUILD_SYM PARTITION_SYM ( partition_names | ALL ) )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2247:5: ( REBUILD_SYM PARTITION_SYM ( partition_names | ALL ) )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2247:7: REBUILD_SYM PARTITION_SYM ( partition_names | ALL )
					{
					REBUILD_SYM1597=(Token)match(input,REBUILD_SYM,FOLLOW_REBUILD_SYM_in_alter_table_specification30975); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					REBUILD_SYM1597_tree = (Object)adaptor.create(REBUILD_SYM1597);
					adaptor.addChild(root_0, REBUILD_SYM1597_tree);
					}

					PARTITION_SYM1598=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_alter_table_specification30977); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PARTITION_SYM1598_tree = (Object)adaptor.create(PARTITION_SYM1598);
					adaptor.addChild(root_0, PARTITION_SYM1598_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2247:33: ( partition_names | ALL )
					int alt547=2;
					int LA547_0 = input.LA(1);
					if ( (LA547_0==ID) ) {
						alt547=1;
					}
					else if ( (LA547_0==ALL) ) {
						alt547=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 547, 0, input);
						throw nvae;
					}

					switch (alt547) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2247:34: partition_names
							{
							pushFollow(FOLLOW_partition_names_in_alter_table_specification30980);
							partition_names1599=partition_names();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_names1599.getTree());

							}
							break;
						case 2 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2247:52: ALL
							{
							ALL1600=(Token)match(input,ALL,FOLLOW_ALL_in_alter_table_specification30984); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ALL1600_tree = (Object)adaptor.create(ALL1600);
							adaptor.addChild(root_0, ALL1600_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 38 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2248:5: ( REPAIR PARTITION_SYM ( partition_names | ALL ) )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2248:5: ( REPAIR PARTITION_SYM ( partition_names | ALL ) )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2248:7: REPAIR PARTITION_SYM ( partition_names | ALL )
					{
					REPAIR1601=(Token)match(input,REPAIR,FOLLOW_REPAIR_in_alter_table_specification30995); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					REPAIR1601_tree = (Object)adaptor.create(REPAIR1601);
					adaptor.addChild(root_0, REPAIR1601_tree);
					}

					PARTITION_SYM1602=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_alter_table_specification30997); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PARTITION_SYM1602_tree = (Object)adaptor.create(PARTITION_SYM1602);
					adaptor.addChild(root_0, PARTITION_SYM1602_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2248:28: ( partition_names | ALL )
					int alt548=2;
					int LA548_0 = input.LA(1);
					if ( (LA548_0==ID) ) {
						alt548=1;
					}
					else if ( (LA548_0==ALL) ) {
						alt548=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 548, 0, input);
						throw nvae;
					}

					switch (alt548) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2248:29: partition_names
							{
							pushFollow(FOLLOW_partition_names_in_alter_table_specification31000);
							partition_names1603=partition_names();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_names1603.getTree());

							}
							break;
						case 2 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2248:47: ALL
							{
							ALL1604=(Token)match(input,ALL,FOLLOW_ALL_in_alter_table_specification31004); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ALL1604_tree = (Object)adaptor.create(ALL1604);
							adaptor.addChild(root_0, ALL1604_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 39 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2249:5: ( REMOVE_SYM PARTITIONING_SYM )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2249:5: ( REMOVE_SYM PARTITIONING_SYM )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2249:7: REMOVE_SYM PARTITIONING_SYM
					{
					REMOVE_SYM1605=(Token)match(input,REMOVE_SYM,FOLLOW_REMOVE_SYM_in_alter_table_specification31015); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					REMOVE_SYM1605_tree = (Object)adaptor.create(REMOVE_SYM1605);
					adaptor.addChild(root_0, REMOVE_SYM1605_tree);
					}

					PARTITIONING_SYM1606=(Token)match(input,PARTITIONING_SYM,FOLLOW_PARTITIONING_SYM_in_alter_table_specification31017); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PARTITIONING_SYM1606_tree = (Object)adaptor.create(PARTITIONING_SYM1606);
					adaptor.addChild(root_0, PARTITIONING_SYM1606_tree);
					}

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_table_specification"


	public static class index_column_names_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "index_column_names"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2251:1: index_column_names : index_column_name ( COMMA index_column_name )* ;
	public final SQLParser.index_column_names_return index_column_names() throws RecognitionException {
		SQLParser.index_column_names_return retval = new SQLParser.index_column_names_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token COMMA1608=null;
		ParserRuleReturnScope index_column_name1607 =null;
		ParserRuleReturnScope index_column_name1609 =null;

		Object COMMA1608_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2251:19: ( index_column_name ( COMMA index_column_name )* )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2252:3: index_column_name ( COMMA index_column_name )*
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_index_column_name_in_index_column_names31028);
			index_column_name1607=index_column_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name1607.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2252:21: ( COMMA index_column_name )*
			loop550:
			while (true) {
				int alt550=2;
				int LA550_0 = input.LA(1);
				if ( (LA550_0==COMMA) ) {
					alt550=1;
				}

				switch (alt550) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2252:22: COMMA index_column_name
					{
					COMMA1608=(Token)match(input,COMMA,FOLLOW_COMMA_in_index_column_names31031); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA1608_tree = (Object)adaptor.create(COMMA1608);
					adaptor.addChild(root_0, COMMA1608_tree);
					}

					pushFollow(FOLLOW_index_column_name_in_index_column_names31033);
					index_column_name1609=index_column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name1609.getTree());

					}
					break;

				default :
					break loop550;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "index_column_names"


	public static class index_type_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "index_type"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2253:1: index_type : USING_SYM ( BTREE_SYM | HASH_SYM ) ;
	public final SQLParser.index_type_return index_type() throws RecognitionException {
		SQLParser.index_type_return retval = new SQLParser.index_type_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token USING_SYM1610=null;
		Token set1611=null;

		Object USING_SYM1610_tree=null;
		Object set1611_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2253:11: ( USING_SYM ( BTREE_SYM | HASH_SYM ) )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2254:3: USING_SYM ( BTREE_SYM | HASH_SYM )
			{
			root_0 = (Object)adaptor.nil();


			USING_SYM1610=(Token)match(input,USING_SYM,FOLLOW_USING_SYM_in_index_type31043); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			USING_SYM1610_tree = (Object)adaptor.create(USING_SYM1610);
			adaptor.addChild(root_0, USING_SYM1610_tree);
			}

			set1611=input.LT(1);
			if ( input.LA(1)==BTREE_SYM||input.LA(1)==HASH_SYM ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1611));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "index_type"


	public static class index_option_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "index_option"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2256:1: index_option : ( ( KEY_BLOCK_SIZE ( EQ_SYM )? INTEGER_NUM ) | index_type | ( WITH PARSER_SYM parser_name ) | ( COMMENT_SYM TEXT_STRING ) );
	public final SQLParser.index_option_return index_option() throws RecognitionException {
		SQLParser.index_option_return retval = new SQLParser.index_option_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token KEY_BLOCK_SIZE1612=null;
		Token EQ_SYM1613=null;
		Token INTEGER_NUM1614=null;
		Token WITH1616=null;
		Token PARSER_SYM1617=null;
		Token COMMENT_SYM1619=null;
		Token TEXT_STRING1620=null;
		ParserRuleReturnScope index_type1615 =null;
		ParserRuleReturnScope parser_name1618 =null;

		Object KEY_BLOCK_SIZE1612_tree=null;
		Object EQ_SYM1613_tree=null;
		Object INTEGER_NUM1614_tree=null;
		Object WITH1616_tree=null;
		Object PARSER_SYM1617_tree=null;
		Object COMMENT_SYM1619_tree=null;
		Object TEXT_STRING1620_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2256:13: ( ( KEY_BLOCK_SIZE ( EQ_SYM )? INTEGER_NUM ) | index_type | ( WITH PARSER_SYM parser_name ) | ( COMMENT_SYM TEXT_STRING ) )
			int alt552=4;
			switch ( input.LA(1) ) {
			case KEY_BLOCK_SIZE:
				{
				alt552=1;
				}
				break;
			case USING_SYM:
				{
				alt552=2;
				}
				break;
			case WITH:
				{
				alt552=3;
				}
				break;
			case COMMENT_SYM:
				{
				alt552=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 552, 0, input);
				throw nvae;
			}
			switch (alt552) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2257:5: ( KEY_BLOCK_SIZE ( EQ_SYM )? INTEGER_NUM )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2257:5: ( KEY_BLOCK_SIZE ( EQ_SYM )? INTEGER_NUM )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2257:7: KEY_BLOCK_SIZE ( EQ_SYM )? INTEGER_NUM
					{
					KEY_BLOCK_SIZE1612=(Token)match(input,KEY_BLOCK_SIZE,FOLLOW_KEY_BLOCK_SIZE_in_index_option31064); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KEY_BLOCK_SIZE1612_tree = (Object)adaptor.create(KEY_BLOCK_SIZE1612);
					adaptor.addChild(root_0, KEY_BLOCK_SIZE1612_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2257:22: ( EQ_SYM )?
					int alt551=2;
					int LA551_0 = input.LA(1);
					if ( (LA551_0==EQ_SYM) ) {
						alt551=1;
					}
					switch (alt551) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2257:23: EQ_SYM
							{
							EQ_SYM1613=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_index_option31067); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1613_tree = (Object)adaptor.create(EQ_SYM1613);
							adaptor.addChild(root_0, EQ_SYM1613_tree);
							}

							}
							break;

					}

					INTEGER_NUM1614=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_index_option31071); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM1614_tree = (Object)adaptor.create(INTEGER_NUM1614);
					adaptor.addChild(root_0, INTEGER_NUM1614_tree);
					}

					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2258:5: index_type
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_index_type_in_index_option31079);
					index_type1615=index_type();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_type1615.getTree());

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2259:5: ( WITH PARSER_SYM parser_name )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2259:5: ( WITH PARSER_SYM parser_name )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2259:7: WITH PARSER_SYM parser_name
					{
					WITH1616=(Token)match(input,WITH,FOLLOW_WITH_in_index_option31087); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					WITH1616_tree = (Object)adaptor.create(WITH1616);
					adaptor.addChild(root_0, WITH1616_tree);
					}

					PARSER_SYM1617=(Token)match(input,PARSER_SYM,FOLLOW_PARSER_SYM_in_index_option31089); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PARSER_SYM1617_tree = (Object)adaptor.create(PARSER_SYM1617);
					adaptor.addChild(root_0, PARSER_SYM1617_tree);
					}

					pushFollow(FOLLOW_parser_name_in_index_option31091);
					parser_name1618=parser_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, parser_name1618.getTree());

					}

					}
					break;
				case 4 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2260:5: ( COMMENT_SYM TEXT_STRING )
					{
					root_0 = (Object)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2260:5: ( COMMENT_SYM TEXT_STRING )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2260:7: COMMENT_SYM TEXT_STRING
					{
					COMMENT_SYM1619=(Token)match(input,COMMENT_SYM,FOLLOW_COMMENT_SYM_in_index_option31101); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMENT_SYM1619_tree = (Object)adaptor.create(COMMENT_SYM1619);
					adaptor.addChild(root_0, COMMENT_SYM1619_tree);
					}

					TEXT_STRING1620=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_index_option31103); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING1620_tree = (Object)adaptor.create(TEXT_STRING1620);
					adaptor.addChild(root_0, TEXT_STRING1620_tree);
					}

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "index_option"


	public static class column_definitions_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "column_definitions"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2262:1: column_definitions : column_name column_definition ( COMMA column_name column_definition )* ;
	public final SQLParser.column_definitions_return column_definitions() throws RecognitionException {
		SQLParser.column_definitions_return retval = new SQLParser.column_definitions_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token COMMA1623=null;
		ParserRuleReturnScope column_name1621 =null;
		ParserRuleReturnScope column_definition1622 =null;
		ParserRuleReturnScope column_name1624 =null;
		ParserRuleReturnScope column_definition1625 =null;

		Object COMMA1623_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2262:19: ( column_name column_definition ( COMMA column_name column_definition )* )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2263:3: column_name column_definition ( COMMA column_name column_definition )*
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_column_name_in_column_definitions31114);
			column_name1621=column_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1621.getTree());

			pushFollow(FOLLOW_column_definition_in_column_definitions31116);
			column_definition1622=column_definition();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, column_definition1622.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2263:33: ( COMMA column_name column_definition )*
			loop553:
			while (true) {
				int alt553=2;
				int LA553_0 = input.LA(1);
				if ( (LA553_0==COMMA) ) {
					alt553=1;
				}

				switch (alt553) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2263:34: COMMA column_name column_definition
					{
					COMMA1623=(Token)match(input,COMMA,FOLLOW_COMMA_in_column_definitions31119); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA1623_tree = (Object)adaptor.create(COMMA1623);
					adaptor.addChild(root_0, COMMA1623_tree);
					}

					pushFollow(FOLLOW_column_name_in_column_definitions31121);
					column_name1624=column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1624.getTree());

					pushFollow(FOLLOW_column_definition_in_column_definitions31123);
					column_definition1625=column_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_definition1625.getTree());

					}
					break;

				default :
					break loop553;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "column_definitions"


	public static class rename_table_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "rename_table_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2268:1: rename_table_statement : RENAME TABLE table_name TO_SYM table_name ( COMMA table_name TO_SYM table_name )* ;
	public final SQLParser.rename_table_statement_return rename_table_statement() throws RecognitionException {
		SQLParser.rename_table_statement_return retval = new SQLParser.rename_table_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token RENAME1626=null;
		Token TABLE1627=null;
		Token TO_SYM1629=null;
		Token COMMA1631=null;
		Token TO_SYM1633=null;
		ParserRuleReturnScope table_name1628 =null;
		ParserRuleReturnScope table_name1630 =null;
		ParserRuleReturnScope table_name1632 =null;
		ParserRuleReturnScope table_name1634 =null;

		Object RENAME1626_tree=null;
		Object TABLE1627_tree=null;
		Object TO_SYM1629_tree=null;
		Object COMMA1631_tree=null;
		Object TO_SYM1633_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2268:23: ( RENAME TABLE table_name TO_SYM table_name ( COMMA table_name TO_SYM table_name )* )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2269:3: RENAME TABLE table_name TO_SYM table_name ( COMMA table_name TO_SYM table_name )*
			{
			root_0 = (Object)adaptor.nil();


			RENAME1626=(Token)match(input,RENAME,FOLLOW_RENAME_in_rename_table_statement31137); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RENAME1626_tree = (Object)adaptor.create(RENAME1626);
			adaptor.addChild(root_0, RENAME1626_tree);
			}

			TABLE1627=(Token)match(input,TABLE,FOLLOW_TABLE_in_rename_table_statement31139); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			TABLE1627_tree = (Object)adaptor.create(TABLE1627);
			adaptor.addChild(root_0, TABLE1627_tree);
			}

			pushFollow(FOLLOW_table_name_in_rename_table_statement31144);
			table_name1628=table_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1628.getTree());

			TO_SYM1629=(Token)match(input,TO_SYM,FOLLOW_TO_SYM_in_rename_table_statement31146); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			TO_SYM1629_tree = (Object)adaptor.create(TO_SYM1629);
			adaptor.addChild(root_0, TO_SYM1629_tree);
			}

			pushFollow(FOLLOW_table_name_in_rename_table_statement31148);
			table_name1630=table_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1630.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2271:3: ( COMMA table_name TO_SYM table_name )*
			loop554:
			while (true) {
				int alt554=2;
				int LA554_0 = input.LA(1);
				if ( (LA554_0==COMMA) ) {
					int LA554_2 = input.LA(2);
					if ( (LA554_2==ID) ) {
						alt554=1;
					}

				}

				switch (alt554) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2271:4: COMMA table_name TO_SYM table_name
					{
					COMMA1631=(Token)match(input,COMMA,FOLLOW_COMMA_in_rename_table_statement31153); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA1631_tree = (Object)adaptor.create(COMMA1631);
					adaptor.addChild(root_0, COMMA1631_tree);
					}

					pushFollow(FOLLOW_table_name_in_rename_table_statement31155);
					table_name1632=table_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1632.getTree());

					TO_SYM1633=(Token)match(input,TO_SYM,FOLLOW_TO_SYM_in_rename_table_statement31157); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TO_SYM1633_tree = (Object)adaptor.create(TO_SYM1633);
					adaptor.addChild(root_0, TO_SYM1633_tree);
					}

					pushFollow(FOLLOW_table_name_in_rename_table_statement31159);
					table_name1634=table_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1634.getTree());

					}
					break;

				default :
					break loop554;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "rename_table_statement"


	public static class drop_table_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "drop_table_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2276:1: drop_table_statement : DROP ( TEMPORARY )? TABLE ( IF EXISTS )? table_name ( COMMA table_name )* ( RESTRICT | CASCADE )? ;
	public final SQLParser.drop_table_statement_return drop_table_statement() throws RecognitionException {
		SQLParser.drop_table_statement_return retval = new SQLParser.drop_table_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token DROP1635=null;
		Token TEMPORARY1636=null;
		Token TABLE1637=null;
		Token IF1638=null;
		Token EXISTS1639=null;
		Token COMMA1641=null;
		Token set1643=null;
		ParserRuleReturnScope table_name1640 =null;
		ParserRuleReturnScope table_name1642 =null;

		Object DROP1635_tree=null;
		Object TEMPORARY1636_tree=null;
		Object TABLE1637_tree=null;
		Object IF1638_tree=null;
		Object EXISTS1639_tree=null;
		Object COMMA1641_tree=null;
		Object set1643_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2276:21: ( DROP ( TEMPORARY )? TABLE ( IF EXISTS )? table_name ( COMMA table_name )* ( RESTRICT | CASCADE )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2277:3: DROP ( TEMPORARY )? TABLE ( IF EXISTS )? table_name ( COMMA table_name )* ( RESTRICT | CASCADE )?
			{
			root_0 = (Object)adaptor.nil();


			DROP1635=(Token)match(input,DROP,FOLLOW_DROP_in_drop_table_statement31173); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DROP1635_tree = (Object)adaptor.create(DROP1635);
			adaptor.addChild(root_0, DROP1635_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2277:8: ( TEMPORARY )?
			int alt555=2;
			int LA555_0 = input.LA(1);
			if ( (LA555_0==TEMPORARY) ) {
				alt555=1;
			}
			switch (alt555) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2277:9: TEMPORARY
					{
					TEMPORARY1636=(Token)match(input,TEMPORARY,FOLLOW_TEMPORARY_in_drop_table_statement31176); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEMPORARY1636_tree = (Object)adaptor.create(TEMPORARY1636);
					adaptor.addChild(root_0, TEMPORARY1636_tree);
					}

					}
					break;

			}

			TABLE1637=(Token)match(input,TABLE,FOLLOW_TABLE_in_drop_table_statement31180); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			TABLE1637_tree = (Object)adaptor.create(TABLE1637);
			adaptor.addChild(root_0, TABLE1637_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2277:27: ( IF EXISTS )?
			int alt556=2;
			int LA556_0 = input.LA(1);
			if ( (LA556_0==IF) ) {
				alt556=1;
			}
			switch (alt556) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2277:28: IF EXISTS
					{
					IF1638=(Token)match(input,IF,FOLLOW_IF_in_drop_table_statement31183); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IF1638_tree = (Object)adaptor.create(IF1638);
					adaptor.addChild(root_0, IF1638_tree);
					}

					EXISTS1639=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_drop_table_statement31185); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXISTS1639_tree = (Object)adaptor.create(EXISTS1639);
					adaptor.addChild(root_0, EXISTS1639_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_table_name_in_drop_table_statement31191);
			table_name1640=table_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1640.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2278:14: ( COMMA table_name )*
			loop557:
			while (true) {
				int alt557=2;
				int LA557_0 = input.LA(1);
				if ( (LA557_0==COMMA) ) {
					int LA557_2 = input.LA(2);
					if ( (LA557_2==ID) ) {
						alt557=1;
					}

				}

				switch (alt557) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2278:15: COMMA table_name
					{
					COMMA1641=(Token)match(input,COMMA,FOLLOW_COMMA_in_drop_table_statement31194); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA1641_tree = (Object)adaptor.create(COMMA1641);
					adaptor.addChild(root_0, COMMA1641_tree);
					}

					pushFollow(FOLLOW_table_name_in_drop_table_statement31196);
					table_name1642=table_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1642.getTree());

					}
					break;

				default :
					break loop557;
				}
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2279:3: ( RESTRICT | CASCADE )?
			int alt558=2;
			int LA558_0 = input.LA(1);
			if ( (LA558_0==CASCADE||LA558_0==RESTRICT) ) {
				alt558=1;
			}
			switch (alt558) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
					{
					set1643=input.LT(1);
					if ( input.LA(1)==CASCADE||input.LA(1)==RESTRICT ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1643));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_table_statement"


	public static class truncate_table_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "truncate_table_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2284:1: truncate_table_statement : TRUNCATE ( TABLE )? table_name ;
	public final SQLParser.truncate_table_statement_return truncate_table_statement() throws RecognitionException {
		SQLParser.truncate_table_statement_return retval = new SQLParser.truncate_table_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token TRUNCATE1644=null;
		Token TABLE1645=null;
		ParserRuleReturnScope table_name1646 =null;

		Object TRUNCATE1644_tree=null;
		Object TABLE1645_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2284:25: ( TRUNCATE ( TABLE )? table_name )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2285:3: TRUNCATE ( TABLE )? table_name
			{
			root_0 = (Object)adaptor.nil();


			TRUNCATE1644=(Token)match(input,TRUNCATE,FOLLOW_TRUNCATE_in_truncate_table_statement31221); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			TRUNCATE1644_tree = (Object)adaptor.create(TRUNCATE1644);
			adaptor.addChild(root_0, TRUNCATE1644_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2285:12: ( TABLE )?
			int alt559=2;
			int LA559_0 = input.LA(1);
			if ( (LA559_0==TABLE) ) {
				alt559=1;
			}
			switch (alt559) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2285:13: TABLE
					{
					TABLE1645=(Token)match(input,TABLE,FOLLOW_TABLE_in_truncate_table_statement31224); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TABLE1645_tree = (Object)adaptor.create(TABLE1645);
					adaptor.addChild(root_0, TABLE1645_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_table_name_in_truncate_table_statement31228);
			table_name1646=table_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1646.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "truncate_table_statement"


	public static class create_view_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "create_view_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2310:1: create_view_statement : CREATE ( OR_SYM REPLACE )? create_view_body ;
	public final SQLParser.create_view_statement_return create_view_statement() throws RecognitionException {
		SQLParser.create_view_statement_return retval = new SQLParser.create_view_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token CREATE1647=null;
		Token OR_SYM1648=null;
		Token REPLACE1649=null;
		ParserRuleReturnScope create_view_body1650 =null;

		Object CREATE1647_tree=null;
		Object OR_SYM1648_tree=null;
		Object REPLACE1649_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2310:22: ( CREATE ( OR_SYM REPLACE )? create_view_body )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2311:3: CREATE ( OR_SYM REPLACE )? create_view_body
			{
			root_0 = (Object)adaptor.nil();


			CREATE1647=(Token)match(input,CREATE,FOLLOW_CREATE_in_create_view_statement31249); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			CREATE1647_tree = (Object)adaptor.create(CREATE1647);
			adaptor.addChild(root_0, CREATE1647_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2311:10: ( OR_SYM REPLACE )?
			int alt560=2;
			int LA560_0 = input.LA(1);
			if ( (LA560_0==OR_SYM) ) {
				alt560=1;
			}
			switch (alt560) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2311:11: OR_SYM REPLACE
					{
					OR_SYM1648=(Token)match(input,OR_SYM,FOLLOW_OR_SYM_in_create_view_statement31252); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					OR_SYM1648_tree = (Object)adaptor.create(OR_SYM1648);
					adaptor.addChild(root_0, OR_SYM1648_tree);
					}

					REPLACE1649=(Token)match(input,REPLACE,FOLLOW_REPLACE_in_create_view_statement31254); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					REPLACE1649_tree = (Object)adaptor.create(REPLACE1649);
					adaptor.addChild(root_0, REPLACE1649_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_create_view_body_in_create_view_statement31260);
			create_view_body1650=create_view_body();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, create_view_body1650.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_view_statement"


	public static class create_view_body_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "create_view_body"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2314:1: create_view_body : ( ALGORITHM_SYM EQ_SYM ( UNDEFINED_SYM | MERGE_SYM | TEMPTABLE_SYM ) )? ( DEFINER EQ_SYM ( user_name | CURRENT_USER ) )? ( SQL_SYM SECURITY_SYM ( DEFINER | INVOKER_SYM ) )? VIEW_SYM view_name ( LPAREN column_list RPAREN )? AS_SYM select_statement ( WITH ( CASCADED | LOCAL_SYM )? CHECK_SYM OPTION )? ;
	public final SQLParser.create_view_body_return create_view_body() throws RecognitionException {
		SQLParser.create_view_body_return retval = new SQLParser.create_view_body_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token ALGORITHM_SYM1651=null;
		Token EQ_SYM1652=null;
		Token set1653=null;
		Token DEFINER1654=null;
		Token EQ_SYM1655=null;
		Token CURRENT_USER1657=null;
		Token SQL_SYM1658=null;
		Token SECURITY_SYM1659=null;
		Token set1660=null;
		Token VIEW_SYM1661=null;
		Token LPAREN1663=null;
		Token RPAREN1665=null;
		Token AS_SYM1666=null;
		Token WITH1668=null;
		Token set1669=null;
		Token CHECK_SYM1670=null;
		Token OPTION1671=null;
		ParserRuleReturnScope user_name1656 =null;
		ParserRuleReturnScope view_name1662 =null;
		ParserRuleReturnScope column_list1664 =null;
		ParserRuleReturnScope select_statement1667 =null;

		Object ALGORITHM_SYM1651_tree=null;
		Object EQ_SYM1652_tree=null;
		Object set1653_tree=null;
		Object DEFINER1654_tree=null;
		Object EQ_SYM1655_tree=null;
		Object CURRENT_USER1657_tree=null;
		Object SQL_SYM1658_tree=null;
		Object SECURITY_SYM1659_tree=null;
		Object set1660_tree=null;
		Object VIEW_SYM1661_tree=null;
		Object LPAREN1663_tree=null;
		Object RPAREN1665_tree=null;
		Object AS_SYM1666_tree=null;
		Object WITH1668_tree=null;
		Object set1669_tree=null;
		Object CHECK_SYM1670_tree=null;
		Object OPTION1671_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2314:17: ( ( ALGORITHM_SYM EQ_SYM ( UNDEFINED_SYM | MERGE_SYM | TEMPTABLE_SYM ) )? ( DEFINER EQ_SYM ( user_name | CURRENT_USER ) )? ( SQL_SYM SECURITY_SYM ( DEFINER | INVOKER_SYM ) )? VIEW_SYM view_name ( LPAREN column_list RPAREN )? AS_SYM select_statement ( WITH ( CASCADED | LOCAL_SYM )? CHECK_SYM OPTION )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2315:3: ( ALGORITHM_SYM EQ_SYM ( UNDEFINED_SYM | MERGE_SYM | TEMPTABLE_SYM ) )? ( DEFINER EQ_SYM ( user_name | CURRENT_USER ) )? ( SQL_SYM SECURITY_SYM ( DEFINER | INVOKER_SYM ) )? VIEW_SYM view_name ( LPAREN column_list RPAREN )? AS_SYM select_statement ( WITH ( CASCADED | LOCAL_SYM )? CHECK_SYM OPTION )?
			{
			root_0 = (Object)adaptor.nil();


			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2315:3: ( ALGORITHM_SYM EQ_SYM ( UNDEFINED_SYM | MERGE_SYM | TEMPTABLE_SYM ) )?
			int alt561=2;
			int LA561_0 = input.LA(1);
			if ( (LA561_0==ALGORITHM_SYM) ) {
				alt561=1;
			}
			switch (alt561) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2315:4: ALGORITHM_SYM EQ_SYM ( UNDEFINED_SYM | MERGE_SYM | TEMPTABLE_SYM )
					{
					ALGORITHM_SYM1651=(Token)match(input,ALGORITHM_SYM,FOLLOW_ALGORITHM_SYM_in_create_view_body31270); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ALGORITHM_SYM1651_tree = (Object)adaptor.create(ALGORITHM_SYM1651);
					adaptor.addChild(root_0, ALGORITHM_SYM1651_tree);
					}

					EQ_SYM1652=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_create_view_body31272); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EQ_SYM1652_tree = (Object)adaptor.create(EQ_SYM1652);
					adaptor.addChild(root_0, EQ_SYM1652_tree);
					}

					set1653=input.LT(1);
					if ( input.LA(1)==MERGE_SYM||input.LA(1)==TEMPTABLE_SYM||input.LA(1)==UNDEFINED_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1653));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2316:3: ( DEFINER EQ_SYM ( user_name | CURRENT_USER ) )?
			int alt563=2;
			int LA563_0 = input.LA(1);
			if ( (LA563_0==DEFINER) ) {
				alt563=1;
			}
			switch (alt563) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2316:4: DEFINER EQ_SYM ( user_name | CURRENT_USER )
					{
					DEFINER1654=(Token)match(input,DEFINER,FOLLOW_DEFINER_in_create_view_body31291); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DEFINER1654_tree = (Object)adaptor.create(DEFINER1654);
					adaptor.addChild(root_0, DEFINER1654_tree);
					}

					EQ_SYM1655=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_create_view_body31293); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EQ_SYM1655_tree = (Object)adaptor.create(EQ_SYM1655);
					adaptor.addChild(root_0, EQ_SYM1655_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2316:19: ( user_name | CURRENT_USER )
					int alt562=2;
					int LA562_0 = input.LA(1);
					if ( (LA562_0==ID) ) {
						alt562=1;
					}
					else if ( (LA562_0==CURRENT_USER) ) {
						alt562=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 562, 0, input);
						throw nvae;
					}

					switch (alt562) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2316:20: user_name
							{
							pushFollow(FOLLOW_user_name_in_create_view_body31296);
							user_name1656=user_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, user_name1656.getTree());

							}
							break;
						case 2 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2316:32: CURRENT_USER
							{
							CURRENT_USER1657=(Token)match(input,CURRENT_USER,FOLLOW_CURRENT_USER_in_create_view_body31300); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CURRENT_USER1657_tree = (Object)adaptor.create(CURRENT_USER1657);
							adaptor.addChild(root_0, CURRENT_USER1657_tree);
							}

							}
							break;

					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2317:3: ( SQL_SYM SECURITY_SYM ( DEFINER | INVOKER_SYM ) )?
			int alt564=2;
			int LA564_0 = input.LA(1);
			if ( (LA564_0==SQL_SYM) ) {
				alt564=1;
			}
			switch (alt564) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2317:4: SQL_SYM SECURITY_SYM ( DEFINER | INVOKER_SYM )
					{
					SQL_SYM1658=(Token)match(input,SQL_SYM,FOLLOW_SQL_SYM_in_create_view_body31309); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SQL_SYM1658_tree = (Object)adaptor.create(SQL_SYM1658);
					adaptor.addChild(root_0, SQL_SYM1658_tree);
					}

					SECURITY_SYM1659=(Token)match(input,SECURITY_SYM,FOLLOW_SECURITY_SYM_in_create_view_body31311); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SECURITY_SYM1659_tree = (Object)adaptor.create(SECURITY_SYM1659);
					adaptor.addChild(root_0, SECURITY_SYM1659_tree);
					}

					set1660=input.LT(1);
					if ( input.LA(1)==DEFINER||input.LA(1)==INVOKER_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1660));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			VIEW_SYM1661=(Token)match(input,VIEW_SYM,FOLLOW_VIEW_SYM_in_create_view_body31327); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			VIEW_SYM1661_tree = (Object)adaptor.create(VIEW_SYM1661);
			adaptor.addChild(root_0, VIEW_SYM1661_tree);
			}

			pushFollow(FOLLOW_view_name_in_create_view_body31329);
			view_name1662=view_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, view_name1662.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2318:22: ( LPAREN column_list RPAREN )?
			int alt565=2;
			int LA565_0 = input.LA(1);
			if ( (LA565_0==LPAREN) ) {
				alt565=1;
			}
			switch (alt565) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2318:23: LPAREN column_list RPAREN
					{
					LPAREN1663=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_create_view_body31332); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1663_tree = (Object)adaptor.create(LPAREN1663);
					adaptor.addChild(root_0, LPAREN1663_tree);
					}

					pushFollow(FOLLOW_column_list_in_create_view_body31334);
					column_list1664=column_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_list1664.getTree());

					RPAREN1665=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_create_view_body31336); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1665_tree = (Object)adaptor.create(RPAREN1665);
					adaptor.addChild(root_0, RPAREN1665_tree);
					}

					}
					break;

			}

			AS_SYM1666=(Token)match(input,AS_SYM,FOLLOW_AS_SYM_in_create_view_body31342); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			AS_SYM1666_tree = (Object)adaptor.create(AS_SYM1666);
			adaptor.addChild(root_0, AS_SYM1666_tree);
			}

			pushFollow(FOLLOW_select_statement_in_create_view_body31344);
			select_statement1667=select_statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement1667.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2320:3: ( WITH ( CASCADED | LOCAL_SYM )? CHECK_SYM OPTION )?
			int alt567=2;
			int LA567_0 = input.LA(1);
			if ( (LA567_0==WITH) ) {
				alt567=1;
			}
			switch (alt567) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2320:4: WITH ( CASCADED | LOCAL_SYM )? CHECK_SYM OPTION
					{
					WITH1668=(Token)match(input,WITH,FOLLOW_WITH_in_create_view_body31349); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					WITH1668_tree = (Object)adaptor.create(WITH1668);
					adaptor.addChild(root_0, WITH1668_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2320:9: ( CASCADED | LOCAL_SYM )?
					int alt566=2;
					int LA566_0 = input.LA(1);
					if ( (LA566_0==CASCADED||LA566_0==LOCAL_SYM) ) {
						alt566=1;
					}
					switch (alt566) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
							{
							set1669=input.LT(1);
							if ( input.LA(1)==CASCADED||input.LA(1)==LOCAL_SYM ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1669));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					CHECK_SYM1670=(Token)match(input,CHECK_SYM,FOLLOW_CHECK_SYM_in_create_view_body31360); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CHECK_SYM1670_tree = (Object)adaptor.create(CHECK_SYM1670);
					adaptor.addChild(root_0, CHECK_SYM1670_tree);
					}

					OPTION1671=(Token)match(input,OPTION,FOLLOW_OPTION_in_create_view_body31362); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					OPTION1671_tree = (Object)adaptor.create(OPTION1671);
					adaptor.addChild(root_0, OPTION1671_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_view_body"


	public static class alter_view_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "alter_view_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2325:1: alter_view_statement : ALTER create_view_body ;
	public final SQLParser.alter_view_statement_return alter_view_statement() throws RecognitionException {
		SQLParser.alter_view_statement_return retval = new SQLParser.alter_view_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token ALTER1672=null;
		ParserRuleReturnScope create_view_body1673 =null;

		Object ALTER1672_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2325:21: ( ALTER create_view_body )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2326:3: ALTER create_view_body
			{
			root_0 = (Object)adaptor.nil();


			ALTER1672=(Token)match(input,ALTER,FOLLOW_ALTER_in_alter_view_statement31376); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			ALTER1672_tree = (Object)adaptor.create(ALTER1672);
			adaptor.addChild(root_0, ALTER1672_tree);
			}

			pushFollow(FOLLOW_create_view_body_in_alter_view_statement31380);
			create_view_body1673=create_view_body();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, create_view_body1673.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_view_statement"


	public static class drop_view_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "drop_view_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2332:1: drop_view_statement : DROP VIEW_SYM ( IF EXISTS )? view_name ( COMMA view_name )* ( RESTRICT | CASCADE )? ;
	public final SQLParser.drop_view_statement_return drop_view_statement() throws RecognitionException {
		SQLParser.drop_view_statement_return retval = new SQLParser.drop_view_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token DROP1674=null;
		Token VIEW_SYM1675=null;
		Token IF1676=null;
		Token EXISTS1677=null;
		Token COMMA1679=null;
		Token set1681=null;
		ParserRuleReturnScope view_name1678 =null;
		ParserRuleReturnScope view_name1680 =null;

		Object DROP1674_tree=null;
		Object VIEW_SYM1675_tree=null;
		Object IF1676_tree=null;
		Object EXISTS1677_tree=null;
		Object COMMA1679_tree=null;
		Object set1681_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2332:20: ( DROP VIEW_SYM ( IF EXISTS )? view_name ( COMMA view_name )* ( RESTRICT | CASCADE )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2333:3: DROP VIEW_SYM ( IF EXISTS )? view_name ( COMMA view_name )* ( RESTRICT | CASCADE )?
			{
			root_0 = (Object)adaptor.nil();


			DROP1674=(Token)match(input,DROP,FOLLOW_DROP_in_drop_view_statement31392); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DROP1674_tree = (Object)adaptor.create(DROP1674);
			adaptor.addChild(root_0, DROP1674_tree);
			}

			VIEW_SYM1675=(Token)match(input,VIEW_SYM,FOLLOW_VIEW_SYM_in_drop_view_statement31394); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			VIEW_SYM1675_tree = (Object)adaptor.create(VIEW_SYM1675);
			adaptor.addChild(root_0, VIEW_SYM1675_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2333:17: ( IF EXISTS )?
			int alt568=2;
			int LA568_0 = input.LA(1);
			if ( (LA568_0==IF) ) {
				alt568=1;
			}
			switch (alt568) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2333:18: IF EXISTS
					{
					IF1676=(Token)match(input,IF,FOLLOW_IF_in_drop_view_statement31397); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IF1676_tree = (Object)adaptor.create(IF1676);
					adaptor.addChild(root_0, IF1676_tree);
					}

					EXISTS1677=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_drop_view_statement31399); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXISTS1677_tree = (Object)adaptor.create(EXISTS1677);
					adaptor.addChild(root_0, EXISTS1677_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_view_name_in_drop_view_statement31405);
			view_name1678=view_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, view_name1678.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2334:13: ( COMMA view_name )*
			loop569:
			while (true) {
				int alt569=2;
				int LA569_0 = input.LA(1);
				if ( (LA569_0==COMMA) ) {
					int LA569_2 = input.LA(2);
					if ( (LA569_2==ID) ) {
						alt569=1;
					}

				}

				switch (alt569) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2334:14: COMMA view_name
					{
					COMMA1679=(Token)match(input,COMMA,FOLLOW_COMMA_in_drop_view_statement31408); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA1679_tree = (Object)adaptor.create(COMMA1679);
					adaptor.addChild(root_0, COMMA1679_tree);
					}

					pushFollow(FOLLOW_view_name_in_drop_view_statement31410);
					view_name1680=view_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, view_name1680.getTree());

					}
					break;

				default :
					break loop569;
				}
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2335:3: ( RESTRICT | CASCADE )?
			int alt570=2;
			int LA570_0 = input.LA(1);
			if ( (LA570_0==CASCADE||LA570_0==RESTRICT) ) {
				alt570=1;
			}
			switch (alt570) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
					{
					set1681=input.LT(1);
					if ( input.LA(1)==CASCADE||input.LA(1)==RESTRICT ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1681));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_view_statement"

	// $ANTLR start synpred54_SQL
	public final void synpred54_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:978:3: ( ( IN_SYM NATURAL LANGUAGE MODE_SYM ) )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:978:3: ( IN_SYM NATURAL LANGUAGE MODE_SYM )
		{
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:978:3: ( IN_SYM NATURAL LANGUAGE MODE_SYM )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:978:4: IN_SYM NATURAL LANGUAGE MODE_SYM
		{
		match(input,IN_SYM,FOLLOW_IN_SYM_in_synpred54_SQL20717); if (state.failed) return;

		match(input,NATURAL,FOLLOW_NATURAL_in_synpred54_SQL20719); if (state.failed) return;

		match(input,LANGUAGE,FOLLOW_LANGUAGE_in_synpred54_SQL20721); if (state.failed) return;

		match(input,MODE_SYM,FOLLOW_MODE_SYM_in_synpred54_SQL20723); if (state.failed) return;

		}

		}

	}
	// $ANTLR end synpred54_SQL

	// $ANTLR start synpred55_SQL
	public final void synpred55_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:979:5: ( ( IN_SYM NATURAL LANGUAGE MODE_SYM WITH QUERY_SYM EXPANSION_SYM ) )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:979:5: ( IN_SYM NATURAL LANGUAGE MODE_SYM WITH QUERY_SYM EXPANSION_SYM )
		{
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:979:5: ( IN_SYM NATURAL LANGUAGE MODE_SYM WITH QUERY_SYM EXPANSION_SYM )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:979:6: IN_SYM NATURAL LANGUAGE MODE_SYM WITH QUERY_SYM EXPANSION_SYM
		{
		match(input,IN_SYM,FOLLOW_IN_SYM_in_synpred55_SQL20731); if (state.failed) return;

		match(input,NATURAL,FOLLOW_NATURAL_in_synpred55_SQL20733); if (state.failed) return;

		match(input,LANGUAGE,FOLLOW_LANGUAGE_in_synpred55_SQL20735); if (state.failed) return;

		match(input,MODE_SYM,FOLLOW_MODE_SYM_in_synpred55_SQL20737); if (state.failed) return;

		match(input,WITH,FOLLOW_WITH_in_synpred55_SQL20739); if (state.failed) return;

		match(input,QUERY_SYM,FOLLOW_QUERY_SYM_in_synpred55_SQL20741); if (state.failed) return;

		match(input,EXPANSION_SYM,FOLLOW_EXPANSION_SYM_in_synpred55_SQL20743); if (state.failed) return;

		}

		}

	}
	// $ANTLR end synpred55_SQL

	// $ANTLR start synpred87_SQL
	public final void synpred87_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1039:5: ( char_functions )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1039:5: char_functions
		{
		pushFollow(FOLLOW_char_functions_in_synpred87_SQL21056);
		char_functions();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred87_SQL

	// $ANTLR start synpred268_SQL
	public final void synpred268_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1240:27: ( OR_SYM exp_factor1 )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1240:27: OR_SYM exp_factor1
		{
		match(input,OR_SYM,FOLLOW_OR_SYM_in_synpred268_SQL22488); if (state.failed) return;

		pushFollow(FOLLOW_exp_factor1_in_synpred268_SQL22492);
		exp_factor1();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred268_SQL

	// $ANTLR start synpred269_SQL
	public final void synpred269_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1241:29: ( XOR exp_factor2 )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1241:29: XOR exp_factor2
		{
		match(input,XOR,FOLLOW_XOR_in_synpred269_SQL22507); if (state.failed) return;

		pushFollow(FOLLOW_exp_factor2_in_synpred269_SQL22511);
		exp_factor2();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred269_SQL

	// $ANTLR start synpred270_SQL
	public final void synpred270_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1242:29: ( AND_SYM exp_factor3 )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1242:29: AND_SYM exp_factor3
		{
		match(input,AND_SYM,FOLLOW_AND_SYM_in_synpred270_SQL22526); if (state.failed) return;

		pushFollow(FOLLOW_exp_factor3_in_synpred270_SQL22530);
		exp_factor3();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred270_SQL

	// $ANTLR start synpred271_SQL
	public final void synpred271_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1243:16: ( NOT_SYM )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1243:16: NOT_SYM
		{
		match(input,NOT_SYM,FOLLOW_NOT_SYM_in_synpred271_SQL22542); if (state.failed) return;

		}

	}
	// $ANTLR end synpred271_SQL

	// $ANTLR start synpred274_SQL
	public final void synpred274_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1244:30: ( IS_SYM ( NOT_SYM )? ( boolean_literal | NULL_SYM ) )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1244:30: IS_SYM ( NOT_SYM )? ( boolean_literal | NULL_SYM )
		{
		match(input,IS_SYM,FOLLOW_IS_SYM_in_synpred274_SQL22560); if (state.failed) return;

		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1244:39: ( NOT_SYM )?
		int alt577=2;
		int LA577_0 = input.LA(1);
		if ( (LA577_0==NOT_SYM) ) {
			alt577=1;
		}
		switch (alt577) {
			case 1 :
				// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1244:40: NOT_SYM
				{
				match(input,NOT_SYM,FOLLOW_NOT_SYM_in_synpred274_SQL22565); if (state.failed) return;

				}
				break;

		}

		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1244:52: ( boolean_literal | NULL_SYM )
		int alt578=2;
		int LA578_0 = input.LA(1);
		if ( (LA578_0==FALSE_SYM||LA578_0==TRUE_SYM) ) {
			alt578=1;
		}
		else if ( (LA578_0==NULL_SYM) ) {
			alt578=2;
		}

		else {
			if (state.backtracking>0) {state.failed=true; return;}
			NoViableAltException nvae =
				new NoViableAltException("", 578, 0, input);
			throw nvae;
		}

		switch (alt578) {
			case 1 :
				// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1244:53: boolean_literal
				{
				pushFollow(FOLLOW_boolean_literal_in_synpred274_SQL22572);
				boolean_literal();
				state._fsp--;
				if (state.failed) return;

				}
				break;
			case 2 :
				// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1244:69: NULL_SYM
				{
				match(input,NULL_SYM,FOLLOW_NULL_SYM_in_synpred274_SQL22574); if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred274_SQL

	// $ANTLR start synpred275_SQL
	public final void synpred275_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1246:5: ( ( predicate relational_op predicate ) )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1246:5: ( predicate relational_op predicate )
		{
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1246:5: ( predicate relational_op predicate )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1246:7: predicate relational_op predicate
		{
		pushFollow(FOLLOW_predicate_in_synpred275_SQL22591);
		predicate();
		state._fsp--;
		if (state.failed) return;

		pushFollow(FOLLOW_relational_op_in_synpred275_SQL22593);
		relational_op();
		state._fsp--;
		if (state.failed) return;

		pushFollow(FOLLOW_predicate_in_synpred275_SQL22595);
		predicate();
		state._fsp--;
		if (state.failed) return;

		}

		}

	}
	// $ANTLR end synpred275_SQL

	// $ANTLR start synpred278_SQL
	public final void synpred278_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1247:5: ( ( predicate relational_op ( ALL | ANY )? subquery ) )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1247:5: ( predicate relational_op ( ALL | ANY )? subquery )
		{
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1247:5: ( predicate relational_op ( ALL | ANY )? subquery )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1247:7: predicate relational_op ( ALL | ANY )? subquery
		{
		pushFollow(FOLLOW_predicate_in_synpred278_SQL22617);
		predicate();
		state._fsp--;
		if (state.failed) return;

		pushFollow(FOLLOW_relational_op_in_synpred278_SQL22619);
		relational_op();
		state._fsp--;
		if (state.failed) return;

		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1247:31: ( ALL | ANY )?
		int alt579=2;
		int LA579_0 = input.LA(1);
		if ( (LA579_0==ALL||LA579_0==ANY) ) {
			alt579=1;
		}
		switch (alt579) {
			case 1 :
				// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
				{
				if ( input.LA(1)==ALL||input.LA(1)==ANY ) {
					input.consume();
					state.errorRecovery=false;
					state.failed=false;
				}
				else {
					if (state.backtracking>0) {state.failed=true; return;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					throw mse;
				}
				}
				break;

		}

		pushFollow(FOLLOW_subquery_in_synpred278_SQL22632);
		subquery();
		state._fsp--;
		if (state.failed) return;

		}

		}

	}
	// $ANTLR end synpred278_SQL

	// $ANTLR start synpred280_SQL
	public final void synpred280_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1248:5: ( ( ( NOT_SYM )? EXISTS subquery ) )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1248:5: ( ( NOT_SYM )? EXISTS subquery )
		{
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1248:5: ( ( NOT_SYM )? EXISTS subquery )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1248:7: ( NOT_SYM )? EXISTS subquery
		{
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1248:7: ( NOT_SYM )?
		int alt580=2;
		int LA580_0 = input.LA(1);
		if ( (LA580_0==NOT_SYM) ) {
			alt580=1;
		}
		switch (alt580) {
			case 1 :
				// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1248:7: NOT_SYM
				{
				match(input,NOT_SYM,FOLLOW_NOT_SYM_in_synpred280_SQL22643); if (state.failed) return;

				}
				break;

		}

		match(input,EXISTS,FOLLOW_EXISTS_in_synpred280_SQL22646); if (state.failed) return;

		pushFollow(FOLLOW_subquery_in_synpred280_SQL22650);
		subquery();
		state._fsp--;
		if (state.failed) return;

		}

		}

	}
	// $ANTLR end synpred280_SQL

	// $ANTLR start synpred283_SQL
	public final void synpred283_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1252:5: ( ( bit_expr ( NOT_SYM )? IN_SYM ( subquery | expression_list ) ) )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1252:5: ( bit_expr ( NOT_SYM )? IN_SYM ( subquery | expression_list ) )
		{
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1252:5: ( bit_expr ( NOT_SYM )? IN_SYM ( subquery | expression_list ) )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1252:7: bit_expr ( NOT_SYM )? IN_SYM ( subquery | expression_list )
		{
		pushFollow(FOLLOW_bit_expr_in_synpred283_SQL22671);
		bit_expr();
		state._fsp--;
		if (state.failed) return;

		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1252:16: ( NOT_SYM )?
		int alt581=2;
		int LA581_0 = input.LA(1);
		if ( (LA581_0==NOT_SYM) ) {
			alt581=1;
		}
		switch (alt581) {
			case 1 :
				// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1252:17: NOT_SYM
				{
				match(input,NOT_SYM,FOLLOW_NOT_SYM_in_synpred283_SQL22674); if (state.failed) return;

				}
				break;

		}

		match(input,IN_SYM,FOLLOW_IN_SYM_in_synpred283_SQL22678); if (state.failed) return;

		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1252:36: ( subquery | expression_list )
		int alt582=2;
		int LA582_0 = input.LA(1);
		if ( (LA582_0==LPAREN) ) {
			int LA582_1 = input.LA(2);
			if ( (LA582_1==SELECT) ) {
				alt582=1;
			}
			else if ( (LA582_1==ABS||LA582_1==ACOS||(LA582_1 >= ADDDATE && LA582_1 <= ADDTIME)||(LA582_1 >= AES_DECRYPT && LA582_1 <= AES_ENCRYPT)||LA582_1==ASCII_SYM||LA582_1==ASIN||(LA582_1 >= ATAN && LA582_1 <= ATAN2)||LA582_1==AVG||LA582_1==BENCHMARK||(LA582_1 >= BIN && LA582_1 <= BINARY)||(LA582_1 >= BIT_AND && LA582_1 <= BIT_OR)||LA582_1==BIT_XOR||(LA582_1 >= CASE_SYM && LA582_1 <= CEILING)||LA582_1==CHAR||(LA582_1 >= CHARSET && LA582_1 <= CHAR_LENGTH)||LA582_1==COERCIBILITY||LA582_1==COLLATION||(LA582_1 >= CONCAT && LA582_1 <= CONCAT_WS)||LA582_1==CONNECTION_ID||(LA582_1 >= CONV && LA582_1 <= CONVERT_TZ)||(LA582_1 >= COS && LA582_1 <= COUNT)||LA582_1==CRC32||LA582_1==CURDATE||LA582_1==CURRENT_USER||LA582_1==CURTIME||LA582_1==DATABASE||LA582_1==DATEDIFF||(LA582_1 >= DATE_ADD && LA582_1 <= DAYOFYEAR)||(LA582_1 >= DECODE && LA582_1 <= DEFAULT)||LA582_1==DEGREES||(LA582_1 >= DES_DECRYPT && LA582_1 <= DES_ENCRYPT)||LA582_1==ELT||(LA582_1 >= ENCODE && LA582_1 <= ENCRYPT)||LA582_1==EXISTS||LA582_1==EXP||LA582_1==EXPORT_SET||LA582_1==EXTRACT||LA582_1==FALSE_SYM||LA582_1==FIELD||LA582_1==FIND_IN_SET||LA582_1==FLOOR||LA582_1==FORMAT||LA582_1==FOUND_ROWS||(LA582_1 >= FROM_BASE64 && LA582_1 <= FROM_UNIXTIME)||(LA582_1 >= GET_FORMAT && LA582_1 <= GET_LOCK)||LA582_1==GROUP_CONCAT||(LA582_1 >= HEX && LA582_1 <= HEX_DIGIT)||LA582_1==HOUR||LA582_1==ID||(LA582_1 >= IF && LA582_1 <= IFNULL)||(LA582_1 >= INET_ATON && LA582_1 <= INET_NTOA)||LA582_1==INSERT||(LA582_1 >= INSTR && LA582_1 <= INTEGER_NUM)||LA582_1==INTERVAL_SYM||LA582_1==IS_FREE_LOCK||LA582_1==IS_USED_LOCK||(LA582_1 >= LAST_DAY && LA582_1 <= LAST_INSERT_ID)||(LA582_1 >= LEFT && LA582_1 <= LENGTH)||LA582_1==LN||LA582_1==LOAD_FILE||LA582_1==LOCATE||(LA582_1 >= LOG && LA582_1 <= LOG2)||LA582_1==LOWER||(LA582_1 >= LPAD && LA582_1 <= LPAREN)||LA582_1==LTRIM||(LA582_1 >= MAKEDATE && LA582_1 <= MAKE_SET)||LA582_1==MASTER_POS_WAIT||LA582_1==MATCH||LA582_1==MAX_SYM||LA582_1==MD5||(LA582_1 >= MICROSECOND && LA582_1 <= MID)||(LA582_1 >= MINUS && LA582_1 <= MINUTE)||LA582_1==MIN_SYM||LA582_1==MOD||(LA582_1 >= MONTH && LA582_1 <= MONTHNAME)||LA582_1==NAME_CONST||LA582_1==NEGATION||(LA582_1 >= NOT_SYM && LA582_1 <= NOW)||LA582_1==NULL_SYM||LA582_1==OCT||LA582_1==OLD_PASSWORD||LA582_1==ORD||(LA582_1 >= PASSWORD && LA582_1 <= PERIOD_DIFF)||LA582_1==PI||LA582_1==PLUS||(LA582_1 >= POW && LA582_1 <= POWER)||LA582_1==QUARTER||LA582_1==QUOTE||(LA582_1 >= RADIANS && LA582_1 <= RAND)||LA582_1==REAL_NUMBER||LA582_1==RELEASE_LOCK||LA582_1==REPEAT||LA582_1==REPLACE||LA582_1==REVERSE||LA582_1==RIGHT||LA582_1==ROUND||(LA582_1 >= ROW_SYM && LA582_1 <= RPAD)||LA582_1==RTRIM||(LA582_1 >= SCHEMA && LA582_1 <= SECOND)||LA582_1==SEC_TO_TIME||LA582_1==SESSION_USER||LA582_1==SIGN||LA582_1==SIN||LA582_1==SLEEP||LA582_1==SOUNDEX||LA582_1==SPACE||LA582_1==SQRT||(LA582_1 >= STD && LA582_1 <= STDDEV_SAMP)||LA582_1==STRCMP||LA582_1==STR_TO_DATE||(LA582_1 >= SUBSTRING && LA582_1 <= SUM)||(LA582_1 >= SYSDATE && LA582_1 <= SYSTEM_USER)||LA582_1==TAN||LA582_1==TEXT_STRING||(LA582_1 >= TIMEDIFF && LA582_1 <= TIME_TO_SEC)||(LA582_1 >= TO_BASE64 && LA582_1 <= TO_SECONDS)||(LA582_1 >= TRIM && LA582_1 <= TRUNCATE)||LA582_1==UNHEX||LA582_1==UNIX_TIMESTAMP||LA582_1==UPPER||(LA582_1 >= USER && LA582_1 <= USER_VAR)||(LA582_1 >= UTC_DATE && LA582_1 <= UTC_TIMESTAMP)||LA582_1==UUID||LA582_1==VALUES||LA582_1==VARIANCE||(LA582_1 >= VAR_POP && LA582_1 <= VERSION_SYM)||(LA582_1 >= WEEK && LA582_1 <= WEIGHT_STRING)||(LA582_1 >= YEAR && LA582_1 <= YEARWEEK)) ) {
				alt582=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				int nvaeMark = input.mark();
				try {
					input.consume();
					NoViableAltException nvae =
						new NoViableAltException("", 582, 1, input);
					throw nvae;
				} finally {
					input.rewind(nvaeMark);
				}
			}

		}

		else {
			if (state.backtracking>0) {state.failed=true; return;}
			NoViableAltException nvae =
				new NoViableAltException("", 582, 0, input);
			throw nvae;
		}

		switch (alt582) {
			case 1 :
				// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1252:37: subquery
				{
				pushFollow(FOLLOW_subquery_in_synpred283_SQL22683);
				subquery();
				state._fsp--;
				if (state.failed) return;

				}
				break;
			case 2 :
				// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1252:48: expression_list
				{
				pushFollow(FOLLOW_expression_list_in_synpred283_SQL22687);
				expression_list();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

		}

	}
	// $ANTLR end synpred283_SQL

	// $ANTLR start synpred285_SQL
	public final void synpred285_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1253:5: ( ( bit_expr ( NOT_SYM )? BETWEEN bit_expr AND_SYM predicate ) )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1253:5: ( bit_expr ( NOT_SYM )? BETWEEN bit_expr AND_SYM predicate )
		{
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1253:5: ( bit_expr ( NOT_SYM )? BETWEEN bit_expr AND_SYM predicate )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1253:7: bit_expr ( NOT_SYM )? BETWEEN bit_expr AND_SYM predicate
		{
		pushFollow(FOLLOW_bit_expr_in_synpred285_SQL22698);
		bit_expr();
		state._fsp--;
		if (state.failed) return;

		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1253:16: ( NOT_SYM )?
		int alt583=2;
		int LA583_0 = input.LA(1);
		if ( (LA583_0==NOT_SYM) ) {
			alt583=1;
		}
		switch (alt583) {
			case 1 :
				// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1253:17: NOT_SYM
				{
				match(input,NOT_SYM,FOLLOW_NOT_SYM_in_synpred285_SQL22701); if (state.failed) return;

				}
				break;

		}

		match(input,BETWEEN,FOLLOW_BETWEEN_in_synpred285_SQL22705); if (state.failed) return;

		pushFollow(FOLLOW_bit_expr_in_synpred285_SQL22709);
		bit_expr();
		state._fsp--;
		if (state.failed) return;

		match(input,AND_SYM,FOLLOW_AND_SYM_in_synpred285_SQL22711); if (state.failed) return;

		pushFollow(FOLLOW_predicate_in_synpred285_SQL22715);
		predicate();
		state._fsp--;
		if (state.failed) return;

		}

		}

	}
	// $ANTLR end synpred285_SQL

	// $ANTLR start synpred286_SQL
	public final void synpred286_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1254:5: ( ( bit_expr SOUNDS_SYM LIKE_SYM bit_expr ) )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1254:5: ( bit_expr SOUNDS_SYM LIKE_SYM bit_expr )
		{
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1254:5: ( bit_expr SOUNDS_SYM LIKE_SYM bit_expr )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1254:7: bit_expr SOUNDS_SYM LIKE_SYM bit_expr
		{
		pushFollow(FOLLOW_bit_expr_in_synpred286_SQL22726);
		bit_expr();
		state._fsp--;
		if (state.failed) return;

		match(input,SOUNDS_SYM,FOLLOW_SOUNDS_SYM_in_synpred286_SQL22728); if (state.failed) return;

		match(input,LIKE_SYM,FOLLOW_LIKE_SYM_in_synpred286_SQL22730); if (state.failed) return;

		pushFollow(FOLLOW_bit_expr_in_synpred286_SQL22734);
		bit_expr();
		state._fsp--;
		if (state.failed) return;

		}

		}

	}
	// $ANTLR end synpred286_SQL

	// $ANTLR start synpred288_SQL
	public final void synpred288_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1255:51: ( ESCAPE_SYM simple_expr )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1255:51: ESCAPE_SYM simple_expr
		{
		match(input,ESCAPE_SYM,FOLLOW_ESCAPE_SYM_in_synpred288_SQL22759); if (state.failed) return;

		pushFollow(FOLLOW_simple_expr_in_synpred288_SQL22763);
		simple_expr();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred288_SQL

	// $ANTLR start synpred289_SQL
	public final void synpred289_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1255:5: ( ( bit_expr ( NOT_SYM )? LIKE_SYM simple_expr ( ESCAPE_SYM simple_expr )? ) )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1255:5: ( bit_expr ( NOT_SYM )? LIKE_SYM simple_expr ( ESCAPE_SYM simple_expr )? )
		{
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1255:5: ( bit_expr ( NOT_SYM )? LIKE_SYM simple_expr ( ESCAPE_SYM simple_expr )? )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1255:7: bit_expr ( NOT_SYM )? LIKE_SYM simple_expr ( ESCAPE_SYM simple_expr )?
		{
		pushFollow(FOLLOW_bit_expr_in_synpred289_SQL22745);
		bit_expr();
		state._fsp--;
		if (state.failed) return;

		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1255:16: ( NOT_SYM )?
		int alt584=2;
		int LA584_0 = input.LA(1);
		if ( (LA584_0==NOT_SYM) ) {
			alt584=1;
		}
		switch (alt584) {
			case 1 :
				// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1255:17: NOT_SYM
				{
				match(input,NOT_SYM,FOLLOW_NOT_SYM_in_synpred289_SQL22748); if (state.failed) return;

				}
				break;

		}

		match(input,LIKE_SYM,FOLLOW_LIKE_SYM_in_synpred289_SQL22752); if (state.failed) return;

		pushFollow(FOLLOW_simple_expr_in_synpred289_SQL22756);
		simple_expr();
		state._fsp--;
		if (state.failed) return;

		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1255:50: ( ESCAPE_SYM simple_expr )?
		int alt585=2;
		int LA585_0 = input.LA(1);
		if ( (LA585_0==ESCAPE_SYM) ) {
			alt585=1;
		}
		switch (alt585) {
			case 1 :
				// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1255:51: ESCAPE_SYM simple_expr
				{
				match(input,ESCAPE_SYM,FOLLOW_ESCAPE_SYM_in_synpred289_SQL22759); if (state.failed) return;

				pushFollow(FOLLOW_simple_expr_in_synpred289_SQL22763);
				simple_expr();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

		}

	}
	// $ANTLR end synpred289_SQL

	// $ANTLR start synpred291_SQL
	public final void synpred291_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1256:5: ( ( bit_expr ( NOT_SYM )? REGEXP bit_expr ) )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1256:5: ( bit_expr ( NOT_SYM )? REGEXP bit_expr )
		{
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1256:5: ( bit_expr ( NOT_SYM )? REGEXP bit_expr )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1256:7: bit_expr ( NOT_SYM )? REGEXP bit_expr
		{
		pushFollow(FOLLOW_bit_expr_in_synpred291_SQL22775);
		bit_expr();
		state._fsp--;
		if (state.failed) return;

		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1256:16: ( NOT_SYM )?
		int alt586=2;
		int LA586_0 = input.LA(1);
		if ( (LA586_0==NOT_SYM) ) {
			alt586=1;
		}
		switch (alt586) {
			case 1 :
				// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1256:17: NOT_SYM
				{
				match(input,NOT_SYM,FOLLOW_NOT_SYM_in_synpred291_SQL22778); if (state.failed) return;

				}
				break;

		}

		match(input,REGEXP,FOLLOW_REGEXP_in_synpred291_SQL22782); if (state.failed) return;

		pushFollow(FOLLOW_bit_expr_in_synpred291_SQL22786);
		bit_expr();
		state._fsp--;
		if (state.failed) return;

		}

		}

	}
	// $ANTLR end synpred291_SQL

	// $ANTLR start synpred292_SQL
	public final void synpred292_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1260:13: ( VERTBAR factor1 )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1260:13: VERTBAR factor1
		{
		match(input,VERTBAR,FOLLOW_VERTBAR_in_synpred292_SQL22814); if (state.failed) return;

		pushFollow(FOLLOW_factor1_in_synpred292_SQL22818);
		factor1();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred292_SQL

	// $ANTLR start synpred293_SQL
	public final void synpred293_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1262:13: ( BITAND factor2 )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1262:13: BITAND factor2
		{
		match(input,BITAND,FOLLOW_BITAND_in_synpred293_SQL22834); if (state.failed) return;

		pushFollow(FOLLOW_factor2_in_synpred293_SQL22838);
		factor2();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred293_SQL

	// $ANTLR start synpred295_SQL
	public final void synpred295_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1264:13: ( ( SHIFT_LEFT | SHIFT_RIGHT ) factor3 )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1264:13: ( SHIFT_LEFT | SHIFT_RIGHT ) factor3
		{
		if ( (input.LA(1) >= SHIFT_LEFT && input.LA(1) <= SHIFT_RIGHT) ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		pushFollow(FOLLOW_factor3_in_synpred295_SQL22862);
		factor3();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred295_SQL

	// $ANTLR start synpred297_SQL
	public final void synpred297_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1266:13: ( ( PLUS | MINUS ) factor4 )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1266:13: ( PLUS | MINUS ) factor4
		{
		if ( input.LA(1)==MINUS||input.LA(1)==PLUS ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		pushFollow(FOLLOW_factor4_in_synpred297_SQL22886);
		factor4();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred297_SQL

	// $ANTLR start synpred301_SQL
	public final void synpred301_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1268:13: ( ( ASTERISK | DIVIDE | MOD_SYM | POWER_OP ) factor5 )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1268:13: ( ASTERISK | DIVIDE | MOD_SYM | POWER_OP ) factor5
		{
		if ( input.LA(1)==ASTERISK||input.LA(1)==DIVIDE||input.LA(1)==MOD_SYM||input.LA(1)==POWER_OP ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		pushFollow(FOLLOW_factor5_in_synpred301_SQL22914);
		factor5();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred301_SQL

	// $ANTLR start synpred303_SQL
	public final void synpred303_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1270:13: ( ( PLUS | MINUS ) interval_expr )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1270:13: ( PLUS | MINUS ) interval_expr
		{
		if ( input.LA(1)==MINUS||input.LA(1)==PLUS ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		pushFollow(FOLLOW_interval_expr_in_synpred303_SQL22938);
		interval_expr();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred303_SQL

	// $ANTLR start synpred307_SQL
	public final void synpred307_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1272:3: ( ( PLUS | MINUS | NEGATION | BINARY ) simple_expr )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1272:3: ( PLUS | MINUS | NEGATION | BINARY ) simple_expr
		{
		if ( input.LA(1)==BINARY||input.LA(1)==MINUS||input.LA(1)==NEGATION||input.LA(1)==PLUS ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		pushFollow(FOLLOW_simple_expr_in_synpred307_SQL22968);
		simple_expr();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred307_SQL

	// $ANTLR start synpred324_SQL
	public final void synpred324_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1296:5: ( ( CONVERT_SYM LPAREN expression COMMA cast_data_type RPAREN ) )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1296:5: ( CONVERT_SYM LPAREN expression COMMA cast_data_type RPAREN )
		{
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1296:5: ( CONVERT_SYM LPAREN expression COMMA cast_data_type RPAREN )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1296:8: CONVERT_SYM LPAREN expression COMMA cast_data_type RPAREN
		{
		match(input,CONVERT_SYM,FOLLOW_CONVERT_SYM_in_synpred324_SQL23147); if (state.failed) return;

		match(input,LPAREN,FOLLOW_LPAREN_in_synpred324_SQL23149); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred324_SQL23151);
		expression();
		state._fsp--;
		if (state.failed) return;

		match(input,COMMA,FOLLOW_COMMA_in_synpred324_SQL23153); if (state.failed) return;

		pushFollow(FOLLOW_cast_data_type_in_synpred324_SQL23155);
		cast_data_type();
		state._fsp--;
		if (state.failed) return;

		match(input,RPAREN,FOLLOW_RPAREN_in_synpred324_SQL23157); if (state.failed) return;

		}

		}

	}
	// $ANTLR end synpred324_SQL

	// $ANTLR start synpred325_SQL
	public final void synpred325_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1297:5: ( ( CONVERT_SYM LPAREN expression USING_SYM transcoding_name RPAREN ) )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1297:5: ( CONVERT_SYM LPAREN expression USING_SYM transcoding_name RPAREN )
		{
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1297:5: ( CONVERT_SYM LPAREN expression USING_SYM transcoding_name RPAREN )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1297:8: CONVERT_SYM LPAREN expression USING_SYM transcoding_name RPAREN
		{
		match(input,CONVERT_SYM,FOLLOW_CONVERT_SYM_in_synpred325_SQL23169); if (state.failed) return;

		match(input,LPAREN,FOLLOW_LPAREN_in_synpred325_SQL23171); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred325_SQL23173);
		expression();
		state._fsp--;
		if (state.failed) return;

		match(input,USING_SYM,FOLLOW_USING_SYM_in_synpred325_SQL23175); if (state.failed) return;

		pushFollow(FOLLOW_transcoding_name_in_synpred325_SQL23177);
		transcoding_name();
		state._fsp--;
		if (state.failed) return;

		match(input,RPAREN,FOLLOW_RPAREN_in_synpred325_SQL23179); if (state.failed) return;

		}

		}

	}
	// $ANTLR end synpred325_SQL

	// $ANTLR start synpred335_SQL
	public final void synpred335_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1318:66: ( search_modifier )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1318:66: search_modifier
		{
		pushFollow(FOLLOW_search_modifier_in_synpred335_SQL23395);
		search_modifier();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred335_SQL

	// $ANTLR start synpred340_SQL
	public final void synpred340_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1341:3: ( table_factor1 )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1341:3: table_factor1
		{
		pushFollow(FOLLOW_table_factor1_in_synpred340_SQL23511);
		table_factor1();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred340_SQL

	// $ANTLR start synpred343_SQL
	public final void synpred343_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1350:18: ( table_factor3_part )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1350:18: table_factor3_part
		{
		pushFollow(FOLLOW_table_factor3_part_in_synpred343_SQL23555);
		table_factor3_part();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred343_SQL

	// $ANTLR start synpred345_SQL
	public final void synpred345_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1356:21: ( partition_clause )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1356:21: partition_clause
		{
		pushFollow(FOLLOW_partition_clause_in_synpred345_SQL23589);
		partition_clause();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred345_SQL

	// $ANTLR start synpred353_SQL
	public final void synpred353_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1362:48: ( join_condition )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1362:48: join_condition
		{
		pushFollow(FOLLOW_join_condition_in_synpred353_SQL23679);
		join_condition();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred353_SQL

	// $ANTLR start synpred354_SQL
	public final void synpred354_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1365:32: ( ON expression )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1365:32: ON expression
		{
		match(input,ON,FOLLOW_ON_in_synpred354_SQL23701); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred354_SQL23703);
		expression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred354_SQL

	// $ANTLR start synpred373_SQL
	public final void synpred373_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1404:4: ( SEMI )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1404:4: SEMI
		{
		match(input,SEMI,FOLLOW_SEMI_in_synpred373_SQL24003); if (state.failed) return;

		}

	}
	// $ANTLR end synpred373_SQL

	// $ANTLR start synpred425_SQL
	public final void synpred425_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1531:15: ( column_spec )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1531:15: column_spec
		{
		pushFollow(FOLLOW_column_spec_in_synpred425_SQL24563);
		column_spec();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred425_SQL

	// $ANTLR start synpred426_SQL
	public final void synpred426_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1531:29: ( INTEGER_NUM )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1531:29: INTEGER_NUM
		{
		match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_synpred426_SQL24567); if (state.failed) return;

		}

	}
	// $ANTLR end synpred426_SQL

	// $ANTLR start synpred432_SQL
	public final void synpred432_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1549:26: ( COMMA displayed_column )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1549:26: COMMA displayed_column
		{
		match(input,COMMA,FOLLOW_COMMA_in_synpred432_SQL24692); if (state.failed) return;

		pushFollow(FOLLOW_displayed_column_in_synpred432_SQL24696);
		displayed_column();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred432_SQL

	// $ANTLR start synpred438_SQL
	public final void synpred438_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1568:3: ( ( column_spec ( alias )? ) )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1568:3: ( column_spec ( alias )? )
		{
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1568:3: ( column_spec ( alias )? )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1568:5: column_spec ( alias )?
		{
		pushFollow(FOLLOW_column_spec_in_synpred438_SQL24803);
		column_spec();
		state._fsp--;
		if (state.failed) return;

		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1568:17: ( alias )?
		int alt607=2;
		int LA607_0 = input.LA(1);
		if ( (LA607_0==AS_SYM||LA607_0==ID) ) {
			alt607=1;
		}
		switch (alt607) {
			case 1 :
				// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1568:18: alias
				{
				pushFollow(FOLLOW_alias_in_synpred438_SQL24806);
				alias();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

		}

	}
	// $ANTLR end synpred438_SQL

	// $ANTLR start synpred469_SQL
	public final void synpred469_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1628:29: ( bit_expr )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1628:29: bit_expr
		{
		pushFollow(FOLLOW_bit_expr_in_synpred469_SQL25157);
		bit_expr();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred469_SQL

	// $ANTLR start synpred470_SQL
	public final void synpred470_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1628:55: ( bit_expr )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1628:55: bit_expr
		{
		pushFollow(FOLLOW_bit_expr_in_synpred470_SQL25166);
		bit_expr();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred470_SQL

	// $ANTLR start synpred474_SQL
	public final void synpred474_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1636:41: ( expression )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1636:41: expression
		{
		pushFollow(FOLLOW_expression_in_synpred474_SQL25227);
		expression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred474_SQL

	// $ANTLR start synpred477_SQL
	public final void synpred477_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1653:3: ( single_table_update_statement )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1653:3: single_table_update_statement
		{
		pushFollow(FOLLOW_single_table_update_statement_in_synpred477_SQL25279);
		single_table_update_statement();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred477_SQL

	// $ANTLR start synpred489_SQL
	public final void synpred489_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1687:26: ( COMMA root_statement )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1687:26: COMMA root_statement
		{
		match(input,COMMA,FOLLOW_COMMA_in_synpred489_SQL25423); if (state.failed) return;

		pushFollow(FOLLOW_root_statement_in_synpred489_SQL25425);
		root_statement();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred489_SQL

	// $ANTLR start synpred858_SQL
	public final void synpred858_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2120:17: ( ( COMMA )? table_option )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2120:17: ( COMMA )? table_option
		{
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2120:17: ( COMMA )?
		int alt780=2;
		int LA780_0 = input.LA(1);
		if ( (LA780_0==COMMA) ) {
			alt780=1;
		}
		switch (alt780) {
			case 1 :
				// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2120:19: COMMA
				{
				match(input,COMMA,FOLLOW_COMMA_in_synpred858_SQL29013); if (state.failed) return;

				}
				break;

		}

		pushFollow(FOLLOW_table_option_in_synpred858_SQL29018);
		table_option();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred858_SQL

	// $ANTLR start synpred963_SQL
	public final void synpred963_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2207:5: ( table_options )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2207:5: table_options
		{
		pushFollow(FOLLOW_table_options_in_synpred963_SQL30112);
		table_options();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred963_SQL

	// $ANTLR start synpred1042_SQL
	public final void synpred1042_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2234:5: ( ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ( COLLATE_SYM ( EQ_SYM )? collation_name )? ) )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2234:5: ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ( COLLATE_SYM ( EQ_SYM )? collation_name )? )
		{
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2234:5: ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ( COLLATE_SYM ( EQ_SYM )? collation_name )? )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2234:7: ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ( COLLATE_SYM ( EQ_SYM )? collation_name )?
		{
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2234:7: ( DEFAULT )?
		int alt873=2;
		int LA873_0 = input.LA(1);
		if ( (LA873_0==DEFAULT) ) {
			alt873=1;
		}
		switch (alt873) {
			case 1 :
				// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2234:8: DEFAULT
				{
				match(input,DEFAULT,FOLLOW_DEFAULT_in_synpred1042_SQL30731); if (state.failed) return;

				}
				break;

		}

		match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_synpred1042_SQL30735); if (state.failed) return;

		match(input,SET_SYM,FOLLOW_SET_SYM_in_synpred1042_SQL30737); if (state.failed) return;

		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2234:40: ( EQ_SYM )?
		int alt874=2;
		int LA874_0 = input.LA(1);
		if ( (LA874_0==EQ_SYM) ) {
			alt874=1;
		}
		switch (alt874) {
			case 1 :
				// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2234:41: EQ_SYM
				{
				match(input,EQ_SYM,FOLLOW_EQ_SYM_in_synpred1042_SQL30740); if (state.failed) return;

				}
				break;

		}

		pushFollow(FOLLOW_charset_name_in_synpred1042_SQL30744);
		charset_name();
		state._fsp--;
		if (state.failed) return;

		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2234:63: ( COLLATE_SYM ( EQ_SYM )? collation_name )?
		int alt876=2;
		int LA876_0 = input.LA(1);
		if ( (LA876_0==COLLATE_SYM) ) {
			alt876=1;
		}
		switch (alt876) {
			case 1 :
				// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2234:64: COLLATE_SYM ( EQ_SYM )? collation_name
				{
				match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_synpred1042_SQL30747); if (state.failed) return;

				// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2234:76: ( EQ_SYM )?
				int alt875=2;
				int LA875_0 = input.LA(1);
				if ( (LA875_0==EQ_SYM) ) {
					alt875=1;
				}
				switch (alt875) {
					case 1 :
						// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2234:77: EQ_SYM
						{
						match(input,EQ_SYM,FOLLOW_EQ_SYM_in_synpred1042_SQL30750); if (state.failed) return;

						}
						break;

				}

				pushFollow(FOLLOW_collation_name_in_synpred1042_SQL30754);
				collation_name();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

		}

	}
	// $ANTLR end synpred1042_SQL

	// Delegated rules

	public final boolean synpred325_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred325_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred303_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred303_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred289_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred289_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred54_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred54_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred288_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred288_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred292_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred292_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred291_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred291_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred353_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred353_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred432_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred432_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred340_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred340_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred270_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred270_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred307_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred307_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred474_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred474_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred335_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred335_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred489_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred489_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred373_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred373_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred963_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred963_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred278_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred278_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred274_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred274_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred301_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred301_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred280_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred280_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred345_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred345_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred268_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred268_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred293_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred293_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred354_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred354_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred343_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred343_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred269_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred269_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred324_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred324_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred426_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred426_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred286_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred286_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred477_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred477_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred295_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred295_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred438_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred438_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred425_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred425_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred271_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred271_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred469_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred469_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred470_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred470_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred275_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred275_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred55_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred55_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred1042_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred1042_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred285_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred285_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred297_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred297_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred283_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred283_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred87_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred87_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred858_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred858_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}


	protected DFA60 dfa60 = new DFA60(this);
	protected DFA131 dfa131 = new DFA131(this);
	protected DFA201 dfa201 = new DFA201(this);
	protected DFA426 dfa426 = new DFA426(this);
	static final String DFA60_eotS =
		"\12\uffff";
	static final String DFA60_eofS =
		"\1\2\11\uffff";
	static final String DFA60_minS =
		"\1\36\1\u0178\1\uffff\1\u011e\1\137\1\u011e\1\0\1\137\1\uffff\1\0";
	static final String DFA60_maxS =
		"\1\u02fa\1\u0178\1\uffff\1\u011e\1\u023a\1\u011e\1\0\1\u023a\1\uffff\1"+
		"\0";
	static final String DFA60_acceptS =
		"\2\uffff\1\2\5\uffff\1\1\1\uffff";
	static final String DFA60_specialS =
		"\6\uffff\1\1\2\uffff\1\0}>";
	static final String[] DFA60_transitionS = {
			"\1\2\100\uffff\1\2\46\uffff\1\2\150\uffff\1\2\2\uffff\1\2\27\uffff\1"+
			"\2\4\uffff\1\2\16\uffff\1\2\3\uffff\1\2\7\uffff\1\2\7\uffff\1\2\17\uffff"+
			"\1\2\27\uffff\1\2\5\uffff\1\2\11\uffff\1\2\121\uffff\1\2\24\uffff\1\2"+
			"\10\uffff\1\2\15\uffff\1\1\110\uffff\1\2\10\uffff\1\2\13\uffff\1\2\7"+
			"\uffff\1\2\62\uffff\1\2\104\uffff\1\2\21\uffff\2\2\35\uffff\1\2\2\uffff"+
			"\1\2",
			"\1\3",
			"",
			"\1\4",
			"\1\5\u01da\uffff\1\6",
			"\1\7",
			"\1\uffff",
			"\1\5\u01da\uffff\1\11",
			"",
			"\1\uffff"
	};

	static final short[] DFA60_eot = DFA.unpackEncodedString(DFA60_eotS);
	static final short[] DFA60_eof = DFA.unpackEncodedString(DFA60_eofS);
	static final char[] DFA60_min = DFA.unpackEncodedStringToUnsignedChars(DFA60_minS);
	static final char[] DFA60_max = DFA.unpackEncodedStringToUnsignedChars(DFA60_maxS);
	static final short[] DFA60_accept = DFA.unpackEncodedString(DFA60_acceptS);
	static final short[] DFA60_special = DFA.unpackEncodedString(DFA60_specialS);
	static final short[][] DFA60_transition;

	static {
		int numStates = DFA60_transitionS.length;
		DFA60_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA60_transition[i] = DFA.unpackEncodedString(DFA60_transitionS[i]);
		}
	}

	protected class DFA60 extends DFA {

		public DFA60(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 60;
			this.eot = DFA60_eot;
			this.eof = DFA60_eof;
			this.min = DFA60_min;
			this.max = DFA60_max;
			this.accept = DFA60_accept;
			this.special = DFA60_special;
			this.transition = DFA60_transition;
		}
		@Override
		public String getDescription() {
			return "1356:20: ( partition_clause )?";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA60_9 = input.LA(1);
						 
						int index60_9 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred345_SQL()) ) {s = 8;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index60_9);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA60_6 = input.LA(1);
						 
						int index60_6 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred345_SQL()) ) {s = 8;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index60_6);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 60, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA131_eotS =
		"\36\uffff";
	static final String DFA131_eofS =
		"\36\uffff";
	static final String DFA131_minS =
		"\1\u012e\1\u0115\3\u011e\1\u00b7\1\u011e\1\u0178\1\u011e\3\uffff\1\u0178"+
		"\1\u011e\2\137\2\u011e\1\u0245\1\u011e\1\u0178\3\137\2\u011e\2\137\1\u011e"+
		"\1\137";
	static final String DFA131_maxS =
		"\1\u012e\1\u0176\2\u0135\1\u011e\1\u02e4\1\u011e\1\u0178\1\u011e\3\uffff"+
		"\1\u02e4\1\u011e\2\u023a\2\u011e\1\u02e4\1\u011e\1\u02e4\3\u023a\2\u011e"+
		"\2\u023a\1\u011e\1\u023a";
	static final String DFA131_acceptS =
		"\11\uffff\1\1\1\2\1\3\22\uffff";
	static final String DFA131_specialS =
		"\36\uffff}>";
	static final String[] DFA131_transitionS = {
			"\1\1",
			"\1\2\10\uffff\1\5\3\uffff\1\3\22\uffff\1\4\100\uffff\1\2",
			"\1\5\3\uffff\1\3\22\uffff\1\4",
			"\1\5\26\uffff\1\4",
			"\1\5",
			"\1\6\u00c0\uffff\1\10\157\uffff\1\7\134\uffff\1\13\10\uffff\1\12\u0094"+
			"\uffff\2\11",
			"\1\14",
			"\1\15",
			"\1\16",
			"",
			"",
			"",
			"\1\10\157\uffff\1\7\134\uffff\1\13\10\uffff\1\12\u0094\uffff\2\11",
			"\1\17",
			"\1\21\127\uffff\1\20\u0182\uffff\1\22",
			"\1\23\u01da\uffff\1\24",
			"\1\25",
			"\1\26",
			"\1\13\u009d\uffff\2\11",
			"\1\27",
			"\1\10\u00cc\uffff\1\13\10\uffff\1\12\u0094\uffff\2\11",
			"\1\21\127\uffff\1\30\u0182\uffff\1\22",
			"\1\21\127\uffff\1\31\u0182\uffff\1\22",
			"\1\23\u01da\uffff\1\24",
			"\1\32",
			"\1\33",
			"\1\21\u01da\uffff\1\22",
			"\1\21\127\uffff\1\34\u0182\uffff\1\22",
			"\1\35",
			"\1\21\u01da\uffff\1\22"
	};

	static final short[] DFA131_eot = DFA.unpackEncodedString(DFA131_eotS);
	static final short[] DFA131_eof = DFA.unpackEncodedString(DFA131_eofS);
	static final char[] DFA131_min = DFA.unpackEncodedStringToUnsignedChars(DFA131_minS);
	static final char[] DFA131_max = DFA.unpackEncodedStringToUnsignedChars(DFA131_maxS);
	static final short[] DFA131_accept = DFA.unpackEncodedString(DFA131_acceptS);
	static final short[] DFA131_special = DFA.unpackEncodedString(DFA131_specialS);
	static final short[][] DFA131_transition;

	static {
		int numStates = DFA131_transitionS.length;
		DFA131_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA131_transition[i] = DFA.unpackEncodedString(DFA131_transitionS[i]);
		}
	}

	protected class DFA131 extends DFA {

		public DFA131(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 131;
			this.eot = DFA131_eot;
			this.eof = DFA131_eof;
			this.min = DFA131_min;
			this.max = DFA131_max;
			this.accept = DFA131_accept;
			this.special = DFA131_special;
			this.transition = DFA131_transition;
		}
		@Override
		public String getDescription() {
			return "1607:1: insert_statements : ( insert_statement1 | insert_statement2 | insert_statement3 );";
		}
	}

	static final String DFA201_eotS =
		"\21\uffff";
	static final String DFA201_eofS =
		"\21\uffff";
	static final String DFA201_minS =
		"\1\u0178\1\u011e\3\uffff\1\137\2\u011e\1\u0245\2\137\2\u011e\2\137\1\u011e"+
		"\1\137";
	static final String DFA201_maxS =
		"\1\u02e4\1\u011e\3\uffff\1\u023a\2\u011e\1\u02e4\2\u023a\2\u011e\2\u023a"+
		"\1\u011e\1\u023a";
	static final String DFA201_acceptS =
		"\2\uffff\1\1\1\2\1\3\14\uffff";
	static final String DFA201_specialS =
		"\21\uffff}>";
	static final String[] DFA201_transitionS = {
			"\1\1\u00cc\uffff\1\4\10\uffff\1\3\u0094\uffff\2\2",
			"\1\5",
			"",
			"",
			"",
			"\1\7\127\uffff\1\6\u0182\uffff\1\10",
			"\1\11",
			"\1\12",
			"\1\4\u009d\uffff\2\2",
			"\1\7\127\uffff\1\13\u0182\uffff\1\10",
			"\1\7\127\uffff\1\14\u0182\uffff\1\10",
			"\1\15",
			"\1\16",
			"\1\7\u01da\uffff\1\10",
			"\1\7\127\uffff\1\17\u0182\uffff\1\10",
			"\1\20",
			"\1\7\u01da\uffff\1\10"
	};

	static final short[] DFA201_eot = DFA.unpackEncodedString(DFA201_eotS);
	static final short[] DFA201_eof = DFA.unpackEncodedString(DFA201_eofS);
	static final char[] DFA201_min = DFA.unpackEncodedStringToUnsignedChars(DFA201_minS);
	static final char[] DFA201_max = DFA.unpackEncodedStringToUnsignedChars(DFA201_maxS);
	static final short[] DFA201_accept = DFA.unpackEncodedString(DFA201_acceptS);
	static final short[] DFA201_special = DFA.unpackEncodedString(DFA201_specialS);
	static final short[][] DFA201_transition;

	static {
		int numStates = DFA201_transitionS.length;
		DFA201_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA201_transition[i] = DFA.unpackEncodedString(DFA201_transitionS[i]);
		}
	}

	protected class DFA201 extends DFA {

		public DFA201(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 201;
			this.eot = DFA201_eot;
			this.eof = DFA201_eof;
			this.min = DFA201_min;
			this.max = DFA201_max;
			this.accept = DFA201_accept;
			this.special = DFA201_special;
			this.transition = DFA201_transition;
		}
		@Override
		public String getDescription() {
			return "1779:3: ( replace_statement1 | replace_statement2 | replace_statement3 )";
		}
	}

	static final String DFA426_eotS =
		"\140\uffff";
	static final String DFA426_eofS =
		"\1\1\137\uffff";
	static final String DFA426_minS =
		"\1\44\1\uffff\1\12\1\uffff\3\u00cd\1\116\1\u024e\4\u00cd\1\u00b0\1\u00cd"+
		"\1\u00b0\4\u00cd\1\u00a5\1\u00cd\1\143\2\u00a5\1\u00cd\1\u011e\1\0\1\u0132"+
		"\1\0\1\u0132\1\0\1\27\1\u0132\1\0\1\u011e\1\0\1\u029c\1\0\1\u029c\1\0"+
		"\1\u00cd\1\u0132\1\0\1\u00cd\1\u00ea\1\0\1\u0132\1\0\1\u0132\1\0\1\u0132"+
		"\1\0\1\u00a5\1\0\1\u029c\1\0\1\143\1\0\1\u00a5\1\0\1\u00a5\1\0\1\u0178"+
		"\1\u011e\3\0\1\27\5\0\1\u029c\2\0\1\u029c\12\0\1\137\3\0\1\u011e\1\0\1"+
		"\137\1\0";
	static final String DFA426_maxS =
		"\1\u02c6\1\uffff\1\u02cd\1\uffff\1\u011e\2\u0132\1\131\1\u024e\1\u0132"+
		"\1\u011e\2\u029c\1\u00b0\1\u0132\1\u00b0\1\u01c6\4\u0132\1\u029c\1\u0217"+
		"\2\u0132\1\u0178\1\u011e\1\0\1\u0132\1\0\1\u0132\1\0\1\u02e0\1\u0132\1"+
		"\0\1\u011e\1\0\1\u029c\1\0\1\u029c\1\0\1\u029c\1\u0132\1\0\1\u029c\1\u01c6"+
		"\1\0\1\u0132\1\0\1\u0132\1\0\1\u0132\1\0\1\u0132\1\0\1\u029c\1\0\1\u0217"+
		"\1\0\1\u0132\1\0\1\u0132\1\0\1\u0178\1\u011e\3\0\1\u02e0\5\0\1\u029c\2"+
		"\0\1\u029c\12\0\1\u023a\3\0\1\u011e\1\0\1\u023a\1\0";
	static final String DFA426_acceptS =
		"\1\uffff\1\2\1\uffff\1\1\134\uffff";
	static final String DFA426_specialS =
		"\33\uffff\1\1\1\uffff\1\7\1\uffff\1\33\2\uffff\1\43\1\uffff\1\25\1\uffff"+
		"\1\45\1\uffff\1\31\2\uffff\1\51\2\uffff\1\15\1\uffff\1\37\1\uffff\1\17"+
		"\1\uffff\1\13\1\uffff\1\47\1\uffff\1\12\1\uffff\1\21\1\uffff\1\35\1\uffff"+
		"\1\5\2\uffff\1\0\1\6\1\32\1\uffff\1\24\1\42\1\23\1\44\1\30\1\uffff\1\3"+
		"\1\50\1\uffff\1\27\1\14\1\36\1\16\1\11\1\46\1\10\1\20\1\34\1\4\1\uffff"+
		"\1\22\1\2\1\26\1\uffff\1\41\1\uffff\1\40}>";
	static final String[] DFA426_transitionS = {
			"\1\3\1\uffff\1\3\47\uffff\1\3\2\uffff\1\3\7\uffff\1\3\5\uffff\1\2\1\3"+
			"\13\uffff\1\3\43\uffff\1\3\24\uffff\1\3\3\uffff\1\3\41\uffff\1\3\131"+
			"\uffff\1\3\11\uffff\1\3\26\uffff\1\3\117\uffff\1\3\22\uffff\1\3\67\uffff"+
			"\1\3\6\uffff\1\1\1\3\115\uffff\1\3\15\uffff\2\1\61\uffff\2\3\114\uffff"+
			"\1\3",
			"",
			"\1\1\5\uffff\1\1\2\uffff\2\1\17\uffff\1\5\1\uffff\1\6\34\uffff\1\1\7"+
			"\uffff\1\1\2\uffff\1\10\2\uffff\1\11\1\1\3\uffff\1\1\2\uffff\1\12\6\uffff"+
			"\1\13\13\uffff\1\14\7\uffff\1\1\17\uffff\1\1\13\uffff\1\15\24\uffff\1"+
			"\7\3\uffff\1\16\1\1\6\uffff\2\1\6\uffff\2\1\11\uffff\1\1\6\uffff\1\4"+
			"\12\uffff\1\1\30\uffff\1\1\35\uffff\1\1\25\uffff\1\1\1\uffff\1\17\10"+
			"\uffff\1\1\1\20\26\uffff\1\21\37\uffff\1\1\3\uffff\1\1\53\uffff\1\22"+
			"\22\uffff\1\23\5\uffff\1\1\45\uffff\1\1\4\uffff\1\1\6\uffff\1\24\7\uffff"+
			"\1\25\51\uffff\1\1\13\uffff\4\1\2\uffff\1\1\21\uffff\1\26\15\uffff\1"+
			"\1\14\uffff\1\1\45\uffff\1\27\1\30\74\uffff\1\1\17\uffff\1\31\6\uffff"+
			"\1\1",
			"",
			"\1\32\120\uffff\1\33",
			"\1\34\144\uffff\1\35",
			"\1\36\144\uffff\1\37",
			"\1\10\12\uffff\1\12",
			"\1\40",
			"\1\41\144\uffff\1\42",
			"\1\43\120\uffff\1\44",
			"\1\45\u01ce\uffff\1\46",
			"\1\47\u01ce\uffff\1\50",
			"\1\51",
			"\1\52\144\uffff\1\53",
			"\1\54",
			"\1\55\34\uffff\1\56\144\uffff\1\56\166\uffff\1\56",
			"\1\57\144\uffff\1\60",
			"\1\61\144\uffff\1\62",
			"\1\63\144\uffff\1\64",
			"\1\66\47\uffff\1\65\144\uffff\1\66",
			"\1\67\u01ce\uffff\1\70",
			"\1\72\2\uffff\1\72\76\uffff\1\72\30\uffff\1\72\16\uffff\1\71\35\uffff"+
			"\1\72\u012b\uffff\1\72",
			"\1\74\47\uffff\1\73\144\uffff\1\74",
			"\1\76\47\uffff\1\75\144\uffff\1\76",
			"\1\77\u00aa\uffff\1\100",
			"\1\101",
			"\1\uffff",
			"\1\102",
			"\1\uffff",
			"\1\103",
			"\1\uffff",
			"\1\105\2\uffff\1\105\22\uffff\1\105\2\uffff\1\105\111\uffff\10\105\37"+
			"\uffff\1\105\53\uffff\1\104\3\uffff\2\105\52\uffff\2\105\2\uffff\1\105"+
			"\6\uffff\1\105\7\uffff\1\105\13\uffff\1\105\47\uffff\1\105\4\uffff\2"+
			"\105\5\uffff\1\105\2\uffff\3\105\46\uffff\2\105\u00dc\uffff\1\105\64"+
			"\uffff\1\105\32\uffff\1\105\17\uffff\2\105\44\uffff\1\105",
			"\1\106",
			"\1\uffff",
			"\1\107",
			"\1\uffff",
			"\1\110",
			"\1\uffff",
			"\1\111",
			"\1\uffff",
			"\1\112\u01ce\uffff\1\113",
			"\1\114",
			"\1\uffff",
			"\1\115\u01ce\uffff\1\116",
			"\1\117\144\uffff\1\117\166\uffff\1\117",
			"\1\uffff",
			"\1\120",
			"\1\uffff",
			"\1\121",
			"\1\uffff",
			"\1\122",
			"\1\uffff",
			"\1\123\u008c\uffff\1\123",
			"\1\uffff",
			"\1\124",
			"\1\uffff",
			"\1\125\2\uffff\1\125\76\uffff\1\125\30\uffff\1\125\54\uffff\1\125\u012b"+
			"\uffff\1\125",
			"\1\uffff",
			"\1\126\u008c\uffff\1\126",
			"\1\uffff",
			"\1\127\u008c\uffff\1\127",
			"\1\uffff",
			"\1\100",
			"\1\130",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\131\2\uffff\1\131\22\uffff\1\131\2\uffff\1\131\111\uffff\10\131\37"+
			"\uffff\1\131\57\uffff\2\131\52\uffff\2\131\2\uffff\1\131\6\uffff\1\131"+
			"\7\uffff\1\131\13\uffff\1\131\47\uffff\1\131\4\uffff\2\131\5\uffff\1"+
			"\131\2\uffff\3\131\46\uffff\2\131\u00dc\uffff\1\131\64\uffff\1\131\32"+
			"\uffff\1\131\17\uffff\2\131\44\uffff\1\131",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\132",
			"\1\uffff",
			"\1\uffff",
			"\1\133",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\134\u01da\uffff\1\135",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\136",
			"\1\uffff",
			"\1\134\u01da\uffff\1\137",
			"\1\uffff"
	};

	static final short[] DFA426_eot = DFA.unpackEncodedString(DFA426_eotS);
	static final short[] DFA426_eof = DFA.unpackEncodedString(DFA426_eofS);
	static final char[] DFA426_min = DFA.unpackEncodedStringToUnsignedChars(DFA426_minS);
	static final char[] DFA426_max = DFA.unpackEncodedStringToUnsignedChars(DFA426_maxS);
	static final short[] DFA426_accept = DFA.unpackEncodedString(DFA426_acceptS);
	static final short[] DFA426_special = DFA.unpackEncodedString(DFA426_specialS);
	static final short[][] DFA426_transition;

	static {
		int numStates = DFA426_transitionS.length;
		DFA426_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA426_transition[i] = DFA.unpackEncodedString(DFA426_transitionS[i]);
		}
	}

	protected class DFA426 extends DFA {

		public DFA426(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 426;
			this.eot = DFA426_eot;
			this.eof = DFA426_eof;
			this.min = DFA426_min;
			this.max = DFA426_max;
			this.accept = DFA426_accept;
			this.special = DFA426_special;
			this.transition = DFA426_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 2120:16: ( ( COMMA )? table_option )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA426_65 = input.LA(1);
						 
						int index426_65 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_65);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA426_27 = input.LA(1);
						 
						int index426_27 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_27);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA426_90 = input.LA(1);
						 
						int index426_90 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_90);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA426_75 = input.LA(1);
						 
						int index426_75 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_75);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA426_87 = input.LA(1);
						 
						int index426_87 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_87);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA426_62 = input.LA(1);
						 
						int index426_62 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_62);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA426_66 = input.LA(1);
						 
						int index426_66 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_66);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA426_29 = input.LA(1);
						 
						int index426_29 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_29);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA426_84 = input.LA(1);
						 
						int index426_84 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_84);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA426_82 = input.LA(1);
						 
						int index426_82 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_82);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA426_56 = input.LA(1);
						 
						int index426_56 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_56);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA426_52 = input.LA(1);
						 
						int index426_52 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_52);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA426_79 = input.LA(1);
						 
						int index426_79 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_79);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA426_46 = input.LA(1);
						 
						int index426_46 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_46);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA426_81 = input.LA(1);
						 
						int index426_81 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_81);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA426_50 = input.LA(1);
						 
						int index426_50 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_50);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA426_85 = input.LA(1);
						 
						int index426_85 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_85);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA426_58 = input.LA(1);
						 
						int index426_58 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_58);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA426_89 = input.LA(1);
						 
						int index426_89 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_89);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA426_71 = input.LA(1);
						 
						int index426_71 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_71);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA426_69 = input.LA(1);
						 
						int index426_69 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_69);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA426_36 = input.LA(1);
						 
						int index426_36 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_36);
						if ( s>=0 ) return s;
						break;

					case 22 : 
						int LA426_91 = input.LA(1);
						 
						int index426_91 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_91);
						if ( s>=0 ) return s;
						break;

					case 23 : 
						int LA426_78 = input.LA(1);
						 
						int index426_78 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_78);
						if ( s>=0 ) return s;
						break;

					case 24 : 
						int LA426_73 = input.LA(1);
						 
						int index426_73 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_73);
						if ( s>=0 ) return s;
						break;

					case 25 : 
						int LA426_40 = input.LA(1);
						 
						int index426_40 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_40);
						if ( s>=0 ) return s;
						break;

					case 26 : 
						int LA426_67 = input.LA(1);
						 
						int index426_67 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_67);
						if ( s>=0 ) return s;
						break;

					case 27 : 
						int LA426_31 = input.LA(1);
						 
						int index426_31 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_31);
						if ( s>=0 ) return s;
						break;

					case 28 : 
						int LA426_86 = input.LA(1);
						 
						int index426_86 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_86);
						if ( s>=0 ) return s;
						break;

					case 29 : 
						int LA426_60 = input.LA(1);
						 
						int index426_60 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_60);
						if ( s>=0 ) return s;
						break;

					case 30 : 
						int LA426_80 = input.LA(1);
						 
						int index426_80 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_80);
						if ( s>=0 ) return s;
						break;

					case 31 : 
						int LA426_48 = input.LA(1);
						 
						int index426_48 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_48);
						if ( s>=0 ) return s;
						break;

					case 32 : 
						int LA426_95 = input.LA(1);
						 
						int index426_95 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_95);
						if ( s>=0 ) return s;
						break;

					case 33 : 
						int LA426_93 = input.LA(1);
						 
						int index426_93 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_93);
						if ( s>=0 ) return s;
						break;

					case 34 : 
						int LA426_70 = input.LA(1);
						 
						int index426_70 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_70);
						if ( s>=0 ) return s;
						break;

					case 35 : 
						int LA426_34 = input.LA(1);
						 
						int index426_34 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_34);
						if ( s>=0 ) return s;
						break;

					case 36 : 
						int LA426_72 = input.LA(1);
						 
						int index426_72 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_72);
						if ( s>=0 ) return s;
						break;

					case 37 : 
						int LA426_38 = input.LA(1);
						 
						int index426_38 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_38);
						if ( s>=0 ) return s;
						break;

					case 38 : 
						int LA426_83 = input.LA(1);
						 
						int index426_83 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_83);
						if ( s>=0 ) return s;
						break;

					case 39 : 
						int LA426_54 = input.LA(1);
						 
						int index426_54 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_54);
						if ( s>=0 ) return s;
						break;

					case 40 : 
						int LA426_76 = input.LA(1);
						 
						int index426_76 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_76);
						if ( s>=0 ) return s;
						break;

					case 41 : 
						int LA426_43 = input.LA(1);
						 
						int index426_43 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_43);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 426, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	public static final BitSet FOLLOW_set_in_relational_op20368 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BINARY_in_cast_data_type20625 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_cast_data_type20628 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CHAR_in_cast_data_type20637 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_cast_data_type20640 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DATE_SYM_in_cast_data_type20649 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DATETIME_in_cast_data_type20655 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DECIMAL_SYM_in_cast_data_type20662 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_cast_data_type20666 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_cast_data_type20669 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_cast_data_type20671 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SIGNED_SYM_in_cast_data_type20682 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_INTEGER_SYM_in_cast_data_type20685 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIME_SYM_in_cast_data_type20693 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_UNSIGNED_SYM_in_cast_data_type20699 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_INTEGER_SYM_in_cast_data_type20702 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IN_SYM_in_search_modifier20717 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_NATURAL_in_search_modifier20719 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_LANGUAGE_in_search_modifier20721 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_MODE_SYM_in_search_modifier20723 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IN_SYM_in_search_modifier20731 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_NATURAL_in_search_modifier20733 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_LANGUAGE_in_search_modifier20735 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_MODE_SYM_in_search_modifier20737 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_WITH_in_search_modifier20739 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_QUERY_SYM_in_search_modifier20741 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_EXPANSION_SYM_in_search_modifier20743 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IN_SYM_in_search_modifier20751 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_BOOLEAN_SYM_in_search_modifier20753 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_MODE_SYM_in_search_modifier20755 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WITH_in_search_modifier20763 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_QUERY_SYM_in_search_modifier20765 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_EXPANSION_SYM_in_search_modifier20767 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TEXT_STRING_in_string_literal20936 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_number_literal20954 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_HEX_DIGIT_in_hex_literal20971 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BIT_NUM_in_bit_literal20992 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_string_literal_in_literal_value21010 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_number_literal_in_literal_value21014 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_hex_literal_in_literal_value21018 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_boolean_literal_in_literal_value21022 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_literal_in_literal_value21026 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NULL_SYM_in_literal_value21030 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_number_functions_in_functionList21049 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_char_functions_in_functionList21056 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_time_functions_in_functionList21063 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_other_functions_in_functionList21069 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_schema_name22149 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_table_name22167 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_engine_name22184 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_column_name22201 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_view_name22218 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_parser_name22235 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_index_name22253 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_partition_name22271 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_partition_logical_name22287 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_constraint_symbol_name22303 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_foreign_key_symbol_name22318 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_collation_name22336 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_event_name22354 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_user_name22371 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_function_name22388 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_procedure_name22406 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_server_name22423 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_wrapper_name22441 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AS_SYM_in_alias22460 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_ID_in_alias22467 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exp_factor1_in_expression22484 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_OR_SYM_in_expression22488 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_exp_factor1_in_expression22492 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_exp_factor2_in_exp_factor122503 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_XOR_in_exp_factor122507 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_exp_factor2_in_exp_factor122511 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_exp_factor3_in_exp_factor222522 = new BitSet(new long[]{0x0000000000200002L});
	public static final BitSet FOLLOW_AND_SYM_in_exp_factor222526 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_exp_factor3_in_exp_factor222530 = new BitSet(new long[]{0x0000000000200002L});
	public static final BitSet FOLLOW_NOT_SYM_in_exp_factor322542 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_exp_factor4_in_exp_factor322548 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bool_primary_in_exp_factor422556 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_IS_SYM_in_exp_factor422560 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_NOT_SYM_in_exp_factor422565 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_boolean_literal_in_exp_factor422572 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NULL_SYM_in_exp_factor422574 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_predicate_in_bool_primary22591 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000804L,0x0200000020000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_relational_op_in_bool_primary22593 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_predicate_in_bool_primary22595 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_predicate_in_bool_primary22617 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000804L,0x0200000020000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_relational_op_in_bool_primary22619 = new BitSet(new long[]{0x0000000000420000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_subquery_in_bool_primary22632 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOT_SYM_in_bool_primary22643 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_EXISTS_in_bool_primary22646 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_subquery_in_bool_primary22650 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_predicate_in_bool_primary22658 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_expr_in_predicate22671 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_NOT_SYM_in_predicate22674 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_IN_SYM_in_predicate22678 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_subquery_in_predicate22683 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_list_in_predicate22687 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_expr_in_predicate22698 = new BitSet(new long[]{0x0000100000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_NOT_SYM_in_predicate22701 = new BitSet(new long[]{0x0000100000000000L});
	public static final BitSet FOLLOW_BETWEEN_in_predicate22705 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_predicate22709 = new BitSet(new long[]{0x0000000000200000L});
	public static final BitSet FOLLOW_AND_SYM_in_predicate22711 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_predicate_in_predicate22715 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_expr_in_predicate22726 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_SOUNDS_SYM_in_predicate22728 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_LIKE_SYM_in_predicate22730 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_predicate22734 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_expr_in_predicate22745 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_NOT_SYM_in_predicate22748 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_LIKE_SYM_in_predicate22752 = new BitSet(new long[]{0x0178882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x0206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_simple_expr_in_predicate22756 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_ESCAPE_SYM_in_predicate22759 = new BitSet(new long[]{0x0178882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x0206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_simple_expr_in_predicate22763 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_expr_in_predicate22775 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000002000000L});
	public static final BitSet FOLLOW_NOT_SYM_in_predicate22778 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_REGEXP_in_predicate22782 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_predicate22786 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_expr_in_predicate22797 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_factor1_in_bit_expr22810 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_VERTBAR_in_bit_expr22814 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_factor1_in_bit_expr22818 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_factor2_in_factor122830 = new BitSet(new long[]{0x0004000000000002L});
	public static final BitSet FOLLOW_BITAND_in_factor122834 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_factor2_in_factor122838 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_factor3_in_factor222850 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000000C0000L});
	public static final BitSet FOLLOW_set_in_factor222854 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_factor3_in_factor222862 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_factor4_in_factor322874 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_set_in_factor322878 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_factor4_in_factor322886 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_factor5_in_factor422898 = new BitSet(new long[]{0x0000000020000002L,0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_set_in_factor422902 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_factor5_in_factor422914 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_factor6_in_factor522926 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_set_in_factor522930 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_interval_expr_in_factor522938 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_factor622950 = new BitSet(new long[]{0x0178882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x0206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_simple_expr_in_factor622968 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simple_expr_in_factor622974 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simple_expr_in_factor722983 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_COLLATE_SYM_in_factor722986 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000060000L});
	public static final BitSet FOLLOW_collation_names_in_factor722990 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_literal_value_in_simple_expr23000 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_column_spec_in_simple_expr23007 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_function_call_in_simple_expr23013 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_USER_VAR_in_simple_expr23022 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_list_in_simple_expr23028 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ROW_SYM_in_simple_expr23035 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_expression_list_in_simple_expr23037 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subquery_in_simple_expr23044 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXISTS_in_simple_expr23050 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_subquery_in_simple_expr23054 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_match_against_statement_in_simple_expr23063 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_case_when_statement_in_simple_expr23069 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_interval_expr_in_simple_expr23075 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_functionList_in_function_call23091 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_function_call23095 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1712802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_function_call23098 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_function_call23101 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_function_call23103 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_function_call23109 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CAST_SYM_in_function_call23125 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_function_call23127 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_function_call23129 = new BitSet(new long[]{0x0000000040000000L});
	public static final BitSet FOLLOW_AS_SYM_in_function_call23131 = new BitSet(new long[]{0x0001000000000000L,0x0000000000002000L,0x0000000400440000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0000002000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_cast_data_type_in_function_call23133 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_function_call23135 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CONVERT_SYM_in_function_call23147 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_function_call23149 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_function_call23151 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_function_call23153 = new BitSet(new long[]{0x0001000000000000L,0x0000000000002000L,0x0000000400440000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0000002000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_cast_data_type_in_function_call23155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_function_call23157 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CONVERT_SYM_in_function_call23169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_function_call23171 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_function_call23173 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_USING_SYM_in_function_call23175 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_transcoding_name_in_function_call23177 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_function_call23179 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_group_functions_in_function_call23191 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_function_call23193 = new BitSet(new long[]{0x01798821B4021B50L,0x03B809800501A3C0L,0x001030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_function_call23210 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_function_call23212 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_case_when_statement1_in_case_when_statement23231 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_case_when_statement2_in_case_when_statement23235 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CASE_SYM_in_case_when_statement123250 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_WHEN_SYM_in_case_when_statement123262 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_case_when_statement123264 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_THEN_SYM_in_case_when_statement123266 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_case_when_statement123268 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000202L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_ELSE_SYM_in_case_when_statement123283 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_case_when_statement123285 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_END_SYM_in_case_when_statement123298 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CASE_SYM_in_case_when_statement223313 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_case_when_statement223315 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_WHEN_SYM_in_case_when_statement223327 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_case_when_statement223329 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_THEN_SYM_in_case_when_statement223331 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_case_when_statement223333 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000202L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_ELSE_SYM_in_case_when_statement223348 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_case_when_statement223350 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_END_SYM_in_case_when_statement223363 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MATCH_in_match_against_statement23375 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_spec_in_match_against_statement23378 = new BitSet(new long[]{0x0000000000004000L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_match_against_statement23381 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_spec_in_match_against_statement23383 = new BitSet(new long[]{0x0000000000004000L,0x0000000080000000L});
	public static final BitSet FOLLOW_AGAINST_in_match_against_statement23389 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_match_against_statement23392 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_search_modifier_in_match_against_statement23395 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_schema_name_in_column_spec23414 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_DOT_in_column_spec23416 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_column_spec23423 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_DOT_in_column_spec23425 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_name_in_column_spec23432 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_expression_list23442 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_expression_list23444 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_expression_list23448 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_expression_list23450 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_expression_list23455 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INTERVAL_SYM_in_interval_expr23465 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_interval_expr23467 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00000000F8000000L,0x0000000000000000L,0x000000000F000000L,0x0000000000000000L,0x000201C000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000006L,0x0000000000000000L,0x0004000000000000L,0x0000000000000050L});
	public static final BitSet FOLLOW_interval_unit_in_interval_expr23469 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_reference_in_table_references23491 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_table_references23495 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_table_reference_in_table_references23499 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_table_factor1_in_table_reference23511 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_atom_in_table_reference23515 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_factor2_in_table_factor123524 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000040000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_table_factor1_part_in_table_factor123527 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_factor3_in_table_factor223538 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_table_factor2_part_in_table_factor223541 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_factor4_in_table_factor323552 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_table_factor3_part_in_table_factor323555 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_atom_in_table_factor423566 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_table_factor4_part_in_table_factor423569 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_spec_in_table_atom23584 = new BitSet(new long[]{0x0000000040000002L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000440000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_partition_clause_in_table_atom23589 = new BitSet(new long[]{0x0000000040000002L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000440000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_alias_in_table_atom23594 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_index_hint_list_in_table_atom23599 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subquery_in_table_atom23611 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_alias_in_table_atom23613 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_table_atom23623 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_table_references_in_table_atom23625 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_table_atom23627 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OJ_SYM_in_table_atom23637 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_table_reference_in_table_atom23639 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_LEFT_in_table_atom23641 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_OUTER_in_table_atom23643 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_JOIN_SYM_in_table_atom23645 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_table_reference_in_table_atom23647 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_ON_in_table_atom23649 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_table_atom23651 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_JOIN_SYM_in_table_factor1_part23672 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_table_atom_in_table_factor1_part23676 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_join_condition_in_table_factor1_part23679 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STRAIGHT_JOIN_in_table_factor2_part23694 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_table_atom_in_table_factor2_part23698 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_ON_in_table_factor2_part23701 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_table_factor2_part23703 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_table_factor3_part23718 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_OUTER_in_table_factor3_part23725 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_JOIN_SYM_in_table_factor3_part23729 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_table_factor4_in_table_factor3_part23733 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_join_condition_in_table_factor3_part23735 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NATURAL_in_table_factor4_part23748 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000004L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_set_in_table_factor4_part23752 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_OUTER_in_table_factor4_part23759 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_JOIN_SYM_in_table_factor4_part23766 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_table_atom_in_table_factor4_part23770 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ON_in_join_condition23784 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_join_condition23788 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_USING_SYM_in_join_condition23794 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_column_list_in_join_condition23798 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_index_hint_in_index_hint_list23808 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_index_hint_list23811 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_index_hint_in_index_hint_list23813 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_set_in_index_options23824 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_FOR_SYM_in_index_options23835 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000004L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_JOIN_SYM_in_index_options23839 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ORDER_SYM_in_index_options23845 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_BY_SYM_in_index_options23847 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GROUP_SYM_in_index_options23853 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_BY_SYM_in_index_options23855 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_USE_SYM_in_index_hint23872 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_index_options_in_index_hint23877 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_index_hint23879 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_index_list_in_index_hint23882 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_index_hint23886 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IGNORE_SYM_in_index_hint23892 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_index_options_in_index_hint23894 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_index_hint23896 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_list_in_index_hint23898 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_index_hint23900 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FORCE_SYM_in_index_hint23906 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_index_options_in_index_hint23909 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_index_hint23911 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_list_in_index_hint23913 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_index_hint23915 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_index_name_in_index_list23924 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_index_list23927 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_name_in_index_list23929 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_PARTITION_SYM_in_partition_clause23940 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_partition_clause23942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_partition_names_in_partition_clause23944 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_partition_clause23946 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_partition_name_in_partition_names23954 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_partition_names23957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_partition_name_in_partition_names23959 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_SHIFT_LEFT_in_root_statement23978 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_SHIFT_RIGHT_in_root_statement23980 = new BitSet(new long[]{0x0000000000080000L,0x0000000000000008L,0x0600040000000010L,0x0000000000000000L,0x0000400000002000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002100000000L,0x0000000000000020L,0x0040000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_data_manipulation_statements_in_root_statement23990 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_data_definition_statements_in_root_statement23994 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_SEMI_in_root_statement24003 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_select_statement_in_data_manipulation_statements24017 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_delete_statements_in_data_manipulation_statements24023 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_insert_statements_in_data_manipulation_statements24029 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_update_statements_in_data_manipulation_statements24035 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_call_statement_in_data_manipulation_statements24042 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_do_statement_in_data_manipulation_statements24048 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_handler_statements_in_data_manipulation_statements24054 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_load_data_statement_in_data_manipulation_statements24060 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_load_xml_statement_in_data_manipulation_statements24066 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_replace_statement_in_data_manipulation_statements24072 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_database_statement_in_data_definition_statements24085 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_database_statements_in_data_definition_statements24091 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_database_statement_in_data_definition_statements24097 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_event_statement_in_data_definition_statements24106 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_event_statement_in_data_definition_statements24112 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_event_statement_in_data_definition_statements24118 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_server_statement_in_data_definition_statements24160 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_server_statement_in_data_definition_statements24166 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_server_statement_in_data_definition_statements24172 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_table_statement_in_data_definition_statements24181 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_table_statement_in_data_definition_statements24187 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_table_statement_in_data_definition_statements24193 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_view_statement_in_data_definition_statements24202 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_view_statement_in_data_definition_statements24208 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rename_table_statement_in_data_definition_statements24214 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_view_statement_in_data_definition_statements24220 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_truncate_table_statement_in_data_definition_statements24226 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_index_statement_in_data_definition_statements24235 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_index_statement_in_data_definition_statements24241 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_select_expression_in_select_statement24267 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_UNION_SYM_in_select_statement24272 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_ALL_in_select_statement24275 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_select_expression_in_select_statement24282 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_select_part_in_select_expression24296 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0024000000000000L,0x0004000000000000L,0x0000040100000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_from_part_in_select_expression24307 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0004000000008400L,0x0000040100000000L,0x0000000000000000L,0x0000010004000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_partition_clause_in_select_expression24315 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0004000000008400L,0x0000040100000000L,0x0000000000000000L,0x0000000004000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_where_clause_in_select_expression24326 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0004000000008400L,0x0000040100000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_groupby_clause_in_select_expression24338 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0004000000008000L,0x0000040100000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_having_clause_in_select_expression24349 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0004000000000000L,0x0000040100000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_orderby_clause_in_select_expression24367 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0004000000000000L,0x0000040100000000L});
	public static final BitSet FOLLOW_limit_clause_in_select_expression24376 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_FOR_SYM_in_select_expression24387 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_UPDATE_in_select_expression24389 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LOCK_in_select_expression24395 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_IN_SYM_in_select_expression24397 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_SHARE_SYM_in_select_expression24399 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_MODE_SYM_in_select_expression24401 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SELECT_in_select_part24416 = new BitSet(new long[]{0x01798821B4021B50L,0x03B809800501A3C0L,0x003030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3412C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7809F82412402013L,0x0070387F11060F16L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_HIGH_PRIORITY_in_select_part24444 = new BitSet(new long[]{0x01798821B4001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7809F82412402013L,0x0070387F11060F16L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_STRAIGHT_JOIN_in_select_part24451 = new BitSet(new long[]{0x01798821B4001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7809F82412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_SQL_SMALL_RESULT_in_select_part24458 = new BitSet(new long[]{0x01798821B4001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808F82412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_SQL_BIG_RESULT_in_select_part24463 = new BitSet(new long[]{0x01798821B4001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808F02412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_SQL_BUFFER_RESULT_in_select_part24468 = new BitSet(new long[]{0x01798821B4001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808E02412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_SQL_CALC_FOUND_ROWS_in_select_part24484 = new BitSet(new long[]{0x01798821B4001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_select_list_in_select_part24491 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FROM_in_from_part24501 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_table_references_in_from_part24505 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WHERE_in_where_clause24520 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_where_clause24524 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GROUP_SYM_in_groupby_clause24534 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_BY_SYM_in_groupby_clause24536 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_groupby_item_in_groupby_clause24540 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_groupby_clause24543 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_groupby_item_in_groupby_clause24547 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_WITH_in_groupby_clause24552 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_ROLLUP_SYM_in_groupby_clause24554 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_column_spec_in_groupby_item24563 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_groupby_item24567 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_expr_in_groupby_item24571 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_HAVING_in_having_clause24581 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_having_clause24585 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ORDER_SYM_in_orderby_clause24595 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_BY_SYM_in_orderby_clause24597 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_orderby_item_in_orderby_clause24601 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_orderby_clause24604 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_orderby_item_in_orderby_clause24608 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_groupby_item_in_orderby_item24617 = new BitSet(new long[]{0x0000000002000002L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_LIMIT_in_limit_clause24636 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_offset_in_limit_clause24640 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_limit_clause24642 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_row_count_in_limit_clause24646 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_row_count_in_limit_clause24652 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_OFFSET_SYM_in_limit_clause24654 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_offset_in_limit_clause24656 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_offset24666 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_row_count24674 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_displayed_column_in_select_list24688 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_select_list24692 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_displayed_column_in_select_list24696 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_ASTERISK_in_select_list24706 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_column_list24719 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_spec_in_column_list24722 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_column_list24725 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_spec_in_column_list24729 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_list24733 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_subquery24744 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_select_statement_in_subquery24748 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_subquery24750 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_schema_name_in_table_spec24764 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_DOT_in_table_spec24766 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_table_spec24771 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_spec_in_displayed_column24787 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_DOT_in_displayed_column24789 = new BitSet(new long[]{0x0000000020000000L});
	public static final BitSet FOLLOW_ASTERISK_in_displayed_column24791 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_column_spec_in_displayed_column24803 = new BitSet(new long[]{0x0000000040000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_alias_in_displayed_column24806 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_expr_in_displayed_column24821 = new BitSet(new long[]{0x0000000040000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_alias_in_displayed_column24824 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DELETE_SYM_in_delete_statements24845 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000440000000L,0x0040000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_LOW_PRIORITY_in_delete_statements24848 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000440000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_QUICK_in_delete_statements24853 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000440000000L});
	public static final BitSet FOLLOW_IGNORE_SYM_in_delete_statements24858 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_delete_single_table_statement_in_delete_statements24866 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_delete_multiple_table_statement1_in_delete_statements24870 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_delete_multiple_table_statement2_in_delete_statements24874 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FROM_in_delete_single_table_statement24885 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_spec_in_delete_single_table_statement24887 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000010004000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_partition_clause_in_delete_single_table_statement24892 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000004000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_where_clause_in_delete_single_table_statement24899 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_orderby_clause_in_delete_single_table_statement24906 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_limit_clause_in_delete_single_table_statement24913 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_spec_in_delete_multiple_table_statement124924 = new BitSet(new long[]{0x0000000000040000L,0x0000000080000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_ALL_FIELDS_in_delete_multiple_table_statement124927 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_COMMA_in_delete_multiple_table_statement124932 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_spec_in_delete_multiple_table_statement124934 = new BitSet(new long[]{0x0000000000040000L,0x0000000080000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_ALL_FIELDS_in_delete_multiple_table_statement124937 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_FROM_in_delete_multiple_table_statement124945 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_table_references_in_delete_multiple_table_statement124947 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_where_clause_in_delete_multiple_table_statement124952 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FROM_in_delete_multiple_table_statement224963 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_spec_in_delete_multiple_table_statement224965 = new BitSet(new long[]{0x0000000000040000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ALL_FIELDS_in_delete_multiple_table_statement224968 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_COMMA_in_delete_multiple_table_statement224973 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_spec_in_delete_multiple_table_statement224975 = new BitSet(new long[]{0x0000000000040000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ALL_FIELDS_in_delete_multiple_table_statement224978 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_USING_SYM_in_delete_multiple_table_statement224986 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_table_references_in_delete_multiple_table_statement224988 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_where_clause_in_delete_multiple_table_statement224993 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_insert_statement1_in_insert_statements25011 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_insert_statement2_in_insert_statements25015 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_insert_statement3_in_insert_statements25019 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INSERT_in_insert_header25029 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000440200000L,0x0040000000000000L});
	public static final BitSet FOLLOW_IGNORE_SYM_in_insert_header25041 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000040000000L});
	public static final BitSet FOLLOW_INTO_in_insert_header25048 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_spec_in_insert_header25052 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_partition_clause_in_insert_header25058 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ON_in_insert_subfix25070 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_DUPLICATE_SYM_in_insert_subfix25072 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_KEY_SYM_in_insert_subfix25074 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_UPDATE_in_insert_subfix25076 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_spec_in_insert_subfix25078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_EQ_SYM_in_insert_subfix25080 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_insert_subfix25082 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_insert_subfix25085 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_spec_in_insert_subfix25087 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_EQ_SYM_in_insert_subfix25089 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_insert_subfix25091 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_insert_header_in_insert_statement125103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001800000000L});
	public static final BitSet FOLLOW_column_list_in_insert_statement125108 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001800000000L});
	public static final BitSet FOLLOW_value_list_clause_in_insert_statement125115 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_insert_subfix_in_insert_statement125121 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_value_list_clause25132 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_column_value_list_in_value_list_clause25140 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_value_list_clause25143 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_column_value_list_in_value_list_clause25145 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_LPAREN_in_column_value_list25154 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_column_value_list25157 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_value_list25159 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_column_value_list25163 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_column_value_list25166 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_value_list25168 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_value_list25174 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_insert_header_in_insert_statement225184 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_set_columns_cluase_in_insert_statement225188 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_insert_subfix_in_insert_statement225194 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SET_SYM_in_set_columns_cluase25204 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_set_column_cluase_in_set_columns_cluase25206 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_set_columns_cluase25210 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_set_column_cluase_in_set_columns_cluase25212 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_column_spec_in_set_column_cluase25222 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_EQ_SYM_in_set_column_cluase25224 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_set_column_cluase25227 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_set_column_cluase25229 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_insert_header_in_insert_statement325240 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_column_list_in_insert_statement325245 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_select_expression_in_insert_statement325252 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_insert_subfix_in_insert_statement325258 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_single_table_update_statement_in_update_statements25279 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_multiple_table_update_statement_in_update_statements25283 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_UPDATE_in_single_table_update_statement25292 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000440000000L,0x0140000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_LOW_PRIORITY_in_single_table_update_statement25295 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000440000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_IGNORE_SYM_in_single_table_update_statement25300 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_table_reference_in_single_table_update_statement25304 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_set_columns_cluase_in_single_table_update_statement25308 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000004000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_where_clause_in_single_table_update_statement25313 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_orderby_clause_in_single_table_update_statement25320 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_limit_clause_in_single_table_update_statement25327 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_UPDATE_in_multiple_table_update_statement25340 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000440000000L,0x0140000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_LOW_PRIORITY_in_multiple_table_update_statement25343 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000440000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_IGNORE_SYM_in_multiple_table_update_statement25348 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_table_references_in_multiple_table_update_statement25352 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_set_columns_cluase_in_multiple_table_update_statement25356 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_where_clause_in_multiple_table_update_statement25361 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CALL_SYM_in_call_statement25379 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_procedure_name_in_call_statement25381 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_call_statement25384 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1712802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_call_statement25388 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_call_statement25391 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_call_statement25393 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_call_statement25400 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DO_SYM_in_do_statement25418 = new BitSet(new long[]{0x0000000000080000L,0x0000000000000008L,0x0600040000000010L,0x0000000000000000L,0x0000400000002000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002100000000L,0x0000000000040020L,0x0040000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_root_statement_in_do_statement25420 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_do_statement25423 = new BitSet(new long[]{0x0000000000080000L,0x0000000000000008L,0x0600040000000010L,0x0000000000000000L,0x0000400000002000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002100000000L,0x0000000000040020L,0x0040000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_root_statement_in_do_statement25425 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_HANDLER_SYM_in_handler_statements25443 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_handler_statements25445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L,0x0000000000008000L});
	public static final BitSet FOLLOW_open_handler_statement_in_handler_statements25450 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_handler_statement1_in_handler_statements25454 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_handler_statement2_in_handler_statements25458 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_handler_statement3_in_handler_statements25462 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_close_handler_statement_in_handler_statements25466 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OPEN_SYM_in_open_handler_statement25477 = new BitSet(new long[]{0x0000000040000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_alias_in_open_handler_statement25480 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_READ_SYM_in_handler_statement125492 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_name_in_handler_statement125494 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000804L,0x0200000020000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_relational_op_in_handler_statement125496 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_handler_statement125498 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_handler_statement125500 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_handler_statement125503 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_handler_statement125505 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_handler_statement125509 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_where_clause_in_handler_statement125514 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_limit_clause_in_handler_statement125519 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_READ_SYM_in_handler_statement225531 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_name_in_handler_statement225533 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0400000000000001L});
	public static final BitSet FOLLOW_set_in_handler_statement225535 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_where_clause_in_handler_statement225554 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_limit_clause_in_handler_statement225559 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_READ_SYM_in_handler_statement325571 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_set_in_handler_statement325573 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_where_clause_in_handler_statement325584 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_limit_clause_in_handler_statement325589 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLOSE_SYM_in_close_handler_statement25601 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LOAD_in_load_data_statement25618 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_DATA_SYM_in_load_data_statement25620 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0040010000000000L});
	public static final BitSet FOLLOW_LOCAL_SYM_in_load_data_statement25632 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_INFILE_in_load_data_statement25636 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_load_data_statement25638 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_INTO_in_load_data_statement25653 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_TABLE_in_load_data_statement25655 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_spec_in_load_data_statement25657 = new BitSet(new long[]{0x0000000000000002L,0x0000000010004000L,0x0000000000000000L,0x0000008000000000L,0x0000000400000000L,0x0100000400000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_partition_clause_in_load_data_statement25662 = new BitSet(new long[]{0x0000000000000002L,0x0000000010004000L,0x0000000000000000L,0x0000008000000000L,0x0000000400000000L,0x0100000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_load_data_statement25669 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_load_data_statement25671 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_load_data_statement25673 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L,0x0000000000000000L,0x0000008000000000L,0x0000000400000000L,0x0100000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_set_in_load_data_statement25685 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000008020L,0x0000000400000000L,0x0100000400000000L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000004000L,0x0000000008000000L});
	public static final BitSet FOLLOW_TERMINATED_in_load_data_statement25698 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_BY_SYM_in_load_data_statement25700 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_load_data_statement25702 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000008020L,0x0000000400000000L,0x0100000400000000L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_OPTIONALLY_in_load_data_statement25712 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_ENCLOSED_in_load_data_statement25716 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_BY_SYM_in_load_data_statement25718 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_load_data_statement25720 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L,0x0000000400000000L,0x0100000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ESCAPED_in_load_data_statement25729 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_BY_SYM_in_load_data_statement25731 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_load_data_statement25733 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0100000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LINES_in_load_data_statement25750 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000004000L,0x0000000008000000L});
	public static final BitSet FOLLOW_STARTING_in_load_data_statement25757 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_BY_SYM_in_load_data_statement25759 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_load_data_statement25761 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000008000000L});
	public static final BitSet FOLLOW_TERMINATED_in_load_data_statement25770 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_BY_SYM_in_load_data_statement25772 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_load_data_statement25774 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_IGNORE_SYM_in_load_data_statement25786 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_load_data_statement25788 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_set_in_load_data_statement25790 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LPAREN_in_load_data_statement25803 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_column_spec_in_load_data_statement25806 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_USER_VAR_in_load_data_statement25808 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_load_data_statement25812 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_column_spec_in_load_data_statement25815 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_USER_VAR_in_load_data_statement25817 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_load_data_statement25822 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_set_columns_cluase_in_load_data_statement25829 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LOAD_in_load_xml_statement25847 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_XML_SYM_in_load_xml_statement25849 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0040010000000000L});
	public static final BitSet FOLLOW_LOCAL_SYM_in_load_xml_statement25861 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_INFILE_in_load_xml_statement25865 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_load_xml_statement25867 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_INTO_in_load_xml_statement25882 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_TABLE_in_load_xml_statement25884 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_spec_in_load_xml_statement25886 = new BitSet(new long[]{0x0000000000000002L,0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0100000000000000L,0x0000000000000000L,0x0000010000000000L,0x0040000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_partition_clause_in_load_xml_statement25891 = new BitSet(new long[]{0x0000000000000002L,0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_load_xml_statement25898 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_load_xml_statement25900 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_load_xml_statement25902 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ROWS_SYM_in_load_xml_statement25909 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_IDENTIFIED_SYM_in_load_xml_statement25911 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_BY_SYM_in_load_xml_statement25913 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_load_xml_statement25915 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_IGNORE_SYM_in_load_xml_statement25922 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_load_xml_statement25924 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_set_in_load_xml_statement25926 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LPAREN_in_load_xml_statement25939 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_column_spec_in_load_xml_statement25942 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_USER_VAR_in_load_xml_statement25944 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_load_xml_statement25948 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_column_spec_in_load_xml_statement25951 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_USER_VAR_in_load_xml_statement25953 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_load_xml_statement25958 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_set_columns_cluase_in_load_xml_statement25965 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_replace_statement_header_in_replace_statement25983 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004020L,0x0000000000000000L,0x0000001800000000L});
	public static final BitSet FOLLOW_replace_statement1_in_replace_statement25989 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_replace_statement2_in_replace_statement25993 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_replace_statement3_in_replace_statement25997 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REPLACE_in_replace_statement_header26009 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0020000040000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_INTO_in_replace_statement_header26023 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_replace_statement_header26027 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_partition_clause_in_replace_statement_header26032 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_column_list_in_replace_statement126045 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001800000000L});
	public static final BitSet FOLLOW_value_list_clause_in_replace_statement126051 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_columns_cluase_in_replace_statement226061 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_column_list_in_replace_statement326072 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_select_statement_in_replace_statement326078 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CREATE_in_create_database_statement26095 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_set_in_create_database_statement26097 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000140000000L});
	public static final BitSet FOLLOW_IF_in_create_database_statement26106 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_NOT_SYM_in_create_database_statement26108 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_EXISTS_in_create_database_statement26110 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_schema_name_in_create_database_statement26114 = new BitSet(new long[]{0x0000000000000002L,0x0000000002004000L,0x0000002000000000L});
	public static final BitSet FOLLOW_create_specification_in_create_database_statement26120 = new BitSet(new long[]{0x0000000000000002L,0x0000000082004000L,0x0000002000000000L});
	public static final BitSet FOLLOW_COMMA_in_create_database_statement26123 = new BitSet(new long[]{0x0000000000000000L,0x0000000002004000L,0x0000002000000000L});
	public static final BitSet FOLLOW_create_specification_in_create_database_statement26125 = new BitSet(new long[]{0x0000000000000002L,0x0000000082004000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_create_specification26140 = new BitSet(new long[]{0x0000000000000000L,0x0000000002004000L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_create_specification26156 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_create_specification26158 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000062000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_create_specification26161 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_create_specification26165 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COLLATE_SYM_in_create_specification26183 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000040000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_create_specification26186 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_collation_name_in_create_specification26190 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_database_statement1_in_alter_database_statements26209 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_database_statement2_in_alter_database_statements26213 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALTER_in_alter_database_statement126222 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_set_in_alter_database_statement126224 = new BitSet(new long[]{0x0000000000000000L,0x0000000002004000L,0x0000002000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_schema_name_in_alter_database_statement126233 = new BitSet(new long[]{0x0000000000000000L,0x0000000002004000L,0x0000002000000000L});
	public static final BitSet FOLLOW_alter_database_specification_in_alter_database_statement126239 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALTER_in_alter_database_statement226248 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_set_in_alter_database_statement226250 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_schema_name_in_alter_database_statement226258 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_UPGRADE_SYM_in_alter_database_statement226262 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_DATA_SYM_in_alter_database_statement226264 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_DIRECTORY_SYM_in_alter_database_statement226266 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_NAME_SYM_in_alter_database_statement226268 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_alter_database_specification26278 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_alter_database_specification26282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_alter_database_specification26284 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000062000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_alter_database_specification26287 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_alter_database_specification26291 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_alter_database_specification26301 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_COLLATE_SYM_in_alter_database_specification26305 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000060000L});
	public static final BitSet FOLLOW_EQ_SYM_in_alter_database_specification26308 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000060000L});
	public static final BitSet FOLLOW_collation_names_in_alter_database_specification26312 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DROP_in_drop_database_statement26325 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_set_in_drop_database_statement26327 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000140000000L});
	public static final BitSet FOLLOW_IF_in_drop_database_statement26336 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_EXISTS_in_drop_database_statement26338 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_schema_name_in_drop_database_statement26342 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CREATE_in_create_event_statement26358 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_DEFINER_in_create_event_statement26363 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_EQ_SYM_in_create_event_statement26365 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_user_name_in_create_event_statement26369 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_CURRENT_USER_in_create_event_statement26373 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_EVENT_SYM_in_create_event_statement26381 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000140000000L});
	public static final BitSet FOLLOW_IF_in_create_event_statement26386 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_NOT_SYM_in_create_event_statement26388 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_EXISTS_in_create_event_statement26390 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_event_name_in_create_event_statement26396 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_ON_in_create_event_statement26400 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_SCHEDULE_SYM_in_create_event_statement26402 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_schedule_definition_in_create_event_statement26404 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L,0x0202000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_ON_in_create_event_statement26409 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_COMPLETION_SYM_in_create_event_statement26411 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000010L});
	public static final BitSet FOLLOW_NOT_SYM_in_create_event_statement26414 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_PRESERVE_SYM_in_create_event_statement26418 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L,0x0202000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_ENABLE_SYM_in_create_event_statement26426 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_DISABLE_SYM_in_create_event_statement26430 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_DISABLE_SYM_in_create_event_statement26435 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_ON_in_create_event_statement26437 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_SLAVE_in_create_event_statement26439 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_COMMENT_SYM_in_create_event_statement26448 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_create_event_statement26450 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_do_statement_in_create_event_statement26456 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AT_SYM_in_schedule_definition26467 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_timestamp_in_schedule_definition26469 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_PLUS_in_schedule_definition26472 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_INTERVAL_SYM_in_schedule_definition26474 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_interval_in_schedule_definition26476 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_EVERY_SYM_in_schedule_definition26491 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_interval_in_schedule_definition26493 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_STARTS_SYM_in_schedule_definition26501 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_timestamp_in_schedule_definition26503 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_PLUS_in_schedule_definition26506 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_INTERVAL_SYM_in_schedule_definition26508 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_interval_in_schedule_definition26510 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_ENDS_SYM_in_schedule_definition26521 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_timestamp_in_schedule_definition26523 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_PLUS_in_schedule_definition26526 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_INTERVAL_SYM_in_schedule_definition26528 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_interval_in_schedule_definition26530 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_interval26544 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00000000E8000000L,0x0000000000000000L,0x000000000D000000L,0x0000000000000000L,0x0002014000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000002L,0x0000000000000000L,0x0004000000000000L,0x0000000000000050L});
	public static final BitSet FOLLOW_set_in_interval26546 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CURRENT_TIMESTAMP_in_timestamp26638 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALTER_in_alter_event_statement26657 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_DEFINER_in_alter_event_statement26662 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_EQ_SYM_in_alter_event_statement26664 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_user_name_in_alter_event_statement26668 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_CURRENT_USER_in_alter_event_statement26672 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_EVENT_SYM_in_alter_event_statement26680 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_event_name_in_alter_event_statement26682 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0202000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L,0x0000000100000000L});
	public static final BitSet FOLLOW_ON_in_alter_event_statement26687 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_SCHEDULE_SYM_in_alter_event_statement26689 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_schedule_definition_in_alter_event_statement26691 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0202000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L,0x0000000100000000L});
	public static final BitSet FOLLOW_ON_in_alter_event_statement26698 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_COMPLETION_SYM_in_alter_event_statement26700 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000010L});
	public static final BitSet FOLLOW_NOT_SYM_in_alter_event_statement26703 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_PRESERVE_SYM_in_alter_event_statement26707 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0202000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_RENAME_in_alter_event_statement26714 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_TO_SYM_in_alter_event_statement26716 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_event_name_in_alter_event_statement26718 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0202000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_ENABLE_SYM_in_alter_event_statement26726 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_DISABLE_SYM_in_alter_event_statement26730 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_DISABLE_SYM_in_alter_event_statement26735 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_ON_in_alter_event_statement26737 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_SLAVE_in_alter_event_statement26739 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_COMMENT_SYM_in_alter_event_statement26748 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_alter_event_statement26750 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_do_statement_in_alter_event_statement26757 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DROP_in_drop_event_statement26771 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_EVENT_SYM_in_drop_event_statement26773 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000140000000L});
	public static final BitSet FOLLOW_IF_in_drop_event_statement26776 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_EXISTS_in_drop_event_statement26778 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_event_name_in_drop_event_statement26782 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CREATE_in_create_index_statement26805 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_INDEX_SYM_in_create_index_statement26816 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_name_in_create_index_statement26818 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_index_type_in_create_index_statement26823 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_ON_in_create_index_statement26829 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_create_index_statement26831 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_create_index_statement26833 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_create_index_statement26835 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_create_index_statement26838 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_create_index_statement26840 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_create_index_statement26844 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_algorithm_option_in_create_index_statement26849 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_lock_option_in_create_index_statement26853 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_ALGORITHM_SYM_in_algorithm_option26864 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000002000000000L,0x0000000000002000L,0x0000100000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_algorithm_option26867 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_set_in_algorithm_option26871 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LOCK_in_lock_option26886 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000802000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_EQ_SYM_in_lock_option26889 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_set_in_lock_option26893 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DROP_in_drop_index_statement26913 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_INDEX_SYM_in_drop_index_statement26915 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_name_in_drop_index_statement26917 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_ON_in_drop_index_statement26919 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_drop_index_statement26921 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_algorithm_option_in_drop_index_statement26926 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_lock_option_in_drop_index_statement26930 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_CREATE_in_create_server_statement26957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_SERVER_SYM_in_create_server_statement26959 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_server_name_in_create_server_statement26961 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_FOREIGN_in_create_server_statement26965 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_DATA_SYM_in_create_server_statement26967 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_WRAPPER_SYM_in_create_server_statement26969 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_wrapper_name_in_create_server_statement26971 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_OPTIONS_SYM_in_create_server_statement26975 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_create_server_statement26977 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000004000L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0008020080000000L,0x0400000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_create_server_option_in_create_server_statement26979 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_create_server_statement26982 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000004000L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0008020080000000L,0x0400000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_create_server_option_in_create_server_statement26984 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_create_server_statement26988 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_HOST_SYM_in_create_server_option27001 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_string_literal_in_create_server_option27003 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DATABASE_in_create_server_option27013 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_string_literal_in_create_server_option27015 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_USER_in_create_server_option27025 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_string_literal_in_create_server_option27027 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PASSWORD_in_create_server_option27037 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_string_literal_in_create_server_option27039 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SOCKET_SYM_in_create_server_option27049 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_string_literal_in_create_server_option27051 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OWNER_SYM_in_create_server_option27061 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_string_literal_in_create_server_option27063 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PORT_SYM_in_create_server_option27073 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_create_server_option27075 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALTER_in_alter_server_statement27089 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_SERVER_SYM_in_alter_server_statement27091 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_server_name_in_alter_server_statement27093 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_OPTIONS_SYM_in_alter_server_statement27097 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_alter_server_statement27099 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_alter_server_option_in_alter_server_statement27101 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_alter_server_statement27104 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_alter_server_option_in_alter_server_statement27106 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_alter_server_statement27110 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_USER_in_alter_server_option27120 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_set_in_alter_server_option27123 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DROP_in_drop_server_statement27139 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_SERVER_SYM_in_drop_server_statement27141 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000140000000L});
	public static final BitSet FOLLOW_IF_in_drop_server_statement27144 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_EXISTS_in_drop_server_statement27146 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_server_name_in_drop_server_statement27150 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_table_statement1_in_create_table_statement27166 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_table_statement2_in_create_table_statement27170 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_table_statement3_in_create_table_statement27174 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CREATE_in_create_table_statement127186 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002100000L});
	public static final BitSet FOLLOW_TEMPORARY_in_create_table_statement127189 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_TABLE_in_create_table_statement127193 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000140000000L});
	public static final BitSet FOLLOW_IF_in_create_table_statement127196 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_NOT_SYM_in_create_table_statement127198 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_EXISTS_in_create_table_statement127200 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_create_table_statement127204 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_create_table_statement127208 = new BitSet(new long[]{0x0000000000000000L,0x0000400000040000L,0x0000000000000000L,0x0401000000000000L,0x0000002040000000L,0x0000000000000080L,0x0000000000000000L,0x0800000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_create_definition_in_create_table_statement127210 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_create_table_statement127213 = new BitSet(new long[]{0x0000000000000000L,0x0000400000040000L,0x0000000000000000L,0x0401000000000000L,0x0000002040000000L,0x0000000000000080L,0x0000000000000000L,0x0800000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_create_definition_in_create_table_statement127215 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_create_table_statement127219 = new BitSet(new long[]{0x0000005000000002L,0x0000100102024000L,0x0000022000010000L,0x0000000000000800L,0x0000802000000000L,0x0000000000000040L,0x0000020000400000L,0x0000030200000000L,0x0080000000000000L,0x0300000000000020L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_table_options_in_create_table_statement127224 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_partition_options_in_create_table_statement127231 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_select_statement_in_create_table_statement127238 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CREATE_in_create_table_statement227250 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002100000L});
	public static final BitSet FOLLOW_TEMPORARY_in_create_table_statement227253 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_TABLE_in_create_table_statement227257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000140000000L});
	public static final BitSet FOLLOW_IF_in_create_table_statement227260 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_NOT_SYM_in_create_table_statement227262 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_EXISTS_in_create_table_statement227264 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_create_table_statement227268 = new BitSet(new long[]{0x0000005000000000L,0x0000100102024000L,0x0000022000010000L,0x0000000000000800L,0x0000802000000000L,0x0000000000000040L,0x0000020000400000L,0x0000030200000000L,0x0080000000000000L,0x0300000000000020L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_table_options_in_create_table_statement227273 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_partition_options_in_create_table_statement227280 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_select_statement_in_create_table_statement227286 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CREATE_in_create_table_statement327296 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002100000L});
	public static final BitSet FOLLOW_TEMPORARY_in_create_table_statement327299 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_TABLE_in_create_table_statement327303 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000140000000L});
	public static final BitSet FOLLOW_IF_in_create_table_statement327306 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_NOT_SYM_in_create_table_statement327308 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_EXISTS_in_create_table_statement327310 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_create_table_statement327314 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000080000000L});
	public static final BitSet FOLLOW_LIKE_SYM_in_create_table_statement327321 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_create_table_statement327323 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_create_table_statement327329 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_LIKE_SYM_in_create_table_statement327331 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_create_table_statement327333 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_create_table_statement327335 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_column_name_in_create_definition27353 = new BitSet(new long[]{0x0281400000000000L,0x0000000000002000L,0x0100000400440000L,0x0000100000001000L,0x0048000000000000L,0x0006000000000000L,0x0000000070000000L,0x0000000000000400L,0x0000000000020000L,0x0000000040004000L,0x000003A220000000L,0x0000006000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_column_definition_in_create_definition27355 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CONSTRAINT_in_create_definition27368 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_constraint_symbol_name_in_create_definition27371 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_PRIMARY_SYM_in_create_definition27377 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_KEY_SYM_in_create_definition27379 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_index_type_in_create_definition27382 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_create_definition27386 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_create_definition27388 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_create_definition27391 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_create_definition27393 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_create_definition27397 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_index_option_in_create_definition27400 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_set_in_create_definition27414 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_index_name_in_create_definition27421 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_index_type_in_create_definition27426 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_create_definition27430 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_create_definition27432 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_create_definition27435 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_create_definition27437 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_create_definition27441 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_index_option_in_create_definition27444 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_CONSTRAINT_in_create_definition27459 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_constraint_symbol_name_in_create_definition27462 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_UNIQUE_SYM_in_create_definition27468 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002040000000L,0x0100000000000080L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_index_name_in_create_definition27478 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_index_type_in_create_definition27483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_create_definition27487 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_create_definition27489 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_create_definition27492 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_create_definition27494 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_create_definition27498 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_index_option_in_create_definition27501 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_set_in_create_definition27515 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002040000000L,0x0100000000000080L});
	public static final BitSet FOLLOW_index_name_in_create_definition27529 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_create_definition27533 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_create_definition27535 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_create_definition27538 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_create_definition27540 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_create_definition27544 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_index_option_in_create_definition27547 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_CONSTRAINT_in_create_definition27562 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_constraint_symbol_name_in_create_definition27565 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_FOREIGN_in_create_definition27571 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_KEY_SYM_in_create_definition27573 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_index_name_in_create_definition27576 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_create_definition27580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_create_definition27582 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_create_definition27585 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_create_definition27587 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_create_definition27591 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_reference_definition_in_create_definition27593 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CHECK_SYM_in_create_definition27605 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_create_definition27607 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_create_definition27609 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_create_definition27611 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_column_data_type_header_in_column_definition27624 = new BitSet(new long[]{0x0000001000000002L,0x0000000120000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000001000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_AUTO_INCREMENT_in_column_definition27629 = new BitSet(new long[]{0x0000000000000002L,0x0000000120000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000001000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_UNIQUE_SYM_in_column_definition27636 = new BitSet(new long[]{0x0000000000000002L,0x0000000120000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_KEY_SYM_in_column_definition27639 = new BitSet(new long[]{0x0000000000000002L,0x0000000120000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_PRIMARY_SYM_in_column_definition27647 = new BitSet(new long[]{0x0000000000000002L,0x0000000120000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_KEY_SYM_in_column_definition27650 = new BitSet(new long[]{0x0000000000000002L,0x0000000120000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_COMMENT_SYM_in_column_definition27661 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_column_definition27663 = new BitSet(new long[]{0x0000000000000002L,0x0000000020000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_COLUMN_FORMAT_in_column_definition27670 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000002000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_set_in_column_definition27672 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_reference_definition_in_column_definition27685 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOT_SYM_in_null_or_notnull27698 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_NULL_SYM_in_null_or_notnull27700 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NULL_SYM_in_null_or_notnull27705 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BIT_SYM_in_column_data_type_header27720 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header27722 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header27724 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header27726 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header27731 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header27736 = new BitSet(new long[]{0x0020000000000000L});
	public static final BitSet FOLLOW_bit_literal_in_column_data_type_header27738 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TINYINT_in_column_data_type_header27752 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header27754 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header27756 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header27758 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_UNSIGNED_SYM_in_column_data_type_header27763 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_ZEROFILL_in_column_data_type_header27768 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header27773 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header27778 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header27780 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SMALLINT_in_column_data_type_header27794 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header27796 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header27798 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header27800 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_UNSIGNED_SYM_in_column_data_type_header27805 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_ZEROFILL_in_column_data_type_header27810 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header27815 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header27820 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header27822 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MEDIUMINT_in_column_data_type_header27836 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header27838 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header27840 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header27842 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_UNSIGNED_SYM_in_column_data_type_header27847 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_ZEROFILL_in_column_data_type_header27852 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header27857 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header27862 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header27864 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INT_SYM_in_column_data_type_header27878 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header27880 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header27882 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header27884 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_UNSIGNED_SYM_in_column_data_type_header27889 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_ZEROFILL_in_column_data_type_header27894 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header27899 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header27904 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header27906 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INTEGER_SYM_in_column_data_type_header27920 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header27922 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header27924 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header27926 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_UNSIGNED_SYM_in_column_data_type_header27931 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_ZEROFILL_in_column_data_type_header27936 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header27941 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header27946 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header27948 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BIGINT_in_column_data_type_header27962 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header27964 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header27966 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header27968 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_UNSIGNED_SYM_in_column_data_type_header27973 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_ZEROFILL_in_column_data_type_header27978 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header27983 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header27988 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header27990 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REAL_in_column_data_type_header28004 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header28006 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header28008 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_column_data_type_header28010 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header28012 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header28014 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_UNSIGNED_SYM_in_column_data_type_header28019 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_ZEROFILL_in_column_data_type_header28024 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header28029 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header28034 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header28036 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOUBLE_SYM_in_column_data_type_header28050 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header28052 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header28054 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_column_data_type_header28056 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header28058 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header28060 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_UNSIGNED_SYM_in_column_data_type_header28065 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_ZEROFILL_in_column_data_type_header28070 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header28075 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header28080 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header28082 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FLOAT_SYM_in_column_data_type_header28096 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header28098 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header28100 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_column_data_type_header28102 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header28104 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header28106 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_UNSIGNED_SYM_in_column_data_type_header28111 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_ZEROFILL_in_column_data_type_header28116 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header28121 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header28126 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header28128 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DECIMAL_SYM_in_column_data_type_header28142 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header28144 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header28146 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_column_data_type_header28149 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header28151 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header28155 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_UNSIGNED_SYM_in_column_data_type_header28160 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_ZEROFILL_in_column_data_type_header28165 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header28170 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header28175 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header28177 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NUMERIC_SYM_in_column_data_type_header28191 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header28193 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header28195 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_column_data_type_header28198 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header28200 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header28204 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_UNSIGNED_SYM_in_column_data_type_header28209 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_ZEROFILL_in_column_data_type_header28214 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header28219 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header28224 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header28226 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DATE_SYM_in_column_data_type_header28240 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header28243 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header28248 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_column_data_type_header28250 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIME_SYM_in_column_data_type_header28264 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header28267 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header28272 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_column_data_type_header28274 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIMESTAMP_in_column_data_type_header28288 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header28291 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header28296 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_set_in_column_data_type_header28298 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DATETIME_in_column_data_type_header28316 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header28319 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header28324 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_set_in_column_data_type_header28326 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_YEAR_in_column_data_type_header28344 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header28347 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header28352 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_column_data_type_header28354 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CHAR_in_column_data_type_header28368 = new BitSet(new long[]{0x0000000000000002L,0x0000000002004000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header28373 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header28375 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header28377 = new BitSet(new long[]{0x0000000000000002L,0x0000000002004000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_column_data_type_header28382 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_column_data_type_header28384 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_column_data_type_header28386 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_COLLATE_SYM_in_column_data_type_header28391 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_collation_name_in_column_data_type_header28393 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header28398 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header28403 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_column_data_type_header28405 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VARCHAR_in_column_data_type_header28419 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header28421 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header28423 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header28425 = new BitSet(new long[]{0x0000000000000002L,0x0000000002004000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_column_data_type_header28430 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_column_data_type_header28432 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_column_data_type_header28434 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_COLLATE_SYM_in_column_data_type_header28439 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_collation_name_in_column_data_type_header28441 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header28446 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header28451 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_column_data_type_header28453 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BINARY_in_column_data_type_header28467 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header28472 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header28474 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header28476 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header28481 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header28486 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_column_data_type_header28488 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VARBINARY_in_column_data_type_header28502 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header28504 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header28506 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header28508 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header28511 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header28516 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_column_data_type_header28518 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TINYBLOB_in_column_data_type_header28532 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header28535 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BLOB_SYM_in_column_data_type_header28549 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header28552 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MEDIUMBLOB_in_column_data_type_header28566 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header28569 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LONGBLOB_in_column_data_type_header28583 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header28586 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TINYTEXT_in_column_data_type_header28600 = new BitSet(new long[]{0x0001000000000002L,0x0000000002004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_BINARY_in_column_data_type_header28605 = new BitSet(new long[]{0x0000000000000002L,0x0000000002004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_column_data_type_header28610 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_column_data_type_header28612 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_column_data_type_header28614 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_COLLATE_SYM_in_column_data_type_header28619 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_collation_name_in_column_data_type_header28621 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header28626 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TEXT_SYM_in_column_data_type_header28640 = new BitSet(new long[]{0x0001000000000002L,0x0000000002004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_BINARY_in_column_data_type_header28645 = new BitSet(new long[]{0x0000000000000002L,0x0000000002004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_column_data_type_header28650 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_column_data_type_header28652 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_column_data_type_header28654 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_COLLATE_SYM_in_column_data_type_header28659 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_collation_name_in_column_data_type_header28661 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header28666 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MEDIUMTEXT_in_column_data_type_header28680 = new BitSet(new long[]{0x0001000000000002L,0x0000000002004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_BINARY_in_column_data_type_header28683 = new BitSet(new long[]{0x0000000000000002L,0x0000000002004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_column_data_type_header28688 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_column_data_type_header28690 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_column_data_type_header28692 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_COLLATE_SYM_in_column_data_type_header28697 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_collation_name_in_column_data_type_header28699 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header28704 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LONGTEXT_in_column_data_type_header28718 = new BitSet(new long[]{0x0001000000000002L,0x0000000002004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_BINARY_in_column_data_type_header28723 = new BitSet(new long[]{0x0000000000000002L,0x0000000002004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_column_data_type_header28728 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_column_data_type_header28730 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_column_data_type_header28732 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_COLLATE_SYM_in_column_data_type_header28737 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_collation_name_in_column_data_type_header28739 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header28744 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ENUM_in_column_data_type_header28758 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header28763 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_column_data_type_header28765 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_column_data_type_header28768 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_column_data_type_header28770 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header28774 = new BitSet(new long[]{0x0000000000000002L,0x0000000002004000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_column_data_type_header28777 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_column_data_type_header28779 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_column_data_type_header28781 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_COLLATE_SYM_in_column_data_type_header28786 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_collation_name_in_column_data_type_header28788 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header28793 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header28798 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_column_data_type_header28800 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SET_SYM_in_column_data_type_header28814 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header28816 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_column_data_type_header28818 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_column_data_type_header28821 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_column_data_type_header28823 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header28827 = new BitSet(new long[]{0x0000000000000002L,0x0000000002004000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_column_data_type_header28830 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_column_data_type_header28832 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_column_data_type_header28834 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_COLLATE_SYM_in_column_data_type_header28839 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_collation_name_in_column_data_type_header28841 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header28846 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header28851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_column_data_type_header28853 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_column_name_in_index_column_name28871 = new BitSet(new long[]{0x0000000002000002L,0x0000000000000000L,0x0000080000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_index_column_name28874 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_index_column_name28876 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_index_column_name28878 = new BitSet(new long[]{0x0000000002000002L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_REFERENCES_in_reference_definition28899 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_reference_definition28901 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_reference_definition28903 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_reference_definition28905 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_reference_definition28908 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_reference_definition28910 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_reference_definition28914 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L,0x0000000000020000L});
	public static final BitSet FOLLOW_MATCH_in_reference_definition28921 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_FULL_in_reference_definition28923 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_MATCH_in_reference_definition28929 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_PARTIAL_in_reference_definition28931 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_MATCH_in_reference_definition28937 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_SIMPLE_SYM_in_reference_definition28939 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_ON_in_reference_definition28948 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_DELETE_SYM_in_reference_definition28950 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000080000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_reference_option_in_reference_definition28952 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_ON_in_reference_definition28959 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_UPDATE_in_reference_definition28961 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000080000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_reference_option_in_reference_definition28963 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RESTRICT_in_reference_option28975 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CASCADE_in_reference_option28981 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SET_SYM_in_reference_option28987 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_NULL_SYM_in_reference_option28989 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NO_SYM_in_reference_option28995 = new BitSet(new long[]{0x0000000000000080L});
	public static final BitSet FOLLOW_ACTION_in_reference_option28997 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_option_in_table_options29008 = new BitSet(new long[]{0x0000005000000002L,0x0000100182024000L,0x0000022000010000L,0x0000000000000800L,0x0000802000000000L,0x0000000000000040L,0x0000020000400000L,0x0000020200000000L,0x0080000000000000L,0x0300000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_COMMA_in_table_options29013 = new BitSet(new long[]{0x0000005000000000L,0x0000100102024000L,0x0000022000010000L,0x0000000000000800L,0x0000802000000000L,0x0000000000000040L,0x0000020000400000L,0x0000020200000000L,0x0080000000000000L,0x0300000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_table_option_in_table_options29018 = new BitSet(new long[]{0x0000005000000002L,0x0000100182024000L,0x0000022000010000L,0x0000000000000800L,0x0000802000000000L,0x0000000000000040L,0x0000020000400000L,0x0000020200000000L,0x0080000000000000L,0x0300000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_ENGINE_SYM_in_table_option29034 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000040000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option29037 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_engine_name_in_table_option29041 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AUTO_INCREMENT_in_table_option29053 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0004000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option29056 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_table_option29060 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AVG_ROW_LENGTH_in_table_option29072 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0004000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option29075 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_table_option29079 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_table_option29092 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_table_option29096 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_table_option29098 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000062000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option29101 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_table_option29105 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CHECKSUM_SYM_in_table_option29117 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0004000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option29120 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_table_option29124 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_table_option29137 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_COLLATE_SYM_in_table_option29141 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000040000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option29144 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_collation_name_in_table_option29148 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COMMENT_SYM_in_table_option29160 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option29163 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_table_option29167 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CONNECTION_SYM_in_table_option29179 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option29182 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_table_option29186 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DATA_SYM_in_table_option29198 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_DIRECTORY_SYM_in_table_option29200 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option29203 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_table_option29207 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DELAY_KEY_WRITE_SYM_in_table_option29219 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0004000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option29222 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_table_option29226 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INDEX_SYM_in_table_option29238 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_DIRECTORY_SYM_in_table_option29240 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option29243 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_table_option29247 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INSERT_METHOD_in_table_option29259 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000002000L,0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option29262 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_set_in_table_option29266 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KEY_BLOCK_SIZE_in_table_option29290 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0004000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option29293 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_table_option29297 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MAX_ROWS_in_table_option29309 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0004000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option29312 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_table_option29316 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MIN_ROWS_in_table_option29328 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0004000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option29331 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_table_option29335 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PACK_KEYS_SYM_in_table_option29347 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000002000L,0x0004000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option29350 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_set_in_table_option29354 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PASSWORD_in_table_option29372 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option29375 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_table_option29379 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ROW_FORMAT_SYM_in_table_option29391 = new BitSet(new long[]{0x0000000000000000L,0x0000004800000000L,0x4000002000000000L,0x0000080000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option29394 = new BitSet(new long[]{0x0000000000000000L,0x0000004800000000L,0x4000002000000000L,0x0000080000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_set_in_table_option29398 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STATS_AUTO_RECALC_in_table_option29422 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000002000L,0x0004000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option29425 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_set_in_table_option29429 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STATS_PERSISTENT_in_table_option29447 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000002000L,0x0004000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option29450 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_set_in_table_option29454 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_UNION_SYM_in_table_option29472 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option29475 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_table_option29479 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_table_option29481 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_table_option29484 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_table_option29486 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_table_option29490 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PARTITION_SYM_in_partition_options29503 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_BY_SYM_in_partition_options29505 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000001200000080L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_LINEAR_SYM_in_partition_options29521 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_HASH_SYM_in_partition_options29525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_partition_options29527 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_partition_options29529 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_partition_options29531 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LINEAR_SYM_in_partition_options29544 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_KEY_SYM_in_partition_options29548 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_partition_options29550 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_column_list_in_partition_options29552 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_partition_options29554 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_RANGE_SYM_in_partition_options29566 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_partition_options29568 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_partition_options29570 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_partition_options29572 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_COLUMNS_SYM_in_partition_options29576 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_partition_options29578 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_column_list_in_partition_options29580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_partition_options29582 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LIST_SYM_in_partition_options29595 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_partition_options29597 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_partition_options29599 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_partition_options29601 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_COLUMNS_SYM_in_partition_options29605 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_partition_options29607 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_column_list_in_partition_options29609 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_partition_options29611 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_PARTITIONS_SYM_in_partition_options29626 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_partition_options29628 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_SUBPARTITION_SYM_in_partition_options29643 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_BY_SYM_in_partition_options29645 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000200000080L});
	public static final BitSet FOLLOW_LINEAR_SYM_in_partition_options29656 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_HASH_SYM_in_partition_options29660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_partition_options29662 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_partition_options29664 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_partition_options29666 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_LINEAR_SYM_in_partition_options29675 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_KEY_SYM_in_partition_options29679 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_partition_options29681 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_column_list_in_partition_options29683 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_partition_options29685 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_SUBPARTITIONS_SYM_in_partition_options29696 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_partition_options29698 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_partition_options29713 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_partition_definition_in_partition_options29715 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_partition_options29719 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_partition_definition_in_partition_options29722 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_partition_options29726 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PARTITION_SYM_in_partition_definition29738 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_partition_name_in_partition_definition29740 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000010000L,0x0000000000000800L,0x0000002000000000L,0x0100000000000000L,0x0000020000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L,0x0000000800000000L});
	public static final BitSet FOLLOW_VALUES_in_partition_definition29753 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_LESS_SYM_in_partition_definition29769 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_THAN_SYM_in_partition_definition29771 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_LPAREN_in_partition_definition29776 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_expression_list_in_partition_definition29778 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_partition_definition29780 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000010000L,0x0000000000000800L,0x0000002000000000L,0x0100000000000000L,0x0000020000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_MAXVALUE_SYM_in_partition_definition29785 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000010000L,0x0000000000000800L,0x0000002000000000L,0x0100000000000000L,0x0000020000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_IN_SYM_in_partition_definition29806 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_partition_definition29808 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_expression_list_in_partition_definition29810 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_partition_definition29812 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000010000L,0x0000000000000800L,0x0000002000000000L,0x0100000000000000L,0x0000020000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_STORAGE_SYM_in_partition_definition29833 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_ENGINE_SYM_in_partition_definition29837 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000040000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_partition_definition29840 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_engine_name_in_partition_definition29844 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000010000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L,0x0000020000400000L});
	public static final BitSet FOLLOW_COMMENT_SYM_in_partition_definition29851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_partition_definition29854 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_partition_definition29858 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000010000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L,0x0000020000400000L});
	public static final BitSet FOLLOW_DATA_SYM_in_partition_definition29866 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_DIRECTORY_SYM_in_partition_definition29868 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_partition_definition29871 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_partition_definition29875 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L,0x0000020000400000L});
	public static final BitSet FOLLOW_INDEX_SYM_in_partition_definition29882 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_DIRECTORY_SYM_in_partition_definition29884 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_partition_definition29887 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_partition_definition29891 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000020000400000L});
	public static final BitSet FOLLOW_MAX_ROWS_in_partition_definition29898 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0004000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_partition_definition29901 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_partition_definition29905 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_MIN_ROWS_in_partition_definition29912 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0004000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_partition_definition29915 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_partition_definition29919 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_partition_definition29926 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_subpartition_definition_in_partition_definition29928 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_partition_definition29931 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_subpartition_definition_in_partition_definition29934 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_partition_definition29938 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SUBPARTITION_SYM_in_subpartition_definition29950 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_partition_logical_name_in_subpartition_definition29952 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000010000L,0x0000000000000800L,0x0000002000000000L,0x0000000000000000L,0x0000020000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_STORAGE_SYM_in_subpartition_definition29958 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_ENGINE_SYM_in_subpartition_definition29962 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000040000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_subpartition_definition29965 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_engine_name_in_subpartition_definition29969 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000010000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000020000400000L});
	public static final BitSet FOLLOW_COMMENT_SYM_in_subpartition_definition29976 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_subpartition_definition29979 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_subpartition_definition29983 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000010000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000020000400000L});
	public static final BitSet FOLLOW_DATA_SYM_in_subpartition_definition29991 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_DIRECTORY_SYM_in_subpartition_definition29993 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_subpartition_definition29996 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_subpartition_definition30000 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000020000400000L});
	public static final BitSet FOLLOW_INDEX_SYM_in_subpartition_definition30007 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_DIRECTORY_SYM_in_subpartition_definition30009 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_subpartition_definition30012 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_subpartition_definition30016 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000400000L});
	public static final BitSet FOLLOW_MAX_ROWS_in_subpartition_definition30023 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0004000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_subpartition_definition30026 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_subpartition_definition30030 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_MIN_ROWS_in_subpartition_definition30037 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0004000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_subpartition_definition30040 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_subpartition_definition30044 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_length30056 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALTER_in_alter_table_statement30067 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_IGNORE_SYM_in_alter_table_statement30070 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_TABLE_in_alter_table_statement30074 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_alter_table_statement30076 = new BitSet(new long[]{0x0000005000190402L,0x0010100102464800L,0x0406022000010000L,0x0000800000400810L,0x0000802800000000L,0x0000040000000040L,0x0000820000400000L,0x0000030204200000L,0x0080000780080000L,0x0300000000000000L,0x0040000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_alter_table_specification_in_alter_table_statement30082 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_COMMA_in_alter_table_statement30085 = new BitSet(new long[]{0x0000005000190400L,0x0010100102464800L,0x0406022000010000L,0x0000800000400810L,0x0000802800000000L,0x0000040000000040L,0x0000820000400000L,0x0000020204200000L,0x0080000780080000L,0x0300000000000000L,0x0040000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_alter_table_specification_in_alter_table_statement30087 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_partition_options_in_alter_table_statement30098 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_options_in_alter_table_specification30112 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ADD_SYM_in_alter_table_specification30120 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_COLUMN_SYM_in_alter_table_specification30123 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_name_in_alter_table_specification30127 = new BitSet(new long[]{0x0281400000000000L,0x0000000000002000L,0x0100000400440000L,0x0000100000001000L,0x0048000000000000L,0x0006000000000000L,0x0000000070000000L,0x0000000000000400L,0x0000000000020000L,0x0000000040004000L,0x000003A220000000L,0x0000006000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_column_definition_in_alter_table_specification30129 = new BitSet(new long[]{0x0000000000002002L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_set_in_alter_table_specification30133 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_name_in_alter_table_specification30139 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ADD_SYM_in_alter_table_specification30152 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_COLUMN_SYM_in_alter_table_specification30155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_alter_table_specification30159 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_definitions_in_alter_table_specification30161 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_alter_table_specification30163 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ADD_SYM_in_alter_table_specification30173 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_set_in_alter_table_specification30175 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_index_name_in_alter_table_specification30182 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_index_type_in_alter_table_specification30187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_alter_table_specification30191 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_names_in_alter_table_specification30193 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_alter_table_specification30195 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_index_option_in_alter_table_specification30198 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_ADD_SYM_in_alter_table_specification30210 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_CONSTRAINT_in_alter_table_specification30213 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_constraint_symbol_name_in_alter_table_specification30216 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_PRIMARY_SYM_in_alter_table_specification30222 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_KEY_SYM_in_alter_table_specification30224 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_index_type_in_alter_table_specification30227 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_alter_table_specification30231 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_names_in_alter_table_specification30233 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_alter_table_specification30235 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_index_option_in_alter_table_specification30238 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_ADD_SYM_in_alter_table_specification30260 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_CONSTRAINT_in_alter_table_specification30263 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_constraint_symbol_name_in_alter_table_specification30266 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_UNIQUE_SYM_in_alter_table_specification30272 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002040000000L,0x0100000000000080L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_index_name_in_alter_table_specification30282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_index_type_in_alter_table_specification30292 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_alter_table_specification30296 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_alter_table_specification30298 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_alter_table_specification30301 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_alter_table_specification30303 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_alter_table_specification30307 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_index_option_in_alter_table_specification30310 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_ADD_SYM_in_alter_table_specification30326 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_FULLTEXT_SYM_in_alter_table_specification30328 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002040000000L,0x0100000000000080L});
	public static final BitSet FOLLOW_index_name_in_alter_table_specification30338 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_alter_table_specification30342 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_names_in_alter_table_specification30344 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_alter_table_specification30346 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_index_option_in_alter_table_specification30349 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_ADD_SYM_in_alter_table_specification30361 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_SPATIAL_SYM_in_alter_table_specification30363 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002040000000L,0x0100000000000080L});
	public static final BitSet FOLLOW_index_name_in_alter_table_specification30373 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_alter_table_specification30377 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_names_in_alter_table_specification30379 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_alter_table_specification30381 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_index_option_in_alter_table_specification30384 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_ADD_SYM_in_alter_table_specification30396 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_CONSTRAINT_in_alter_table_specification30399 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_constraint_symbol_name_in_alter_table_specification30402 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_FOREIGN_in_alter_table_specification30408 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_KEY_SYM_in_alter_table_specification30410 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_index_name_in_alter_table_specification30413 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_alter_table_specification30417 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_names_in_alter_table_specification30419 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_alter_table_specification30421 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_reference_definition_in_alter_table_specification30423 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALGORITHM_SYM_in_alter_table_specification30433 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000002000000000L,0x0000000000002000L,0x0000100000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_alter_table_specification30436 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_set_in_alter_table_specification30440 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALTER_in_alter_table_specification30456 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_COLUMN_SYM_in_alter_table_specification30459 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_name_in_alter_table_specification30463 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_alter_table_specification30467 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_alter_table_specification30469 = new BitSet(new long[]{0x0020000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0004000000080000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000200L,0x0000000000040000L,0x0000000000000000L,0x0020000010000000L});
	public static final BitSet FOLLOW_literal_value_in_alter_table_specification30471 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DROP_in_alter_table_specification30477 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_alter_table_specification30479 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CHANGE_in_alter_table_specification30491 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_COLUMN_SYM_in_alter_table_specification30494 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_name_in_alter_table_specification30498 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_name_in_alter_table_specification30500 = new BitSet(new long[]{0x0281400000000000L,0x0000000000002000L,0x0100000400440000L,0x0000100000001000L,0x0048000000000000L,0x0006000000000000L,0x0000000070000000L,0x0000000000000400L,0x0000000000020000L,0x0000000040004000L,0x000003A220000000L,0x0000006000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_column_definition_in_alter_table_specification30502 = new BitSet(new long[]{0x0000000000002002L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_FIRST_SYM_in_alter_table_specification30505 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AFTER_SYM_in_alter_table_specification30507 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_name_in_alter_table_specification30509 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LOCK_in_alter_table_specification30521 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000802000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_EQ_SYM_in_alter_table_specification30524 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_set_in_alter_table_specification30528 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MODIFY_SYM_in_alter_table_specification30546 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_COLUMN_SYM_in_alter_table_specification30549 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_name_in_alter_table_specification30553 = new BitSet(new long[]{0x0281400000000000L,0x0000000000002000L,0x0100000400440000L,0x0000100000001000L,0x0048000000000000L,0x0006000000000000L,0x0000000070000000L,0x0000000000000400L,0x0000000000020000L,0x0000000040004000L,0x000003A220000000L,0x0000006000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_column_definition_in_alter_table_specification30555 = new BitSet(new long[]{0x0000000000002002L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_FIRST_SYM_in_alter_table_specification30558 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AFTER_SYM_in_alter_table_specification30562 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_name_in_alter_table_specification30564 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DROP_in_alter_table_specification30576 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_COLUMN_SYM_in_alter_table_specification30579 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_name_in_alter_table_specification30583 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DROP_in_alter_table_specification30593 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_PRIMARY_SYM_in_alter_table_specification30595 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_KEY_SYM_in_alter_table_specification30597 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DROP_in_alter_table_specification30607 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_set_in_alter_table_specification30609 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_name_in_alter_table_specification30615 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DROP_in_alter_table_specification30625 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_FOREIGN_in_alter_table_specification30627 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_KEY_SYM_in_alter_table_specification30629 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_foreign_key_symbol_name_in_alter_table_specification30631 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DISABLE_SYM_in_alter_table_specification30641 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_KEYS_in_alter_table_specification30643 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ENABLE_SYM_in_alter_table_specification30653 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_KEYS_in_alter_table_specification30655 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RENAME_in_alter_table_specification30665 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_table_name_in_alter_table_specification30674 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ORDER_SYM_in_alter_table_specification30684 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_BY_SYM_in_alter_table_specification30686 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_name_in_alter_table_specification30688 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_alter_table_specification30691 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_name_in_alter_table_specification30693 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_CONVERT_SYM_in_alter_table_specification30705 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_TO_SYM_in_alter_table_specification30707 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_alter_table_specification30709 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_alter_table_specification30711 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_alter_table_specification30713 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_COLLATE_SYM_in_alter_table_specification30716 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_collation_name_in_alter_table_specification30718 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_alter_table_specification30731 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_alter_table_specification30735 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_alter_table_specification30737 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000062000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_alter_table_specification30740 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_alter_table_specification30744 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_COLLATE_SYM_in_alter_table_specification30747 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000040000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_alter_table_specification30750 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_collation_name_in_alter_table_specification30754 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DISCARD_in_alter_table_specification30766 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_TABLESPACE_in_alter_table_specification30768 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IMPORT_in_alter_table_specification30778 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_TABLESPACE_in_alter_table_specification30780 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FORCE_SYM_in_alter_table_specification30790 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ADD_SYM_in_alter_table_specification30800 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_PARTITION_SYM_in_alter_table_specification30802 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_alter_table_specification30804 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_partition_definition_in_alter_table_specification30806 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_alter_table_specification30808 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DROP_in_alter_table_specification30818 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_PARTITION_SYM_in_alter_table_specification30820 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_partition_names_in_alter_table_specification30822 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TRUNCATE_in_alter_table_specification30832 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_PARTITION_SYM_in_alter_table_specification30834 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_partition_names_in_alter_table_specification30837 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALL_in_alter_table_specification30841 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COALESCE_in_alter_table_specification30852 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_PARTITION_SYM_in_alter_table_specification30854 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_alter_table_specification30856 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REORGANIZE_SYM_in_alter_table_specification30866 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_PARTITION_SYM_in_alter_table_specification30868 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_partition_names_in_alter_table_specification30870 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_INTO_in_alter_table_specification30872 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_alter_table_specification30874 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_partition_definition_in_alter_table_specification30876 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_alter_table_specification30879 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_partition_definition_in_alter_table_specification30881 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_alter_table_specification30885 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXCHANGE_SYM_in_alter_table_specification30895 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_PARTITION_SYM_in_alter_table_specification30897 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_partition_name_in_alter_table_specification30899 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_WITH_in_alter_table_specification30901 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_TABLE_in_alter_table_specification30903 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_alter_table_specification30905 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ANALYZE_SYM_in_alter_table_specification30915 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_PARTITION_SYM_in_alter_table_specification30917 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_partition_names_in_alter_table_specification30920 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALL_in_alter_table_specification30924 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CHECK_SYM_in_alter_table_specification30935 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_PARTITION_SYM_in_alter_table_specification30937 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_partition_names_in_alter_table_specification30940 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALL_in_alter_table_specification30944 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OPTIMIZE_in_alter_table_specification30955 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_PARTITION_SYM_in_alter_table_specification30957 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_partition_names_in_alter_table_specification30960 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALL_in_alter_table_specification30964 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REBUILD_SYM_in_alter_table_specification30975 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_PARTITION_SYM_in_alter_table_specification30977 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_partition_names_in_alter_table_specification30980 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALL_in_alter_table_specification30984 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REPAIR_in_alter_table_specification30995 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_PARTITION_SYM_in_alter_table_specification30997 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_partition_names_in_alter_table_specification31000 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALL_in_alter_table_specification31004 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REMOVE_SYM_in_alter_table_specification31015 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_PARTITIONING_SYM_in_alter_table_specification31017 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_index_column_name_in_index_column_names31028 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_index_column_names31031 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_index_column_names31033 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_USING_SYM_in_index_type31043 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_set_in_index_type31045 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KEY_BLOCK_SIZE_in_index_option31064 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0004000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_index_option31067 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_index_option31071 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_index_type_in_index_option31079 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WITH_in_index_option31087 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_PARSER_SYM_in_index_option31089 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_parser_name_in_index_option31091 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COMMENT_SYM_in_index_option31101 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_index_option31103 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_column_name_in_column_definitions31114 = new BitSet(new long[]{0x0281400000000000L,0x0000000000002000L,0x0100000400440000L,0x0000100000001000L,0x0048000000000000L,0x0006000000000000L,0x0000000070000000L,0x0000000000000400L,0x0000000000020000L,0x0000000040004000L,0x000003A220000000L,0x0000006000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_column_definition_in_column_definitions31116 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_column_definitions31119 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_name_in_column_definitions31121 = new BitSet(new long[]{0x0281400000000000L,0x0000000000002000L,0x0100000400440000L,0x0000100000001000L,0x0048000000000000L,0x0006000000000000L,0x0000000070000000L,0x0000000000000400L,0x0000000000020000L,0x0000000040004000L,0x000003A220000000L,0x0000006000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_column_definition_in_column_definitions31123 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_RENAME_in_rename_table_statement31137 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_TABLE_in_rename_table_statement31139 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_rename_table_statement31144 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_TO_SYM_in_rename_table_statement31146 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_rename_table_statement31148 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_rename_table_statement31153 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_rename_table_statement31155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_TO_SYM_in_rename_table_statement31157 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_rename_table_statement31159 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_DROP_in_drop_table_statement31173 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002100000L});
	public static final BitSet FOLLOW_TEMPORARY_in_drop_table_statement31176 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_TABLE_in_drop_table_statement31180 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000140000000L});
	public static final BitSet FOLLOW_IF_in_drop_table_statement31183 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_EXISTS_in_drop_table_statement31185 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_drop_table_statement31191 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_COMMA_in_drop_table_statement31194 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_drop_table_statement31196 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_TRUNCATE_in_truncate_table_statement31221 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_TABLE_in_truncate_table_statement31224 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_truncate_table_statement31228 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CREATE_in_create_view_statement31249 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_OR_SYM_in_create_view_statement31252 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_REPLACE_in_create_view_statement31254 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_create_view_body_in_create_view_statement31260 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALGORITHM_SYM_in_create_view_body31270 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_EQ_SYM_in_create_view_body31272 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000004000000L});
	public static final BitSet FOLLOW_set_in_create_view_body31274 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_DEFINER_in_create_view_body31291 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_EQ_SYM_in_create_view_body31293 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_user_name_in_create_view_body31296 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_CURRENT_USER_in_create_view_body31300 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_SQL_SYM_in_create_view_body31309 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SECURITY_SYM_in_create_view_body31311 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_set_in_create_view_body31313 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_VIEW_SYM_in_create_view_body31327 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_view_name_in_create_view_body31329 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_create_view_body31332 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_column_list_in_create_view_body31334 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_create_view_body31336 = new BitSet(new long[]{0x0000000040000000L});
	public static final BitSet FOLLOW_AS_SYM_in_create_view_body31342 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_select_statement_in_create_view_body31344 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_WITH_in_create_view_body31349 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_CHECK_SYM_in_create_view_body31360 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_OPTION_in_create_view_body31362 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALTER_in_alter_view_statement31376 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_create_view_body_in_alter_view_statement31380 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DROP_in_drop_view_statement31392 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_VIEW_SYM_in_drop_view_statement31394 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000140000000L});
	public static final BitSet FOLLOW_IF_in_drop_view_statement31397 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_EXISTS_in_drop_view_statement31399 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_view_name_in_drop_view_statement31405 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_COMMA_in_drop_view_statement31408 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_view_name_in_drop_view_statement31410 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_IN_SYM_in_synpred54_SQL20717 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_NATURAL_in_synpred54_SQL20719 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_LANGUAGE_in_synpred54_SQL20721 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_MODE_SYM_in_synpred54_SQL20723 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IN_SYM_in_synpred55_SQL20731 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_NATURAL_in_synpred55_SQL20733 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_LANGUAGE_in_synpred55_SQL20735 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_MODE_SYM_in_synpred55_SQL20737 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_WITH_in_synpred55_SQL20739 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_QUERY_SYM_in_synpred55_SQL20741 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_EXPANSION_SYM_in_synpred55_SQL20743 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_char_functions_in_synpred87_SQL21056 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OR_SYM_in_synpred268_SQL22488 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_exp_factor1_in_synpred268_SQL22492 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_XOR_in_synpred269_SQL22507 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_exp_factor2_in_synpred269_SQL22511 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AND_SYM_in_synpred270_SQL22526 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_exp_factor3_in_synpred270_SQL22530 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOT_SYM_in_synpred271_SQL22542 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IS_SYM_in_synpred274_SQL22560 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_NOT_SYM_in_synpred274_SQL22565 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_boolean_literal_in_synpred274_SQL22572 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NULL_SYM_in_synpred274_SQL22574 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_predicate_in_synpred275_SQL22591 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000804L,0x0200000020000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_relational_op_in_synpred275_SQL22593 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_predicate_in_synpred275_SQL22595 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_predicate_in_synpred278_SQL22617 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000804L,0x0200000020000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_relational_op_in_synpred278_SQL22619 = new BitSet(new long[]{0x0000000000420000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_subquery_in_synpred278_SQL22632 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOT_SYM_in_synpred280_SQL22643 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_EXISTS_in_synpred280_SQL22646 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_subquery_in_synpred280_SQL22650 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_expr_in_synpred283_SQL22671 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_NOT_SYM_in_synpred283_SQL22674 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_IN_SYM_in_synpred283_SQL22678 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_subquery_in_synpred283_SQL22683 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_list_in_synpred283_SQL22687 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_expr_in_synpred285_SQL22698 = new BitSet(new long[]{0x0000100000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_NOT_SYM_in_synpred285_SQL22701 = new BitSet(new long[]{0x0000100000000000L});
	public static final BitSet FOLLOW_BETWEEN_in_synpred285_SQL22705 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_synpred285_SQL22709 = new BitSet(new long[]{0x0000000000200000L});
	public static final BitSet FOLLOW_AND_SYM_in_synpred285_SQL22711 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_predicate_in_synpred285_SQL22715 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_expr_in_synpred286_SQL22726 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_SOUNDS_SYM_in_synpred286_SQL22728 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_LIKE_SYM_in_synpred286_SQL22730 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_synpred286_SQL22734 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ESCAPE_SYM_in_synpred288_SQL22759 = new BitSet(new long[]{0x0178882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x0206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_simple_expr_in_synpred288_SQL22763 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_expr_in_synpred289_SQL22745 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_NOT_SYM_in_synpred289_SQL22748 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_LIKE_SYM_in_synpred289_SQL22752 = new BitSet(new long[]{0x0178882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x0206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_simple_expr_in_synpred289_SQL22756 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_ESCAPE_SYM_in_synpred289_SQL22759 = new BitSet(new long[]{0x0178882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x0206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_simple_expr_in_synpred289_SQL22763 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_expr_in_synpred291_SQL22775 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000002000000L});
	public static final BitSet FOLLOW_NOT_SYM_in_synpred291_SQL22778 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_REGEXP_in_synpred291_SQL22782 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_synpred291_SQL22786 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VERTBAR_in_synpred292_SQL22814 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_factor1_in_synpred292_SQL22818 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BITAND_in_synpred293_SQL22834 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_factor2_in_synpred293_SQL22838 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_synpred295_SQL22854 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_factor3_in_synpred295_SQL22862 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_synpred297_SQL22878 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_factor4_in_synpred297_SQL22886 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_synpred301_SQL22902 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_factor5_in_synpred301_SQL22914 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_synpred303_SQL22930 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_interval_expr_in_synpred303_SQL22938 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_synpred307_SQL22950 = new BitSet(new long[]{0x0178882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x0206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_simple_expr_in_synpred307_SQL22968 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CONVERT_SYM_in_synpred324_SQL23147 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_synpred324_SQL23149 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_synpred324_SQL23151 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_synpred324_SQL23153 = new BitSet(new long[]{0x0001000000000000L,0x0000000000002000L,0x0000000400440000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0000002000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_cast_data_type_in_synpred324_SQL23155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_synpred324_SQL23157 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CONVERT_SYM_in_synpred325_SQL23169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_synpred325_SQL23171 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_synpred325_SQL23173 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_USING_SYM_in_synpred325_SQL23175 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_transcoding_name_in_synpred325_SQL23177 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_synpred325_SQL23179 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_search_modifier_in_synpred335_SQL23395 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_factor1_in_synpred340_SQL23511 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_factor3_part_in_synpred343_SQL23555 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_partition_clause_in_synpred345_SQL23589 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_join_condition_in_synpred353_SQL23679 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ON_in_synpred354_SQL23701 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_synpred354_SQL23703 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_synpred373_SQL24003 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_column_spec_in_synpred425_SQL24563 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_synpred426_SQL24567 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COMMA_in_synpred432_SQL24692 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_displayed_column_in_synpred432_SQL24696 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_column_spec_in_synpred438_SQL24803 = new BitSet(new long[]{0x0000000040000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_alias_in_synpred438_SQL24806 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_expr_in_synpred469_SQL25157 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_expr_in_synpred470_SQL25166 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_synpred474_SQL25227 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_single_table_update_statement_in_synpred477_SQL25279 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COMMA_in_synpred489_SQL25423 = new BitSet(new long[]{0x0000000000080000L,0x0000000000000008L,0x0600040000000010L,0x0000000000000000L,0x0000400000002000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002100000000L,0x0000000000040020L,0x0040000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_root_statement_in_synpred489_SQL25425 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COMMA_in_synpred858_SQL29013 = new BitSet(new long[]{0x0000005000000000L,0x0000100102024000L,0x0000022000010000L,0x0000000000000800L,0x0000802000000000L,0x0000000000000040L,0x0000020000400000L,0x0000020200000000L,0x0080000000000000L,0x0300000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_table_option_in_synpred858_SQL29018 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_options_in_synpred963_SQL30112 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_synpred1042_SQL30731 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_synpred1042_SQL30735 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_synpred1042_SQL30737 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000062000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_synpred1042_SQL30740 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_synpred1042_SQL30744 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_COLLATE_SYM_in_synpred1042_SQL30747 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000040000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_synpred1042_SQL30750 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_collation_name_in_synpred1042_SQL30754 = new BitSet(new long[]{0x0000000000000002L});
}
