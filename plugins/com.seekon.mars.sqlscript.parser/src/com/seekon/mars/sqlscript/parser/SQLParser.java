// $ANTLR 3.x E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g 2013-03-30 16:42:02

  package com.seekon.mars.sqlscript.parser;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;


@SuppressWarnings("all")
public class SQLParser extends Parser {
	public static final String[] tokenNames = new String[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ABS", "ACCESSIBLE_SYM", "ACOS", 
		"ACTION", "ADDDATE", "ADDTIME", "ADD_SYM", "AES_DECRYPT", "AES_ENCRYPT", 
		"AFTER_SYM", "AGAINST", "AGGREGATE_SYM", "ALGORITHM_SYM", "ALL", "ALL_FIELDS", 
		"ALTER", "ANALYZE_SYM", "AND_SYM", "ANY", "ARMSCII8", "ARROW", "ASC", 
		"ASCII_SYM", "ASENSITIVE_SYM", "ASIN", "ASTERISK", "AS_SYM", "ATAN", "ATAN2", 
		"AT_SYM", "AUTHORS_SYM", "AUTOEXTEND_SIZE_SYM", "AUTO_INCREMENT", "AVG", 
		"AVG_ROW_LENGTH", "A_", "BACKUP_SYM", "BEFORE_SYM", "BEGIN_SYM", "BENCHMARK", 
		"BETWEEN", "BIG5", "BIGINT", "BIN", "BINARY", "BINLOG_SYM", "BITAND", 
		"BIT_AND", "BIT_LENGTH", "BIT_NUM", "BIT_OR", "BIT_SYM", "BIT_XOR", "BLOB_SYM", 
		"BLOCK_SYM", "BOOLEAN_SYM", "BOOL_SYM", "BOTH", "BTREE_SYM", "BYTE_SYM", 
		"BY_SYM", "B_", "CACHE_SYM", "CALL_SYM", "CASCADE", "CASCADED", "CASE_SYM", 
		"CAST_SYM", "CEIL", "CEILING", "CHAIN_SYM", "CHANGE", "CHANGED", "CHAR", 
		"CHARACTER_SYM", "CHARSET", "CHAR_LENGTH", "CHECKSUM_SYM", "CHECK_SYM", 
		"CIPHER_SYM", "CLIENT_SYM", "CLOSE_SYM", "COALESCE", "CODE_SYM", "COERCIBILITY", 
		"COLLATE_SYM", "COLLATION", "COLON", "COLUMNS_SYM", "COLUMN_FORMAT", "COLUMN_SYM", 
		"COMMA", "COMMENT_SYM", "COMMITTED_SYM", "COMMIT_SYM", "COMPACT_SYM", 
		"COMPLETION_SYM", "COMPRESS", "COMPRESSED_SYM", "CONCAT", "CONCAT_WS", 
		"CONCURRENT", "CONDITION_SYM", "CONNECTION_ID", "CONNECTION_SYM", "CONSISTENT_SYM", 
		"CONSTRAINT", "CONTAINS_SYM", "CONTEXT_SYM", "CONTINUE_SYM", "CONTRIBUTORS_SYM", 
		"CONV", "CONVERT_SYM", "CONVERT_TZ", "COPY_SYM", "COS", "COT", "COUNT", 
		"CP1250", "CP1251", "CP1256", "CP1257", "CP850", "CP852", "CP866", "CP932", 
		"CPU_SYM", "CRC32", "CREATE", "CROSECOND", "CROSS", "CUBE_SYM", "CURDATE", 
		"CURRENT_TIMESTAMP", "CURRENT_USER", "CURSOR_SYM", "CURTIME", "C_", "DATABASE", 
		"DATAFILE_SYM", "DATA_SYM", "DATEDIFF", "DATETIME", "DATE_ADD", "DATE_FORMAT", 
		"DATE_SUB", "DATE_SYM", "DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", 
		"DAY_HOUR", "DAY_MICROSECOND", "DAY_MINUTE", "DAY_SECOND", "DAY_SYM", 
		"DEALLOCATE_SYM", "DEC8", "DECIMAL_SYM", "DECLARE_SYM", "DECODE", "DEFAULT", 
		"DEFINER", "DEGREES", "DELAYED_SYM", "DELAY_KEY_WRITE_SYM", "DELETE_SYM", 
		"DESC", "DES_DECRYPT", "DES_ENCRYPT", "DES_KEY_FILE", "DETERMINISTIC_SYM", 
		"DIRECTORY_SYM", "DISABLE_SYM", "DISCARD", "DISK_SYM", "DISTINCT", "DISTINCTROW", 
		"DIVIDE", "DOT", "DOUBLE_SYM", "DO_SYM", "DROP", "DUAL_SYM", "DUMPFILE", 
		"DUPLICATE_SYM", "DYNAMIC_SYM", "D_", "EACH_SYM", "ELSE_SYM", "ELSIF_SYM", 
		"ELT", "ENABLE_SYM", "ENCLOSED", "ENCODE", "ENCRYPT", "ENDS_SYM", "END_SYM", 
		"ENGINES_SYM", "ENGINE_SYM", "ENUM", "EQ_SYM", "ERRORS", "ESCAPED", "ESCAPE_SYM", 
		"EUCJPMS", "EUCKR", "EVENTS_SYM", "EVENT_SYM", "EVERY_SYM", "EXCHANGE_SYM", 
		"EXCLUSIVE_SYM", "EXECUTE_SYM", "EXISTS", "EXIT_SYM", "EXP", "EXPANSION_SYM", 
		"EXPORT_SET", "EXTENDED_SYM", "EXTENT_SIZE_SYM", "EXTRACT", "E_", "FALSE_SYM", 
		"FAST_SYM", "FAULTS_SYM", "FETCH_SYM", "FIELD", "FIELDS_SYM", "FILE_SYM", 
		"FIND_IN_SET", "FIRST_SYM", "FIXED_SYM", "FLOAT_SYM", "FLOOR", "FLUSH_SYM", 
		"FORCE_SYM", "FOREIGN", "FORMAT", "FOR_SYM", "FOUND_ROWS", "FOUND_SYM", 
		"FROM", "FROM_BASE64", "FROM_DAYS", "FROM_UNIXTIME", "FULL", "FULLTEXT_SYM", 
		"FUNCTION_SYM", "F_", "GB2312", "GBK", "GEOMETRYCOLLECTION", "GEOMETRY_SYM", 
		"GEOSTD8", "GET", "GET_FORMAT", "GET_LOCK", "GLOBAL_SYM", "GRANT", "GRANTS", 
		"GREEK", "GROUP_CONCAT", "GROUP_SYM", "GTH", "G_", "HANDLER_SYM", "HASH_SYM", 
		"HAVING", "HEBREW", "HELP_SYM", "HEX", "HEX_DIGIT", "HEX_DIGIT_FRAGMENT", 
		"HIGH_PRIORITY", "HOSTS_SYM", "HOST_SYM", "HOUR", "HOUR_MICROSECOND", 
		"HOUR_MINUTE", "HOUR_SECOND", "HP8", "H_", "ID", "IDENTIFIED_SYM", "IF", 
		"IFNULL", "IGNORE_SYM", "IMPORT", "INDEXES", "INDEX_SYM", "INET_ATON", 
		"INET_NTOA", "INFILE", "INITIAL_SIZE_SYM", "INNER_SYM", "INOUT_SYM", "INPLACE_SYM", 
		"INSENSITIVE_SYM", "INSERT", "INSERT_METHOD", "INSTALL_SYM", "INSTR", 
		"INTEGER_NUM", "INTEGER_SYM", "INTERVAL_SYM", "INTO", "INT_SYM", "INVOKER_SYM", 
		"IN_SYM", "IO_SYM", "IPC_SYM", "ISOLATION", "ISSUER_SYM", "IS_FREE_LOCK", 
		"IS_SYM", "IS_USED_LOCK", "ITERATE_SYM", "I_", "JOIN_SYM", "J_", "KEYBCS2", 
		"KEYS", "KEY_BLOCK_SIZE", "KEY_SYM", "KILL_SYM", "KOI8R", "KOI8U", "K_", 
		"LANGUAGE", "LAST_DAY", "LAST_INSERT_ID", "LAST_SYM", "LATIN1", "LATIN1_BIN", 
		"LATIN1_GENERAL_CS", "LATIN2", "LATIN5", "LATIN7", "LBRACK", "LEADING", 
		"LEAVES", "LEAVE_SYM", "LEFT", "LENGTH", "LESS_SYM", "LET", "LEVEL_SYM", 
		"LIKE_SYM", "LIMIT", "LINEAR_SYM", "LINES", "LINESTRING", "LIST_SYM", 
		"LN", "LOAD", "LOAD_FILE", "LOCAL_SYM", "LOCATE", "LOCK", "LOCKS_SYM", 
		"LOG", "LOG10", "LOG2", "LOGFILE_SYM", "LOGS_SYM", "LONGBLOB", "LONGTEXT", 
		"LONG_SYM", "LOOP_SYM", "LOWER", "LOW_PRIORITY", "LPAD", "LPAREN", "LTH", 
		"LTRIM", "L_", "MACCE", "MACROMAN", "MAKEDATE", "MAKETIME", "MAKE_SET", 
		"MASTER_CONNECT_RETRY", "MASTER_HOST_SYM", "MASTER_LOG_FILE_SYM", "MASTER_LOG_POS_SYM", 
		"MASTER_PASSWORD_SYM", "MASTER_PORT_SYM", "MASTER_POS_WAIT", "MASTER_SERVER_ID_SYM", 
		"MASTER_SSL_CAPATH_SYM", "MASTER_SSL_CA_SYM", "MASTER_SSL_CERT_SYM", "MASTER_SSL_CIPHER_SYM", 
		"MASTER_SSL_KEY_SYM", "MASTER_SSL_SYM", "MASTER_SSL_VERIFY_SERVER_CERT", 
		"MASTER_SYM", "MASTER_USER_SYM", "MATCH", "MAXVALUE_SYM", "MAX_CONNECTIONS_PER_HOUR", 
		"MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE_SYM", "MAX_SYM", "MAX_UPDATES_PER_HOUR", 
		"MAX_USER_CONNECTIONS_SYM", "MD5", "MEDIUMBLOB", "MEDIUMINT", "MEDIUMTEXT", 
		"MEDIUM_SYM", "MEMORY_SYM", "MERGE_SYM", "MICROSECOND", "MID", "MIGRATE_SYM", 
		"MINUS", "MINUTE", "MINUTE_MICROSECOND", "MINUTE_SECOND", "MIN_ROWS", 
		"MIN_SYM", "ML_COMMENT", "MOD", "MODE_SYM", "MODIFIES_SYM", "MODIFY_SYM", 
		"MOD_SYM", "MONTH", "MONTHNAME", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON", 
		"MUTEX_SYM", "M_", "NAMES_SYM", "NAME_CONST", "NAME_SYM", "NATIONAL_SYM", 
		"NATURAL", "NCHAR_SYM", "NEGATION", "NEW_SYM", "NEXT_SYM", "NODEGROUP_SYM", 
		"NONE_SYM", "NOT_EQ", "NOT_SYM", "NOW", "NO_SYM", "NO_WAIT_SYM", "NO_WRITE_TO_BINLOG", 
		"NULL_SYM", "NUMERIC_SYM", "NVARCHAR_SYM", "N_", "OCT", "OFFSET_SYM", 
		"OJ_SYM", "OLD_PASSWORD", "ON", "ONE_SHOT_SYM", "ONE_SYM", "OPEN_SYM", 
		"OPTIMIZE", "OPTION", "OPTIONALLY", "OPTIONS_SYM", "ORD", "ORDER_SYM", 
		"OR_SYM", "OUTER", "OUTFILE", "OUT_SYM", "OWNER_SYM", "O_", "PACK_KEYS_SYM", 
		"PAGE_CHECKSUM_SYM", "PAGE_SYM", "PARSER_SYM", "PARTIAL", "PARTITIONING_SYM", 
		"PARTITIONS_SYM", "PARTITION_SYM", "PASSWORD", "PERIOD_ADD", "PERIOD_DIFF", 
		"PHASE_SYM", "PI", "PLUGINS_SYM", "PLUGIN_SYM", "PLUS", "POINT_SYM", "POLYGON", 
		"PORT_SYM", "POW", "POWER", "POWER_OP", "PRECISION", "PREPARE_SYM", "PRESERVE_SYM", 
		"PREV_SYM", "PRIMARY_SYM", "PRIVILEGES", "PROCEDURE", "PROCESS", "PROCESSLIST_SYM", 
		"PROFILES_SYM", "PROFILE_SYM", "PURGE", "P_", "QUARTER", "QUERY_SYM", 
		"QUICK", "QUOTE", "Q_", "RADIANS", "RAND", "RANGE_SYM", "RBRACK", "READS_SYM", 
		"READ_ONLY_SYM", "READ_SYM", "READ_WRITE_SYM", "REAL", "REAL_NUMBER", 
		"REBUILD_SYM", "RECOVER_SYM", "REDOFILE_SYM", "REDO_BUFFER_SIZE_SYM", 
		"REDUNDANT_SYM", "REFERENCES", "REGEXP", "RELAY_LOG_FILE_SYM", "RELAY_LOG_POS_SYM", 
		"RELEASE_LOCK", "RELEASE_SYM", "RELOAD", "REMOVE_SYM", "RENAME", "REORGANIZE_SYM", 
		"REPAIR", "REPEAT", "REPEATABLE_SYM", "REPLACE", "REPLICATION", "REQUIRE_SYM", 
		"RESET_SYM", "RESOURCES", "RESTORE_SYM", "RESTRICT", "RESUME_SYM", "RETURNS_SYM", 
		"RETURN_SYM", "REVERSE", "REVOKE", "RIGHT", "ROLLBACK", "ROLLUP_SYM", 
		"ROUND", "ROUTINE_SYM", "ROWS_SYM", "ROW_FORMAT_SYM", "ROW_SYM", "RPAD", 
		"RPAREN", "RTREE_SYM", "RTRIM", "R_", "SAVEPOINT", "SCHEDULE_SYM", "SCHEMA", 
		"SECOND", "SECOND_MICROSECOND", "SECURITY_SYM", "SEC_TO_TIME", "SELECT", 
		"SEMI", "SENSITIVE_SYM", "SEPARATOR_SYM", "SERIALIZABLE_SYM", "SERIAL_SYM", 
		"SERVER_SYM", "SESSION_SYM", "SESSION_USER", "SET_SYM", "SET_VAR", "SHARED_SYM", 
		"SHARE_SYM", "SHIFT_LEFT", "SHIFT_RIGHT", "SHOW", "SHUTDOWN", "SIGN", 
		"SIGNED_SYM", "SIMPLE_SYM", "SIN", "SJIS", "SLAVE", "SLEEP", "SL_COMMENT", 
		"SMALLINT", "SNAPSHOT_SYM", "SOCKET_SYM", "SONAME_SYM", "SOUNDEX", "SOUNDS_SYM", 
		"SOURCE_SYM", "SPACE", "SPATIAL_SYM", "SPECIFIC_SYM", "SQLEXCEPTION_SYM", 
		"SQLSTATE_SYM", "SQLWARNING_SYM", "SQL_BIG_RESULT", "SQL_BUFFER_RESULT", 
		"SQL_CACHE_SYM", "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE_SYM", "SQL_SMALL_RESULT", 
		"SQL_SYM", "SQL_THREAD", "SQRT", "SSL_SYM", "STARTING", "STARTS_SYM", 
		"START_SYM", "STATS_AUTO_RECALC", "STATS_PERSISTENT", "STATUS_SYM", "STD", 
		"STDDEV", "STDDEV_POP", "STDDEV_SAMP", "STOP_SYM", "STORAGE_SYM", "STRAIGHT_JOIN", 
		"STRCMP", "STRING_SYM", "STR_TO_DATE", "SUBJECT_SYM", "SUBPARTITIONS_SYM", 
		"SUBPARTITION_SYM", "SUBSTRING", "SUBSTRING_INDEX", "SUBTIME", "SUM", 
		"SUPER_SYM", "SUSPEND_SYM", "SWAPS_SYM", "SWE7", "SWITCHES_SYM", "SYSDATE", 
		"SYSTEM_USER", "S_", "TABLE", "TABLES", "TABLESPACE", "TABLE_CHECKSUM_SYM", 
		"TAN", "TEMPORARY", "TEMPTABLE_SYM", "TERMINATED", "TEXT_STRING", "TEXT_SYM", 
		"THAN_SYM", "THEN_SYM", "TIMEDIFF", "TIMESTAMP", "TIMESTAMPADD", "TIMESTAMPDIFF", 
		"TIME_FORMAT", "TIME_SYM", "TIME_TO_SEC", "TINYBLOB", "TINYINT", "TINYTEXT", 
		"TIS620", "TO_BASE64", "TO_DAYS", "TO_SECONDS", "TO_SYM", "TRAILING", 
		"TRANSACTION", "TRANSACTIONAL_SYM", "TRIGGERS_SYM", "TRIGGER_SYM", "TRIM", 
		"TRUE_SYM", "TRUNCATE", "TYPES_SYM", "TYPE_SYM", "T_", "UCS2", "UJIS", 
		"UNCOMMITTED_SYM", "UNCOMPRESS", "UNCOMPRESSED_LENGTH", "UNDEFINED_SYM", 
		"UNDOFILE_SYM", "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM", "UNHEX", "UNICODE_SYM", 
		"UNINSTALL_SYM", "UNION_SYM", "UNIQUE_SYM", "UNIX_TIMESTAMP", "UNKNOWN_SYM", 
		"UNLOCK_SYM", "UNSIGNED_SYM", "UNTIL_SYM", "UPDATE", "UPGRADE_SYM", "UPPER", 
		"USAGE", "USER", "USER_VAR", "USER_VAR_SUBFIX1", "USER_VAR_SUBFIX2", "USER_VAR_SUBFIX3", 
		"USER_VAR_SUBFIX4", "USE_FRM", "USE_SYM", "USING_SYM", "UTC_DATE", "UTC_TIME", 
		"UTC_TIMESTAMP", "UTF16", "UTF16LE", "UTF32", "UTF8", "UUID", "U_", "VALUES", 
		"VALUE_SYM", "VARBINARY", "VARCHAR", "VARIABLES", "VARIANCE", "VARYING", 
		"VAR_POP", "VAR_SAMP", "VERSION_SYM", "VERTBAR", "VIEW_SYM", "V_", "WAIT_SYM", 
		"WARNINGS", "WEEK", "WEEKDAY", "WEEKOFYEAR", "WEIGHT_STRING", "WHEN_SYM", 
		"WHERE", "WHILE_SYM", "WHITE_SPACE", "WITH", "WORK_SYM", "WRAPPER_SYM", 
		"WRITE_SYM", "W_", "X509_SYM", "XA_SYM", "XML_SYM", "XOR", "X_", "YEAR", 
		"YEARWEEK", "YEAR_MONTH", "Y_", "ZEROFILL", "Z_"
	};
	public static final int EOF=-1;
	public static final int ABS=4;
	public static final int ACCESSIBLE_SYM=5;
	public static final int ACOS=6;
	public static final int ACTION=7;
	public static final int ADDDATE=8;
	public static final int ADDTIME=9;
	public static final int ADD_SYM=10;
	public static final int AES_DECRYPT=11;
	public static final int AES_ENCRYPT=12;
	public static final int AFTER_SYM=13;
	public static final int AGAINST=14;
	public static final int AGGREGATE_SYM=15;
	public static final int ALGORITHM_SYM=16;
	public static final int ALL=17;
	public static final int ALL_FIELDS=18;
	public static final int ALTER=19;
	public static final int ANALYZE_SYM=20;
	public static final int AND_SYM=21;
	public static final int ANY=22;
	public static final int ARMSCII8=23;
	public static final int ARROW=24;
	public static final int ASC=25;
	public static final int ASCII_SYM=26;
	public static final int ASENSITIVE_SYM=27;
	public static final int ASIN=28;
	public static final int ASTERISK=29;
	public static final int AS_SYM=30;
	public static final int ATAN=31;
	public static final int ATAN2=32;
	public static final int AT_SYM=33;
	public static final int AUTHORS_SYM=34;
	public static final int AUTOEXTEND_SIZE_SYM=35;
	public static final int AUTO_INCREMENT=36;
	public static final int AVG=37;
	public static final int AVG_ROW_LENGTH=38;
	public static final int A_=39;
	public static final int BACKUP_SYM=40;
	public static final int BEFORE_SYM=41;
	public static final int BEGIN_SYM=42;
	public static final int BENCHMARK=43;
	public static final int BETWEEN=44;
	public static final int BIG5=45;
	public static final int BIGINT=46;
	public static final int BIN=47;
	public static final int BINARY=48;
	public static final int BINLOG_SYM=49;
	public static final int BITAND=50;
	public static final int BIT_AND=51;
	public static final int BIT_LENGTH=52;
	public static final int BIT_NUM=53;
	public static final int BIT_OR=54;
	public static final int BIT_SYM=55;
	public static final int BIT_XOR=56;
	public static final int BLOB_SYM=57;
	public static final int BLOCK_SYM=58;
	public static final int BOOLEAN_SYM=59;
	public static final int BOOL_SYM=60;
	public static final int BOTH=61;
	public static final int BTREE_SYM=62;
	public static final int BYTE_SYM=63;
	public static final int BY_SYM=64;
	public static final int B_=65;
	public static final int CACHE_SYM=66;
	public static final int CALL_SYM=67;
	public static final int CASCADE=68;
	public static final int CASCADED=69;
	public static final int CASE_SYM=70;
	public static final int CAST_SYM=71;
	public static final int CEIL=72;
	public static final int CEILING=73;
	public static final int CHAIN_SYM=74;
	public static final int CHANGE=75;
	public static final int CHANGED=76;
	public static final int CHAR=77;
	public static final int CHARACTER_SYM=78;
	public static final int CHARSET=79;
	public static final int CHAR_LENGTH=80;
	public static final int CHECKSUM_SYM=81;
	public static final int CHECK_SYM=82;
	public static final int CIPHER_SYM=83;
	public static final int CLIENT_SYM=84;
	public static final int CLOSE_SYM=85;
	public static final int COALESCE=86;
	public static final int CODE_SYM=87;
	public static final int COERCIBILITY=88;
	public static final int COLLATE_SYM=89;
	public static final int COLLATION=90;
	public static final int COLON=91;
	public static final int COLUMNS_SYM=92;
	public static final int COLUMN_FORMAT=93;
	public static final int COLUMN_SYM=94;
	public static final int COMMA=95;
	public static final int COMMENT_SYM=96;
	public static final int COMMITTED_SYM=97;
	public static final int COMMIT_SYM=98;
	public static final int COMPACT_SYM=99;
	public static final int COMPLETION_SYM=100;
	public static final int COMPRESS=101;
	public static final int COMPRESSED_SYM=102;
	public static final int CONCAT=103;
	public static final int CONCAT_WS=104;
	public static final int CONCURRENT=105;
	public static final int CONDITION_SYM=106;
	public static final int CONNECTION_ID=107;
	public static final int CONNECTION_SYM=108;
	public static final int CONSISTENT_SYM=109;
	public static final int CONSTRAINT=110;
	public static final int CONTAINS_SYM=111;
	public static final int CONTEXT_SYM=112;
	public static final int CONTINUE_SYM=113;
	public static final int CONTRIBUTORS_SYM=114;
	public static final int CONV=115;
	public static final int CONVERT_SYM=116;
	public static final int CONVERT_TZ=117;
	public static final int COPY_SYM=118;
	public static final int COS=119;
	public static final int COT=120;
	public static final int COUNT=121;
	public static final int CP1250=122;
	public static final int CP1251=123;
	public static final int CP1256=124;
	public static final int CP1257=125;
	public static final int CP850=126;
	public static final int CP852=127;
	public static final int CP866=128;
	public static final int CP932=129;
	public static final int CPU_SYM=130;
	public static final int CRC32=131;
	public static final int CREATE=132;
	public static final int CROSECOND=133;
	public static final int CROSS=134;
	public static final int CUBE_SYM=135;
	public static final int CURDATE=136;
	public static final int CURRENT_TIMESTAMP=137;
	public static final int CURRENT_USER=138;
	public static final int CURSOR_SYM=139;
	public static final int CURTIME=140;
	public static final int C_=141;
	public static final int DATABASE=142;
	public static final int DATAFILE_SYM=143;
	public static final int DATA_SYM=144;
	public static final int DATEDIFF=145;
	public static final int DATETIME=146;
	public static final int DATE_ADD=147;
	public static final int DATE_FORMAT=148;
	public static final int DATE_SUB=149;
	public static final int DATE_SYM=150;
	public static final int DAYNAME=151;
	public static final int DAYOFMONTH=152;
	public static final int DAYOFWEEK=153;
	public static final int DAYOFYEAR=154;
	public static final int DAY_HOUR=155;
	public static final int DAY_MICROSECOND=156;
	public static final int DAY_MINUTE=157;
	public static final int DAY_SECOND=158;
	public static final int DAY_SYM=159;
	public static final int DEALLOCATE_SYM=160;
	public static final int DEC8=161;
	public static final int DECIMAL_SYM=162;
	public static final int DECLARE_SYM=163;
	public static final int DECODE=164;
	public static final int DEFAULT=165;
	public static final int DEFINER=166;
	public static final int DEGREES=167;
	public static final int DELAYED_SYM=168;
	public static final int DELAY_KEY_WRITE_SYM=169;
	public static final int DELETE_SYM=170;
	public static final int DESC=171;
	public static final int DES_DECRYPT=172;
	public static final int DES_ENCRYPT=173;
	public static final int DES_KEY_FILE=174;
	public static final int DETERMINISTIC_SYM=175;
	public static final int DIRECTORY_SYM=176;
	public static final int DISABLE_SYM=177;
	public static final int DISCARD=178;
	public static final int DISK_SYM=179;
	public static final int DISTINCT=180;
	public static final int DISTINCTROW=181;
	public static final int DIVIDE=182;
	public static final int DOT=183;
	public static final int DOUBLE_SYM=184;
	public static final int DO_SYM=185;
	public static final int DROP=186;
	public static final int DUAL_SYM=187;
	public static final int DUMPFILE=188;
	public static final int DUPLICATE_SYM=189;
	public static final int DYNAMIC_SYM=190;
	public static final int D_=191;
	public static final int EACH_SYM=192;
	public static final int ELSE_SYM=193;
	public static final int ELSIF_SYM=194;
	public static final int ELT=195;
	public static final int ENABLE_SYM=196;
	public static final int ENCLOSED=197;
	public static final int ENCODE=198;
	public static final int ENCRYPT=199;
	public static final int ENDS_SYM=200;
	public static final int END_SYM=201;
	public static final int ENGINES_SYM=202;
	public static final int ENGINE_SYM=203;
	public static final int ENUM=204;
	public static final int EQ_SYM=205;
	public static final int ERRORS=206;
	public static final int ESCAPED=207;
	public static final int ESCAPE_SYM=208;
	public static final int EUCJPMS=209;
	public static final int EUCKR=210;
	public static final int EVENTS_SYM=211;
	public static final int EVENT_SYM=212;
	public static final int EVERY_SYM=213;
	public static final int EXCHANGE_SYM=214;
	public static final int EXCLUSIVE_SYM=215;
	public static final int EXECUTE_SYM=216;
	public static final int EXISTS=217;
	public static final int EXIT_SYM=218;
	public static final int EXP=219;
	public static final int EXPANSION_SYM=220;
	public static final int EXPORT_SET=221;
	public static final int EXTENDED_SYM=222;
	public static final int EXTENT_SIZE_SYM=223;
	public static final int EXTRACT=224;
	public static final int E_=225;
	public static final int FALSE_SYM=226;
	public static final int FAST_SYM=227;
	public static final int FAULTS_SYM=228;
	public static final int FETCH_SYM=229;
	public static final int FIELD=230;
	public static final int FIELDS_SYM=231;
	public static final int FILE_SYM=232;
	public static final int FIND_IN_SET=233;
	public static final int FIRST_SYM=234;
	public static final int FIXED_SYM=235;
	public static final int FLOAT_SYM=236;
	public static final int FLOOR=237;
	public static final int FLUSH_SYM=238;
	public static final int FORCE_SYM=239;
	public static final int FOREIGN=240;
	public static final int FORMAT=241;
	public static final int FOR_SYM=242;
	public static final int FOUND_ROWS=243;
	public static final int FOUND_SYM=244;
	public static final int FROM=245;
	public static final int FROM_BASE64=246;
	public static final int FROM_DAYS=247;
	public static final int FROM_UNIXTIME=248;
	public static final int FULL=249;
	public static final int FULLTEXT_SYM=250;
	public static final int FUNCTION_SYM=251;
	public static final int F_=252;
	public static final int GB2312=253;
	public static final int GBK=254;
	public static final int GEOMETRYCOLLECTION=255;
	public static final int GEOMETRY_SYM=256;
	public static final int GEOSTD8=257;
	public static final int GET=258;
	public static final int GET_FORMAT=259;
	public static final int GET_LOCK=260;
	public static final int GLOBAL_SYM=261;
	public static final int GRANT=262;
	public static final int GRANTS=263;
	public static final int GREEK=264;
	public static final int GROUP_CONCAT=265;
	public static final int GROUP_SYM=266;
	public static final int GTH=267;
	public static final int G_=268;
	public static final int HANDLER_SYM=269;
	public static final int HASH_SYM=270;
	public static final int HAVING=271;
	public static final int HEBREW=272;
	public static final int HELP_SYM=273;
	public static final int HEX=274;
	public static final int HEX_DIGIT=275;
	public static final int HEX_DIGIT_FRAGMENT=276;
	public static final int HIGH_PRIORITY=277;
	public static final int HOSTS_SYM=278;
	public static final int HOST_SYM=279;
	public static final int HOUR=280;
	public static final int HOUR_MICROSECOND=281;
	public static final int HOUR_MINUTE=282;
	public static final int HOUR_SECOND=283;
	public static final int HP8=284;
	public static final int H_=285;
	public static final int ID=286;
	public static final int IDENTIFIED_SYM=287;
	public static final int IF=288;
	public static final int IFNULL=289;
	public static final int IGNORE_SYM=290;
	public static final int IMPORT=291;
	public static final int INDEXES=292;
	public static final int INDEX_SYM=293;
	public static final int INET_ATON=294;
	public static final int INET_NTOA=295;
	public static final int INFILE=296;
	public static final int INITIAL_SIZE_SYM=297;
	public static final int INNER_SYM=298;
	public static final int INOUT_SYM=299;
	public static final int INPLACE_SYM=300;
	public static final int INSENSITIVE_SYM=301;
	public static final int INSERT=302;
	public static final int INSERT_METHOD=303;
	public static final int INSTALL_SYM=304;
	public static final int INSTR=305;
	public static final int INTEGER_NUM=306;
	public static final int INTEGER_SYM=307;
	public static final int INTERVAL_SYM=308;
	public static final int INTO=309;
	public static final int INT_SYM=310;
	public static final int INVOKER_SYM=311;
	public static final int IN_SYM=312;
	public static final int IO_SYM=313;
	public static final int IPC_SYM=314;
	public static final int ISOLATION=315;
	public static final int ISSUER_SYM=316;
	public static final int IS_FREE_LOCK=317;
	public static final int IS_SYM=318;
	public static final int IS_USED_LOCK=319;
	public static final int ITERATE_SYM=320;
	public static final int I_=321;
	public static final int JOIN_SYM=322;
	public static final int J_=323;
	public static final int KEYBCS2=324;
	public static final int KEYS=325;
	public static final int KEY_BLOCK_SIZE=326;
	public static final int KEY_SYM=327;
	public static final int KILL_SYM=328;
	public static final int KOI8R=329;
	public static final int KOI8U=330;
	public static final int K_=331;
	public static final int LANGUAGE=332;
	public static final int LAST_DAY=333;
	public static final int LAST_INSERT_ID=334;
	public static final int LAST_SYM=335;
	public static final int LATIN1=336;
	public static final int LATIN1_BIN=337;
	public static final int LATIN1_GENERAL_CS=338;
	public static final int LATIN2=339;
	public static final int LATIN5=340;
	public static final int LATIN7=341;
	public static final int LBRACK=342;
	public static final int LEADING=343;
	public static final int LEAVES=344;
	public static final int LEAVE_SYM=345;
	public static final int LEFT=346;
	public static final int LENGTH=347;
	public static final int LESS_SYM=348;
	public static final int LET=349;
	public static final int LEVEL_SYM=350;
	public static final int LIKE_SYM=351;
	public static final int LIMIT=352;
	public static final int LINEAR_SYM=353;
	public static final int LINES=354;
	public static final int LINESTRING=355;
	public static final int LIST_SYM=356;
	public static final int LN=357;
	public static final int LOAD=358;
	public static final int LOAD_FILE=359;
	public static final int LOCAL_SYM=360;
	public static final int LOCATE=361;
	public static final int LOCK=362;
	public static final int LOCKS_SYM=363;
	public static final int LOG=364;
	public static final int LOG10=365;
	public static final int LOG2=366;
	public static final int LOGFILE_SYM=367;
	public static final int LOGS_SYM=368;
	public static final int LONGBLOB=369;
	public static final int LONGTEXT=370;
	public static final int LONG_SYM=371;
	public static final int LOOP_SYM=372;
	public static final int LOWER=373;
	public static final int LOW_PRIORITY=374;
	public static final int LPAD=375;
	public static final int LPAREN=376;
	public static final int LTH=377;
	public static final int LTRIM=378;
	public static final int L_=379;
	public static final int MACCE=380;
	public static final int MACROMAN=381;
	public static final int MAKEDATE=382;
	public static final int MAKETIME=383;
	public static final int MAKE_SET=384;
	public static final int MASTER_CONNECT_RETRY=385;
	public static final int MASTER_HOST_SYM=386;
	public static final int MASTER_LOG_FILE_SYM=387;
	public static final int MASTER_LOG_POS_SYM=388;
	public static final int MASTER_PASSWORD_SYM=389;
	public static final int MASTER_PORT_SYM=390;
	public static final int MASTER_POS_WAIT=391;
	public static final int MASTER_SERVER_ID_SYM=392;
	public static final int MASTER_SSL_CAPATH_SYM=393;
	public static final int MASTER_SSL_CA_SYM=394;
	public static final int MASTER_SSL_CERT_SYM=395;
	public static final int MASTER_SSL_CIPHER_SYM=396;
	public static final int MASTER_SSL_KEY_SYM=397;
	public static final int MASTER_SSL_SYM=398;
	public static final int MASTER_SSL_VERIFY_SERVER_CERT=399;
	public static final int MASTER_SYM=400;
	public static final int MASTER_USER_SYM=401;
	public static final int MATCH=402;
	public static final int MAXVALUE_SYM=403;
	public static final int MAX_CONNECTIONS_PER_HOUR=404;
	public static final int MAX_QUERIES_PER_HOUR=405;
	public static final int MAX_ROWS=406;
	public static final int MAX_SIZE_SYM=407;
	public static final int MAX_SYM=408;
	public static final int MAX_UPDATES_PER_HOUR=409;
	public static final int MAX_USER_CONNECTIONS_SYM=410;
	public static final int MD5=411;
	public static final int MEDIUMBLOB=412;
	public static final int MEDIUMINT=413;
	public static final int MEDIUMTEXT=414;
	public static final int MEDIUM_SYM=415;
	public static final int MEMORY_SYM=416;
	public static final int MERGE_SYM=417;
	public static final int MICROSECOND=418;
	public static final int MID=419;
	public static final int MIGRATE_SYM=420;
	public static final int MINUS=421;
	public static final int MINUTE=422;
	public static final int MINUTE_MICROSECOND=423;
	public static final int MINUTE_SECOND=424;
	public static final int MIN_ROWS=425;
	public static final int MIN_SYM=426;
	public static final int ML_COMMENT=427;
	public static final int MOD=428;
	public static final int MODE_SYM=429;
	public static final int MODIFIES_SYM=430;
	public static final int MODIFY_SYM=431;
	public static final int MOD_SYM=432;
	public static final int MONTH=433;
	public static final int MONTHNAME=434;
	public static final int MULTILINESTRING=435;
	public static final int MULTIPOINT=436;
	public static final int MULTIPOLYGON=437;
	public static final int MUTEX_SYM=438;
	public static final int M_=439;
	public static final int NAMES_SYM=440;
	public static final int NAME_CONST=441;
	public static final int NAME_SYM=442;
	public static final int NATIONAL_SYM=443;
	public static final int NATURAL=444;
	public static final int NCHAR_SYM=445;
	public static final int NEGATION=446;
	public static final int NEW_SYM=447;
	public static final int NEXT_SYM=448;
	public static final int NODEGROUP_SYM=449;
	public static final int NONE_SYM=450;
	public static final int NOT_EQ=451;
	public static final int NOT_SYM=452;
	public static final int NOW=453;
	public static final int NO_SYM=454;
	public static final int NO_WAIT_SYM=455;
	public static final int NO_WRITE_TO_BINLOG=456;
	public static final int NULL_SYM=457;
	public static final int NUMERIC_SYM=458;
	public static final int NVARCHAR_SYM=459;
	public static final int N_=460;
	public static final int OCT=461;
	public static final int OFFSET_SYM=462;
	public static final int OJ_SYM=463;
	public static final int OLD_PASSWORD=464;
	public static final int ON=465;
	public static final int ONE_SHOT_SYM=466;
	public static final int ONE_SYM=467;
	public static final int OPEN_SYM=468;
	public static final int OPTIMIZE=469;
	public static final int OPTION=470;
	public static final int OPTIONALLY=471;
	public static final int OPTIONS_SYM=472;
	public static final int ORD=473;
	public static final int ORDER_SYM=474;
	public static final int OR_SYM=475;
	public static final int OUTER=476;
	public static final int OUTFILE=477;
	public static final int OUT_SYM=478;
	public static final int OWNER_SYM=479;
	public static final int O_=480;
	public static final int PACK_KEYS_SYM=481;
	public static final int PAGE_CHECKSUM_SYM=482;
	public static final int PAGE_SYM=483;
	public static final int PARSER_SYM=484;
	public static final int PARTIAL=485;
	public static final int PARTITIONING_SYM=486;
	public static final int PARTITIONS_SYM=487;
	public static final int PARTITION_SYM=488;
	public static final int PASSWORD=489;
	public static final int PERIOD_ADD=490;
	public static final int PERIOD_DIFF=491;
	public static final int PHASE_SYM=492;
	public static final int PI=493;
	public static final int PLUGINS_SYM=494;
	public static final int PLUGIN_SYM=495;
	public static final int PLUS=496;
	public static final int POINT_SYM=497;
	public static final int POLYGON=498;
	public static final int PORT_SYM=499;
	public static final int POW=500;
	public static final int POWER=501;
	public static final int POWER_OP=502;
	public static final int PRECISION=503;
	public static final int PREPARE_SYM=504;
	public static final int PRESERVE_SYM=505;
	public static final int PREV_SYM=506;
	public static final int PRIMARY_SYM=507;
	public static final int PRIVILEGES=508;
	public static final int PROCEDURE=509;
	public static final int PROCESS=510;
	public static final int PROCESSLIST_SYM=511;
	public static final int PROFILES_SYM=512;
	public static final int PROFILE_SYM=513;
	public static final int PURGE=514;
	public static final int P_=515;
	public static final int QUARTER=516;
	public static final int QUERY_SYM=517;
	public static final int QUICK=518;
	public static final int QUOTE=519;
	public static final int Q_=520;
	public static final int RADIANS=521;
	public static final int RAND=522;
	public static final int RANGE_SYM=523;
	public static final int RBRACK=524;
	public static final int READS_SYM=525;
	public static final int READ_ONLY_SYM=526;
	public static final int READ_SYM=527;
	public static final int READ_WRITE_SYM=528;
	public static final int REAL=529;
	public static final int REAL_NUMBER=530;
	public static final int REBUILD_SYM=531;
	public static final int RECOVER_SYM=532;
	public static final int REDOFILE_SYM=533;
	public static final int REDO_BUFFER_SIZE_SYM=534;
	public static final int REDUNDANT_SYM=535;
	public static final int REFERENCES=536;
	public static final int REGEXP=537;
	public static final int RELAY_LOG_FILE_SYM=538;
	public static final int RELAY_LOG_POS_SYM=539;
	public static final int RELEASE_LOCK=540;
	public static final int RELEASE_SYM=541;
	public static final int RELOAD=542;
	public static final int REMOVE_SYM=543;
	public static final int RENAME=544;
	public static final int REORGANIZE_SYM=545;
	public static final int REPAIR=546;
	public static final int REPEAT=547;
	public static final int REPEATABLE_SYM=548;
	public static final int REPLACE=549;
	public static final int REPLICATION=550;
	public static final int REQUIRE_SYM=551;
	public static final int RESET_SYM=552;
	public static final int RESOURCES=553;
	public static final int RESTORE_SYM=554;
	public static final int RESTRICT=555;
	public static final int RESUME_SYM=556;
	public static final int RETURNS_SYM=557;
	public static final int RETURN_SYM=558;
	public static final int REVERSE=559;
	public static final int REVOKE=560;
	public static final int RIGHT=561;
	public static final int ROLLBACK=562;
	public static final int ROLLUP_SYM=563;
	public static final int ROUND=564;
	public static final int ROUTINE_SYM=565;
	public static final int ROWS_SYM=566;
	public static final int ROW_FORMAT_SYM=567;
	public static final int ROW_SYM=568;
	public static final int RPAD=569;
	public static final int RPAREN=570;
	public static final int RTREE_SYM=571;
	public static final int RTRIM=572;
	public static final int R_=573;
	public static final int SAVEPOINT=574;
	public static final int SCHEDULE_SYM=575;
	public static final int SCHEMA=576;
	public static final int SECOND=577;
	public static final int SECOND_MICROSECOND=578;
	public static final int SECURITY_SYM=579;
	public static final int SEC_TO_TIME=580;
	public static final int SELECT=581;
	public static final int SEMI=582;
	public static final int SENSITIVE_SYM=583;
	public static final int SEPARATOR_SYM=584;
	public static final int SERIALIZABLE_SYM=585;
	public static final int SERIAL_SYM=586;
	public static final int SERVER_SYM=587;
	public static final int SESSION_SYM=588;
	public static final int SESSION_USER=589;
	public static final int SET_SYM=590;
	public static final int SET_VAR=591;
	public static final int SHARED_SYM=592;
	public static final int SHARE_SYM=593;
	public static final int SHIFT_LEFT=594;
	public static final int SHIFT_RIGHT=595;
	public static final int SHOW=596;
	public static final int SHUTDOWN=597;
	public static final int SIGN=598;
	public static final int SIGNED_SYM=599;
	public static final int SIMPLE_SYM=600;
	public static final int SIN=601;
	public static final int SJIS=602;
	public static final int SLAVE=603;
	public static final int SLEEP=604;
	public static final int SL_COMMENT=605;
	public static final int SMALLINT=606;
	public static final int SNAPSHOT_SYM=607;
	public static final int SOCKET_SYM=608;
	public static final int SONAME_SYM=609;
	public static final int SOUNDEX=610;
	public static final int SOUNDS_SYM=611;
	public static final int SOURCE_SYM=612;
	public static final int SPACE=613;
	public static final int SPATIAL_SYM=614;
	public static final int SPECIFIC_SYM=615;
	public static final int SQLEXCEPTION_SYM=616;
	public static final int SQLSTATE_SYM=617;
	public static final int SQLWARNING_SYM=618;
	public static final int SQL_BIG_RESULT=619;
	public static final int SQL_BUFFER_RESULT=620;
	public static final int SQL_CACHE_SYM=621;
	public static final int SQL_CALC_FOUND_ROWS=622;
	public static final int SQL_NO_CACHE_SYM=623;
	public static final int SQL_SMALL_RESULT=624;
	public static final int SQL_SYM=625;
	public static final int SQL_THREAD=626;
	public static final int SQRT=627;
	public static final int SSL_SYM=628;
	public static final int STARTING=629;
	public static final int STARTS_SYM=630;
	public static final int START_SYM=631;
	public static final int STATS_AUTO_RECALC=632;
	public static final int STATS_PERSISTENT=633;
	public static final int STATUS_SYM=634;
	public static final int STD=635;
	public static final int STDDEV=636;
	public static final int STDDEV_POP=637;
	public static final int STDDEV_SAMP=638;
	public static final int STOP_SYM=639;
	public static final int STORAGE_SYM=640;
	public static final int STRAIGHT_JOIN=641;
	public static final int STRCMP=642;
	public static final int STRING_SYM=643;
	public static final int STR_TO_DATE=644;
	public static final int SUBJECT_SYM=645;
	public static final int SUBPARTITIONS_SYM=646;
	public static final int SUBPARTITION_SYM=647;
	public static final int SUBSTRING=648;
	public static final int SUBSTRING_INDEX=649;
	public static final int SUBTIME=650;
	public static final int SUM=651;
	public static final int SUPER_SYM=652;
	public static final int SUSPEND_SYM=653;
	public static final int SWAPS_SYM=654;
	public static final int SWE7=655;
	public static final int SWITCHES_SYM=656;
	public static final int SYSDATE=657;
	public static final int SYSTEM_USER=658;
	public static final int S_=659;
	public static final int TABLE=660;
	public static final int TABLES=661;
	public static final int TABLESPACE=662;
	public static final int TABLE_CHECKSUM_SYM=663;
	public static final int TAN=664;
	public static final int TEMPORARY=665;
	public static final int TEMPTABLE_SYM=666;
	public static final int TERMINATED=667;
	public static final int TEXT_STRING=668;
	public static final int TEXT_SYM=669;
	public static final int THAN_SYM=670;
	public static final int THEN_SYM=671;
	public static final int TIMEDIFF=672;
	public static final int TIMESTAMP=673;
	public static final int TIMESTAMPADD=674;
	public static final int TIMESTAMPDIFF=675;
	public static final int TIME_FORMAT=676;
	public static final int TIME_SYM=677;
	public static final int TIME_TO_SEC=678;
	public static final int TINYBLOB=679;
	public static final int TINYINT=680;
	public static final int TINYTEXT=681;
	public static final int TIS620=682;
	public static final int TO_BASE64=683;
	public static final int TO_DAYS=684;
	public static final int TO_SECONDS=685;
	public static final int TO_SYM=686;
	public static final int TRAILING=687;
	public static final int TRANSACTION=688;
	public static final int TRANSACTIONAL_SYM=689;
	public static final int TRIGGERS_SYM=690;
	public static final int TRIGGER_SYM=691;
	public static final int TRIM=692;
	public static final int TRUE_SYM=693;
	public static final int TRUNCATE=694;
	public static final int TYPES_SYM=695;
	public static final int TYPE_SYM=696;
	public static final int T_=697;
	public static final int UCS2=698;
	public static final int UJIS=699;
	public static final int UNCOMMITTED_SYM=700;
	public static final int UNCOMPRESS=701;
	public static final int UNCOMPRESSED_LENGTH=702;
	public static final int UNDEFINED_SYM=703;
	public static final int UNDOFILE_SYM=704;
	public static final int UNDO_BUFFER_SIZE_SYM=705;
	public static final int UNDO_SYM=706;
	public static final int UNHEX=707;
	public static final int UNICODE_SYM=708;
	public static final int UNINSTALL_SYM=709;
	public static final int UNION_SYM=710;
	public static final int UNIQUE_SYM=711;
	public static final int UNIX_TIMESTAMP=712;
	public static final int UNKNOWN_SYM=713;
	public static final int UNLOCK_SYM=714;
	public static final int UNSIGNED_SYM=715;
	public static final int UNTIL_SYM=716;
	public static final int UPDATE=717;
	public static final int UPGRADE_SYM=718;
	public static final int UPPER=719;
	public static final int USAGE=720;
	public static final int USER=721;
	public static final int USER_VAR=722;
	public static final int USER_VAR_SUBFIX1=723;
	public static final int USER_VAR_SUBFIX2=724;
	public static final int USER_VAR_SUBFIX3=725;
	public static final int USER_VAR_SUBFIX4=726;
	public static final int USE_FRM=727;
	public static final int USE_SYM=728;
	public static final int USING_SYM=729;
	public static final int UTC_DATE=730;
	public static final int UTC_TIME=731;
	public static final int UTC_TIMESTAMP=732;
	public static final int UTF16=733;
	public static final int UTF16LE=734;
	public static final int UTF32=735;
	public static final int UTF8=736;
	public static final int UUID=737;
	public static final int U_=738;
	public static final int VALUES=739;
	public static final int VALUE_SYM=740;
	public static final int VARBINARY=741;
	public static final int VARCHAR=742;
	public static final int VARIABLES=743;
	public static final int VARIANCE=744;
	public static final int VARYING=745;
	public static final int VAR_POP=746;
	public static final int VAR_SAMP=747;
	public static final int VERSION_SYM=748;
	public static final int VERTBAR=749;
	public static final int VIEW_SYM=750;
	public static final int V_=751;
	public static final int WAIT_SYM=752;
	public static final int WARNINGS=753;
	public static final int WEEK=754;
	public static final int WEEKDAY=755;
	public static final int WEEKOFYEAR=756;
	public static final int WEIGHT_STRING=757;
	public static final int WHEN_SYM=758;
	public static final int WHERE=759;
	public static final int WHILE_SYM=760;
	public static final int WHITE_SPACE=761;
	public static final int WITH=762;
	public static final int WORK_SYM=763;
	public static final int WRAPPER_SYM=764;
	public static final int WRITE_SYM=765;
	public static final int W_=766;
	public static final int X509_SYM=767;
	public static final int XA_SYM=768;
	public static final int XML_SYM=769;
	public static final int XOR=770;
	public static final int X_=771;
	public static final int YEAR=772;
	public static final int YEARWEEK=773;
	public static final int YEAR_MONTH=774;
	public static final int Y_=775;
	public static final int ZEROFILL=776;
	public static final int Z_=777;

	// delegates
	public Parser[] getDelegates() {
		return new Parser[] {};
	}

	// delegators


	public SQLParser(TokenStream input) {
		this(input, new RecognizerSharedState());
	}
	public SQLParser(TokenStream input, RecognizerSharedState state) {
		super(input, state);
	}

	protected TreeAdaptor adaptor = new CommonTreeAdaptor();

	public void setTreeAdaptor(TreeAdaptor adaptor) {
		this.adaptor = adaptor;
	}
	public TreeAdaptor getTreeAdaptor() {
		return adaptor;
	}
	@Override public String[] getTokenNames() { return SQLParser.tokenNames; }
	@Override public String getGrammarFileName() { return "E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g"; }





	public static class relational_op_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "relational_op"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:925:1: relational_op : ( EQ_SYM | LTH | GTH | NOT_EQ | LET | GET );
	public final SQLParser.relational_op_return relational_op() throws RecognitionException {
		SQLParser.relational_op_return retval = new SQLParser.relational_op_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token set1=null;

		CommonTree set1_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:925:14: ( EQ_SYM | LTH | GTH | NOT_EQ | LET | GET )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set1=input.LT(1);
			if ( input.LA(1)==EQ_SYM||input.LA(1)==GET||input.LA(1)==GTH||input.LA(1)==LET||input.LA(1)==LTH||input.LA(1)==NOT_EQ ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set1));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "relational_op"


	public static class charset_name_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "charset_name"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:928:1: charset_name : ( ARMSCII8 | ASCII_SYM | BIG5 | BINARY | CP1250 | CP1251 | CP1256 | CP1257 | CP850 | CP852 | CP866 | CP932 | DEC8 | EUCJPMS | EUCKR | GB2312 | GBK | GEOSTD8 | GREEK | HEBREW | HP8 | KEYBCS2 | KOI8R | KOI8U | LATIN1 | LATIN2 | LATIN5 | LATIN7 | MACCE | MACROMAN | SJIS | SWE7 | TIS620 | UCS2 | UJIS | UTF8 );
	public final SQLParser.charset_name_return charset_name() throws RecognitionException {
		SQLParser.charset_name_return retval = new SQLParser.charset_name_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token set2=null;

		CommonTree set2_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:928:13: ( ARMSCII8 | ASCII_SYM | BIG5 | BINARY | CP1250 | CP1251 | CP1256 | CP1257 | CP850 | CP852 | CP866 | CP932 | DEC8 | EUCJPMS | EUCKR | GB2312 | GBK | GEOSTD8 | GREEK | HEBREW | HP8 | KEYBCS2 | KOI8R | KOI8U | LATIN1 | LATIN2 | LATIN5 | LATIN7 | MACCE | MACROMAN | SJIS | SWE7 | TIS620 | UCS2 | UJIS | UTF8 )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set2=input.LT(1);
			if ( input.LA(1)==ARMSCII8||input.LA(1)==ASCII_SYM||input.LA(1)==BIG5||input.LA(1)==BINARY||(input.LA(1) >= CP1250 && input.LA(1) <= CP932)||input.LA(1)==DEC8||(input.LA(1) >= EUCJPMS && input.LA(1) <= EUCKR)||(input.LA(1) >= GB2312 && input.LA(1) <= GBK)||input.LA(1)==GEOSTD8||input.LA(1)==GREEK||input.LA(1)==HEBREW||input.LA(1)==HP8||input.LA(1)==KEYBCS2||(input.LA(1) >= KOI8R && input.LA(1) <= KOI8U)||input.LA(1)==LATIN1||(input.LA(1) >= LATIN2 && input.LA(1) <= LATIN7)||(input.LA(1) >= MACCE && input.LA(1) <= MACROMAN)||input.LA(1)==SJIS||input.LA(1)==SWE7||input.LA(1)==TIS620||(input.LA(1) >= UCS2 && input.LA(1) <= UJIS)||input.LA(1)==UTF8 ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set2));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "charset_name"


	public static class cast_data_type_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "cast_data_type"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:966:1: cast_data_type : ( BINARY ( INTEGER_NUM )? | CHAR ( INTEGER_NUM )? | DATE_SYM | DATETIME | DECIMAL_SYM ( INTEGER_NUM ( COMMA INTEGER_NUM )? )? | SIGNED_SYM ( INTEGER_SYM )? | TIME_SYM | UNSIGNED_SYM ( INTEGER_SYM )? );
	public final SQLParser.cast_data_type_return cast_data_type() throws RecognitionException {
		SQLParser.cast_data_type_return retval = new SQLParser.cast_data_type_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token BINARY3=null;
		Token INTEGER_NUM4=null;
		Token CHAR5=null;
		Token INTEGER_NUM6=null;
		Token DATE_SYM7=null;
		Token DATETIME8=null;
		Token DECIMAL_SYM9=null;
		Token INTEGER_NUM10=null;
		Token COMMA11=null;
		Token INTEGER_NUM12=null;
		Token SIGNED_SYM13=null;
		Token INTEGER_SYM14=null;
		Token TIME_SYM15=null;
		Token UNSIGNED_SYM16=null;
		Token INTEGER_SYM17=null;

		CommonTree BINARY3_tree=null;
		CommonTree INTEGER_NUM4_tree=null;
		CommonTree CHAR5_tree=null;
		CommonTree INTEGER_NUM6_tree=null;
		CommonTree DATE_SYM7_tree=null;
		CommonTree DATETIME8_tree=null;
		CommonTree DECIMAL_SYM9_tree=null;
		CommonTree INTEGER_NUM10_tree=null;
		CommonTree COMMA11_tree=null;
		CommonTree INTEGER_NUM12_tree=null;
		CommonTree SIGNED_SYM13_tree=null;
		CommonTree INTEGER_SYM14_tree=null;
		CommonTree TIME_SYM15_tree=null;
		CommonTree UNSIGNED_SYM16_tree=null;
		CommonTree INTEGER_SYM17_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:966:15: ( BINARY ( INTEGER_NUM )? | CHAR ( INTEGER_NUM )? | DATE_SYM | DATETIME | DECIMAL_SYM ( INTEGER_NUM ( COMMA INTEGER_NUM )? )? | SIGNED_SYM ( INTEGER_SYM )? | TIME_SYM | UNSIGNED_SYM ( INTEGER_SYM )? )
			int alt7=8;
			switch ( input.LA(1) ) {
			case BINARY:
				{
				alt7=1;
				}
				break;
			case CHAR:
				{
				alt7=2;
				}
				break;
			case DATE_SYM:
				{
				alt7=3;
				}
				break;
			case DATETIME:
				{
				alt7=4;
				}
				break;
			case DECIMAL_SYM:
				{
				alt7=5;
				}
				break;
			case SIGNED_SYM:
				{
				alt7=6;
				}
				break;
			case TIME_SYM:
				{
				alt7=7;
				}
				break;
			case UNSIGNED_SYM:
				{
				alt7=8;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 7, 0, input);
				throw nvae;
			}
			switch (alt7) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:967:3: BINARY ( INTEGER_NUM )?
					{
					root_0 = (CommonTree)adaptor.nil();


					BINARY3=(Token)match(input,BINARY,FOLLOW_BINARY_in_cast_data_type20627); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BINARY3_tree = (CommonTree)adaptor.create(BINARY3);
					adaptor.addChild(root_0, BINARY3_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:967:10: ( INTEGER_NUM )?
					int alt1=2;
					int LA1_0 = input.LA(1);
					if ( (LA1_0==INTEGER_NUM) ) {
						alt1=1;
					}
					switch (alt1) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:967:11: INTEGER_NUM
							{
							INTEGER_NUM4=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_cast_data_type20630); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							INTEGER_NUM4_tree = (CommonTree)adaptor.create(INTEGER_NUM4);
							adaptor.addChild(root_0, INTEGER_NUM4_tree);
							}

							}
							break;

					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:968:5: CHAR ( INTEGER_NUM )?
					{
					root_0 = (CommonTree)adaptor.nil();


					CHAR5=(Token)match(input,CHAR,FOLLOW_CHAR_in_cast_data_type20639); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CHAR5_tree = (CommonTree)adaptor.create(CHAR5);
					adaptor.addChild(root_0, CHAR5_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:968:10: ( INTEGER_NUM )?
					int alt2=2;
					int LA2_0 = input.LA(1);
					if ( (LA2_0==INTEGER_NUM) ) {
						alt2=1;
					}
					switch (alt2) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:968:11: INTEGER_NUM
							{
							INTEGER_NUM6=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_cast_data_type20642); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							INTEGER_NUM6_tree = (CommonTree)adaptor.create(INTEGER_NUM6);
							adaptor.addChild(root_0, INTEGER_NUM6_tree);
							}

							}
							break;

					}

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:969:5: DATE_SYM
					{
					root_0 = (CommonTree)adaptor.nil();


					DATE_SYM7=(Token)match(input,DATE_SYM,FOLLOW_DATE_SYM_in_cast_data_type20651); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DATE_SYM7_tree = (CommonTree)adaptor.create(DATE_SYM7);
					adaptor.addChild(root_0, DATE_SYM7_tree);
					}

					}
					break;
				case 4 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:970:5: DATETIME
					{
					root_0 = (CommonTree)adaptor.nil();


					DATETIME8=(Token)match(input,DATETIME,FOLLOW_DATETIME_in_cast_data_type20657); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DATETIME8_tree = (CommonTree)adaptor.create(DATETIME8);
					adaptor.addChild(root_0, DATETIME8_tree);
					}

					}
					break;
				case 5 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:971:5: DECIMAL_SYM ( INTEGER_NUM ( COMMA INTEGER_NUM )? )?
					{
					root_0 = (CommonTree)adaptor.nil();


					DECIMAL_SYM9=(Token)match(input,DECIMAL_SYM,FOLLOW_DECIMAL_SYM_in_cast_data_type20664); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DECIMAL_SYM9_tree = (CommonTree)adaptor.create(DECIMAL_SYM9);
					adaptor.addChild(root_0, DECIMAL_SYM9_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:971:17: ( INTEGER_NUM ( COMMA INTEGER_NUM )? )?
					int alt4=2;
					int LA4_0 = input.LA(1);
					if ( (LA4_0==INTEGER_NUM) ) {
						alt4=1;
					}
					switch (alt4) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:971:19: INTEGER_NUM ( COMMA INTEGER_NUM )?
							{
							INTEGER_NUM10=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_cast_data_type20668); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							INTEGER_NUM10_tree = (CommonTree)adaptor.create(INTEGER_NUM10);
							adaptor.addChild(root_0, INTEGER_NUM10_tree);
							}

							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:971:31: ( COMMA INTEGER_NUM )?
							int alt3=2;
							int LA3_0 = input.LA(1);
							if ( (LA3_0==COMMA) ) {
								alt3=1;
							}
							switch (alt3) {
								case 1 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:971:32: COMMA INTEGER_NUM
									{
									COMMA11=(Token)match(input,COMMA,FOLLOW_COMMA_in_cast_data_type20671); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									COMMA11_tree = (CommonTree)adaptor.create(COMMA11);
									adaptor.addChild(root_0, COMMA11_tree);
									}

									INTEGER_NUM12=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_cast_data_type20673); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									INTEGER_NUM12_tree = (CommonTree)adaptor.create(INTEGER_NUM12);
									adaptor.addChild(root_0, INTEGER_NUM12_tree);
									}

									}
									break;

							}

							}
							break;

					}

					}
					break;
				case 6 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:972:5: SIGNED_SYM ( INTEGER_SYM )?
					{
					root_0 = (CommonTree)adaptor.nil();


					SIGNED_SYM13=(Token)match(input,SIGNED_SYM,FOLLOW_SIGNED_SYM_in_cast_data_type20684); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SIGNED_SYM13_tree = (CommonTree)adaptor.create(SIGNED_SYM13);
					adaptor.addChild(root_0, SIGNED_SYM13_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:972:16: ( INTEGER_SYM )?
					int alt5=2;
					int LA5_0 = input.LA(1);
					if ( (LA5_0==INTEGER_SYM) ) {
						alt5=1;
					}
					switch (alt5) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:972:17: INTEGER_SYM
							{
							INTEGER_SYM14=(Token)match(input,INTEGER_SYM,FOLLOW_INTEGER_SYM_in_cast_data_type20687); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							INTEGER_SYM14_tree = (CommonTree)adaptor.create(INTEGER_SYM14);
							adaptor.addChild(root_0, INTEGER_SYM14_tree);
							}

							}
							break;

					}

					}
					break;
				case 7 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:973:5: TIME_SYM
					{
					root_0 = (CommonTree)adaptor.nil();


					TIME_SYM15=(Token)match(input,TIME_SYM,FOLLOW_TIME_SYM_in_cast_data_type20695); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TIME_SYM15_tree = (CommonTree)adaptor.create(TIME_SYM15);
					adaptor.addChild(root_0, TIME_SYM15_tree);
					}

					}
					break;
				case 8 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:974:5: UNSIGNED_SYM ( INTEGER_SYM )?
					{
					root_0 = (CommonTree)adaptor.nil();


					UNSIGNED_SYM16=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_cast_data_type20701); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					UNSIGNED_SYM16_tree = (CommonTree)adaptor.create(UNSIGNED_SYM16);
					adaptor.addChild(root_0, UNSIGNED_SYM16_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:974:18: ( INTEGER_SYM )?
					int alt6=2;
					int LA6_0 = input.LA(1);
					if ( (LA6_0==INTEGER_SYM) ) {
						alt6=1;
					}
					switch (alt6) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:974:19: INTEGER_SYM
							{
							INTEGER_SYM17=(Token)match(input,INTEGER_SYM,FOLLOW_INTEGER_SYM_in_cast_data_type20704); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							INTEGER_SYM17_tree = (CommonTree)adaptor.create(INTEGER_SYM17);
							adaptor.addChild(root_0, INTEGER_SYM17_tree);
							}

							}
							break;

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cast_data_type"


	public static class search_modifier_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "search_modifier"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:977:1: search_modifier : ( ( IN_SYM NATURAL LANGUAGE MODE_SYM ) | ( IN_SYM NATURAL LANGUAGE MODE_SYM WITH QUERY_SYM EXPANSION_SYM ) | ( IN_SYM BOOLEAN_SYM MODE_SYM ) | ( WITH QUERY_SYM EXPANSION_SYM ) );
	public final SQLParser.search_modifier_return search_modifier() throws RecognitionException {
		SQLParser.search_modifier_return retval = new SQLParser.search_modifier_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token IN_SYM18=null;
		Token NATURAL19=null;
		Token LANGUAGE20=null;
		Token MODE_SYM21=null;
		Token IN_SYM22=null;
		Token NATURAL23=null;
		Token LANGUAGE24=null;
		Token MODE_SYM25=null;
		Token WITH26=null;
		Token QUERY_SYM27=null;
		Token EXPANSION_SYM28=null;
		Token IN_SYM29=null;
		Token BOOLEAN_SYM30=null;
		Token MODE_SYM31=null;
		Token WITH32=null;
		Token QUERY_SYM33=null;
		Token EXPANSION_SYM34=null;

		CommonTree IN_SYM18_tree=null;
		CommonTree NATURAL19_tree=null;
		CommonTree LANGUAGE20_tree=null;
		CommonTree MODE_SYM21_tree=null;
		CommonTree IN_SYM22_tree=null;
		CommonTree NATURAL23_tree=null;
		CommonTree LANGUAGE24_tree=null;
		CommonTree MODE_SYM25_tree=null;
		CommonTree WITH26_tree=null;
		CommonTree QUERY_SYM27_tree=null;
		CommonTree EXPANSION_SYM28_tree=null;
		CommonTree IN_SYM29_tree=null;
		CommonTree BOOLEAN_SYM30_tree=null;
		CommonTree MODE_SYM31_tree=null;
		CommonTree WITH32_tree=null;
		CommonTree QUERY_SYM33_tree=null;
		CommonTree EXPANSION_SYM34_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:977:16: ( ( IN_SYM NATURAL LANGUAGE MODE_SYM ) | ( IN_SYM NATURAL LANGUAGE MODE_SYM WITH QUERY_SYM EXPANSION_SYM ) | ( IN_SYM BOOLEAN_SYM MODE_SYM ) | ( WITH QUERY_SYM EXPANSION_SYM ) )
			int alt8=4;
			int LA8_0 = input.LA(1);
			if ( (LA8_0==IN_SYM) ) {
				int LA8_1 = input.LA(2);
				if ( (LA8_1==NATURAL) ) {
					int LA8_3 = input.LA(3);
					if ( (LA8_3==LANGUAGE) ) {
						int LA8_5 = input.LA(4);
						if ( (LA8_5==MODE_SYM) ) {
							int LA8_6 = input.LA(5);
							if ( (LA8_6==WITH) ) {
								int LA8_7 = input.LA(6);
								if ( (LA8_7==QUERY_SYM) ) {
									int LA8_9 = input.LA(7);
									if ( (LA8_9==EXPANSION_SYM) ) {
										int LA8_10 = input.LA(8);
										if ( (synpred54_SQL()) ) {
											alt8=1;
										}
										else if ( (synpred55_SQL()) ) {
											alt8=2;
										}

										else {
											if (state.backtracking>0) {state.failed=true; return retval;}
											int nvaeMark = input.mark();
											try {
												for (int nvaeConsume = 0; nvaeConsume < 8 - 1; nvaeConsume++) {
													input.consume();
												}
												NoViableAltException nvae =
													new NoViableAltException("", 8, 10, input);
												throw nvae;
											} finally {
												input.rewind(nvaeMark);
											}
										}

									}

									else {
										if (state.backtracking>0) {state.failed=true; return retval;}
										int nvaeMark = input.mark();
										try {
											for (int nvaeConsume = 0; nvaeConsume < 7 - 1; nvaeConsume++) {
												input.consume();
											}
											NoViableAltException nvae =
												new NoViableAltException("", 8, 9, input);
											throw nvae;
										} finally {
											input.rewind(nvaeMark);
										}
									}

								}
								else if ( (LA8_7==CASCADED||LA8_7==CHECK_SYM||LA8_7==LOCAL_SYM||LA8_7==ROLLUP_SYM) ) {
									alt8=1;
								}

								else {
									if (state.backtracking>0) {state.failed=true; return retval;}
									int nvaeMark = input.mark();
									try {
										for (int nvaeConsume = 0; nvaeConsume < 6 - 1; nvaeConsume++) {
											input.consume();
										}
										NoViableAltException nvae =
											new NoViableAltException("", 8, 7, input);
										throw nvae;
									} finally {
										input.rewind(nvaeMark);
									}
								}

							}
							else if ( (LA8_6==EOF||LA8_6==AND_SYM||LA8_6==ASC||(LA8_6 >= ASTERISK && LA8_6 <= AS_SYM)||LA8_6==BETWEEN||LA8_6==BITAND||LA8_6==COLLATE_SYM||LA8_6==COMMA||LA8_6==CROSS||(LA8_6 >= DAY_HOUR && LA8_6 <= DAY_SYM)||LA8_6==DESC||LA8_6==DIVIDE||LA8_6==ELSE_SYM||LA8_6==END_SYM||LA8_6==EQ_SYM||LA8_6==ESCAPE_SYM||LA8_6==FOR_SYM||LA8_6==FROM||LA8_6==GET||(LA8_6 >= GROUP_SYM && LA8_6 <= GTH)||LA8_6==HAVING||(LA8_6 >= HOUR && LA8_6 <= HOUR_SECOND)||LA8_6==ID||LA8_6==INNER_SYM||LA8_6==INTEGER_NUM||LA8_6==IN_SYM||LA8_6==IS_SYM||LA8_6==JOIN_SYM||LA8_6==LEFT||LA8_6==LET||(LA8_6 >= LIKE_SYM && LA8_6 <= LIMIT)||LA8_6==LOCK||LA8_6==LTH||(LA8_6 >= MINUS && LA8_6 <= MINUTE_SECOND)||(LA8_6 >= MOD_SYM && LA8_6 <= MONTH)||LA8_6==NATURAL||(LA8_6 >= NOT_EQ && LA8_6 <= NOT_SYM)||LA8_6==ON||(LA8_6 >= ORDER_SYM && LA8_6 <= OR_SYM)||LA8_6==PARTITION_SYM||LA8_6==PLUS||LA8_6==POWER_OP||LA8_6==QUARTER||LA8_6==REGEXP||LA8_6==RIGHT||LA8_6==RPAREN||(LA8_6 >= SECOND && LA8_6 <= SECOND_MICROSECOND)||LA8_6==SEMI||LA8_6==SET_SYM||(LA8_6 >= SHIFT_LEFT && LA8_6 <= SHIFT_RIGHT)||LA8_6==SOUNDS_SYM||LA8_6==STRAIGHT_JOIN||LA8_6==THEN_SYM||LA8_6==UNION_SYM||LA8_6==USING_SYM||LA8_6==VERTBAR||LA8_6==WEEK||(LA8_6 >= WHEN_SYM && LA8_6 <= WHERE)||LA8_6==XOR||LA8_6==YEAR||LA8_6==YEAR_MONTH) ) {
								alt8=1;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 8, 6, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}

						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 8, 5, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 8, 3, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}
				else if ( (LA8_1==BOOLEAN_SYM) ) {
					alt8=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 8, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA8_0==WITH) ) {
				alt8=4;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 8, 0, input);
				throw nvae;
			}

			switch (alt8) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:978:3: ( IN_SYM NATURAL LANGUAGE MODE_SYM )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:978:3: ( IN_SYM NATURAL LANGUAGE MODE_SYM )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:978:4: IN_SYM NATURAL LANGUAGE MODE_SYM
					{
					IN_SYM18=(Token)match(input,IN_SYM,FOLLOW_IN_SYM_in_search_modifier20719); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IN_SYM18_tree = (CommonTree)adaptor.create(IN_SYM18);
					adaptor.addChild(root_0, IN_SYM18_tree);
					}

					NATURAL19=(Token)match(input,NATURAL,FOLLOW_NATURAL_in_search_modifier20721); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NATURAL19_tree = (CommonTree)adaptor.create(NATURAL19);
					adaptor.addChild(root_0, NATURAL19_tree);
					}

					LANGUAGE20=(Token)match(input,LANGUAGE,FOLLOW_LANGUAGE_in_search_modifier20723); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LANGUAGE20_tree = (CommonTree)adaptor.create(LANGUAGE20);
					adaptor.addChild(root_0, LANGUAGE20_tree);
					}

					MODE_SYM21=(Token)match(input,MODE_SYM,FOLLOW_MODE_SYM_in_search_modifier20725); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MODE_SYM21_tree = (CommonTree)adaptor.create(MODE_SYM21);
					adaptor.addChild(root_0, MODE_SYM21_tree);
					}

					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:979:5: ( IN_SYM NATURAL LANGUAGE MODE_SYM WITH QUERY_SYM EXPANSION_SYM )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:979:5: ( IN_SYM NATURAL LANGUAGE MODE_SYM WITH QUERY_SYM EXPANSION_SYM )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:979:6: IN_SYM NATURAL LANGUAGE MODE_SYM WITH QUERY_SYM EXPANSION_SYM
					{
					IN_SYM22=(Token)match(input,IN_SYM,FOLLOW_IN_SYM_in_search_modifier20733); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IN_SYM22_tree = (CommonTree)adaptor.create(IN_SYM22);
					adaptor.addChild(root_0, IN_SYM22_tree);
					}

					NATURAL23=(Token)match(input,NATURAL,FOLLOW_NATURAL_in_search_modifier20735); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NATURAL23_tree = (CommonTree)adaptor.create(NATURAL23);
					adaptor.addChild(root_0, NATURAL23_tree);
					}

					LANGUAGE24=(Token)match(input,LANGUAGE,FOLLOW_LANGUAGE_in_search_modifier20737); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LANGUAGE24_tree = (CommonTree)adaptor.create(LANGUAGE24);
					adaptor.addChild(root_0, LANGUAGE24_tree);
					}

					MODE_SYM25=(Token)match(input,MODE_SYM,FOLLOW_MODE_SYM_in_search_modifier20739); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MODE_SYM25_tree = (CommonTree)adaptor.create(MODE_SYM25);
					adaptor.addChild(root_0, MODE_SYM25_tree);
					}

					WITH26=(Token)match(input,WITH,FOLLOW_WITH_in_search_modifier20741); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					WITH26_tree = (CommonTree)adaptor.create(WITH26);
					adaptor.addChild(root_0, WITH26_tree);
					}

					QUERY_SYM27=(Token)match(input,QUERY_SYM,FOLLOW_QUERY_SYM_in_search_modifier20743); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					QUERY_SYM27_tree = (CommonTree)adaptor.create(QUERY_SYM27);
					adaptor.addChild(root_0, QUERY_SYM27_tree);
					}

					EXPANSION_SYM28=(Token)match(input,EXPANSION_SYM,FOLLOW_EXPANSION_SYM_in_search_modifier20745); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXPANSION_SYM28_tree = (CommonTree)adaptor.create(EXPANSION_SYM28);
					adaptor.addChild(root_0, EXPANSION_SYM28_tree);
					}

					}

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:980:5: ( IN_SYM BOOLEAN_SYM MODE_SYM )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:980:5: ( IN_SYM BOOLEAN_SYM MODE_SYM )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:980:6: IN_SYM BOOLEAN_SYM MODE_SYM
					{
					IN_SYM29=(Token)match(input,IN_SYM,FOLLOW_IN_SYM_in_search_modifier20753); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IN_SYM29_tree = (CommonTree)adaptor.create(IN_SYM29);
					adaptor.addChild(root_0, IN_SYM29_tree);
					}

					BOOLEAN_SYM30=(Token)match(input,BOOLEAN_SYM,FOLLOW_BOOLEAN_SYM_in_search_modifier20755); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BOOLEAN_SYM30_tree = (CommonTree)adaptor.create(BOOLEAN_SYM30);
					adaptor.addChild(root_0, BOOLEAN_SYM30_tree);
					}

					MODE_SYM31=(Token)match(input,MODE_SYM,FOLLOW_MODE_SYM_in_search_modifier20757); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MODE_SYM31_tree = (CommonTree)adaptor.create(MODE_SYM31);
					adaptor.addChild(root_0, MODE_SYM31_tree);
					}

					}

					}
					break;
				case 4 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:981:5: ( WITH QUERY_SYM EXPANSION_SYM )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:981:5: ( WITH QUERY_SYM EXPANSION_SYM )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:981:6: WITH QUERY_SYM EXPANSION_SYM
					{
					WITH32=(Token)match(input,WITH,FOLLOW_WITH_in_search_modifier20765); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					WITH32_tree = (CommonTree)adaptor.create(WITH32);
					adaptor.addChild(root_0, WITH32_tree);
					}

					QUERY_SYM33=(Token)match(input,QUERY_SYM,FOLLOW_QUERY_SYM_in_search_modifier20767); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					QUERY_SYM33_tree = (CommonTree)adaptor.create(QUERY_SYM33);
					adaptor.addChild(root_0, QUERY_SYM33_tree);
					}

					EXPANSION_SYM34=(Token)match(input,EXPANSION_SYM,FOLLOW_EXPANSION_SYM_in_search_modifier20769); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXPANSION_SYM34_tree = (CommonTree)adaptor.create(EXPANSION_SYM34);
					adaptor.addChild(root_0, EXPANSION_SYM34_tree);
					}

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "search_modifier"


	public static class transcoding_name_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "transcoding_name"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:984:1: transcoding_name : ( LATIN1 | UTF8 );
	public final SQLParser.transcoding_name_return transcoding_name() throws RecognitionException {
		SQLParser.transcoding_name_return retval = new SQLParser.transcoding_name_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token set35=null;

		CommonTree set35_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:984:17: ( LATIN1 | UTF8 )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set35=input.LT(1);
			if ( input.LA(1)==LATIN1||input.LA(1)==UTF8 ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set35));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "transcoding_name"


	public static class interval_unit_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "interval_unit"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:989:1: interval_unit : ( SECOND | MINUTE | HOUR | DAY_SYM | WEEK | MONTH | QUARTER | YEAR | SECOND_MICROSECOND | MINUTE_MICROSECOND | MINUTE_SECOND | HOUR_MICROSECOND | HOUR_SECOND | HOUR_MINUTE | DAY_MICROSECOND | DAY_SECOND | DAY_MINUTE | DAY_HOUR | YEAR_MONTH );
	public final SQLParser.interval_unit_return interval_unit() throws RecognitionException {
		SQLParser.interval_unit_return retval = new SQLParser.interval_unit_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token set36=null;

		CommonTree set36_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:989:14: ( SECOND | MINUTE | HOUR | DAY_SYM | WEEK | MONTH | QUARTER | YEAR | SECOND_MICROSECOND | MINUTE_MICROSECOND | MINUTE_SECOND | HOUR_MICROSECOND | HOUR_SECOND | HOUR_MINUTE | DAY_MICROSECOND | DAY_SECOND | DAY_MINUTE | DAY_HOUR | YEAR_MONTH )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set36=input.LT(1);
			if ( (input.LA(1) >= DAY_HOUR && input.LA(1) <= DAY_SYM)||(input.LA(1) >= HOUR && input.LA(1) <= HOUR_SECOND)||(input.LA(1) >= MINUTE && input.LA(1) <= MINUTE_SECOND)||input.LA(1)==MONTH||input.LA(1)==QUARTER||(input.LA(1) >= SECOND && input.LA(1) <= SECOND_MICROSECOND)||input.LA(1)==WEEK||input.LA(1)==YEAR||input.LA(1)==YEAR_MONTH ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set36));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "interval_unit"


	public static class collation_names_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "collation_names"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1011:1: collation_names : ( LATIN1_GENERAL_CS | LATIN1_BIN );
	public final SQLParser.collation_names_return collation_names() throws RecognitionException {
		SQLParser.collation_names_return retval = new SQLParser.collation_names_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token set37=null;

		CommonTree set37_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1011:16: ( LATIN1_GENERAL_CS | LATIN1_BIN )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set37=input.LT(1);
			if ( (input.LA(1) >= LATIN1_BIN && input.LA(1) <= LATIN1_GENERAL_CS) ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set37));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "collation_names"


	public static class string_literal_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "string_literal"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1021:1: string_literal : TEXT_STRING ;
	public final SQLParser.string_literal_return string_literal() throws RecognitionException {
		SQLParser.string_literal_return retval = new SQLParser.string_literal_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token TEXT_STRING38=null;

		CommonTree TEXT_STRING38_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1021:15: ( TEXT_STRING )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1021:19: TEXT_STRING
			{
			root_0 = (CommonTree)adaptor.nil();


			TEXT_STRING38=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_string_literal20938); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			TEXT_STRING38_tree = (CommonTree)adaptor.create(TEXT_STRING38);
			adaptor.addChild(root_0, TEXT_STRING38_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "string_literal"


	public static class number_literal_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "number_literal"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1022:1: number_literal : ( PLUS | MINUS )? ( INTEGER_NUM | REAL_NUMBER ) ;
	public final SQLParser.number_literal_return number_literal() throws RecognitionException {
		SQLParser.number_literal_return retval = new SQLParser.number_literal_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token set39=null;
		Token set40=null;

		CommonTree set39_tree=null;
		CommonTree set40_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1022:15: ( ( PLUS | MINUS )? ( INTEGER_NUM | REAL_NUMBER ) )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1022:19: ( PLUS | MINUS )? ( INTEGER_NUM | REAL_NUMBER )
			{
			root_0 = (CommonTree)adaptor.nil();


			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1022:19: ( PLUS | MINUS )?
			int alt9=2;
			int LA9_0 = input.LA(1);
			if ( (LA9_0==MINUS||LA9_0==PLUS) ) {
				alt9=1;
			}
			switch (alt9) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
					{
					set39=input.LT(1);
					if ( input.LA(1)==MINUS||input.LA(1)==PLUS ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set39));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			set40=input.LT(1);
			if ( input.LA(1)==INTEGER_NUM||input.LA(1)==REAL_NUMBER ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set40));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "number_literal"


	public static class hex_literal_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "hex_literal"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1024:1: hex_literal : HEX_DIGIT ;
	public final SQLParser.hex_literal_return hex_literal() throws RecognitionException {
		SQLParser.hex_literal_return retval = new SQLParser.hex_literal_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token HEX_DIGIT41=null;

		CommonTree HEX_DIGIT41_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1024:12: ( HEX_DIGIT )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1024:17: HEX_DIGIT
			{
			root_0 = (CommonTree)adaptor.nil();


			HEX_DIGIT41=(Token)match(input,HEX_DIGIT,FOLLOW_HEX_DIGIT_in_hex_literal20973); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			HEX_DIGIT41_tree = (CommonTree)adaptor.create(HEX_DIGIT41);
			adaptor.addChild(root_0, HEX_DIGIT41_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "hex_literal"


	public static class boolean_literal_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "boolean_literal"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1025:1: boolean_literal : ( TRUE_SYM | FALSE_SYM );
	public final SQLParser.boolean_literal_return boolean_literal() throws RecognitionException {
		SQLParser.boolean_literal_return retval = new SQLParser.boolean_literal_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token set42=null;

		CommonTree set42_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1025:16: ( TRUE_SYM | FALSE_SYM )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set42=input.LT(1);
			if ( input.LA(1)==FALSE_SYM||input.LA(1)==TRUE_SYM ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set42));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "boolean_literal"


	public static class bit_literal_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "bit_literal"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1026:1: bit_literal : BIT_NUM ;
	public final SQLParser.bit_literal_return bit_literal() throws RecognitionException {
		SQLParser.bit_literal_return retval = new SQLParser.bit_literal_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token BIT_NUM43=null;

		CommonTree BIT_NUM43_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1026:12: ( BIT_NUM )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1026:17: BIT_NUM
			{
			root_0 = (CommonTree)adaptor.nil();


			BIT_NUM43=(Token)match(input,BIT_NUM,FOLLOW_BIT_NUM_in_bit_literal20994); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			BIT_NUM43_tree = (CommonTree)adaptor.create(BIT_NUM43);
			adaptor.addChild(root_0, BIT_NUM43_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "bit_literal"


	public static class literal_value_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "literal_value"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1029:1: literal_value : ( string_literal | number_literal | hex_literal | boolean_literal | bit_literal | NULL_SYM ) ;
	public final SQLParser.literal_value_return literal_value() throws RecognitionException {
		SQLParser.literal_value_return retval = new SQLParser.literal_value_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token NULL_SYM49=null;
		ParserRuleReturnScope string_literal44 =null;
		ParserRuleReturnScope number_literal45 =null;
		ParserRuleReturnScope hex_literal46 =null;
		ParserRuleReturnScope boolean_literal47 =null;
		ParserRuleReturnScope bit_literal48 =null;

		CommonTree NULL_SYM49_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1029:14: ( ( string_literal | number_literal | hex_literal | boolean_literal | bit_literal | NULL_SYM ) )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1030:9: ( string_literal | number_literal | hex_literal | boolean_literal | bit_literal | NULL_SYM )
			{
			root_0 = (CommonTree)adaptor.nil();


			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1030:9: ( string_literal | number_literal | hex_literal | boolean_literal | bit_literal | NULL_SYM )
			int alt10=6;
			switch ( input.LA(1) ) {
			case TEXT_STRING:
				{
				alt10=1;
				}
				break;
			case INTEGER_NUM:
			case MINUS:
			case PLUS:
			case REAL_NUMBER:
				{
				alt10=2;
				}
				break;
			case HEX_DIGIT:
				{
				alt10=3;
				}
				break;
			case FALSE_SYM:
			case TRUE_SYM:
				{
				alt10=4;
				}
				break;
			case BIT_NUM:
				{
				alt10=5;
				}
				break;
			case NULL_SYM:
				{
				alt10=6;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 10, 0, input);
				throw nvae;
			}
			switch (alt10) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1030:11: string_literal
					{
					pushFollow(FOLLOW_string_literal_in_literal_value21012);
					string_literal44=string_literal();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, string_literal44.getTree());

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1030:28: number_literal
					{
					pushFollow(FOLLOW_number_literal_in_literal_value21016);
					number_literal45=number_literal();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal45.getTree());

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1030:45: hex_literal
					{
					pushFollow(FOLLOW_hex_literal_in_literal_value21020);
					hex_literal46=hex_literal();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, hex_literal46.getTree());

					}
					break;
				case 4 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1030:59: boolean_literal
					{
					pushFollow(FOLLOW_boolean_literal_in_literal_value21024);
					boolean_literal47=boolean_literal();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, boolean_literal47.getTree());

					}
					break;
				case 5 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1030:77: bit_literal
					{
					pushFollow(FOLLOW_bit_literal_in_literal_value21028);
					bit_literal48=bit_literal();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_literal48.getTree());

					}
					break;
				case 6 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1030:91: NULL_SYM
					{
					NULL_SYM49=(Token)match(input,NULL_SYM,FOLLOW_NULL_SYM_in_literal_value21032); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NULL_SYM49_tree = (CommonTree)adaptor.create(NULL_SYM49);
					adaptor.addChild(root_0, NULL_SYM49_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "literal_value"


	public static class functionList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "functionList"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1037:1: functionList : ( number_functions | char_functions | time_functions | other_functions );
	public final SQLParser.functionList_return functionList() throws RecognitionException {
		SQLParser.functionList_return retval = new SQLParser.functionList_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope number_functions50 =null;
		ParserRuleReturnScope char_functions51 =null;
		ParserRuleReturnScope time_functions52 =null;
		ParserRuleReturnScope other_functions53 =null;


		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1037:13: ( number_functions | char_functions | time_functions | other_functions )
			int alt11=4;
			switch ( input.LA(1) ) {
			case ABS:
			case ACOS:
			case ASIN:
			case ATAN:
			case ATAN2:
			case CEIL:
			case CEILING:
			case CONV:
			case COS:
			case COT:
			case CRC32:
			case DEGREES:
			case EXP:
			case FLOOR:
			case LN:
			case LOG:
			case LOG10:
			case LOG2:
			case MOD:
			case PI:
			case POW:
			case POWER:
			case RADIANS:
			case RAND:
			case ROUND:
			case SIGN:
			case SIN:
			case SQRT:
			case TAN:
			case TRUNCATE:
				{
				alt11=1;
				}
				break;
			case LOAD_FILE:
			case MAKE_SET:
				{
				int LA11_2 = input.LA(2);
				if ( (synpred87_SQL()) ) {
					alt11=2;
				}
				else if ( (true) ) {
					alt11=4;
				}

				}
				break;
			case ADDDATE:
			case ADDTIME:
			case CONVERT_TZ:
			case CURDATE:
			case CURTIME:
			case DATEDIFF:
			case DATE_ADD:
			case DATE_FORMAT:
			case DATE_SUB:
			case DATE_SYM:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case EXTRACT:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GET_FORMAT:
			case HOUR:
			case LAST_DAY:
			case MAKEDATE:
			case MAKETIME:
			case MICROSECOND:
			case MINUTE:
			case MONTH:
			case MONTHNAME:
			case NOW:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case QUARTER:
			case SECOND:
			case SEC_TO_TIME:
			case STR_TO_DATE:
			case SUBTIME:
			case SYSDATE:
			case TIMEDIFF:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_SYM:
			case TIME_TO_SEC:
			case TO_DAYS:
			case TO_SECONDS:
			case UNIX_TIMESTAMP:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case WEEK:
			case WEEKDAY:
			case WEEKOFYEAR:
			case YEAR:
			case YEARWEEK:
				{
				alt11=3;
				}
				break;
			case ASCII_SYM:
			case BIN:
			case BIT_LENGTH:
			case CHAR:
			case CHAR_LENGTH:
			case CONCAT:
			case CONCAT_WS:
			case ELT:
			case EXPORT_SET:
			case FIELD:
			case FIND_IN_SET:
			case FORMAT:
			case FROM_BASE64:
			case HEX:
			case INSERT:
			case INSTR:
			case LEFT:
			case LENGTH:
			case LOCATE:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MID:
			case OCT:
			case ORD:
			case QUOTE:
			case REPEAT:
			case REPLACE:
			case REVERSE:
			case RIGHT:
			case RPAD:
			case RTRIM:
			case SOUNDEX:
			case SPACE:
			case STRCMP:
			case SUBSTRING:
			case SUBSTRING_INDEX:
			case TO_BASE64:
			case TRIM:
			case UNHEX:
			case UPPER:
			case WEIGHT_STRING:
				{
				alt11=2;
				}
				break;
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case BENCHMARK:
			case CHARSET:
			case COERCIBILITY:
			case COLLATION:
			case CONNECTION_ID:
			case CURRENT_USER:
			case DATABASE:
			case DECODE:
			case DEFAULT:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case ENCODE:
			case ENCRYPT:
			case FOUND_ROWS:
			case GET_LOCK:
			case IF:
			case IFNULL:
			case INET_ATON:
			case INET_NTOA:
			case IS_FREE_LOCK:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case MASTER_POS_WAIT:
			case MD5:
			case NAME_CONST:
			case OLD_PASSWORD:
			case PASSWORD:
			case RELEASE_LOCK:
			case SCHEMA:
			case SESSION_USER:
			case SLEEP:
			case SYSTEM_USER:
			case USER:
			case UUID:
			case VALUES:
			case VERSION_SYM:
				{
				alt11=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 11, 0, input);
				throw nvae;
			}
			switch (alt11) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1038:5: number_functions
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_number_functions_in_functionList21051);
					number_functions50=number_functions();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, number_functions50.getTree());

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1039:5: char_functions
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_char_functions_in_functionList21058);
					char_functions51=char_functions();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, char_functions51.getTree());

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1040:5: time_functions
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_time_functions_in_functionList21065);
					time_functions52=time_functions();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, time_functions52.getTree());

					}
					break;
				case 4 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1041:5: other_functions
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_other_functions_in_functionList21071);
					other_functions53=other_functions();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, other_functions53.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "functionList"


	public static class number_functions_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "number_functions"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1044:1: number_functions : ( ABS | ACOS | ASIN | ATAN2 | ATAN | CEIL | CEILING | CONV | COS | COT | CRC32 | DEGREES | EXP | FLOOR | LN | LOG10 | LOG2 | LOG | MOD | PI | POW | POWER | RADIANS | RAND | ROUND | SIGN | SIN | SQRT | TAN | TRUNCATE );
	public final SQLParser.number_functions_return number_functions() throws RecognitionException {
		SQLParser.number_functions_return retval = new SQLParser.number_functions_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token set54=null;

		CommonTree set54_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1044:17: ( ABS | ACOS | ASIN | ATAN2 | ATAN | CEIL | CEILING | CONV | COS | COT | CRC32 | DEGREES | EXP | FLOOR | LN | LOG10 | LOG2 | LOG | MOD | PI | POW | POWER | RADIANS | RAND | ROUND | SIGN | SIN | SQRT | TAN | TRUNCATE )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set54=input.LT(1);
			if ( input.LA(1)==ABS||input.LA(1)==ACOS||input.LA(1)==ASIN||(input.LA(1) >= ATAN && input.LA(1) <= ATAN2)||(input.LA(1) >= CEIL && input.LA(1) <= CEILING)||input.LA(1)==CONV||(input.LA(1) >= COS && input.LA(1) <= COT)||input.LA(1)==CRC32||input.LA(1)==DEGREES||input.LA(1)==EXP||input.LA(1)==FLOOR||input.LA(1)==LN||(input.LA(1) >= LOG && input.LA(1) <= LOG2)||input.LA(1)==MOD||input.LA(1)==PI||(input.LA(1) >= POW && input.LA(1) <= POWER)||(input.LA(1) >= RADIANS && input.LA(1) <= RAND)||input.LA(1)==ROUND||input.LA(1)==SIGN||input.LA(1)==SIN||input.LA(1)==SQRT||input.LA(1)==TAN||input.LA(1)==TRUNCATE ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set54));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "number_functions"


	public static class char_functions_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "char_functions"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1077:1: char_functions : ( ASCII_SYM | BIN | BIT_LENGTH | CHAR_LENGTH | CHAR | CONCAT_WS | CONCAT | ELT | EXPORT_SET | FIELD | FIND_IN_SET | FORMAT | FROM_BASE64 | HEX | INSERT | INSTR | LEFT | LENGTH | LOAD_FILE | LOCATE | LOWER | LPAD | LTRIM | MAKE_SET | MID | OCT | ORD | QUOTE | REPEAT | REPLACE | REVERSE | RIGHT | RPAD | RTRIM | SOUNDEX | SPACE | STRCMP | SUBSTRING_INDEX | SUBSTRING | TO_BASE64 | TRIM | UNHEX | UPPER | WEIGHT_STRING );
	public final SQLParser.char_functions_return char_functions() throws RecognitionException {
		SQLParser.char_functions_return retval = new SQLParser.char_functions_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token set55=null;

		CommonTree set55_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1077:15: ( ASCII_SYM | BIN | BIT_LENGTH | CHAR_LENGTH | CHAR | CONCAT_WS | CONCAT | ELT | EXPORT_SET | FIELD | FIND_IN_SET | FORMAT | FROM_BASE64 | HEX | INSERT | INSTR | LEFT | LENGTH | LOAD_FILE | LOCATE | LOWER | LPAD | LTRIM | MAKE_SET | MID | OCT | ORD | QUOTE | REPEAT | REPLACE | REVERSE | RIGHT | RPAD | RTRIM | SOUNDEX | SPACE | STRCMP | SUBSTRING_INDEX | SUBSTRING | TO_BASE64 | TRIM | UNHEX | UPPER | WEIGHT_STRING )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set55=input.LT(1);
			if ( input.LA(1)==ASCII_SYM||input.LA(1)==BIN||input.LA(1)==BIT_LENGTH||input.LA(1)==CHAR||input.LA(1)==CHAR_LENGTH||(input.LA(1) >= CONCAT && input.LA(1) <= CONCAT_WS)||input.LA(1)==ELT||input.LA(1)==EXPORT_SET||input.LA(1)==FIELD||input.LA(1)==FIND_IN_SET||input.LA(1)==FORMAT||input.LA(1)==FROM_BASE64||input.LA(1)==HEX||input.LA(1)==INSERT||input.LA(1)==INSTR||(input.LA(1) >= LEFT && input.LA(1) <= LENGTH)||input.LA(1)==LOAD_FILE||input.LA(1)==LOCATE||input.LA(1)==LOWER||input.LA(1)==LPAD||input.LA(1)==LTRIM||input.LA(1)==MAKE_SET||input.LA(1)==MID||input.LA(1)==OCT||input.LA(1)==ORD||input.LA(1)==QUOTE||input.LA(1)==REPEAT||input.LA(1)==REPLACE||input.LA(1)==REVERSE||input.LA(1)==RIGHT||input.LA(1)==RPAD||input.LA(1)==RTRIM||input.LA(1)==SOUNDEX||input.LA(1)==SPACE||input.LA(1)==STRCMP||(input.LA(1) >= SUBSTRING && input.LA(1) <= SUBSTRING_INDEX)||input.LA(1)==TO_BASE64||input.LA(1)==TRIM||input.LA(1)==UNHEX||input.LA(1)==UPPER||input.LA(1)==WEIGHT_STRING ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set55));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "char_functions"


	public static class time_functions_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "time_functions"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1124:1: time_functions : ( ADDDATE | ADDTIME | CONVERT_TZ | CURDATE | CURTIME | DATE_ADD | DATE_FORMAT | DATE_SUB | DATE_SYM | DATEDIFF | DAYNAME | DAYOFMONTH | DAYOFWEEK | DAYOFYEAR | EXTRACT | FROM_DAYS | FROM_UNIXTIME | GET_FORMAT | HOUR | LAST_DAY | MAKEDATE | MAKETIME | MICROSECOND | MINUTE | MONTH | MONTHNAME | NOW | PERIOD_ADD | PERIOD_DIFF | QUARTER | SEC_TO_TIME | SECOND | STR_TO_DATE | SUBTIME | SYSDATE | TIME_FORMAT | TIME_TO_SEC | TIME_SYM | TIMEDIFF | TIMESTAMP | TIMESTAMPADD | TIMESTAMPDIFF | TO_DAYS | TO_SECONDS | UNIX_TIMESTAMP | UTC_DATE | UTC_TIME | UTC_TIMESTAMP | WEEK | WEEKDAY | WEEKOFYEAR | YEAR | YEARWEEK );
	public final SQLParser.time_functions_return time_functions() throws RecognitionException {
		SQLParser.time_functions_return retval = new SQLParser.time_functions_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token set56=null;

		CommonTree set56_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1124:15: ( ADDDATE | ADDTIME | CONVERT_TZ | CURDATE | CURTIME | DATE_ADD | DATE_FORMAT | DATE_SUB | DATE_SYM | DATEDIFF | DAYNAME | DAYOFMONTH | DAYOFWEEK | DAYOFYEAR | EXTRACT | FROM_DAYS | FROM_UNIXTIME | GET_FORMAT | HOUR | LAST_DAY | MAKEDATE | MAKETIME | MICROSECOND | MINUTE | MONTH | MONTHNAME | NOW | PERIOD_ADD | PERIOD_DIFF | QUARTER | SEC_TO_TIME | SECOND | STR_TO_DATE | SUBTIME | SYSDATE | TIME_FORMAT | TIME_TO_SEC | TIME_SYM | TIMEDIFF | TIMESTAMP | TIMESTAMPADD | TIMESTAMPDIFF | TO_DAYS | TO_SECONDS | UNIX_TIMESTAMP | UTC_DATE | UTC_TIME | UTC_TIMESTAMP | WEEK | WEEKDAY | WEEKOFYEAR | YEAR | YEARWEEK )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set56=input.LT(1);
			if ( (input.LA(1) >= ADDDATE && input.LA(1) <= ADDTIME)||input.LA(1)==CONVERT_TZ||input.LA(1)==CURDATE||input.LA(1)==CURTIME||input.LA(1)==DATEDIFF||(input.LA(1) >= DATE_ADD && input.LA(1) <= DAYOFYEAR)||input.LA(1)==EXTRACT||(input.LA(1) >= FROM_DAYS && input.LA(1) <= FROM_UNIXTIME)||input.LA(1)==GET_FORMAT||input.LA(1)==HOUR||input.LA(1)==LAST_DAY||(input.LA(1) >= MAKEDATE && input.LA(1) <= MAKETIME)||input.LA(1)==MICROSECOND||input.LA(1)==MINUTE||(input.LA(1) >= MONTH && input.LA(1) <= MONTHNAME)||input.LA(1)==NOW||(input.LA(1) >= PERIOD_ADD && input.LA(1) <= PERIOD_DIFF)||input.LA(1)==QUARTER||input.LA(1)==SECOND||input.LA(1)==SEC_TO_TIME||input.LA(1)==STR_TO_DATE||input.LA(1)==SUBTIME||input.LA(1)==SYSDATE||(input.LA(1) >= TIMEDIFF && input.LA(1) <= TIME_TO_SEC)||(input.LA(1) >= TO_DAYS && input.LA(1) <= TO_SECONDS)||input.LA(1)==UNIX_TIMESTAMP||(input.LA(1) >= UTC_DATE && input.LA(1) <= UTC_TIMESTAMP)||(input.LA(1) >= WEEK && input.LA(1) <= WEEKOFYEAR)||(input.LA(1) >= YEAR && input.LA(1) <= YEARWEEK) ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set56));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "time_functions"


	public static class other_functions_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "other_functions"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1180:1: other_functions : ( MAKE_SET | LOAD_FILE | IF | IFNULL | AES_ENCRYPT | AES_DECRYPT | DECODE | ENCODE | DES_DECRYPT | DES_ENCRYPT | ENCRYPT | MD5 | OLD_PASSWORD | PASSWORD | BENCHMARK | CHARSET | COERCIBILITY | COLLATION | CONNECTION_ID | CURRENT_USER | DATABASE | SCHEMA | USER | SESSION_USER | SYSTEM_USER | VERSION_SYM | FOUND_ROWS | LAST_INSERT_ID | DEFAULT | GET_LOCK | RELEASE_LOCK | IS_FREE_LOCK | IS_USED_LOCK | MASTER_POS_WAIT | INET_ATON | INET_NTOA | NAME_CONST | SLEEP | UUID | VALUES );
	public final SQLParser.other_functions_return other_functions() throws RecognitionException {
		SQLParser.other_functions_return retval = new SQLParser.other_functions_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token set57=null;

		CommonTree set57_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1180:16: ( MAKE_SET | LOAD_FILE | IF | IFNULL | AES_ENCRYPT | AES_DECRYPT | DECODE | ENCODE | DES_DECRYPT | DES_ENCRYPT | ENCRYPT | MD5 | OLD_PASSWORD | PASSWORD | BENCHMARK | CHARSET | COERCIBILITY | COLLATION | CONNECTION_ID | CURRENT_USER | DATABASE | SCHEMA | USER | SESSION_USER | SYSTEM_USER | VERSION_SYM | FOUND_ROWS | LAST_INSERT_ID | DEFAULT | GET_LOCK | RELEASE_LOCK | IS_FREE_LOCK | IS_USED_LOCK | MASTER_POS_WAIT | INET_ATON | INET_NTOA | NAME_CONST | SLEEP | UUID | VALUES )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set57=input.LT(1);
			if ( (input.LA(1) >= AES_DECRYPT && input.LA(1) <= AES_ENCRYPT)||input.LA(1)==BENCHMARK||input.LA(1)==CHARSET||input.LA(1)==COERCIBILITY||input.LA(1)==COLLATION||input.LA(1)==CONNECTION_ID||input.LA(1)==CURRENT_USER||input.LA(1)==DATABASE||(input.LA(1) >= DECODE && input.LA(1) <= DEFAULT)||(input.LA(1) >= DES_DECRYPT && input.LA(1) <= DES_ENCRYPT)||(input.LA(1) >= ENCODE && input.LA(1) <= ENCRYPT)||input.LA(1)==FOUND_ROWS||input.LA(1)==GET_LOCK||(input.LA(1) >= IF && input.LA(1) <= IFNULL)||(input.LA(1) >= INET_ATON && input.LA(1) <= INET_NTOA)||input.LA(1)==IS_FREE_LOCK||input.LA(1)==IS_USED_LOCK||input.LA(1)==LAST_INSERT_ID||input.LA(1)==LOAD_FILE||input.LA(1)==MAKE_SET||input.LA(1)==MASTER_POS_WAIT||input.LA(1)==MD5||input.LA(1)==NAME_CONST||input.LA(1)==OLD_PASSWORD||input.LA(1)==PASSWORD||input.LA(1)==RELEASE_LOCK||input.LA(1)==SCHEMA||input.LA(1)==SESSION_USER||input.LA(1)==SLEEP||input.LA(1)==SYSTEM_USER||input.LA(1)==USER||input.LA(1)==UUID||input.LA(1)==VALUES||input.LA(1)==VERSION_SYM ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set57));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "other_functions"


	public static class group_functions_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "group_functions"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1200:1: group_functions : ( AVG | COUNT | MAX_SYM | MIN_SYM | SUM | BIT_AND | BIT_OR | BIT_XOR | GROUP_CONCAT | STD | STDDEV | STDDEV_POP | STDDEV_SAMP | VAR_POP | VAR_SAMP | VARIANCE );
	public final SQLParser.group_functions_return group_functions() throws RecognitionException {
		SQLParser.group_functions_return retval = new SQLParser.group_functions_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token set58=null;

		CommonTree set58_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1200:16: ( AVG | COUNT | MAX_SYM | MIN_SYM | SUM | BIT_AND | BIT_OR | BIT_XOR | GROUP_CONCAT | STD | STDDEV | STDDEV_POP | STDDEV_SAMP | VAR_POP | VAR_SAMP | VARIANCE )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set58=input.LT(1);
			if ( input.LA(1)==AVG||input.LA(1)==BIT_AND||input.LA(1)==BIT_OR||input.LA(1)==BIT_XOR||input.LA(1)==COUNT||input.LA(1)==GROUP_CONCAT||input.LA(1)==MAX_SYM||input.LA(1)==MIN_SYM||(input.LA(1) >= STD && input.LA(1) <= STDDEV_SAMP)||input.LA(1)==SUM||input.LA(1)==VARIANCE||(input.LA(1) >= VAR_POP && input.LA(1) <= VAR_SAMP) ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set58));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "group_functions"


	public static class schema_name_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "schema_name"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1214:1: schema_name : tmpName= ID {...}?;
	public final SQLParser.schema_name_return schema_name() throws RecognitionException {
		SQLParser.schema_name_return retval = new SQLParser.schema_name_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token tmpName=null;

		CommonTree tmpName_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1214:17: (tmpName= ID {...}?)
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1214:19: tmpName= ID {...}?
			{
			root_0 = (CommonTree)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_schema_name22151); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (CommonTree)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if ( !((((tmpName!=null?tmpName.getText():null).length()) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "schema_name", "($tmpName.text.length()) <= 64");
			}
			if ( state.backtracking==0 ) {System.out.println("schema name = " + ((tmpName!=null?tmpName.getText():null)));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "schema_name"


	public static class table_name_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "table_name"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1215:1: table_name : tmpName= ID {...}?;
	public final SQLParser.table_name_return table_name() throws RecognitionException {
		SQLParser.table_name_return retval = new SQLParser.table_name_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token tmpName=null;

		CommonTree tmpName_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1215:17: (tmpName= ID {...}?)
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1215:19: tmpName= ID {...}?
			{
			root_0 = (CommonTree)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_table_name22169); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (CommonTree)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if ( !((((tmpName!=null?tmpName.getText():null).length()) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "table_name", "($tmpName.text.length()) <= 64");
			}
			if ( state.backtracking==0 ) {System.out.println("table name = " + ((tmpName!=null?tmpName.getText():null)));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_name"


	public static class engine_name_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "engine_name"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1216:1: engine_name : tmpName= ID {...}?;
	public final SQLParser.engine_name_return engine_name() throws RecognitionException {
		SQLParser.engine_name_return retval = new SQLParser.engine_name_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token tmpName=null;

		CommonTree tmpName_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1216:17: (tmpName= ID {...}?)
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1216:19: tmpName= ID {...}?
			{
			root_0 = (CommonTree)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_engine_name22186); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (CommonTree)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if ( !((((tmpName!=null?tmpName.getText():null).length()) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "engine_name", "($tmpName.text.length()) <= 64");
			}
			if ( state.backtracking==0 ) {System.out.println("engine name = " + ((tmpName!=null?tmpName.getText():null)));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "engine_name"


	public static class column_name_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "column_name"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1217:1: column_name : tmpName= ID {...}?;
	public final SQLParser.column_name_return column_name() throws RecognitionException {
		SQLParser.column_name_return retval = new SQLParser.column_name_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token tmpName=null;

		CommonTree tmpName_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1217:17: (tmpName= ID {...}?)
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1217:19: tmpName= ID {...}?
			{
			root_0 = (CommonTree)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_column_name22203); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (CommonTree)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if ( !((((tmpName!=null?tmpName.getText():null).length()) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "column_name", "($tmpName.text.length()) <= 64");
			}
			if ( state.backtracking==0 ) {System.out.println("column name = " + ((tmpName!=null?tmpName.getText():null)));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "column_name"


	public static class view_name_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "view_name"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1218:1: view_name : tmpName= ID {...}?;
	public final SQLParser.view_name_return view_name() throws RecognitionException {
		SQLParser.view_name_return retval = new SQLParser.view_name_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token tmpName=null;

		CommonTree tmpName_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1218:15: (tmpName= ID {...}?)
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1218:17: tmpName= ID {...}?
			{
			root_0 = (CommonTree)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_view_name22220); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (CommonTree)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if ( !((((tmpName!=null?tmpName.getText():null).length()) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "view_name", "($tmpName.text.length()) <= 64");
			}
			if ( state.backtracking==0 ) {System.out.println("view name = " + ((tmpName!=null?tmpName.getText():null)));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "view_name"


	public static class parser_name_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "parser_name"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1219:1: parser_name : tmpName= ID {...}?;
	public final SQLParser.parser_name_return parser_name() throws RecognitionException {
		SQLParser.parser_name_return retval = new SQLParser.parser_name_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token tmpName=null;

		CommonTree tmpName_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1219:17: (tmpName= ID {...}?)
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1219:19: tmpName= ID {...}?
			{
			root_0 = (CommonTree)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_parser_name22237); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (CommonTree)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if ( !((((tmpName!=null?tmpName.getText():null).length()) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "parser_name", "($tmpName.text.length()) <= 64");
			}
			if ( state.backtracking==0 ) {System.out.println("parser name = " + ((tmpName!=null?tmpName.getText():null)));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "parser_name"


	public static class index_name_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "index_name"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1220:1: index_name : tmpName= ID {...}?;
	public final SQLParser.index_name_return index_name() throws RecognitionException {
		SQLParser.index_name_return retval = new SQLParser.index_name_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token tmpName=null;

		CommonTree tmpName_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1220:17: (tmpName= ID {...}?)
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1220:19: tmpName= ID {...}?
			{
			root_0 = (CommonTree)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_index_name22255); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (CommonTree)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if ( !((((tmpName!=null?tmpName.getText():null).length()) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "index_name", "($tmpName.text.length()) <= 64");
			}
			if ( state.backtracking==0 ) {System.out.println("index name = " + ((tmpName!=null?tmpName.getText():null)));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "index_name"


	public static class partition_name_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "partition_name"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1221:1: partition_name : tmpName= ID {...}?;
	public final SQLParser.partition_name_return partition_name() throws RecognitionException {
		SQLParser.partition_name_return retval = new SQLParser.partition_name_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token tmpName=null;

		CommonTree tmpName_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1221:21: (tmpName= ID {...}?)
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1221:23: tmpName= ID {...}?
			{
			root_0 = (CommonTree)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_partition_name22273); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (CommonTree)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if ( !((((tmpName!=null?tmpName.getText():null).length()) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "partition_name", "($tmpName.text.length()) <= 64");
			}
			if ( state.backtracking==0 ) {System.out.println("partition name = " + ((tmpName!=null?tmpName.getText():null)));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "partition_name"


	public static class partition_logical_name_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "partition_logical_name"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1222:1: partition_logical_name : tmpName= ID {...}?;
	public final SQLParser.partition_logical_name_return partition_logical_name() throws RecognitionException {
		SQLParser.partition_logical_name_return retval = new SQLParser.partition_logical_name_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token tmpName=null;

		CommonTree tmpName_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1222:27: (tmpName= ID {...}?)
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1222:29: tmpName= ID {...}?
			{
			root_0 = (CommonTree)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_partition_logical_name22289); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (CommonTree)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if ( !((((tmpName!=null?tmpName.getText():null).length()) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "partition_logical_name", "($tmpName.text.length()) <= 64");
			}
			if ( state.backtracking==0 ) {System.out.println("partition_logical name = " + ((tmpName!=null?tmpName.getText():null)));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "partition_logical_name"


	public static class constraint_symbol_name_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "constraint_symbol_name"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1223:1: constraint_symbol_name : tmpName= ID {...}?;
	public final SQLParser.constraint_symbol_name_return constraint_symbol_name() throws RecognitionException {
		SQLParser.constraint_symbol_name_return retval = new SQLParser.constraint_symbol_name_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token tmpName=null;

		CommonTree tmpName_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1223:27: (tmpName= ID {...}?)
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1223:29: tmpName= ID {...}?
			{
			root_0 = (CommonTree)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_constraint_symbol_name22305); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (CommonTree)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if ( !((((tmpName!=null?tmpName.getText():null).length()) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "constraint_symbol_name", "($tmpName.text.length()) <= 64");
			}
			if ( state.backtracking==0 ) {System.out.println("constraint_symbol name = " + ((tmpName!=null?tmpName.getText():null)));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "constraint_symbol_name"


	public static class foreign_key_symbol_name_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "foreign_key_symbol_name"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1224:1: foreign_key_symbol_name : tmpName= ID {...}?;
	public final SQLParser.foreign_key_symbol_name_return foreign_key_symbol_name() throws RecognitionException {
		SQLParser.foreign_key_symbol_name_return retval = new SQLParser.foreign_key_symbol_name_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token tmpName=null;

		CommonTree tmpName_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1224:27: (tmpName= ID {...}?)
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1224:29: tmpName= ID {...}?
			{
			root_0 = (CommonTree)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_foreign_key_symbol_name22320); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (CommonTree)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if ( !((((tmpName!=null?tmpName.getText():null).length()) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "foreign_key_symbol_name", "($tmpName.text.length()) <= 64");
			}
			if ( state.backtracking==0 ) {System.out.println("foreign_key_symbol name = " + ((tmpName!=null?tmpName.getText():null)));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "foreign_key_symbol_name"


	public static class collation_name_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "collation_name"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1225:1: collation_name : tmpName= ID {...}?;
	public final SQLParser.collation_name_return collation_name() throws RecognitionException {
		SQLParser.collation_name_return retval = new SQLParser.collation_name_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token tmpName=null;

		CommonTree tmpName_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1225:21: (tmpName= ID {...}?)
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1225:23: tmpName= ID {...}?
			{
			root_0 = (CommonTree)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_collation_name22338); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (CommonTree)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if ( !((((tmpName!=null?tmpName.getText():null).length()) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "collation_name", "($tmpName.text.length()) <= 64");
			}
			if ( state.backtracking==0 ) {System.out.println("collation name = " + ((tmpName!=null?tmpName.getText():null)));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "collation_name"


	public static class event_name_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "event_name"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1226:1: event_name : tmpName= ID {...}?;
	public final SQLParser.event_name_return event_name() throws RecognitionException {
		SQLParser.event_name_return retval = new SQLParser.event_name_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token tmpName=null;

		CommonTree tmpName_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1226:17: (tmpName= ID {...}?)
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1226:19: tmpName= ID {...}?
			{
			root_0 = (CommonTree)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_event_name22356); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (CommonTree)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if ( !((((tmpName!=null?tmpName.getText():null).length()) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "event_name", "($tmpName.text.length()) <= 64");
			}
			if ( state.backtracking==0 ) {System.out.println("event name = " + ((tmpName!=null?tmpName.getText():null)));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "event_name"


	public static class user_name_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "user_name"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1227:1: user_name : tmpName= ID {...}?;
	public final SQLParser.user_name_return user_name() throws RecognitionException {
		SQLParser.user_name_return retval = new SQLParser.user_name_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token tmpName=null;

		CommonTree tmpName_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1227:15: (tmpName= ID {...}?)
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1227:17: tmpName= ID {...}?
			{
			root_0 = (CommonTree)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_user_name22373); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (CommonTree)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if ( !((((tmpName!=null?tmpName.getText():null).length()) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "user_name", "($tmpName.text.length()) <= 64");
			}
			if ( state.backtracking==0 ) {System.out.println("user name = " + ((tmpName!=null?tmpName.getText():null)));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "user_name"


	public static class function_name_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "function_name"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1228:1: function_name : tmpName= ID {...}?;
	public final SQLParser.function_name_return function_name() throws RecognitionException {
		SQLParser.function_name_return retval = new SQLParser.function_name_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token tmpName=null;

		CommonTree tmpName_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1228:19: (tmpName= ID {...}?)
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1228:21: tmpName= ID {...}?
			{
			root_0 = (CommonTree)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_function_name22390); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (CommonTree)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if ( !((((tmpName!=null?tmpName.getText():null).length()) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "function_name", "($tmpName.text.length()) <= 64");
			}
			if ( state.backtracking==0 ) {System.out.println("function name = " + ((tmpName!=null?tmpName.getText():null)));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "function_name"


	public static class procedure_name_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "procedure_name"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1229:1: procedure_name : tmpName= ID {...}?;
	public final SQLParser.procedure_name_return procedure_name() throws RecognitionException {
		SQLParser.procedure_name_return retval = new SQLParser.procedure_name_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token tmpName=null;

		CommonTree tmpName_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1229:21: (tmpName= ID {...}?)
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1229:23: tmpName= ID {...}?
			{
			root_0 = (CommonTree)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_procedure_name22408); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (CommonTree)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if ( !((((tmpName!=null?tmpName.getText():null).length()) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "procedure_name", "($tmpName.text.length()) <= 64");
			}
			if ( state.backtracking==0 ) {System.out.println("procedure name = " + ((tmpName!=null?tmpName.getText():null)));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "procedure_name"


	public static class server_name_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "server_name"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1230:1: server_name : tmpName= ID {...}?;
	public final SQLParser.server_name_return server_name() throws RecognitionException {
		SQLParser.server_name_return retval = new SQLParser.server_name_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token tmpName=null;

		CommonTree tmpName_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1230:17: (tmpName= ID {...}?)
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1230:19: tmpName= ID {...}?
			{
			root_0 = (CommonTree)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_server_name22425); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (CommonTree)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if ( !((((tmpName!=null?tmpName.getText():null).length()) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "server_name", "($tmpName.text.length()) <= 64");
			}
			if ( state.backtracking==0 ) {System.out.println("server name = " + ((tmpName!=null?tmpName.getText():null)));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "server_name"


	public static class wrapper_name_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "wrapper_name"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1231:1: wrapper_name : tmpName= ID {...}?;
	public final SQLParser.wrapper_name_return wrapper_name() throws RecognitionException {
		SQLParser.wrapper_name_return retval = new SQLParser.wrapper_name_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token tmpName=null;

		CommonTree tmpName_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1231:19: (tmpName= ID {...}?)
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1231:21: tmpName= ID {...}?
			{
			root_0 = (CommonTree)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_wrapper_name22443); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (CommonTree)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if ( !((((tmpName!=null?tmpName.getText():null).length()) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "wrapper_name", "($tmpName.text.length()) <= 64");
			}
			if ( state.backtracking==0 ) {System.out.println("wrapper name = " + ((tmpName!=null?tmpName.getText():null)));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "wrapper_name"


	public static class alias_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alias"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1232:1: alias : ( AS_SYM )? tmpName= ID {...}?;
	public final SQLParser.alias_return alias() throws RecognitionException {
		SQLParser.alias_return retval = new SQLParser.alias_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token tmpName=null;
		Token AS_SYM59=null;

		CommonTree tmpName_tree=null;
		CommonTree AS_SYM59_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1232:13: ( ( AS_SYM )? tmpName= ID {...}?)
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1232:15: ( AS_SYM )? tmpName= ID {...}?
			{
			root_0 = (CommonTree)adaptor.nil();


			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1232:15: ( AS_SYM )?
			int alt12=2;
			int LA12_0 = input.LA(1);
			if ( (LA12_0==AS_SYM) ) {
				alt12=1;
			}
			switch (alt12) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1232:17: AS_SYM
					{
					AS_SYM59=(Token)match(input,AS_SYM,FOLLOW_AS_SYM_in_alias22462); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					AS_SYM59_tree = (CommonTree)adaptor.create(AS_SYM59);
					adaptor.addChild(root_0, AS_SYM59_tree);
					}

					}
					break;

			}

			tmpName=(Token)match(input,ID,FOLLOW_ID_in_alias22469); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (CommonTree)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if ( !((((tmpName!=null?tmpName.getText():null).length()) <= 256)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "alias", "($tmpName.text.length()) <= 256");
			}
			if ( state.backtracking==0 ) {System.out.println("alias name = " + ((tmpName!=null?tmpName.getText():null)));}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alias"


	public static class expression_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "expression"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1240:1: expression : exp_factor1 ( OR_SYM exp_factor1 )* ;
	public final SQLParser.expression_return expression() throws RecognitionException {
		SQLParser.expression_return retval = new SQLParser.expression_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token OR_SYM61=null;
		ParserRuleReturnScope exp_factor160 =null;
		ParserRuleReturnScope exp_factor162 =null;

		CommonTree OR_SYM61_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1240:11: ( exp_factor1 ( OR_SYM exp_factor1 )* )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1240:13: exp_factor1 ( OR_SYM exp_factor1 )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_exp_factor1_in_expression22486);
			exp_factor160=exp_factor1();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, exp_factor160.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1240:25: ( OR_SYM exp_factor1 )*
			loop13:
			while (true) {
				int alt13=2;
				int LA13_0 = input.LA(1);
				if ( (LA13_0==OR_SYM) ) {
					int LA13_2 = input.LA(2);
					if ( (synpred268_SQL()) ) {
						alt13=1;
					}

				}

				switch (alt13) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1240:27: OR_SYM exp_factor1
					{
					OR_SYM61=(Token)match(input,OR_SYM,FOLLOW_OR_SYM_in_expression22490); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					OR_SYM61_tree = (CommonTree)adaptor.create(OR_SYM61);
					adaptor.addChild(root_0, OR_SYM61_tree);
					}

					pushFollow(FOLLOW_exp_factor1_in_expression22492);
					exp_factor162=exp_factor1();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, exp_factor162.getTree());

					}
					break;

				default :
					break loop13;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "expression"


	public static class exp_factor1_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "exp_factor1"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1241:1: exp_factor1 : exp_factor2 ( XOR exp_factor2 )* ;
	public final SQLParser.exp_factor1_return exp_factor1() throws RecognitionException {
		SQLParser.exp_factor1_return retval = new SQLParser.exp_factor1_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token XOR64=null;
		ParserRuleReturnScope exp_factor263 =null;
		ParserRuleReturnScope exp_factor265 =null;

		CommonTree XOR64_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1241:12: ( exp_factor2 ( XOR exp_factor2 )* )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1241:15: exp_factor2 ( XOR exp_factor2 )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_exp_factor2_in_exp_factor122503);
			exp_factor263=exp_factor2();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, exp_factor263.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1241:27: ( XOR exp_factor2 )*
			loop14:
			while (true) {
				int alt14=2;
				int LA14_0 = input.LA(1);
				if ( (LA14_0==XOR) ) {
					int LA14_2 = input.LA(2);
					if ( (synpred269_SQL()) ) {
						alt14=1;
					}

				}

				switch (alt14) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1241:29: XOR exp_factor2
					{
					XOR64=(Token)match(input,XOR,FOLLOW_XOR_in_exp_factor122507); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					XOR64_tree = (CommonTree)adaptor.create(XOR64);
					adaptor.addChild(root_0, XOR64_tree);
					}

					pushFollow(FOLLOW_exp_factor2_in_exp_factor122509);
					exp_factor265=exp_factor2();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, exp_factor265.getTree());

					}
					break;

				default :
					break loop14;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exp_factor1"


	public static class exp_factor2_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "exp_factor2"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1242:1: exp_factor2 : exp_factor3 ( AND_SYM exp_factor3 )* ;
	public final SQLParser.exp_factor2_return exp_factor2() throws RecognitionException {
		SQLParser.exp_factor2_return retval = new SQLParser.exp_factor2_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token AND_SYM67=null;
		ParserRuleReturnScope exp_factor366 =null;
		ParserRuleReturnScope exp_factor368 =null;

		CommonTree AND_SYM67_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1242:12: ( exp_factor3 ( AND_SYM exp_factor3 )* )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1242:15: exp_factor3 ( AND_SYM exp_factor3 )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_exp_factor3_in_exp_factor222520);
			exp_factor366=exp_factor3();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, exp_factor366.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1242:27: ( AND_SYM exp_factor3 )*
			loop15:
			while (true) {
				int alt15=2;
				int LA15_0 = input.LA(1);
				if ( (LA15_0==AND_SYM) ) {
					int LA15_2 = input.LA(2);
					if ( (synpred270_SQL()) ) {
						alt15=1;
					}

				}

				switch (alt15) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1242:29: AND_SYM exp_factor3
					{
					AND_SYM67=(Token)match(input,AND_SYM,FOLLOW_AND_SYM_in_exp_factor222524); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					AND_SYM67_tree = (CommonTree)adaptor.create(AND_SYM67);
					adaptor.addChild(root_0, AND_SYM67_tree);
					}

					pushFollow(FOLLOW_exp_factor3_in_exp_factor222526);
					exp_factor368=exp_factor3();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, exp_factor368.getTree());

					}
					break;

				default :
					break loop15;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exp_factor2"


	public static class exp_factor3_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "exp_factor3"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1243:1: exp_factor3 : ( NOT_SYM )? exp_factor4 ;
	public final SQLParser.exp_factor3_return exp_factor3() throws RecognitionException {
		SQLParser.exp_factor3_return retval = new SQLParser.exp_factor3_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token NOT_SYM69=null;
		ParserRuleReturnScope exp_factor470 =null;

		CommonTree NOT_SYM69_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1243:12: ( ( NOT_SYM )? exp_factor4 )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1243:15: ( NOT_SYM )? exp_factor4
			{
			root_0 = (CommonTree)adaptor.nil();


			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1243:15: ( NOT_SYM )?
			int alt16=2;
			int LA16_0 = input.LA(1);
			if ( (LA16_0==NOT_SYM) ) {
				int LA16_1 = input.LA(2);
				if ( (synpred271_SQL()) ) {
					alt16=1;
				}
			}
			switch (alt16) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1243:16: NOT_SYM
					{
					NOT_SYM69=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_exp_factor322538); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NOT_SYM69_tree = (CommonTree)adaptor.create(NOT_SYM69);
					adaptor.addChild(root_0, NOT_SYM69_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_exp_factor4_in_exp_factor322542);
			exp_factor470=exp_factor4();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, exp_factor470.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exp_factor3"


	public static class exp_factor4_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "exp_factor4"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1244:1: exp_factor4 : bool_primary ( IS_SYM ( NOT_SYM )? ( boolean_literal | NULL_SYM ) )? ;
	public final SQLParser.exp_factor4_return exp_factor4() throws RecognitionException {
		SQLParser.exp_factor4_return retval = new SQLParser.exp_factor4_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token IS_SYM72=null;
		Token NOT_SYM73=null;
		Token NULL_SYM75=null;
		ParserRuleReturnScope bool_primary71 =null;
		ParserRuleReturnScope boolean_literal74 =null;

		CommonTree IS_SYM72_tree=null;
		CommonTree NOT_SYM73_tree=null;
		CommonTree NULL_SYM75_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1244:12: ( bool_primary ( IS_SYM ( NOT_SYM )? ( boolean_literal | NULL_SYM ) )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1244:15: bool_primary ( IS_SYM ( NOT_SYM )? ( boolean_literal | NULL_SYM ) )?
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_bool_primary_in_exp_factor422550);
			bool_primary71=bool_primary();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_primary71.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1244:28: ( IS_SYM ( NOT_SYM )? ( boolean_literal | NULL_SYM ) )?
			int alt19=2;
			int LA19_0 = input.LA(1);
			if ( (LA19_0==IS_SYM) ) {
				int LA19_1 = input.LA(2);
				if ( (synpred274_SQL()) ) {
					alt19=1;
				}
			}
			switch (alt19) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1244:30: IS_SYM ( NOT_SYM )? ( boolean_literal | NULL_SYM )
					{
					IS_SYM72=(Token)match(input,IS_SYM,FOLLOW_IS_SYM_in_exp_factor422554); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IS_SYM72_tree = (CommonTree)adaptor.create(IS_SYM72);
					adaptor.addChild(root_0, IS_SYM72_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1244:37: ( NOT_SYM )?
					int alt17=2;
					int LA17_0 = input.LA(1);
					if ( (LA17_0==NOT_SYM) ) {
						alt17=1;
					}
					switch (alt17) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1244:38: NOT_SYM
							{
							NOT_SYM73=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_exp_factor422557); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							NOT_SYM73_tree = (CommonTree)adaptor.create(NOT_SYM73);
							adaptor.addChild(root_0, NOT_SYM73_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1244:48: ( boolean_literal | NULL_SYM )
					int alt18=2;
					int LA18_0 = input.LA(1);
					if ( (LA18_0==FALSE_SYM||LA18_0==TRUE_SYM) ) {
						alt18=1;
					}
					else if ( (LA18_0==NULL_SYM) ) {
						alt18=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 18, 0, input);
						throw nvae;
					}

					switch (alt18) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1244:49: boolean_literal
							{
							pushFollow(FOLLOW_boolean_literal_in_exp_factor422562);
							boolean_literal74=boolean_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, boolean_literal74.getTree());

							}
							break;
						case 2 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1244:65: NULL_SYM
							{
							NULL_SYM75=(Token)match(input,NULL_SYM,FOLLOW_NULL_SYM_in_exp_factor422564); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							NULL_SYM75_tree = (CommonTree)adaptor.create(NULL_SYM75);
							adaptor.addChild(root_0, NULL_SYM75_tree);
							}

							}
							break;

					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exp_factor4"


	public static class bool_primary_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "bool_primary"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1245:1: bool_primary : ( ( predicate relational_op predicate ) | ( predicate relational_op ( ALL | ANY )? subquery ) | ( ( NOT_SYM )? EXISTS subquery ) | predicate );
	public final SQLParser.bool_primary_return bool_primary() throws RecognitionException {
		SQLParser.bool_primary_return retval = new SQLParser.bool_primary_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token set81=null;
		Token NOT_SYM83=null;
		Token EXISTS84=null;
		ParserRuleReturnScope predicate76 =null;
		ParserRuleReturnScope relational_op77 =null;
		ParserRuleReturnScope predicate78 =null;
		ParserRuleReturnScope predicate79 =null;
		ParserRuleReturnScope relational_op80 =null;
		ParserRuleReturnScope subquery82 =null;
		ParserRuleReturnScope subquery85 =null;
		ParserRuleReturnScope predicate86 =null;

		CommonTree set81_tree=null;
		CommonTree NOT_SYM83_tree=null;
		CommonTree EXISTS84_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1245:13: ( ( predicate relational_op predicate ) | ( predicate relational_op ( ALL | ANY )? subquery ) | ( ( NOT_SYM )? EXISTS subquery ) | predicate )
			int alt22=4;
			switch ( input.LA(1) ) {
			case MINUS:
			case PLUS:
				{
				int LA22_1 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case TEXT_STRING:
				{
				int LA22_2 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case BINARY:
			case NEGATION:
				{
				int LA22_3 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case INTEGER_NUM:
			case REAL_NUMBER:
				{
				int LA22_4 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case HEX_DIGIT:
				{
				int LA22_5 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case FALSE_SYM:
			case TRUE_SYM:
				{
				int LA22_6 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case BIT_NUM:
				{
				int LA22_7 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case NULL_SYM:
				{
				int LA22_8 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case ID:
				{
				int LA22_9 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case ABS:
			case ACOS:
			case ASIN:
			case ATAN:
			case ATAN2:
			case CEIL:
			case CEILING:
			case CONV:
			case COS:
			case COT:
			case CRC32:
			case DEGREES:
			case EXP:
			case FLOOR:
			case LN:
			case LOG:
			case LOG10:
			case LOG2:
			case MOD:
			case PI:
			case POW:
			case POWER:
			case RADIANS:
			case RAND:
			case ROUND:
			case SIGN:
			case SIN:
			case SQRT:
			case TAN:
			case TRUNCATE:
				{
				int LA22_10 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case LOAD_FILE:
			case MAKE_SET:
				{
				int LA22_11 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case ADDDATE:
			case ADDTIME:
			case CONVERT_TZ:
			case CURDATE:
			case CURTIME:
			case DATEDIFF:
			case DATE_ADD:
			case DATE_FORMAT:
			case DATE_SUB:
			case DATE_SYM:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case EXTRACT:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GET_FORMAT:
			case HOUR:
			case LAST_DAY:
			case MAKEDATE:
			case MAKETIME:
			case MICROSECOND:
			case MINUTE:
			case MONTH:
			case MONTHNAME:
			case NOW:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case QUARTER:
			case SECOND:
			case SEC_TO_TIME:
			case STR_TO_DATE:
			case SUBTIME:
			case SYSDATE:
			case TIMEDIFF:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_SYM:
			case TIME_TO_SEC:
			case TO_DAYS:
			case TO_SECONDS:
			case UNIX_TIMESTAMP:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case WEEK:
			case WEEKDAY:
			case WEEKOFYEAR:
			case YEAR:
			case YEARWEEK:
				{
				int LA22_12 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case ASCII_SYM:
			case BIN:
			case BIT_LENGTH:
			case CHAR:
			case CHAR_LENGTH:
			case CONCAT:
			case CONCAT_WS:
			case ELT:
			case EXPORT_SET:
			case FIELD:
			case FIND_IN_SET:
			case FORMAT:
			case FROM_BASE64:
			case HEX:
			case INSERT:
			case INSTR:
			case LEFT:
			case LENGTH:
			case LOCATE:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MID:
			case OCT:
			case ORD:
			case QUOTE:
			case REPEAT:
			case REPLACE:
			case REVERSE:
			case RIGHT:
			case RPAD:
			case RTRIM:
			case SOUNDEX:
			case SPACE:
			case STRCMP:
			case SUBSTRING:
			case SUBSTRING_INDEX:
			case TO_BASE64:
			case TRIM:
			case UNHEX:
			case UPPER:
			case WEIGHT_STRING:
				{
				int LA22_13 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case BENCHMARK:
			case CHARSET:
			case COERCIBILITY:
			case COLLATION:
			case CONNECTION_ID:
			case CURRENT_USER:
			case DATABASE:
			case DECODE:
			case DEFAULT:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case ENCODE:
			case ENCRYPT:
			case FOUND_ROWS:
			case GET_LOCK:
			case IF:
			case IFNULL:
			case INET_ATON:
			case INET_NTOA:
			case IS_FREE_LOCK:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case MASTER_POS_WAIT:
			case MD5:
			case NAME_CONST:
			case OLD_PASSWORD:
			case PASSWORD:
			case RELEASE_LOCK:
			case SCHEMA:
			case SESSION_USER:
			case SLEEP:
			case SYSTEM_USER:
			case USER:
			case UUID:
			case VALUES:
			case VERSION_SYM:
				{
				int LA22_14 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case CAST_SYM:
				{
				int LA22_15 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case CONVERT_SYM:
				{
				int LA22_16 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX_SYM:
			case MIN_SYM:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VARIANCE:
			case VAR_POP:
			case VAR_SAMP:
				{
				int LA22_17 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case USER_VAR:
				{
				int LA22_18 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case LPAREN:
				{
				int LA22_19 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case ROW_SYM:
				{
				int LA22_20 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case EXISTS:
				{
				int LA22_21 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (synpred280_SQL()) ) {
					alt22=3;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case MATCH:
				{
				int LA22_22 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case CASE_SYM:
				{
				int LA22_23 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case INTERVAL_SYM:
				{
				int LA22_24 = input.LA(2);
				if ( (synpred275_SQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_SQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case NOT_SYM:
				{
				alt22=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 22, 0, input);
				throw nvae;
			}
			switch (alt22) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1246:5: ( predicate relational_op predicate )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1246:5: ( predicate relational_op predicate )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1246:7: predicate relational_op predicate
					{
					pushFollow(FOLLOW_predicate_in_bool_primary22581);
					predicate76=predicate();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, predicate76.getTree());

					pushFollow(FOLLOW_relational_op_in_bool_primary22583);
					relational_op77=relational_op();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, relational_op77.getTree());

					pushFollow(FOLLOW_predicate_in_bool_primary22585);
					predicate78=predicate();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, predicate78.getTree());

					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1247:5: ( predicate relational_op ( ALL | ANY )? subquery )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1247:5: ( predicate relational_op ( ALL | ANY )? subquery )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1247:7: predicate relational_op ( ALL | ANY )? subquery
					{
					pushFollow(FOLLOW_predicate_in_bool_primary22596);
					predicate79=predicate();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, predicate79.getTree());

					pushFollow(FOLLOW_relational_op_in_bool_primary22598);
					relational_op80=relational_op();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, relational_op80.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1247:31: ( ALL | ANY )?
					int alt20=2;
					int LA20_0 = input.LA(1);
					if ( (LA20_0==ALL||LA20_0==ANY) ) {
						alt20=1;
					}
					switch (alt20) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
							{
							set81=input.LT(1);
							if ( input.LA(1)==ALL||input.LA(1)==ANY ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set81));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					pushFollow(FOLLOW_subquery_in_bool_primary22611);
					subquery82=subquery();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery82.getTree());

					}

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1248:5: ( ( NOT_SYM )? EXISTS subquery )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1248:5: ( ( NOT_SYM )? EXISTS subquery )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1248:7: ( NOT_SYM )? EXISTS subquery
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1248:7: ( NOT_SYM )?
					int alt21=2;
					int LA21_0 = input.LA(1);
					if ( (LA21_0==NOT_SYM) ) {
						alt21=1;
					}
					switch (alt21) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1248:7: NOT_SYM
							{
							NOT_SYM83=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_bool_primary22621); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							NOT_SYM83_tree = (CommonTree)adaptor.create(NOT_SYM83);
							adaptor.addChild(root_0, NOT_SYM83_tree);
							}

							}
							break;

					}

					EXISTS84=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_bool_primary22624); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXISTS84_tree = (CommonTree)adaptor.create(EXISTS84);
					adaptor.addChild(root_0, EXISTS84_tree);
					}

					pushFollow(FOLLOW_subquery_in_bool_primary22626);
					subquery85=subquery();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery85.getTree());

					}

					}
					break;
				case 4 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1249:5: predicate
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_predicate_in_bool_primary22634);
					predicate86=predicate();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, predicate86.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "bool_primary"


	public static class predicate_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "predicate"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1251:1: predicate : ( ( bit_expr ( NOT_SYM )? IN_SYM ( subquery | expression_list ) ) | ( bit_expr ( NOT_SYM )? BETWEEN bit_expr AND_SYM predicate ) | ( bit_expr SOUNDS_SYM LIKE_SYM bit_expr ) | ( bit_expr ( NOT_SYM )? LIKE_SYM simple_expr ( ESCAPE_SYM simple_expr )? ) | ( bit_expr ( NOT_SYM )? REGEXP bit_expr ) | ( bit_expr ) );
	public final SQLParser.predicate_return predicate() throws RecognitionException {
		SQLParser.predicate_return retval = new SQLParser.predicate_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token NOT_SYM88=null;
		Token IN_SYM89=null;
		Token NOT_SYM93=null;
		Token BETWEEN94=null;
		Token AND_SYM96=null;
		Token SOUNDS_SYM99=null;
		Token LIKE_SYM100=null;
		Token NOT_SYM103=null;
		Token LIKE_SYM104=null;
		Token ESCAPE_SYM106=null;
		Token NOT_SYM109=null;
		Token REGEXP110=null;
		ParserRuleReturnScope bit_expr87 =null;
		ParserRuleReturnScope subquery90 =null;
		ParserRuleReturnScope expression_list91 =null;
		ParserRuleReturnScope bit_expr92 =null;
		ParserRuleReturnScope bit_expr95 =null;
		ParserRuleReturnScope predicate97 =null;
		ParserRuleReturnScope bit_expr98 =null;
		ParserRuleReturnScope bit_expr101 =null;
		ParserRuleReturnScope bit_expr102 =null;
		ParserRuleReturnScope simple_expr105 =null;
		ParserRuleReturnScope simple_expr107 =null;
		ParserRuleReturnScope bit_expr108 =null;
		ParserRuleReturnScope bit_expr111 =null;
		ParserRuleReturnScope bit_expr112 =null;

		CommonTree NOT_SYM88_tree=null;
		CommonTree IN_SYM89_tree=null;
		CommonTree NOT_SYM93_tree=null;
		CommonTree BETWEEN94_tree=null;
		CommonTree AND_SYM96_tree=null;
		CommonTree SOUNDS_SYM99_tree=null;
		CommonTree LIKE_SYM100_tree=null;
		CommonTree NOT_SYM103_tree=null;
		CommonTree LIKE_SYM104_tree=null;
		CommonTree ESCAPE_SYM106_tree=null;
		CommonTree NOT_SYM109_tree=null;
		CommonTree REGEXP110_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1251:10: ( ( bit_expr ( NOT_SYM )? IN_SYM ( subquery | expression_list ) ) | ( bit_expr ( NOT_SYM )? BETWEEN bit_expr AND_SYM predicate ) | ( bit_expr SOUNDS_SYM LIKE_SYM bit_expr ) | ( bit_expr ( NOT_SYM )? LIKE_SYM simple_expr ( ESCAPE_SYM simple_expr )? ) | ( bit_expr ( NOT_SYM )? REGEXP bit_expr ) | ( bit_expr ) )
			int alt29=6;
			switch ( input.LA(1) ) {
			case MINUS:
			case PLUS:
				{
				int LA29_1 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case TEXT_STRING:
				{
				int LA29_2 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case BINARY:
			case NEGATION:
				{
				int LA29_3 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case INTEGER_NUM:
			case REAL_NUMBER:
				{
				int LA29_4 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case HEX_DIGIT:
				{
				int LA29_5 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case FALSE_SYM:
			case TRUE_SYM:
				{
				int LA29_6 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case BIT_NUM:
				{
				int LA29_7 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case NULL_SYM:
				{
				int LA29_8 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case ID:
				{
				int LA29_9 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case ABS:
			case ACOS:
			case ASIN:
			case ATAN:
			case ATAN2:
			case CEIL:
			case CEILING:
			case CONV:
			case COS:
			case COT:
			case CRC32:
			case DEGREES:
			case EXP:
			case FLOOR:
			case LN:
			case LOG:
			case LOG10:
			case LOG2:
			case MOD:
			case PI:
			case POW:
			case POWER:
			case RADIANS:
			case RAND:
			case ROUND:
			case SIGN:
			case SIN:
			case SQRT:
			case TAN:
			case TRUNCATE:
				{
				int LA29_10 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case LOAD_FILE:
			case MAKE_SET:
				{
				int LA29_11 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case ADDDATE:
			case ADDTIME:
			case CONVERT_TZ:
			case CURDATE:
			case CURTIME:
			case DATEDIFF:
			case DATE_ADD:
			case DATE_FORMAT:
			case DATE_SUB:
			case DATE_SYM:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case EXTRACT:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GET_FORMAT:
			case HOUR:
			case LAST_DAY:
			case MAKEDATE:
			case MAKETIME:
			case MICROSECOND:
			case MINUTE:
			case MONTH:
			case MONTHNAME:
			case NOW:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case QUARTER:
			case SECOND:
			case SEC_TO_TIME:
			case STR_TO_DATE:
			case SUBTIME:
			case SYSDATE:
			case TIMEDIFF:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_SYM:
			case TIME_TO_SEC:
			case TO_DAYS:
			case TO_SECONDS:
			case UNIX_TIMESTAMP:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case WEEK:
			case WEEKDAY:
			case WEEKOFYEAR:
			case YEAR:
			case YEARWEEK:
				{
				int LA29_12 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case ASCII_SYM:
			case BIN:
			case BIT_LENGTH:
			case CHAR:
			case CHAR_LENGTH:
			case CONCAT:
			case CONCAT_WS:
			case ELT:
			case EXPORT_SET:
			case FIELD:
			case FIND_IN_SET:
			case FORMAT:
			case FROM_BASE64:
			case HEX:
			case INSERT:
			case INSTR:
			case LEFT:
			case LENGTH:
			case LOCATE:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MID:
			case OCT:
			case ORD:
			case QUOTE:
			case REPEAT:
			case REPLACE:
			case REVERSE:
			case RIGHT:
			case RPAD:
			case RTRIM:
			case SOUNDEX:
			case SPACE:
			case STRCMP:
			case SUBSTRING:
			case SUBSTRING_INDEX:
			case TO_BASE64:
			case TRIM:
			case UNHEX:
			case UPPER:
			case WEIGHT_STRING:
				{
				int LA29_13 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case BENCHMARK:
			case CHARSET:
			case COERCIBILITY:
			case COLLATION:
			case CONNECTION_ID:
			case CURRENT_USER:
			case DATABASE:
			case DECODE:
			case DEFAULT:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case ENCODE:
			case ENCRYPT:
			case FOUND_ROWS:
			case GET_LOCK:
			case IF:
			case IFNULL:
			case INET_ATON:
			case INET_NTOA:
			case IS_FREE_LOCK:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case MASTER_POS_WAIT:
			case MD5:
			case NAME_CONST:
			case OLD_PASSWORD:
			case PASSWORD:
			case RELEASE_LOCK:
			case SCHEMA:
			case SESSION_USER:
			case SLEEP:
			case SYSTEM_USER:
			case USER:
			case UUID:
			case VALUES:
			case VERSION_SYM:
				{
				int LA29_14 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case CAST_SYM:
				{
				int LA29_15 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case CONVERT_SYM:
				{
				int LA29_16 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX_SYM:
			case MIN_SYM:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VARIANCE:
			case VAR_POP:
			case VAR_SAMP:
				{
				int LA29_17 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case USER_VAR:
				{
				int LA29_18 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case LPAREN:
				{
				int LA29_19 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case ROW_SYM:
				{
				int LA29_20 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case EXISTS:
				{
				int LA29_21 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case MATCH:
				{
				int LA29_22 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case CASE_SYM:
				{
				int LA29_23 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case INTERVAL_SYM:
				{
				int LA29_24 = input.LA(2);
				if ( (synpred283_SQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_SQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_SQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_SQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_SQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 29, 0, input);
				throw nvae;
			}
			switch (alt29) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1252:5: ( bit_expr ( NOT_SYM )? IN_SYM ( subquery | expression_list ) )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1252:5: ( bit_expr ( NOT_SYM )? IN_SYM ( subquery | expression_list ) )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1252:7: bit_expr ( NOT_SYM )? IN_SYM ( subquery | expression_list )
					{
					pushFollow(FOLLOW_bit_expr_in_predicate22648);
					bit_expr87=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr87.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1252:16: ( NOT_SYM )?
					int alt23=2;
					int LA23_0 = input.LA(1);
					if ( (LA23_0==NOT_SYM) ) {
						alt23=1;
					}
					switch (alt23) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1252:17: NOT_SYM
							{
							NOT_SYM88=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_predicate22651); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							NOT_SYM88_tree = (CommonTree)adaptor.create(NOT_SYM88);
							adaptor.addChild(root_0, NOT_SYM88_tree);
							}

							}
							break;

					}

					IN_SYM89=(Token)match(input,IN_SYM,FOLLOW_IN_SYM_in_predicate22655); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IN_SYM89_tree = (CommonTree)adaptor.create(IN_SYM89);
					adaptor.addChild(root_0, IN_SYM89_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1252:34: ( subquery | expression_list )
					int alt24=2;
					int LA24_0 = input.LA(1);
					if ( (LA24_0==LPAREN) ) {
						int LA24_1 = input.LA(2);
						if ( (LA24_1==SELECT) ) {
							alt24=1;
						}
						else if ( (LA24_1==ABS||LA24_1==ACOS||(LA24_1 >= ADDDATE && LA24_1 <= ADDTIME)||(LA24_1 >= AES_DECRYPT && LA24_1 <= AES_ENCRYPT)||LA24_1==ASCII_SYM||LA24_1==ASIN||(LA24_1 >= ATAN && LA24_1 <= ATAN2)||LA24_1==AVG||LA24_1==BENCHMARK||(LA24_1 >= BIN && LA24_1 <= BINARY)||(LA24_1 >= BIT_AND && LA24_1 <= BIT_OR)||LA24_1==BIT_XOR||(LA24_1 >= CASE_SYM && LA24_1 <= CEILING)||LA24_1==CHAR||(LA24_1 >= CHARSET && LA24_1 <= CHAR_LENGTH)||LA24_1==COERCIBILITY||LA24_1==COLLATION||(LA24_1 >= CONCAT && LA24_1 <= CONCAT_WS)||LA24_1==CONNECTION_ID||(LA24_1 >= CONV && LA24_1 <= CONVERT_TZ)||(LA24_1 >= COS && LA24_1 <= COUNT)||LA24_1==CRC32||LA24_1==CURDATE||LA24_1==CURRENT_USER||LA24_1==CURTIME||LA24_1==DATABASE||LA24_1==DATEDIFF||(LA24_1 >= DATE_ADD && LA24_1 <= DAYOFYEAR)||(LA24_1 >= DECODE && LA24_1 <= DEFAULT)||LA24_1==DEGREES||(LA24_1 >= DES_DECRYPT && LA24_1 <= DES_ENCRYPT)||LA24_1==ELT||(LA24_1 >= ENCODE && LA24_1 <= ENCRYPT)||LA24_1==EXISTS||LA24_1==EXP||LA24_1==EXPORT_SET||LA24_1==EXTRACT||LA24_1==FALSE_SYM||LA24_1==FIELD||LA24_1==FIND_IN_SET||LA24_1==FLOOR||LA24_1==FORMAT||LA24_1==FOUND_ROWS||(LA24_1 >= FROM_BASE64 && LA24_1 <= FROM_UNIXTIME)||(LA24_1 >= GET_FORMAT && LA24_1 <= GET_LOCK)||LA24_1==GROUP_CONCAT||(LA24_1 >= HEX && LA24_1 <= HEX_DIGIT)||LA24_1==HOUR||LA24_1==ID||(LA24_1 >= IF && LA24_1 <= IFNULL)||(LA24_1 >= INET_ATON && LA24_1 <= INET_NTOA)||LA24_1==INSERT||(LA24_1 >= INSTR && LA24_1 <= INTEGER_NUM)||LA24_1==INTERVAL_SYM||LA24_1==IS_FREE_LOCK||LA24_1==IS_USED_LOCK||(LA24_1 >= LAST_DAY && LA24_1 <= LAST_INSERT_ID)||(LA24_1 >= LEFT && LA24_1 <= LENGTH)||LA24_1==LN||LA24_1==LOAD_FILE||LA24_1==LOCATE||(LA24_1 >= LOG && LA24_1 <= LOG2)||LA24_1==LOWER||(LA24_1 >= LPAD && LA24_1 <= LPAREN)||LA24_1==LTRIM||(LA24_1 >= MAKEDATE && LA24_1 <= MAKE_SET)||LA24_1==MASTER_POS_WAIT||LA24_1==MATCH||LA24_1==MAX_SYM||LA24_1==MD5||(LA24_1 >= MICROSECOND && LA24_1 <= MID)||(LA24_1 >= MINUS && LA24_1 <= MINUTE)||LA24_1==MIN_SYM||LA24_1==MOD||(LA24_1 >= MONTH && LA24_1 <= MONTHNAME)||LA24_1==NAME_CONST||LA24_1==NEGATION||(LA24_1 >= NOT_SYM && LA24_1 <= NOW)||LA24_1==NULL_SYM||LA24_1==OCT||LA24_1==OLD_PASSWORD||LA24_1==ORD||(LA24_1 >= PASSWORD && LA24_1 <= PERIOD_DIFF)||LA24_1==PI||LA24_1==PLUS||(LA24_1 >= POW && LA24_1 <= POWER)||LA24_1==QUARTER||LA24_1==QUOTE||(LA24_1 >= RADIANS && LA24_1 <= RAND)||LA24_1==REAL_NUMBER||LA24_1==RELEASE_LOCK||LA24_1==REPEAT||LA24_1==REPLACE||LA24_1==REVERSE||LA24_1==RIGHT||LA24_1==ROUND||(LA24_1 >= ROW_SYM && LA24_1 <= RPAD)||LA24_1==RTRIM||(LA24_1 >= SCHEMA && LA24_1 <= SECOND)||LA24_1==SEC_TO_TIME||LA24_1==SESSION_USER||LA24_1==SIGN||LA24_1==SIN||LA24_1==SLEEP||LA24_1==SOUNDEX||LA24_1==SPACE||LA24_1==SQRT||(LA24_1 >= STD && LA24_1 <= STDDEV_SAMP)||LA24_1==STRCMP||LA24_1==STR_TO_DATE||(LA24_1 >= SUBSTRING && LA24_1 <= SUM)||(LA24_1 >= SYSDATE && LA24_1 <= SYSTEM_USER)||LA24_1==TAN||LA24_1==TEXT_STRING||(LA24_1 >= TIMEDIFF && LA24_1 <= TIME_TO_SEC)||(LA24_1 >= TO_BASE64 && LA24_1 <= TO_SECONDS)||(LA24_1 >= TRIM && LA24_1 <= TRUNCATE)||LA24_1==UNHEX||LA24_1==UNIX_TIMESTAMP||LA24_1==UPPER||(LA24_1 >= USER && LA24_1 <= USER_VAR)||(LA24_1 >= UTC_DATE && LA24_1 <= UTC_TIMESTAMP)||LA24_1==UUID||LA24_1==VALUES||LA24_1==VARIANCE||(LA24_1 >= VAR_POP && LA24_1 <= VERSION_SYM)||(LA24_1 >= WEEK && LA24_1 <= WEIGHT_STRING)||(LA24_1 >= YEAR && LA24_1 <= YEARWEEK)) ) {
							alt24=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 24, 1, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 24, 0, input);
						throw nvae;
					}

					switch (alt24) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1252:35: subquery
							{
							pushFollow(FOLLOW_subquery_in_predicate22658);
							subquery90=subquery();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery90.getTree());

							}
							break;
						case 2 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1252:46: expression_list
							{
							pushFollow(FOLLOW_expression_list_in_predicate22662);
							expression_list91=expression_list();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list91.getTree());

							}
							break;

					}

					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1253:5: ( bit_expr ( NOT_SYM )? BETWEEN bit_expr AND_SYM predicate )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1253:5: ( bit_expr ( NOT_SYM )? BETWEEN bit_expr AND_SYM predicate )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1253:7: bit_expr ( NOT_SYM )? BETWEEN bit_expr AND_SYM predicate
					{
					pushFollow(FOLLOW_bit_expr_in_predicate22673);
					bit_expr92=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr92.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1253:16: ( NOT_SYM )?
					int alt25=2;
					int LA25_0 = input.LA(1);
					if ( (LA25_0==NOT_SYM) ) {
						alt25=1;
					}
					switch (alt25) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1253:17: NOT_SYM
							{
							NOT_SYM93=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_predicate22676); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							NOT_SYM93_tree = (CommonTree)adaptor.create(NOT_SYM93);
							adaptor.addChild(root_0, NOT_SYM93_tree);
							}

							}
							break;

					}

					BETWEEN94=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_predicate22680); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BETWEEN94_tree = (CommonTree)adaptor.create(BETWEEN94);
					adaptor.addChild(root_0, BETWEEN94_tree);
					}

					pushFollow(FOLLOW_bit_expr_in_predicate22682);
					bit_expr95=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr95.getTree());

					AND_SYM96=(Token)match(input,AND_SYM,FOLLOW_AND_SYM_in_predicate22684); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					AND_SYM96_tree = (CommonTree)adaptor.create(AND_SYM96);
					adaptor.addChild(root_0, AND_SYM96_tree);
					}

					pushFollow(FOLLOW_predicate_in_predicate22686);
					predicate97=predicate();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, predicate97.getTree());

					}

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1254:5: ( bit_expr SOUNDS_SYM LIKE_SYM bit_expr )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1254:5: ( bit_expr SOUNDS_SYM LIKE_SYM bit_expr )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1254:7: bit_expr SOUNDS_SYM LIKE_SYM bit_expr
					{
					pushFollow(FOLLOW_bit_expr_in_predicate22697);
					bit_expr98=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr98.getTree());

					SOUNDS_SYM99=(Token)match(input,SOUNDS_SYM,FOLLOW_SOUNDS_SYM_in_predicate22699); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SOUNDS_SYM99_tree = (CommonTree)adaptor.create(SOUNDS_SYM99);
					adaptor.addChild(root_0, SOUNDS_SYM99_tree);
					}

					LIKE_SYM100=(Token)match(input,LIKE_SYM,FOLLOW_LIKE_SYM_in_predicate22701); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LIKE_SYM100_tree = (CommonTree)adaptor.create(LIKE_SYM100);
					adaptor.addChild(root_0, LIKE_SYM100_tree);
					}

					pushFollow(FOLLOW_bit_expr_in_predicate22703);
					bit_expr101=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr101.getTree());

					}

					}
					break;
				case 4 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1255:5: ( bit_expr ( NOT_SYM )? LIKE_SYM simple_expr ( ESCAPE_SYM simple_expr )? )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1255:5: ( bit_expr ( NOT_SYM )? LIKE_SYM simple_expr ( ESCAPE_SYM simple_expr )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1255:7: bit_expr ( NOT_SYM )? LIKE_SYM simple_expr ( ESCAPE_SYM simple_expr )?
					{
					pushFollow(FOLLOW_bit_expr_in_predicate22714);
					bit_expr102=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr102.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1255:16: ( NOT_SYM )?
					int alt26=2;
					int LA26_0 = input.LA(1);
					if ( (LA26_0==NOT_SYM) ) {
						alt26=1;
					}
					switch (alt26) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1255:17: NOT_SYM
							{
							NOT_SYM103=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_predicate22717); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							NOT_SYM103_tree = (CommonTree)adaptor.create(NOT_SYM103);
							adaptor.addChild(root_0, NOT_SYM103_tree);
							}

							}
							break;

					}

					LIKE_SYM104=(Token)match(input,LIKE_SYM,FOLLOW_LIKE_SYM_in_predicate22721); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LIKE_SYM104_tree = (CommonTree)adaptor.create(LIKE_SYM104);
					adaptor.addChild(root_0, LIKE_SYM104_tree);
					}

					pushFollow(FOLLOW_simple_expr_in_predicate22723);
					simple_expr105=simple_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expr105.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1255:48: ( ESCAPE_SYM simple_expr )?
					int alt27=2;
					int LA27_0 = input.LA(1);
					if ( (LA27_0==ESCAPE_SYM) ) {
						int LA27_1 = input.LA(2);
						if ( (synpred288_SQL()) ) {
							alt27=1;
						}
					}
					switch (alt27) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1255:49: ESCAPE_SYM simple_expr
							{
							ESCAPE_SYM106=(Token)match(input,ESCAPE_SYM,FOLLOW_ESCAPE_SYM_in_predicate22726); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ESCAPE_SYM106_tree = (CommonTree)adaptor.create(ESCAPE_SYM106);
							adaptor.addChild(root_0, ESCAPE_SYM106_tree);
							}

							pushFollow(FOLLOW_simple_expr_in_predicate22728);
							simple_expr107=simple_expr();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expr107.getTree());

							}
							break;

					}

					}

					}
					break;
				case 5 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1256:5: ( bit_expr ( NOT_SYM )? REGEXP bit_expr )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1256:5: ( bit_expr ( NOT_SYM )? REGEXP bit_expr )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1256:7: bit_expr ( NOT_SYM )? REGEXP bit_expr
					{
					pushFollow(FOLLOW_bit_expr_in_predicate22740);
					bit_expr108=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr108.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1256:16: ( NOT_SYM )?
					int alt28=2;
					int LA28_0 = input.LA(1);
					if ( (LA28_0==NOT_SYM) ) {
						alt28=1;
					}
					switch (alt28) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1256:17: NOT_SYM
							{
							NOT_SYM109=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_predicate22743); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							NOT_SYM109_tree = (CommonTree)adaptor.create(NOT_SYM109);
							adaptor.addChild(root_0, NOT_SYM109_tree);
							}

							}
							break;

					}

					REGEXP110=(Token)match(input,REGEXP,FOLLOW_REGEXP_in_predicate22747); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					REGEXP110_tree = (CommonTree)adaptor.create(REGEXP110);
					adaptor.addChild(root_0, REGEXP110_tree);
					}

					pushFollow(FOLLOW_bit_expr_in_predicate22749);
					bit_expr111=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr111.getTree());

					}

					}
					break;
				case 6 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1257:5: ( bit_expr )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1257:5: ( bit_expr )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1257:7: bit_expr
					{
					pushFollow(FOLLOW_bit_expr_in_predicate22760);
					bit_expr112=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr112.getTree());

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "predicate"


	public static class bit_expr_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "bit_expr"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1259:1: bit_expr : factor1 ( VERTBAR factor1 )? ;
	public final SQLParser.bit_expr_return bit_expr() throws RecognitionException {
		SQLParser.bit_expr_return retval = new SQLParser.bit_expr_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token VERTBAR114=null;
		ParserRuleReturnScope factor1113 =null;
		ParserRuleReturnScope factor1115 =null;

		CommonTree VERTBAR114_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1259:9: ( factor1 ( VERTBAR factor1 )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1260:3: factor1 ( VERTBAR factor1 )?
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_factor1_in_bit_expr22773);
			factor1113=factor1();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, factor1113.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1260:11: ( VERTBAR factor1 )?
			int alt30=2;
			int LA30_0 = input.LA(1);
			if ( (LA30_0==VERTBAR) ) {
				int LA30_1 = input.LA(2);
				if ( (synpred292_SQL()) ) {
					alt30=1;
				}
			}
			switch (alt30) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1260:13: VERTBAR factor1
					{
					VERTBAR114=(Token)match(input,VERTBAR,FOLLOW_VERTBAR_in_bit_expr22777); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					VERTBAR114_tree = (CommonTree)adaptor.create(VERTBAR114);
					adaptor.addChild(root_0, VERTBAR114_tree);
					}

					pushFollow(FOLLOW_factor1_in_bit_expr22779);
					factor1115=factor1();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, factor1115.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "bit_expr"


	public static class factor1_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "factor1"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1261:1: factor1 : factor2 ( BITAND factor2 )? ;
	public final SQLParser.factor1_return factor1() throws RecognitionException {
		SQLParser.factor1_return retval = new SQLParser.factor1_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token BITAND117=null;
		ParserRuleReturnScope factor2116 =null;
		ParserRuleReturnScope factor2118 =null;

		CommonTree BITAND117_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1261:8: ( factor2 ( BITAND factor2 )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1262:3: factor2 ( BITAND factor2 )?
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_factor2_in_factor122791);
			factor2116=factor2();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, factor2116.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1262:11: ( BITAND factor2 )?
			int alt31=2;
			int LA31_0 = input.LA(1);
			if ( (LA31_0==BITAND) ) {
				int LA31_1 = input.LA(2);
				if ( (synpred293_SQL()) ) {
					alt31=1;
				}
			}
			switch (alt31) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1262:13: BITAND factor2
					{
					BITAND117=(Token)match(input,BITAND,FOLLOW_BITAND_in_factor122795); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BITAND117_tree = (CommonTree)adaptor.create(BITAND117);
					adaptor.addChild(root_0, BITAND117_tree);
					}

					pushFollow(FOLLOW_factor2_in_factor122797);
					factor2118=factor2();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, factor2118.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "factor1"


	public static class factor2_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "factor2"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1263:1: factor2 : factor3 ( ( SHIFT_LEFT | SHIFT_RIGHT ) factor3 )? ;
	public final SQLParser.factor2_return factor2() throws RecognitionException {
		SQLParser.factor2_return retval = new SQLParser.factor2_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token set120=null;
		ParserRuleReturnScope factor3119 =null;
		ParserRuleReturnScope factor3121 =null;

		CommonTree set120_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1263:8: ( factor3 ( ( SHIFT_LEFT | SHIFT_RIGHT ) factor3 )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1264:3: factor3 ( ( SHIFT_LEFT | SHIFT_RIGHT ) factor3 )?
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_factor3_in_factor222809);
			factor3119=factor3();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, factor3119.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1264:11: ( ( SHIFT_LEFT | SHIFT_RIGHT ) factor3 )?
			int alt32=2;
			int LA32_0 = input.LA(1);
			if ( ((LA32_0 >= SHIFT_LEFT && LA32_0 <= SHIFT_RIGHT)) ) {
				int LA32_1 = input.LA(2);
				if ( (synpred295_SQL()) ) {
					alt32=1;
				}
			}
			switch (alt32) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1264:13: ( SHIFT_LEFT | SHIFT_RIGHT ) factor3
					{
					set120=input.LT(1);
					if ( (input.LA(1) >= SHIFT_LEFT && input.LA(1) <= SHIFT_RIGHT) ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set120));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					pushFollow(FOLLOW_factor3_in_factor222819);
					factor3121=factor3();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, factor3121.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "factor2"


	public static class factor3_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "factor3"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1265:1: factor3 : factor4 ( ( PLUS | MINUS ) factor4 )? ;
	public final SQLParser.factor3_return factor3() throws RecognitionException {
		SQLParser.factor3_return retval = new SQLParser.factor3_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token set123=null;
		ParserRuleReturnScope factor4122 =null;
		ParserRuleReturnScope factor4124 =null;

		CommonTree set123_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1265:8: ( factor4 ( ( PLUS | MINUS ) factor4 )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1266:3: factor4 ( ( PLUS | MINUS ) factor4 )?
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_factor4_in_factor322831);
			factor4122=factor4();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, factor4122.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1266:11: ( ( PLUS | MINUS ) factor4 )?
			int alt33=2;
			int LA33_0 = input.LA(1);
			if ( (LA33_0==MINUS||LA33_0==PLUS) ) {
				int LA33_1 = input.LA(2);
				if ( (synpred297_SQL()) ) {
					alt33=1;
				}
			}
			switch (alt33) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1266:13: ( PLUS | MINUS ) factor4
					{
					set123=input.LT(1);
					if ( input.LA(1)==MINUS||input.LA(1)==PLUS ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set123));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					pushFollow(FOLLOW_factor4_in_factor322841);
					factor4124=factor4();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, factor4124.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "factor3"


	public static class factor4_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "factor4"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1267:1: factor4 : factor5 ( ( ASTERISK | DIVIDE | MOD_SYM | POWER_OP ) factor5 )? ;
	public final SQLParser.factor4_return factor4() throws RecognitionException {
		SQLParser.factor4_return retval = new SQLParser.factor4_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token set126=null;
		ParserRuleReturnScope factor5125 =null;
		ParserRuleReturnScope factor5127 =null;

		CommonTree set126_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1267:8: ( factor5 ( ( ASTERISK | DIVIDE | MOD_SYM | POWER_OP ) factor5 )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1268:3: factor5 ( ( ASTERISK | DIVIDE | MOD_SYM | POWER_OP ) factor5 )?
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_factor5_in_factor422853);
			factor5125=factor5();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, factor5125.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1268:11: ( ( ASTERISK | DIVIDE | MOD_SYM | POWER_OP ) factor5 )?
			int alt34=2;
			int LA34_0 = input.LA(1);
			if ( (LA34_0==ASTERISK||LA34_0==DIVIDE||LA34_0==MOD_SYM||LA34_0==POWER_OP) ) {
				int LA34_1 = input.LA(2);
				if ( (synpred301_SQL()) ) {
					alt34=1;
				}
			}
			switch (alt34) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1268:13: ( ASTERISK | DIVIDE | MOD_SYM | POWER_OP ) factor5
					{
					set126=input.LT(1);
					if ( input.LA(1)==ASTERISK||input.LA(1)==DIVIDE||input.LA(1)==MOD_SYM||input.LA(1)==POWER_OP ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set126));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					pushFollow(FOLLOW_factor5_in_factor422867);
					factor5127=factor5();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, factor5127.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "factor4"


	public static class factor5_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "factor5"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1269:1: factor5 : factor6 ( ( PLUS | MINUS ) interval_expr )? ;
	public final SQLParser.factor5_return factor5() throws RecognitionException {
		SQLParser.factor5_return retval = new SQLParser.factor5_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token set129=null;
		ParserRuleReturnScope factor6128 =null;
		ParserRuleReturnScope interval_expr130 =null;

		CommonTree set129_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1269:8: ( factor6 ( ( PLUS | MINUS ) interval_expr )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1270:3: factor6 ( ( PLUS | MINUS ) interval_expr )?
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_factor6_in_factor522879);
			factor6128=factor6();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, factor6128.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1270:11: ( ( PLUS | MINUS ) interval_expr )?
			int alt35=2;
			int LA35_0 = input.LA(1);
			if ( (LA35_0==MINUS||LA35_0==PLUS) ) {
				int LA35_1 = input.LA(2);
				if ( (synpred303_SQL()) ) {
					alt35=1;
				}
			}
			switch (alt35) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1270:13: ( PLUS | MINUS ) interval_expr
					{
					set129=input.LT(1);
					if ( input.LA(1)==MINUS||input.LA(1)==PLUS ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set129));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					pushFollow(FOLLOW_interval_expr_in_factor522889);
					interval_expr130=interval_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, interval_expr130.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "factor5"


	public static class factor6_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "factor6"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1271:1: factor6 : ( ( PLUS | MINUS | NEGATION | BINARY ) simple_expr | simple_expr );
	public final SQLParser.factor6_return factor6() throws RecognitionException {
		SQLParser.factor6_return retval = new SQLParser.factor6_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token set131=null;
		ParserRuleReturnScope simple_expr132 =null;
		ParserRuleReturnScope simple_expr133 =null;

		CommonTree set131_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1271:8: ( ( PLUS | MINUS | NEGATION | BINARY ) simple_expr | simple_expr )
			int alt36=2;
			switch ( input.LA(1) ) {
			case MINUS:
			case PLUS:
				{
				int LA36_1 = input.LA(2);
				if ( (LA36_1==ABS||LA36_1==ACOS||(LA36_1 >= ADDDATE && LA36_1 <= ADDTIME)||(LA36_1 >= AES_DECRYPT && LA36_1 <= AES_ENCRYPT)||LA36_1==ASCII_SYM||LA36_1==ASIN||(LA36_1 >= ATAN && LA36_1 <= ATAN2)||LA36_1==AVG||LA36_1==BENCHMARK||LA36_1==BIN||(LA36_1 >= BIT_AND && LA36_1 <= BIT_OR)||LA36_1==BIT_XOR||(LA36_1 >= CASE_SYM && LA36_1 <= CEILING)||LA36_1==CHAR||(LA36_1 >= CHARSET && LA36_1 <= CHAR_LENGTH)||LA36_1==COERCIBILITY||LA36_1==COLLATION||(LA36_1 >= CONCAT && LA36_1 <= CONCAT_WS)||LA36_1==CONNECTION_ID||(LA36_1 >= CONV && LA36_1 <= CONVERT_TZ)||(LA36_1 >= COS && LA36_1 <= COUNT)||LA36_1==CRC32||LA36_1==CURDATE||LA36_1==CURRENT_USER||LA36_1==CURTIME||LA36_1==DATABASE||LA36_1==DATEDIFF||(LA36_1 >= DATE_ADD && LA36_1 <= DAYOFYEAR)||(LA36_1 >= DECODE && LA36_1 <= DEFAULT)||LA36_1==DEGREES||(LA36_1 >= DES_DECRYPT && LA36_1 <= DES_ENCRYPT)||LA36_1==ELT||(LA36_1 >= ENCODE && LA36_1 <= ENCRYPT)||LA36_1==EXISTS||LA36_1==EXP||LA36_1==EXPORT_SET||LA36_1==EXTRACT||LA36_1==FALSE_SYM||LA36_1==FIELD||LA36_1==FIND_IN_SET||LA36_1==FLOOR||LA36_1==FORMAT||LA36_1==FOUND_ROWS||(LA36_1 >= FROM_BASE64 && LA36_1 <= FROM_UNIXTIME)||(LA36_1 >= GET_FORMAT && LA36_1 <= GET_LOCK)||LA36_1==GROUP_CONCAT||(LA36_1 >= HEX && LA36_1 <= HEX_DIGIT)||LA36_1==HOUR||LA36_1==ID||(LA36_1 >= IF && LA36_1 <= IFNULL)||(LA36_1 >= INET_ATON && LA36_1 <= INET_NTOA)||LA36_1==INSERT||LA36_1==INSTR||LA36_1==INTERVAL_SYM||LA36_1==IS_FREE_LOCK||LA36_1==IS_USED_LOCK||(LA36_1 >= LAST_DAY && LA36_1 <= LAST_INSERT_ID)||(LA36_1 >= LEFT && LA36_1 <= LENGTH)||LA36_1==LN||LA36_1==LOAD_FILE||LA36_1==LOCATE||(LA36_1 >= LOG && LA36_1 <= LOG2)||LA36_1==LOWER||(LA36_1 >= LPAD && LA36_1 <= LPAREN)||LA36_1==LTRIM||(LA36_1 >= MAKEDATE && LA36_1 <= MAKE_SET)||LA36_1==MASTER_POS_WAIT||LA36_1==MATCH||LA36_1==MAX_SYM||LA36_1==MD5||(LA36_1 >= MICROSECOND && LA36_1 <= MID)||(LA36_1 >= MINUS && LA36_1 <= MINUTE)||LA36_1==MIN_SYM||LA36_1==MOD||(LA36_1 >= MONTH && LA36_1 <= MONTHNAME)||LA36_1==NAME_CONST||LA36_1==NOW||LA36_1==NULL_SYM||LA36_1==OCT||LA36_1==OLD_PASSWORD||LA36_1==ORD||(LA36_1 >= PASSWORD && LA36_1 <= PERIOD_DIFF)||LA36_1==PI||LA36_1==PLUS||(LA36_1 >= POW && LA36_1 <= POWER)||LA36_1==QUARTER||LA36_1==QUOTE||(LA36_1 >= RADIANS && LA36_1 <= RAND)||LA36_1==RELEASE_LOCK||LA36_1==REPEAT||LA36_1==REPLACE||LA36_1==REVERSE||LA36_1==RIGHT||LA36_1==ROUND||(LA36_1 >= ROW_SYM && LA36_1 <= RPAD)||LA36_1==RTRIM||(LA36_1 >= SCHEMA && LA36_1 <= SECOND)||LA36_1==SEC_TO_TIME||LA36_1==SESSION_USER||LA36_1==SIGN||LA36_1==SIN||LA36_1==SLEEP||LA36_1==SOUNDEX||LA36_1==SPACE||LA36_1==SQRT||(LA36_1 >= STD && LA36_1 <= STDDEV_SAMP)||LA36_1==STRCMP||LA36_1==STR_TO_DATE||(LA36_1 >= SUBSTRING && LA36_1 <= SUM)||(LA36_1 >= SYSDATE && LA36_1 <= SYSTEM_USER)||LA36_1==TAN||LA36_1==TEXT_STRING||(LA36_1 >= TIMEDIFF && LA36_1 <= TIME_TO_SEC)||(LA36_1 >= TO_BASE64 && LA36_1 <= TO_SECONDS)||(LA36_1 >= TRIM && LA36_1 <= TRUNCATE)||LA36_1==UNHEX||LA36_1==UNIX_TIMESTAMP||LA36_1==UPPER||(LA36_1 >= USER && LA36_1 <= USER_VAR)||(LA36_1 >= UTC_DATE && LA36_1 <= UTC_TIMESTAMP)||LA36_1==UUID||LA36_1==VALUES||LA36_1==VARIANCE||(LA36_1 >= VAR_POP && LA36_1 <= VERSION_SYM)||(LA36_1 >= WEEK && LA36_1 <= WEIGHT_STRING)||(LA36_1 >= YEAR && LA36_1 <= YEARWEEK)) ) {
					alt36=1;
				}
				else if ( (LA36_1==INTEGER_NUM||LA36_1==REAL_NUMBER) ) {
					int LA36_4 = input.LA(3);
					if ( (synpred307_SQL()) ) {
						alt36=1;
					}
					else if ( (true) ) {
						alt36=2;
					}

				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 36, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case ASCII_SYM:
			case ASIN:
			case ATAN:
			case ATAN2:
			case AVG:
			case BENCHMARK:
			case BIN:
			case BIT_AND:
			case BIT_LENGTH:
			case BIT_NUM:
			case BIT_OR:
			case BIT_XOR:
			case CASE_SYM:
			case CAST_SYM:
			case CEIL:
			case CEILING:
			case CHAR:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_SYM:
			case CONVERT_TZ:
			case COS:
			case COT:
			case COUNT:
			case CRC32:
			case CURDATE:
			case CURRENT_USER:
			case CURTIME:
			case DATABASE:
			case DATEDIFF:
			case DATE_ADD:
			case DATE_FORMAT:
			case DATE_SUB:
			case DATE_SYM:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEFAULT:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case EXISTS:
			case EXP:
			case EXPORT_SET:
			case EXTRACT:
			case FALSE_SYM:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GET_FORMAT:
			case GET_LOCK:
			case GROUP_CONCAT:
			case HEX:
			case HEX_DIGIT:
			case HOUR:
			case ID:
			case IF:
			case IFNULL:
			case INET_ATON:
			case INET_NTOA:
			case INSERT:
			case INSTR:
			case INTEGER_NUM:
			case INTERVAL_SYM:
			case IS_FREE_LOCK:
			case IS_USED_LOCK:
			case LAST_DAY:
			case LAST_INSERT_ID:
			case LEFT:
			case LENGTH:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LPAREN:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MATCH:
			case MAX_SYM:
			case MD5:
			case MICROSECOND:
			case MID:
			case MINUTE:
			case MIN_SYM:
			case MOD:
			case MONTH:
			case MONTHNAME:
			case NAME_CONST:
			case NOW:
			case NULL_SYM:
			case OCT:
			case OLD_PASSWORD:
			case ORD:
			case PASSWORD:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POW:
			case POWER:
			case QUARTER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case REAL_NUMBER:
			case RELEASE_LOCK:
			case REPEAT:
			case REPLACE:
			case REVERSE:
			case RIGHT:
			case ROUND:
			case ROW_SYM:
			case RPAD:
			case RTRIM:
			case SCHEMA:
			case SECOND:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STRCMP:
			case STR_TO_DATE:
			case SUBSTRING:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SUM:
			case SYSDATE:
			case SYSTEM_USER:
			case TAN:
			case TEXT_STRING:
			case TIMEDIFF:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_SYM:
			case TIME_TO_SEC:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case TRIM:
			case TRUE_SYM:
			case TRUNCATE:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPPER:
			case USER:
			case USER_VAR:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case UUID:
			case VALUES:
			case VARIANCE:
			case VAR_POP:
			case VAR_SAMP:
			case VERSION_SYM:
			case WEEK:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case YEAR:
			case YEARWEEK:
				{
				alt36=2;
				}
				break;
			case BINARY:
			case NEGATION:
				{
				alt36=1;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 36, 0, input);
				throw nvae;
			}
			switch (alt36) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1272:3: ( PLUS | MINUS | NEGATION | BINARY ) simple_expr
					{
					root_0 = (CommonTree)adaptor.nil();


					set131=input.LT(1);
					if ( input.LA(1)==BINARY||input.LA(1)==MINUS||input.LA(1)==NEGATION||input.LA(1)==PLUS ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set131));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					pushFollow(FOLLOW_simple_expr_in_factor622917);
					simple_expr132=simple_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expr132.getTree());

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1273:5: simple_expr
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_simple_expr_in_factor622923);
					simple_expr133=simple_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expr133.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "factor6"


	public static class factor7_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "factor7"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1274:1: factor7 : simple_expr ( COLLATE_SYM collation_names )? ;
	public final SQLParser.factor7_return factor7() throws RecognitionException {
		SQLParser.factor7_return retval = new SQLParser.factor7_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COLLATE_SYM135=null;
		ParserRuleReturnScope simple_expr134 =null;
		ParserRuleReturnScope collation_names136 =null;

		CommonTree COLLATE_SYM135_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1274:8: ( simple_expr ( COLLATE_SYM collation_names )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1275:3: simple_expr ( COLLATE_SYM collation_names )?
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_simple_expr_in_factor722932);
			simple_expr134=simple_expr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expr134.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1275:15: ( COLLATE_SYM collation_names )?
			int alt37=2;
			int LA37_0 = input.LA(1);
			if ( (LA37_0==COLLATE_SYM) ) {
				alt37=1;
			}
			switch (alt37) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1275:16: COLLATE_SYM collation_names
					{
					COLLATE_SYM135=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_factor722935); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COLLATE_SYM135_tree = (CommonTree)adaptor.create(COLLATE_SYM135);
					adaptor.addChild(root_0, COLLATE_SYM135_tree);
					}

					pushFollow(FOLLOW_collation_names_in_factor722937);
					collation_names136=collation_names();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_names136.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "factor7"


	public static class simple_expr_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "simple_expr"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1276:1: simple_expr : ( literal_value | column_spec | function_call | USER_VAR | expression_list | ( ROW_SYM expression_list ) | subquery | EXISTS subquery | match_against_statement | case_when_statement | interval_expr );
	public final SQLParser.simple_expr_return simple_expr() throws RecognitionException {
		SQLParser.simple_expr_return retval = new SQLParser.simple_expr_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token USER_VAR140=null;
		Token ROW_SYM142=null;
		Token EXISTS145=null;
		ParserRuleReturnScope literal_value137 =null;
		ParserRuleReturnScope column_spec138 =null;
		ParserRuleReturnScope function_call139 =null;
		ParserRuleReturnScope expression_list141 =null;
		ParserRuleReturnScope expression_list143 =null;
		ParserRuleReturnScope subquery144 =null;
		ParserRuleReturnScope subquery146 =null;
		ParserRuleReturnScope match_against_statement147 =null;
		ParserRuleReturnScope case_when_statement148 =null;
		ParserRuleReturnScope interval_expr149 =null;

		CommonTree USER_VAR140_tree=null;
		CommonTree ROW_SYM142_tree=null;
		CommonTree EXISTS145_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1276:12: ( literal_value | column_spec | function_call | USER_VAR | expression_list | ( ROW_SYM expression_list ) | subquery | EXISTS subquery | match_against_statement | case_when_statement | interval_expr )
			int alt38=11;
			switch ( input.LA(1) ) {
			case BIT_NUM:
			case FALSE_SYM:
			case HEX_DIGIT:
			case INTEGER_NUM:
			case MINUS:
			case NULL_SYM:
			case PLUS:
			case REAL_NUMBER:
			case TEXT_STRING:
			case TRUE_SYM:
				{
				alt38=1;
				}
				break;
			case ID:
				{
				alt38=2;
				}
				break;
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case ASCII_SYM:
			case ASIN:
			case ATAN:
			case ATAN2:
			case AVG:
			case BENCHMARK:
			case BIN:
			case BIT_AND:
			case BIT_LENGTH:
			case BIT_OR:
			case BIT_XOR:
			case CAST_SYM:
			case CEIL:
			case CEILING:
			case CHAR:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_SYM:
			case CONVERT_TZ:
			case COS:
			case COT:
			case COUNT:
			case CRC32:
			case CURDATE:
			case CURRENT_USER:
			case CURTIME:
			case DATABASE:
			case DATEDIFF:
			case DATE_ADD:
			case DATE_FORMAT:
			case DATE_SUB:
			case DATE_SYM:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEFAULT:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case EXP:
			case EXPORT_SET:
			case EXTRACT:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GET_FORMAT:
			case GET_LOCK:
			case GROUP_CONCAT:
			case HEX:
			case HOUR:
			case IF:
			case IFNULL:
			case INET_ATON:
			case INET_NTOA:
			case INSERT:
			case INSTR:
			case IS_FREE_LOCK:
			case IS_USED_LOCK:
			case LAST_DAY:
			case LAST_INSERT_ID:
			case LEFT:
			case LENGTH:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MAX_SYM:
			case MD5:
			case MICROSECOND:
			case MID:
			case MINUTE:
			case MIN_SYM:
			case MOD:
			case MONTH:
			case MONTHNAME:
			case NAME_CONST:
			case NOW:
			case OCT:
			case OLD_PASSWORD:
			case ORD:
			case PASSWORD:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POW:
			case POWER:
			case QUARTER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RELEASE_LOCK:
			case REPEAT:
			case REPLACE:
			case REVERSE:
			case RIGHT:
			case ROUND:
			case RPAD:
			case RTRIM:
			case SCHEMA:
			case SECOND:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STRCMP:
			case STR_TO_DATE:
			case SUBSTRING:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SUM:
			case SYSDATE:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_SYM:
			case TIME_TO_SEC:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case TRIM:
			case TRUNCATE:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPPER:
			case USER:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case UUID:
			case VALUES:
			case VARIANCE:
			case VAR_POP:
			case VAR_SAMP:
			case VERSION_SYM:
			case WEEK:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case YEAR:
			case YEARWEEK:
				{
				alt38=3;
				}
				break;
			case USER_VAR:
				{
				alt38=4;
				}
				break;
			case LPAREN:
				{
				int LA38_5 = input.LA(2);
				if ( (LA38_5==ABS||LA38_5==ACOS||(LA38_5 >= ADDDATE && LA38_5 <= ADDTIME)||(LA38_5 >= AES_DECRYPT && LA38_5 <= AES_ENCRYPT)||LA38_5==ASCII_SYM||LA38_5==ASIN||(LA38_5 >= ATAN && LA38_5 <= ATAN2)||LA38_5==AVG||LA38_5==BENCHMARK||(LA38_5 >= BIN && LA38_5 <= BINARY)||(LA38_5 >= BIT_AND && LA38_5 <= BIT_OR)||LA38_5==BIT_XOR||(LA38_5 >= CASE_SYM && LA38_5 <= CEILING)||LA38_5==CHAR||(LA38_5 >= CHARSET && LA38_5 <= CHAR_LENGTH)||LA38_5==COERCIBILITY||LA38_5==COLLATION||(LA38_5 >= CONCAT && LA38_5 <= CONCAT_WS)||LA38_5==CONNECTION_ID||(LA38_5 >= CONV && LA38_5 <= CONVERT_TZ)||(LA38_5 >= COS && LA38_5 <= COUNT)||LA38_5==CRC32||LA38_5==CURDATE||LA38_5==CURRENT_USER||LA38_5==CURTIME||LA38_5==DATABASE||LA38_5==DATEDIFF||(LA38_5 >= DATE_ADD && LA38_5 <= DAYOFYEAR)||(LA38_5 >= DECODE && LA38_5 <= DEFAULT)||LA38_5==DEGREES||(LA38_5 >= DES_DECRYPT && LA38_5 <= DES_ENCRYPT)||LA38_5==ELT||(LA38_5 >= ENCODE && LA38_5 <= ENCRYPT)||LA38_5==EXISTS||LA38_5==EXP||LA38_5==EXPORT_SET||LA38_5==EXTRACT||LA38_5==FALSE_SYM||LA38_5==FIELD||LA38_5==FIND_IN_SET||LA38_5==FLOOR||LA38_5==FORMAT||LA38_5==FOUND_ROWS||(LA38_5 >= FROM_BASE64 && LA38_5 <= FROM_UNIXTIME)||(LA38_5 >= GET_FORMAT && LA38_5 <= GET_LOCK)||LA38_5==GROUP_CONCAT||(LA38_5 >= HEX && LA38_5 <= HEX_DIGIT)||LA38_5==HOUR||LA38_5==ID||(LA38_5 >= IF && LA38_5 <= IFNULL)||(LA38_5 >= INET_ATON && LA38_5 <= INET_NTOA)||LA38_5==INSERT||(LA38_5 >= INSTR && LA38_5 <= INTEGER_NUM)||LA38_5==INTERVAL_SYM||LA38_5==IS_FREE_LOCK||LA38_5==IS_USED_LOCK||(LA38_5 >= LAST_DAY && LA38_5 <= LAST_INSERT_ID)||(LA38_5 >= LEFT && LA38_5 <= LENGTH)||LA38_5==LN||LA38_5==LOAD_FILE||LA38_5==LOCATE||(LA38_5 >= LOG && LA38_5 <= LOG2)||LA38_5==LOWER||(LA38_5 >= LPAD && LA38_5 <= LPAREN)||LA38_5==LTRIM||(LA38_5 >= MAKEDATE && LA38_5 <= MAKE_SET)||LA38_5==MASTER_POS_WAIT||LA38_5==MATCH||LA38_5==MAX_SYM||LA38_5==MD5||(LA38_5 >= MICROSECOND && LA38_5 <= MID)||(LA38_5 >= MINUS && LA38_5 <= MINUTE)||LA38_5==MIN_SYM||LA38_5==MOD||(LA38_5 >= MONTH && LA38_5 <= MONTHNAME)||LA38_5==NAME_CONST||LA38_5==NEGATION||(LA38_5 >= NOT_SYM && LA38_5 <= NOW)||LA38_5==NULL_SYM||LA38_5==OCT||LA38_5==OLD_PASSWORD||LA38_5==ORD||(LA38_5 >= PASSWORD && LA38_5 <= PERIOD_DIFF)||LA38_5==PI||LA38_5==PLUS||(LA38_5 >= POW && LA38_5 <= POWER)||LA38_5==QUARTER||LA38_5==QUOTE||(LA38_5 >= RADIANS && LA38_5 <= RAND)||LA38_5==REAL_NUMBER||LA38_5==RELEASE_LOCK||LA38_5==REPEAT||LA38_5==REPLACE||LA38_5==REVERSE||LA38_5==RIGHT||LA38_5==ROUND||(LA38_5 >= ROW_SYM && LA38_5 <= RPAD)||LA38_5==RTRIM||(LA38_5 >= SCHEMA && LA38_5 <= SECOND)||LA38_5==SEC_TO_TIME||LA38_5==SESSION_USER||LA38_5==SIGN||LA38_5==SIN||LA38_5==SLEEP||LA38_5==SOUNDEX||LA38_5==SPACE||LA38_5==SQRT||(LA38_5 >= STD && LA38_5 <= STDDEV_SAMP)||LA38_5==STRCMP||LA38_5==STR_TO_DATE||(LA38_5 >= SUBSTRING && LA38_5 <= SUM)||(LA38_5 >= SYSDATE && LA38_5 <= SYSTEM_USER)||LA38_5==TAN||LA38_5==TEXT_STRING||(LA38_5 >= TIMEDIFF && LA38_5 <= TIME_TO_SEC)||(LA38_5 >= TO_BASE64 && LA38_5 <= TO_SECONDS)||(LA38_5 >= TRIM && LA38_5 <= TRUNCATE)||LA38_5==UNHEX||LA38_5==UNIX_TIMESTAMP||LA38_5==UPPER||(LA38_5 >= USER && LA38_5 <= USER_VAR)||(LA38_5 >= UTC_DATE && LA38_5 <= UTC_TIMESTAMP)||LA38_5==UUID||LA38_5==VALUES||LA38_5==VARIANCE||(LA38_5 >= VAR_POP && LA38_5 <= VERSION_SYM)||(LA38_5 >= WEEK && LA38_5 <= WEIGHT_STRING)||(LA38_5 >= YEAR && LA38_5 <= YEARWEEK)) ) {
					alt38=5;
				}
				else if ( (LA38_5==SELECT) ) {
					alt38=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 38, 5, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ROW_SYM:
				{
				alt38=6;
				}
				break;
			case EXISTS:
				{
				alt38=8;
				}
				break;
			case MATCH:
				{
				alt38=9;
				}
				break;
			case CASE_SYM:
				{
				alt38=10;
				}
				break;
			case INTERVAL_SYM:
				{
				alt38=11;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 38, 0, input);
				throw nvae;
			}
			switch (alt38) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1277:3: literal_value
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_literal_value_in_simple_expr22947);
					literal_value137=literal_value();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, literal_value137.getTree());

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1278:5: column_spec
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_column_spec_in_simple_expr22954);
					column_spec138=column_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec138.getTree());

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1279:5: function_call
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_function_call_in_simple_expr22960);
					function_call139=function_call();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, function_call139.getTree());

					}
					break;
				case 4 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1281:5: USER_VAR
					{
					root_0 = (CommonTree)adaptor.nil();


					USER_VAR140=(Token)match(input,USER_VAR,FOLLOW_USER_VAR_in_simple_expr22969); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					USER_VAR140_tree = (CommonTree)adaptor.create(USER_VAR140);
					adaptor.addChild(root_0, USER_VAR140_tree);
					}

					}
					break;
				case 5 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1282:5: expression_list
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_expression_list_in_simple_expr22975);
					expression_list141=expression_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list141.getTree());

					}
					break;
				case 6 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1283:5: ( ROW_SYM expression_list )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1283:5: ( ROW_SYM expression_list )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1283:6: ROW_SYM expression_list
					{
					ROW_SYM142=(Token)match(input,ROW_SYM,FOLLOW_ROW_SYM_in_simple_expr22982); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ROW_SYM142_tree = (CommonTree)adaptor.create(ROW_SYM142);
					adaptor.addChild(root_0, ROW_SYM142_tree);
					}

					pushFollow(FOLLOW_expression_list_in_simple_expr22984);
					expression_list143=expression_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list143.getTree());

					}

					}
					break;
				case 7 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1284:5: subquery
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_subquery_in_simple_expr22991);
					subquery144=subquery();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery144.getTree());

					}
					break;
				case 8 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1285:5: EXISTS subquery
					{
					root_0 = (CommonTree)adaptor.nil();


					EXISTS145=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_simple_expr22997); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXISTS145_tree = (CommonTree)adaptor.create(EXISTS145);
					adaptor.addChild(root_0, EXISTS145_tree);
					}

					pushFollow(FOLLOW_subquery_in_simple_expr22999);
					subquery146=subquery();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery146.getTree());

					}
					break;
				case 9 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1287:5: match_against_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_match_against_statement_in_simple_expr23008);
					match_against_statement147=match_against_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, match_against_statement147.getTree());

					}
					break;
				case 10 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1288:5: case_when_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_case_when_statement_in_simple_expr23014);
					case_when_statement148=case_when_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, case_when_statement148.getTree());

					}
					break;
				case 11 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1289:5: interval_expr
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_interval_expr_in_simple_expr23020);
					interval_expr149=interval_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, interval_expr149.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "simple_expr"


	public static class function_call_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "function_call"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1293:1: function_call : ( ( functionList ( LPAREN ( expression ( COMMA expression )* )? RPAREN )? ) | ( CAST_SYM LPAREN expression AS_SYM cast_data_type RPAREN ) | ( CONVERT_SYM LPAREN expression COMMA cast_data_type RPAREN ) | ( CONVERT_SYM LPAREN expression USING_SYM transcoding_name RPAREN ) | ( group_functions LPAREN ( ASTERISK | ALL | DISTINCT )? bit_expr RPAREN ) );
	public final SQLParser.function_call_return function_call() throws RecognitionException {
		SQLParser.function_call_return retval = new SQLParser.function_call_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LPAREN151=null;
		Token COMMA153=null;
		Token RPAREN155=null;
		Token CAST_SYM156=null;
		Token LPAREN157=null;
		Token AS_SYM159=null;
		Token RPAREN161=null;
		Token CONVERT_SYM162=null;
		Token LPAREN163=null;
		Token COMMA165=null;
		Token RPAREN167=null;
		Token CONVERT_SYM168=null;
		Token LPAREN169=null;
		Token USING_SYM171=null;
		Token RPAREN173=null;
		Token LPAREN175=null;
		Token set176=null;
		Token RPAREN178=null;
		ParserRuleReturnScope functionList150 =null;
		ParserRuleReturnScope expression152 =null;
		ParserRuleReturnScope expression154 =null;
		ParserRuleReturnScope expression158 =null;
		ParserRuleReturnScope cast_data_type160 =null;
		ParserRuleReturnScope expression164 =null;
		ParserRuleReturnScope cast_data_type166 =null;
		ParserRuleReturnScope expression170 =null;
		ParserRuleReturnScope transcoding_name172 =null;
		ParserRuleReturnScope group_functions174 =null;
		ParserRuleReturnScope bit_expr177 =null;

		CommonTree LPAREN151_tree=null;
		CommonTree COMMA153_tree=null;
		CommonTree RPAREN155_tree=null;
		CommonTree CAST_SYM156_tree=null;
		CommonTree LPAREN157_tree=null;
		CommonTree AS_SYM159_tree=null;
		CommonTree RPAREN161_tree=null;
		CommonTree CONVERT_SYM162_tree=null;
		CommonTree LPAREN163_tree=null;
		CommonTree COMMA165_tree=null;
		CommonTree RPAREN167_tree=null;
		CommonTree CONVERT_SYM168_tree=null;
		CommonTree LPAREN169_tree=null;
		CommonTree USING_SYM171_tree=null;
		CommonTree RPAREN173_tree=null;
		CommonTree LPAREN175_tree=null;
		CommonTree set176_tree=null;
		CommonTree RPAREN178_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1293:14: ( ( functionList ( LPAREN ( expression ( COMMA expression )* )? RPAREN )? ) | ( CAST_SYM LPAREN expression AS_SYM cast_data_type RPAREN ) | ( CONVERT_SYM LPAREN expression COMMA cast_data_type RPAREN ) | ( CONVERT_SYM LPAREN expression USING_SYM transcoding_name RPAREN ) | ( group_functions LPAREN ( ASTERISK | ALL | DISTINCT )? bit_expr RPAREN ) )
			int alt43=5;
			switch ( input.LA(1) ) {
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case ASCII_SYM:
			case ASIN:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_LENGTH:
			case CEIL:
			case CEILING:
			case CHAR:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CURDATE:
			case CURRENT_USER:
			case CURTIME:
			case DATABASE:
			case DATEDIFF:
			case DATE_ADD:
			case DATE_FORMAT:
			case DATE_SUB:
			case DATE_SYM:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEFAULT:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case EXP:
			case EXPORT_SET:
			case EXTRACT:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GET_FORMAT:
			case GET_LOCK:
			case HEX:
			case HOUR:
			case IF:
			case IFNULL:
			case INET_ATON:
			case INET_NTOA:
			case INSERT:
			case INSTR:
			case IS_FREE_LOCK:
			case IS_USED_LOCK:
			case LAST_DAY:
			case LAST_INSERT_ID:
			case LEFT:
			case LENGTH:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MD5:
			case MICROSECOND:
			case MID:
			case MINUTE:
			case MOD:
			case MONTH:
			case MONTHNAME:
			case NAME_CONST:
			case NOW:
			case OCT:
			case OLD_PASSWORD:
			case ORD:
			case PASSWORD:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POW:
			case POWER:
			case QUARTER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RELEASE_LOCK:
			case REPEAT:
			case REPLACE:
			case REVERSE:
			case RIGHT:
			case ROUND:
			case RPAD:
			case RTRIM:
			case SCHEMA:
			case SECOND:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRCMP:
			case STR_TO_DATE:
			case SUBSTRING:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSDATE:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_SYM:
			case TIME_TO_SEC:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case TRIM:
			case TRUNCATE:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPPER:
			case USER:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case UUID:
			case VALUES:
			case VERSION_SYM:
			case WEEK:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case YEAR:
			case YEARWEEK:
				{
				alt43=1;
				}
				break;
			case CAST_SYM:
				{
				alt43=2;
				}
				break;
			case CONVERT_SYM:
				{
				int LA43_7 = input.LA(2);
				if ( (synpred324_SQL()) ) {
					alt43=3;
				}
				else if ( (synpred325_SQL()) ) {
					alt43=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 43, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX_SYM:
			case MIN_SYM:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VARIANCE:
			case VAR_POP:
			case VAR_SAMP:
				{
				alt43=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 43, 0, input);
				throw nvae;
			}
			switch (alt43) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1294:5: ( functionList ( LPAREN ( expression ( COMMA expression )* )? RPAREN )? )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1294:5: ( functionList ( LPAREN ( expression ( COMMA expression )* )? RPAREN )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1294:8: functionList ( LPAREN ( expression ( COMMA expression )* )? RPAREN )?
					{
					pushFollow(FOLLOW_functionList_in_function_call23036);
					functionList150=functionList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, functionList150.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1294:21: ( LPAREN ( expression ( COMMA expression )* )? RPAREN )?
					int alt41=2;
					int LA41_0 = input.LA(1);
					if ( (LA41_0==LPAREN) ) {
						alt41=1;
					}
					switch (alt41) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1294:23: LPAREN ( expression ( COMMA expression )* )? RPAREN
							{
							LPAREN151=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function_call23040); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN151_tree = (CommonTree)adaptor.create(LPAREN151);
							adaptor.addChild(root_0, LPAREN151_tree);
							}

							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1294:30: ( expression ( COMMA expression )* )?
							int alt40=2;
							int LA40_0 = input.LA(1);
							if ( (LA40_0==ABS||LA40_0==ACOS||(LA40_0 >= ADDDATE && LA40_0 <= ADDTIME)||(LA40_0 >= AES_DECRYPT && LA40_0 <= AES_ENCRYPT)||LA40_0==ASCII_SYM||LA40_0==ASIN||(LA40_0 >= ATAN && LA40_0 <= ATAN2)||LA40_0==AVG||LA40_0==BENCHMARK||(LA40_0 >= BIN && LA40_0 <= BINARY)||(LA40_0 >= BIT_AND && LA40_0 <= BIT_OR)||LA40_0==BIT_XOR||(LA40_0 >= CASE_SYM && LA40_0 <= CEILING)||LA40_0==CHAR||(LA40_0 >= CHARSET && LA40_0 <= CHAR_LENGTH)||LA40_0==COERCIBILITY||LA40_0==COLLATION||(LA40_0 >= CONCAT && LA40_0 <= CONCAT_WS)||LA40_0==CONNECTION_ID||(LA40_0 >= CONV && LA40_0 <= CONVERT_TZ)||(LA40_0 >= COS && LA40_0 <= COUNT)||LA40_0==CRC32||LA40_0==CURDATE||LA40_0==CURRENT_USER||LA40_0==CURTIME||LA40_0==DATABASE||LA40_0==DATEDIFF||(LA40_0 >= DATE_ADD && LA40_0 <= DAYOFYEAR)||(LA40_0 >= DECODE && LA40_0 <= DEFAULT)||LA40_0==DEGREES||(LA40_0 >= DES_DECRYPT && LA40_0 <= DES_ENCRYPT)||LA40_0==ELT||(LA40_0 >= ENCODE && LA40_0 <= ENCRYPT)||LA40_0==EXISTS||LA40_0==EXP||LA40_0==EXPORT_SET||LA40_0==EXTRACT||LA40_0==FALSE_SYM||LA40_0==FIELD||LA40_0==FIND_IN_SET||LA40_0==FLOOR||LA40_0==FORMAT||LA40_0==FOUND_ROWS||(LA40_0 >= FROM_BASE64 && LA40_0 <= FROM_UNIXTIME)||(LA40_0 >= GET_FORMAT && LA40_0 <= GET_LOCK)||LA40_0==GROUP_CONCAT||(LA40_0 >= HEX && LA40_0 <= HEX_DIGIT)||LA40_0==HOUR||LA40_0==ID||(LA40_0 >= IF && LA40_0 <= IFNULL)||(LA40_0 >= INET_ATON && LA40_0 <= INET_NTOA)||LA40_0==INSERT||(LA40_0 >= INSTR && LA40_0 <= INTEGER_NUM)||LA40_0==INTERVAL_SYM||LA40_0==IS_FREE_LOCK||LA40_0==IS_USED_LOCK||(LA40_0 >= LAST_DAY && LA40_0 <= LAST_INSERT_ID)||(LA40_0 >= LEFT && LA40_0 <= LENGTH)||LA40_0==LN||LA40_0==LOAD_FILE||LA40_0==LOCATE||(LA40_0 >= LOG && LA40_0 <= LOG2)||LA40_0==LOWER||(LA40_0 >= LPAD && LA40_0 <= LPAREN)||LA40_0==LTRIM||(LA40_0 >= MAKEDATE && LA40_0 <= MAKE_SET)||LA40_0==MASTER_POS_WAIT||LA40_0==MATCH||LA40_0==MAX_SYM||LA40_0==MD5||(LA40_0 >= MICROSECOND && LA40_0 <= MID)||(LA40_0 >= MINUS && LA40_0 <= MINUTE)||LA40_0==MIN_SYM||LA40_0==MOD||(LA40_0 >= MONTH && LA40_0 <= MONTHNAME)||LA40_0==NAME_CONST||LA40_0==NEGATION||(LA40_0 >= NOT_SYM && LA40_0 <= NOW)||LA40_0==NULL_SYM||LA40_0==OCT||LA40_0==OLD_PASSWORD||LA40_0==ORD||(LA40_0 >= PASSWORD && LA40_0 <= PERIOD_DIFF)||LA40_0==PI||LA40_0==PLUS||(LA40_0 >= POW && LA40_0 <= POWER)||LA40_0==QUARTER||LA40_0==QUOTE||(LA40_0 >= RADIANS && LA40_0 <= RAND)||LA40_0==REAL_NUMBER||LA40_0==RELEASE_LOCK||LA40_0==REPEAT||LA40_0==REPLACE||LA40_0==REVERSE||LA40_0==RIGHT||LA40_0==ROUND||(LA40_0 >= ROW_SYM && LA40_0 <= RPAD)||LA40_0==RTRIM||(LA40_0 >= SCHEMA && LA40_0 <= SECOND)||LA40_0==SEC_TO_TIME||LA40_0==SESSION_USER||LA40_0==SIGN||LA40_0==SIN||LA40_0==SLEEP||LA40_0==SOUNDEX||LA40_0==SPACE||LA40_0==SQRT||(LA40_0 >= STD && LA40_0 <= STDDEV_SAMP)||LA40_0==STRCMP||LA40_0==STR_TO_DATE||(LA40_0 >= SUBSTRING && LA40_0 <= SUM)||(LA40_0 >= SYSDATE && LA40_0 <= SYSTEM_USER)||LA40_0==TAN||LA40_0==TEXT_STRING||(LA40_0 >= TIMEDIFF && LA40_0 <= TIME_TO_SEC)||(LA40_0 >= TO_BASE64 && LA40_0 <= TO_SECONDS)||(LA40_0 >= TRIM && LA40_0 <= TRUNCATE)||LA40_0==UNHEX||LA40_0==UNIX_TIMESTAMP||LA40_0==UPPER||(LA40_0 >= USER && LA40_0 <= USER_VAR)||(LA40_0 >= UTC_DATE && LA40_0 <= UTC_TIMESTAMP)||LA40_0==UUID||LA40_0==VALUES||LA40_0==VARIANCE||(LA40_0 >= VAR_POP && LA40_0 <= VERSION_SYM)||(LA40_0 >= WEEK && LA40_0 <= WEIGHT_STRING)||(LA40_0 >= YEAR && LA40_0 <= YEARWEEK)) ) {
								alt40=1;
							}
							switch (alt40) {
								case 1 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1294:31: expression ( COMMA expression )*
									{
									pushFollow(FOLLOW_expression_in_function_call23043);
									expression152=expression();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, expression152.getTree());

									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1294:42: ( COMMA expression )*
									loop39:
									while (true) {
										int alt39=2;
										int LA39_0 = input.LA(1);
										if ( (LA39_0==COMMA) ) {
											alt39=1;
										}

										switch (alt39) {
										case 1 :
											// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1294:43: COMMA expression
											{
											COMMA153=(Token)match(input,COMMA,FOLLOW_COMMA_in_function_call23046); if (state.failed) return retval;
											if ( state.backtracking==0 ) {
											COMMA153_tree = (CommonTree)adaptor.create(COMMA153);
											adaptor.addChild(root_0, COMMA153_tree);
											}

											pushFollow(FOLLOW_expression_in_function_call23048);
											expression154=expression();
											state._fsp--;
											if (state.failed) return retval;
											if ( state.backtracking==0 ) adaptor.addChild(root_0, expression154.getTree());

											}
											break;

										default :
											break loop39;
										}
									}

									}
									break;

							}

							RPAREN155=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function_call23054); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN155_tree = (CommonTree)adaptor.create(RPAREN155);
							adaptor.addChild(root_0, RPAREN155_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1295:5: ( CAST_SYM LPAREN expression AS_SYM cast_data_type RPAREN )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1295:5: ( CAST_SYM LPAREN expression AS_SYM cast_data_type RPAREN )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1295:8: CAST_SYM LPAREN expression AS_SYM cast_data_type RPAREN
					{
					CAST_SYM156=(Token)match(input,CAST_SYM,FOLLOW_CAST_SYM_in_function_call23070); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CAST_SYM156_tree = (CommonTree)adaptor.create(CAST_SYM156);
					adaptor.addChild(root_0, CAST_SYM156_tree);
					}

					LPAREN157=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function_call23072); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN157_tree = (CommonTree)adaptor.create(LPAREN157);
					adaptor.addChild(root_0, LPAREN157_tree);
					}

					pushFollow(FOLLOW_expression_in_function_call23074);
					expression158=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression158.getTree());

					AS_SYM159=(Token)match(input,AS_SYM,FOLLOW_AS_SYM_in_function_call23076); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					AS_SYM159_tree = (CommonTree)adaptor.create(AS_SYM159);
					adaptor.addChild(root_0, AS_SYM159_tree);
					}

					pushFollow(FOLLOW_cast_data_type_in_function_call23078);
					cast_data_type160=cast_data_type();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_data_type160.getTree());

					RPAREN161=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function_call23080); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN161_tree = (CommonTree)adaptor.create(RPAREN161);
					adaptor.addChild(root_0, RPAREN161_tree);
					}

					}

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1296:5: ( CONVERT_SYM LPAREN expression COMMA cast_data_type RPAREN )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1296:5: ( CONVERT_SYM LPAREN expression COMMA cast_data_type RPAREN )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1296:8: CONVERT_SYM LPAREN expression COMMA cast_data_type RPAREN
					{
					CONVERT_SYM162=(Token)match(input,CONVERT_SYM,FOLLOW_CONVERT_SYM_in_function_call23092); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CONVERT_SYM162_tree = (CommonTree)adaptor.create(CONVERT_SYM162);
					adaptor.addChild(root_0, CONVERT_SYM162_tree);
					}

					LPAREN163=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function_call23094); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN163_tree = (CommonTree)adaptor.create(LPAREN163);
					adaptor.addChild(root_0, LPAREN163_tree);
					}

					pushFollow(FOLLOW_expression_in_function_call23096);
					expression164=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression164.getTree());

					COMMA165=(Token)match(input,COMMA,FOLLOW_COMMA_in_function_call23098); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA165_tree = (CommonTree)adaptor.create(COMMA165);
					adaptor.addChild(root_0, COMMA165_tree);
					}

					pushFollow(FOLLOW_cast_data_type_in_function_call23100);
					cast_data_type166=cast_data_type();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_data_type166.getTree());

					RPAREN167=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function_call23102); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN167_tree = (CommonTree)adaptor.create(RPAREN167);
					adaptor.addChild(root_0, RPAREN167_tree);
					}

					}

					}
					break;
				case 4 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1297:5: ( CONVERT_SYM LPAREN expression USING_SYM transcoding_name RPAREN )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1297:5: ( CONVERT_SYM LPAREN expression USING_SYM transcoding_name RPAREN )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1297:8: CONVERT_SYM LPAREN expression USING_SYM transcoding_name RPAREN
					{
					CONVERT_SYM168=(Token)match(input,CONVERT_SYM,FOLLOW_CONVERT_SYM_in_function_call23114); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CONVERT_SYM168_tree = (CommonTree)adaptor.create(CONVERT_SYM168);
					adaptor.addChild(root_0, CONVERT_SYM168_tree);
					}

					LPAREN169=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function_call23116); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN169_tree = (CommonTree)adaptor.create(LPAREN169);
					adaptor.addChild(root_0, LPAREN169_tree);
					}

					pushFollow(FOLLOW_expression_in_function_call23118);
					expression170=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression170.getTree());

					USING_SYM171=(Token)match(input,USING_SYM,FOLLOW_USING_SYM_in_function_call23120); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					USING_SYM171_tree = (CommonTree)adaptor.create(USING_SYM171);
					adaptor.addChild(root_0, USING_SYM171_tree);
					}

					pushFollow(FOLLOW_transcoding_name_in_function_call23122);
					transcoding_name172=transcoding_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, transcoding_name172.getTree());

					RPAREN173=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function_call23124); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN173_tree = (CommonTree)adaptor.create(RPAREN173);
					adaptor.addChild(root_0, RPAREN173_tree);
					}

					}

					}
					break;
				case 5 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1298:5: ( group_functions LPAREN ( ASTERISK | ALL | DISTINCT )? bit_expr RPAREN )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1298:5: ( group_functions LPAREN ( ASTERISK | ALL | DISTINCT )? bit_expr RPAREN )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1298:8: group_functions LPAREN ( ASTERISK | ALL | DISTINCT )? bit_expr RPAREN
					{
					pushFollow(FOLLOW_group_functions_in_function_call23136);
					group_functions174=group_functions();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, group_functions174.getTree());

					LPAREN175=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function_call23138); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN175_tree = (CommonTree)adaptor.create(LPAREN175);
					adaptor.addChild(root_0, LPAREN175_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1298:31: ( ASTERISK | ALL | DISTINCT )?
					int alt42=2;
					int LA42_0 = input.LA(1);
					if ( (LA42_0==ALL||LA42_0==ASTERISK||LA42_0==DISTINCT) ) {
						alt42=1;
					}
					switch (alt42) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
							{
							set176=input.LT(1);
							if ( input.LA(1)==ALL||input.LA(1)==ASTERISK||input.LA(1)==DISTINCT ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set176));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					pushFollow(FOLLOW_bit_expr_in_function_call23155);
					bit_expr177=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr177.getTree());

					RPAREN178=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function_call23157); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN178_tree = (CommonTree)adaptor.create(RPAREN178);
					adaptor.addChild(root_0, RPAREN178_tree);
					}

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "function_call"


	public static class case_when_statement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "case_when_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1301:1: case_when_statement : ( case_when_statement1 | case_when_statement2 );
	public final SQLParser.case_when_statement_return case_when_statement() throws RecognitionException {
		SQLParser.case_when_statement_return retval = new SQLParser.case_when_statement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope case_when_statement1179 =null;
		ParserRuleReturnScope case_when_statement2180 =null;


		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1301:20: ( case_when_statement1 | case_when_statement2 )
			int alt44=2;
			int LA44_0 = input.LA(1);
			if ( (LA44_0==CASE_SYM) ) {
				int LA44_1 = input.LA(2);
				if ( (LA44_1==WHEN_SYM) ) {
					alt44=1;
				}
				else if ( (LA44_1==ABS||LA44_1==ACOS||(LA44_1 >= ADDDATE && LA44_1 <= ADDTIME)||(LA44_1 >= AES_DECRYPT && LA44_1 <= AES_ENCRYPT)||LA44_1==ASCII_SYM||LA44_1==ASIN||(LA44_1 >= ATAN && LA44_1 <= ATAN2)||LA44_1==AVG||LA44_1==BENCHMARK||(LA44_1 >= BIN && LA44_1 <= BINARY)||(LA44_1 >= BIT_AND && LA44_1 <= BIT_OR)||LA44_1==BIT_XOR||(LA44_1 >= CASE_SYM && LA44_1 <= CEILING)||LA44_1==CHAR||(LA44_1 >= CHARSET && LA44_1 <= CHAR_LENGTH)||LA44_1==COERCIBILITY||LA44_1==COLLATION||(LA44_1 >= CONCAT && LA44_1 <= CONCAT_WS)||LA44_1==CONNECTION_ID||(LA44_1 >= CONV && LA44_1 <= CONVERT_TZ)||(LA44_1 >= COS && LA44_1 <= COUNT)||LA44_1==CRC32||LA44_1==CURDATE||LA44_1==CURRENT_USER||LA44_1==CURTIME||LA44_1==DATABASE||LA44_1==DATEDIFF||(LA44_1 >= DATE_ADD && LA44_1 <= DAYOFYEAR)||(LA44_1 >= DECODE && LA44_1 <= DEFAULT)||LA44_1==DEGREES||(LA44_1 >= DES_DECRYPT && LA44_1 <= DES_ENCRYPT)||LA44_1==ELT||(LA44_1 >= ENCODE && LA44_1 <= ENCRYPT)||LA44_1==EXISTS||LA44_1==EXP||LA44_1==EXPORT_SET||LA44_1==EXTRACT||LA44_1==FALSE_SYM||LA44_1==FIELD||LA44_1==FIND_IN_SET||LA44_1==FLOOR||LA44_1==FORMAT||LA44_1==FOUND_ROWS||(LA44_1 >= FROM_BASE64 && LA44_1 <= FROM_UNIXTIME)||(LA44_1 >= GET_FORMAT && LA44_1 <= GET_LOCK)||LA44_1==GROUP_CONCAT||(LA44_1 >= HEX && LA44_1 <= HEX_DIGIT)||LA44_1==HOUR||LA44_1==ID||(LA44_1 >= IF && LA44_1 <= IFNULL)||(LA44_1 >= INET_ATON && LA44_1 <= INET_NTOA)||LA44_1==INSERT||(LA44_1 >= INSTR && LA44_1 <= INTEGER_NUM)||LA44_1==INTERVAL_SYM||LA44_1==IS_FREE_LOCK||LA44_1==IS_USED_LOCK||(LA44_1 >= LAST_DAY && LA44_1 <= LAST_INSERT_ID)||(LA44_1 >= LEFT && LA44_1 <= LENGTH)||LA44_1==LN||LA44_1==LOAD_FILE||LA44_1==LOCATE||(LA44_1 >= LOG && LA44_1 <= LOG2)||LA44_1==LOWER||(LA44_1 >= LPAD && LA44_1 <= LPAREN)||LA44_1==LTRIM||(LA44_1 >= MAKEDATE && LA44_1 <= MAKE_SET)||LA44_1==MASTER_POS_WAIT||LA44_1==MATCH||LA44_1==MAX_SYM||LA44_1==MD5||(LA44_1 >= MICROSECOND && LA44_1 <= MID)||(LA44_1 >= MINUS && LA44_1 <= MINUTE)||LA44_1==MIN_SYM||LA44_1==MOD||(LA44_1 >= MONTH && LA44_1 <= MONTHNAME)||LA44_1==NAME_CONST||LA44_1==NEGATION||LA44_1==NOW||LA44_1==NULL_SYM||LA44_1==OCT||LA44_1==OLD_PASSWORD||LA44_1==ORD||(LA44_1 >= PASSWORD && LA44_1 <= PERIOD_DIFF)||LA44_1==PI||LA44_1==PLUS||(LA44_1 >= POW && LA44_1 <= POWER)||LA44_1==QUARTER||LA44_1==QUOTE||(LA44_1 >= RADIANS && LA44_1 <= RAND)||LA44_1==REAL_NUMBER||LA44_1==RELEASE_LOCK||LA44_1==REPEAT||LA44_1==REPLACE||LA44_1==REVERSE||LA44_1==RIGHT||LA44_1==ROUND||(LA44_1 >= ROW_SYM && LA44_1 <= RPAD)||LA44_1==RTRIM||(LA44_1 >= SCHEMA && LA44_1 <= SECOND)||LA44_1==SEC_TO_TIME||LA44_1==SESSION_USER||LA44_1==SIGN||LA44_1==SIN||LA44_1==SLEEP||LA44_1==SOUNDEX||LA44_1==SPACE||LA44_1==SQRT||(LA44_1 >= STD && LA44_1 <= STDDEV_SAMP)||LA44_1==STRCMP||LA44_1==STR_TO_DATE||(LA44_1 >= SUBSTRING && LA44_1 <= SUM)||(LA44_1 >= SYSDATE && LA44_1 <= SYSTEM_USER)||LA44_1==TAN||LA44_1==TEXT_STRING||(LA44_1 >= TIMEDIFF && LA44_1 <= TIME_TO_SEC)||(LA44_1 >= TO_BASE64 && LA44_1 <= TO_SECONDS)||(LA44_1 >= TRIM && LA44_1 <= TRUNCATE)||LA44_1==UNHEX||LA44_1==UNIX_TIMESTAMP||LA44_1==UPPER||(LA44_1 >= USER && LA44_1 <= USER_VAR)||(LA44_1 >= UTC_DATE && LA44_1 <= UTC_TIMESTAMP)||LA44_1==UUID||LA44_1==VALUES||LA44_1==VARIANCE||(LA44_1 >= VAR_POP && LA44_1 <= VERSION_SYM)||(LA44_1 >= WEEK && LA44_1 <= WEIGHT_STRING)||(LA44_1 >= YEAR && LA44_1 <= YEARWEEK)) ) {
					alt44=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 44, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 44, 0, input);
				throw nvae;
			}

			switch (alt44) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1302:9: case_when_statement1
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_case_when_statement1_in_case_when_statement23176);
					case_when_statement1179=case_when_statement1();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, case_when_statement1179.getTree());

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1302:32: case_when_statement2
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_case_when_statement2_in_case_when_statement23180);
					case_when_statement2180=case_when_statement2();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, case_when_statement2180.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "case_when_statement"


	public static class case_when_statement1_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "case_when_statement1"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1304:1: case_when_statement1 : CASE_SYM ( WHEN_SYM expression THEN_SYM bit_expr )+ ( ELSE_SYM bit_expr )? END_SYM ;
	public final SQLParser.case_when_statement1_return case_when_statement1() throws RecognitionException {
		SQLParser.case_when_statement1_return retval = new SQLParser.case_when_statement1_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token CASE_SYM181=null;
		Token WHEN_SYM182=null;
		Token THEN_SYM184=null;
		Token ELSE_SYM186=null;
		Token END_SYM188=null;
		ParserRuleReturnScope expression183 =null;
		ParserRuleReturnScope bit_expr185 =null;
		ParserRuleReturnScope bit_expr187 =null;

		CommonTree CASE_SYM181_tree=null;
		CommonTree WHEN_SYM182_tree=null;
		CommonTree THEN_SYM184_tree=null;
		CommonTree ELSE_SYM186_tree=null;
		CommonTree END_SYM188_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1304:21: ( CASE_SYM ( WHEN_SYM expression THEN_SYM bit_expr )+ ( ELSE_SYM bit_expr )? END_SYM )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1305:9: CASE_SYM ( WHEN_SYM expression THEN_SYM bit_expr )+ ( ELSE_SYM bit_expr )? END_SYM
			{
			root_0 = (CommonTree)adaptor.nil();


			CASE_SYM181=(Token)match(input,CASE_SYM,FOLLOW_CASE_SYM_in_case_when_statement123195); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			CASE_SYM181_tree = (CommonTree)adaptor.create(CASE_SYM181);
			adaptor.addChild(root_0, CASE_SYM181_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1306:9: ( WHEN_SYM expression THEN_SYM bit_expr )+
			int cnt45=0;
			loop45:
			while (true) {
				int alt45=2;
				int LA45_0 = input.LA(1);
				if ( (LA45_0==WHEN_SYM) ) {
					alt45=1;
				}

				switch (alt45) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1306:11: WHEN_SYM expression THEN_SYM bit_expr
					{
					WHEN_SYM182=(Token)match(input,WHEN_SYM,FOLLOW_WHEN_SYM_in_case_when_statement123207); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					WHEN_SYM182_tree = (CommonTree)adaptor.create(WHEN_SYM182);
					adaptor.addChild(root_0, WHEN_SYM182_tree);
					}

					pushFollow(FOLLOW_expression_in_case_when_statement123209);
					expression183=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression183.getTree());

					THEN_SYM184=(Token)match(input,THEN_SYM,FOLLOW_THEN_SYM_in_case_when_statement123211); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					THEN_SYM184_tree = (CommonTree)adaptor.create(THEN_SYM184);
					adaptor.addChild(root_0, THEN_SYM184_tree);
					}

					pushFollow(FOLLOW_bit_expr_in_case_when_statement123213);
					bit_expr185=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr185.getTree());

					}
					break;

				default :
					if ( cnt45 >= 1 ) break loop45;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(45, input);
					throw eee;
				}
				cnt45++;
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1307:9: ( ELSE_SYM bit_expr )?
			int alt46=2;
			int LA46_0 = input.LA(1);
			if ( (LA46_0==ELSE_SYM) ) {
				alt46=1;
			}
			switch (alt46) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1307:11: ELSE_SYM bit_expr
					{
					ELSE_SYM186=(Token)match(input,ELSE_SYM,FOLLOW_ELSE_SYM_in_case_when_statement123228); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ELSE_SYM186_tree = (CommonTree)adaptor.create(ELSE_SYM186);
					adaptor.addChild(root_0, ELSE_SYM186_tree);
					}

					pushFollow(FOLLOW_bit_expr_in_case_when_statement123230);
					bit_expr187=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr187.getTree());

					}
					break;

			}

			END_SYM188=(Token)match(input,END_SYM,FOLLOW_END_SYM_in_case_when_statement123243); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			END_SYM188_tree = (CommonTree)adaptor.create(END_SYM188);
			adaptor.addChild(root_0, END_SYM188_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "case_when_statement1"


	public static class case_when_statement2_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "case_when_statement2"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1310:1: case_when_statement2 : CASE_SYM bit_expr ( WHEN_SYM bit_expr THEN_SYM bit_expr )+ ( ELSE_SYM bit_expr )? END_SYM ;
	public final SQLParser.case_when_statement2_return case_when_statement2() throws RecognitionException {
		SQLParser.case_when_statement2_return retval = new SQLParser.case_when_statement2_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token CASE_SYM189=null;
		Token WHEN_SYM191=null;
		Token THEN_SYM193=null;
		Token ELSE_SYM195=null;
		Token END_SYM197=null;
		ParserRuleReturnScope bit_expr190 =null;
		ParserRuleReturnScope bit_expr192 =null;
		ParserRuleReturnScope bit_expr194 =null;
		ParserRuleReturnScope bit_expr196 =null;

		CommonTree CASE_SYM189_tree=null;
		CommonTree WHEN_SYM191_tree=null;
		CommonTree THEN_SYM193_tree=null;
		CommonTree ELSE_SYM195_tree=null;
		CommonTree END_SYM197_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1310:21: ( CASE_SYM bit_expr ( WHEN_SYM bit_expr THEN_SYM bit_expr )+ ( ELSE_SYM bit_expr )? END_SYM )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1311:9: CASE_SYM bit_expr ( WHEN_SYM bit_expr THEN_SYM bit_expr )+ ( ELSE_SYM bit_expr )? END_SYM
			{
			root_0 = (CommonTree)adaptor.nil();


			CASE_SYM189=(Token)match(input,CASE_SYM,FOLLOW_CASE_SYM_in_case_when_statement223258); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			CASE_SYM189_tree = (CommonTree)adaptor.create(CASE_SYM189);
			adaptor.addChild(root_0, CASE_SYM189_tree);
			}

			pushFollow(FOLLOW_bit_expr_in_case_when_statement223260);
			bit_expr190=bit_expr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr190.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1312:9: ( WHEN_SYM bit_expr THEN_SYM bit_expr )+
			int cnt47=0;
			loop47:
			while (true) {
				int alt47=2;
				int LA47_0 = input.LA(1);
				if ( (LA47_0==WHEN_SYM) ) {
					alt47=1;
				}

				switch (alt47) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1312:11: WHEN_SYM bit_expr THEN_SYM bit_expr
					{
					WHEN_SYM191=(Token)match(input,WHEN_SYM,FOLLOW_WHEN_SYM_in_case_when_statement223272); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					WHEN_SYM191_tree = (CommonTree)adaptor.create(WHEN_SYM191);
					adaptor.addChild(root_0, WHEN_SYM191_tree);
					}

					pushFollow(FOLLOW_bit_expr_in_case_when_statement223274);
					bit_expr192=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr192.getTree());

					THEN_SYM193=(Token)match(input,THEN_SYM,FOLLOW_THEN_SYM_in_case_when_statement223276); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					THEN_SYM193_tree = (CommonTree)adaptor.create(THEN_SYM193);
					adaptor.addChild(root_0, THEN_SYM193_tree);
					}

					pushFollow(FOLLOW_bit_expr_in_case_when_statement223278);
					bit_expr194=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr194.getTree());

					}
					break;

				default :
					if ( cnt47 >= 1 ) break loop47;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(47, input);
					throw eee;
				}
				cnt47++;
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1313:9: ( ELSE_SYM bit_expr )?
			int alt48=2;
			int LA48_0 = input.LA(1);
			if ( (LA48_0==ELSE_SYM) ) {
				alt48=1;
			}
			switch (alt48) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1313:11: ELSE_SYM bit_expr
					{
					ELSE_SYM195=(Token)match(input,ELSE_SYM,FOLLOW_ELSE_SYM_in_case_when_statement223293); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ELSE_SYM195_tree = (CommonTree)adaptor.create(ELSE_SYM195);
					adaptor.addChild(root_0, ELSE_SYM195_tree);
					}

					pushFollow(FOLLOW_bit_expr_in_case_when_statement223295);
					bit_expr196=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr196.getTree());

					}
					break;

			}

			END_SYM197=(Token)match(input,END_SYM,FOLLOW_END_SYM_in_case_when_statement223308); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			END_SYM197_tree = (CommonTree)adaptor.create(END_SYM197);
			adaptor.addChild(root_0, END_SYM197_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "case_when_statement2"


	public static class match_against_statement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "match_against_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1317:1: match_against_statement : MATCH ( column_spec ( COMMA column_spec )* ) AGAINST ( expression ( search_modifier )? ) ;
	public final SQLParser.match_against_statement_return match_against_statement() throws RecognitionException {
		SQLParser.match_against_statement_return retval = new SQLParser.match_against_statement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token MATCH198=null;
		Token COMMA200=null;
		Token AGAINST202=null;
		ParserRuleReturnScope column_spec199 =null;
		ParserRuleReturnScope column_spec201 =null;
		ParserRuleReturnScope expression203 =null;
		ParserRuleReturnScope search_modifier204 =null;

		CommonTree MATCH198_tree=null;
		CommonTree COMMA200_tree=null;
		CommonTree AGAINST202_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1317:24: ( MATCH ( column_spec ( COMMA column_spec )* ) AGAINST ( expression ( search_modifier )? ) )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1318:3: MATCH ( column_spec ( COMMA column_spec )* ) AGAINST ( expression ( search_modifier )? )
			{
			root_0 = (CommonTree)adaptor.nil();


			MATCH198=(Token)match(input,MATCH,FOLLOW_MATCH_in_match_against_statement23320); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			MATCH198_tree = (CommonTree)adaptor.create(MATCH198);
			adaptor.addChild(root_0, MATCH198_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1318:9: ( column_spec ( COMMA column_spec )* )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1318:10: column_spec ( COMMA column_spec )*
			{
			pushFollow(FOLLOW_column_spec_in_match_against_statement23323);
			column_spec199=column_spec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec199.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1318:22: ( COMMA column_spec )*
			loop49:
			while (true) {
				int alt49=2;
				int LA49_0 = input.LA(1);
				if ( (LA49_0==COMMA) ) {
					alt49=1;
				}

				switch (alt49) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1318:23: COMMA column_spec
					{
					COMMA200=(Token)match(input,COMMA,FOLLOW_COMMA_in_match_against_statement23326); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA200_tree = (CommonTree)adaptor.create(COMMA200);
					adaptor.addChild(root_0, COMMA200_tree);
					}

					pushFollow(FOLLOW_column_spec_in_match_against_statement23328);
					column_spec201=column_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec201.getTree());

					}
					break;

				default :
					break loop49;
				}
			}

			}

			AGAINST202=(Token)match(input,AGAINST,FOLLOW_AGAINST_in_match_against_statement23334); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			AGAINST202_tree = (CommonTree)adaptor.create(AGAINST202);
			adaptor.addChild(root_0, AGAINST202_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1318:53: ( expression ( search_modifier )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1318:54: expression ( search_modifier )?
			{
			pushFollow(FOLLOW_expression_in_match_against_statement23337);
			expression203=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression203.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1318:65: ( search_modifier )?
			int alt50=2;
			int LA50_0 = input.LA(1);
			if ( (LA50_0==IN_SYM) ) {
				int LA50_1 = input.LA(2);
				if ( (synpred335_SQL()) ) {
					alt50=1;
				}
			}
			else if ( (LA50_0==WITH) ) {
				int LA50_2 = input.LA(2);
				if ( (synpred335_SQL()) ) {
					alt50=1;
				}
			}
			switch (alt50) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1318:66: search_modifier
					{
					pushFollow(FOLLOW_search_modifier_in_match_against_statement23340);
					search_modifier204=search_modifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, search_modifier204.getTree());

					}
					break;

			}

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "match_against_statement"


	public static class column_spec_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "column_spec"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1321:1: column_spec : ( ( schema_name DOT )? table_name DOT )? column_name ;
	public final SQLParser.column_spec_return column_spec() throws RecognitionException {
		SQLParser.column_spec_return retval = new SQLParser.column_spec_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token DOT206=null;
		Token DOT208=null;
		ParserRuleReturnScope schema_name205 =null;
		ParserRuleReturnScope table_name207 =null;
		ParserRuleReturnScope column_name209 =null;

		CommonTree DOT206_tree=null;
		CommonTree DOT208_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1321:12: ( ( ( schema_name DOT )? table_name DOT )? column_name )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1322:3: ( ( schema_name DOT )? table_name DOT )? column_name
			{
			root_0 = (CommonTree)adaptor.nil();


			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1322:3: ( ( schema_name DOT )? table_name DOT )?
			int alt52=2;
			int LA52_0 = input.LA(1);
			if ( (LA52_0==ID) ) {
				int LA52_1 = input.LA(2);
				if ( (LA52_1==DOT) ) {
					alt52=1;
				}
			}
			switch (alt52) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1322:5: ( schema_name DOT )? table_name DOT
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1322:5: ( schema_name DOT )?
					int alt51=2;
					int LA51_0 = input.LA(1);
					if ( (LA51_0==ID) ) {
						int LA51_1 = input.LA(2);
						if ( (LA51_1==DOT) ) {
							int LA51_2 = input.LA(3);
							if ( (LA51_2==ID) ) {
								int LA51_3 = input.LA(4);
								if ( (LA51_3==DOT) ) {
									alt51=1;
								}
							}
						}
					}
					switch (alt51) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1322:7: schema_name DOT
							{
							pushFollow(FOLLOW_schema_name_in_column_spec23359);
							schema_name205=schema_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, schema_name205.getTree());

							DOT206=(Token)match(input,DOT,FOLLOW_DOT_in_column_spec23361); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DOT206_tree = (CommonTree)adaptor.create(DOT206);
							adaptor.addChild(root_0, DOT206_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_table_name_in_column_spec23366);
					table_name207=table_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name207.getTree());

					DOT208=(Token)match(input,DOT,FOLLOW_DOT_in_column_spec23368); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DOT208_tree = (CommonTree)adaptor.create(DOT208);
					adaptor.addChild(root_0, DOT208_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_column_name_in_column_spec23373);
			column_name209=column_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name209.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "column_spec"


	public static class expression_list_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "expression_list"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1324:1: expression_list : LPAREN expression ( COMMA expression )* RPAREN ;
	public final SQLParser.expression_list_return expression_list() throws RecognitionException {
		SQLParser.expression_list_return retval = new SQLParser.expression_list_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LPAREN210=null;
		Token COMMA212=null;
		Token RPAREN214=null;
		ParserRuleReturnScope expression211 =null;
		ParserRuleReturnScope expression213 =null;

		CommonTree LPAREN210_tree=null;
		CommonTree COMMA212_tree=null;
		CommonTree RPAREN214_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1324:16: ( LPAREN expression ( COMMA expression )* RPAREN )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1325:3: LPAREN expression ( COMMA expression )* RPAREN
			{
			root_0 = (CommonTree)adaptor.nil();


			LPAREN210=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_expression_list23383); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN210_tree = (CommonTree)adaptor.create(LPAREN210);
			adaptor.addChild(root_0, LPAREN210_tree);
			}

			pushFollow(FOLLOW_expression_in_expression_list23385);
			expression211=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression211.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1325:21: ( COMMA expression )*
			loop53:
			while (true) {
				int alt53=2;
				int LA53_0 = input.LA(1);
				if ( (LA53_0==COMMA) ) {
					alt53=1;
				}

				switch (alt53) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1325:23: COMMA expression
					{
					COMMA212=(Token)match(input,COMMA,FOLLOW_COMMA_in_expression_list23389); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA212_tree = (CommonTree)adaptor.create(COMMA212);
					adaptor.addChild(root_0, COMMA212_tree);
					}

					pushFollow(FOLLOW_expression_in_expression_list23391);
					expression213=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression213.getTree());

					}
					break;

				default :
					break loop53;
				}
			}

			RPAREN214=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_expression_list23396); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN214_tree = (CommonTree)adaptor.create(RPAREN214);
			adaptor.addChild(root_0, RPAREN214_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "expression_list"


	public static class interval_expr_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "interval_expr"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1327:1: interval_expr : INTERVAL_SYM expression interval_unit ;
	public final SQLParser.interval_expr_return interval_expr() throws RecognitionException {
		SQLParser.interval_expr_return retval = new SQLParser.interval_expr_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token INTERVAL_SYM215=null;
		ParserRuleReturnScope expression216 =null;
		ParserRuleReturnScope interval_unit217 =null;

		CommonTree INTERVAL_SYM215_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1327:14: ( INTERVAL_SYM expression interval_unit )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1328:3: INTERVAL_SYM expression interval_unit
			{
			root_0 = (CommonTree)adaptor.nil();


			INTERVAL_SYM215=(Token)match(input,INTERVAL_SYM,FOLLOW_INTERVAL_SYM_in_interval_expr23406); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			INTERVAL_SYM215_tree = (CommonTree)adaptor.create(INTERVAL_SYM215);
			adaptor.addChild(root_0, INTERVAL_SYM215_tree);
			}

			pushFollow(FOLLOW_expression_in_interval_expr23408);
			expression216=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression216.getTree());

			pushFollow(FOLLOW_interval_unit_in_interval_expr23410);
			interval_unit217=interval_unit();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, interval_unit217.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "interval_expr"


	public static class table_references_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "table_references"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1337:1: table_references : table_reference ( COMMA table_reference )* ;
	public final SQLParser.table_references_return table_references() throws RecognitionException {
		SQLParser.table_references_return retval = new SQLParser.table_references_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA219=null;
		ParserRuleReturnScope table_reference218 =null;
		ParserRuleReturnScope table_reference220 =null;

		CommonTree COMMA219_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1337:17: ( table_reference ( COMMA table_reference )* )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1338:9: table_reference ( COMMA table_reference )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_table_reference_in_table_references23432);
			table_reference218=table_reference();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_reference218.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1338:25: ( COMMA table_reference )*
			loop54:
			while (true) {
				int alt54=2;
				int LA54_0 = input.LA(1);
				if ( (LA54_0==COMMA) ) {
					int LA54_2 = input.LA(2);
					if ( (LA54_2==ID||LA54_2==LPAREN||LA54_2==OJ_SYM) ) {
						alt54=1;
					}

				}

				switch (alt54) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1338:27: COMMA table_reference
					{
					COMMA219=(Token)match(input,COMMA,FOLLOW_COMMA_in_table_references23436); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA219_tree = (CommonTree)adaptor.create(COMMA219);
					adaptor.addChild(root_0, COMMA219_tree);
					}

					pushFollow(FOLLOW_table_reference_in_table_references23438);
					table_reference220=table_reference();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_reference220.getTree());

					}
					break;

				default :
					break loop54;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_references"


	public static class table_reference_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "table_reference"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1340:1: table_reference : ( table_factor1 | table_atom );
	public final SQLParser.table_reference_return table_reference() throws RecognitionException {
		SQLParser.table_reference_return retval = new SQLParser.table_reference_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope table_factor1221 =null;
		ParserRuleReturnScope table_atom222 =null;


		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1340:16: ( table_factor1 | table_atom )
			int alt55=2;
			switch ( input.LA(1) ) {
			case ID:
				{
				int LA55_1 = input.LA(2);
				if ( (synpred340_SQL()) ) {
					alt55=1;
				}
				else if ( (true) ) {
					alt55=2;
				}

				}
				break;
			case LPAREN:
				{
				int LA55_2 = input.LA(2);
				if ( (synpred340_SQL()) ) {
					alt55=1;
				}
				else if ( (true) ) {
					alt55=2;
				}

				}
				break;
			case OJ_SYM:
				{
				int LA55_3 = input.LA(2);
				if ( (synpred340_SQL()) ) {
					alt55=1;
				}
				else if ( (true) ) {
					alt55=2;
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 55, 0, input);
				throw nvae;
			}
			switch (alt55) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1341:3: table_factor1
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_table_factor1_in_table_reference23450);
					table_factor1221=table_factor1();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_factor1221.getTree());

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1341:19: table_atom
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_table_atom_in_table_reference23454);
					table_atom222=table_atom();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_atom222.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_reference"


	public static class table_factor1_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "table_factor1"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1343:1: table_factor1 : table_factor2 ( ( INNER_SYM | CROSS )? JOIN_SYM ^ table_atom ( join_condition )? )? ;
	public final SQLParser.table_factor1_return table_factor1() throws RecognitionException {
		SQLParser.table_factor1_return retval = new SQLParser.table_factor1_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token set224=null;
		Token JOIN_SYM225=null;
		ParserRuleReturnScope table_factor2223 =null;
		ParserRuleReturnScope table_atom226 =null;
		ParserRuleReturnScope join_condition227 =null;

		CommonTree set224_tree=null;
		CommonTree JOIN_SYM225_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1343:14: ( table_factor2 ( ( INNER_SYM | CROSS )? JOIN_SYM ^ table_atom ( join_condition )? )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1344:3: table_factor2 ( ( INNER_SYM | CROSS )? JOIN_SYM ^ table_atom ( join_condition )? )?
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_table_factor2_in_table_factor123463);
			table_factor2223=table_factor2();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_factor2223.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1344:17: ( ( INNER_SYM | CROSS )? JOIN_SYM ^ table_atom ( join_condition )? )?
			int alt58=2;
			int LA58_0 = input.LA(1);
			if ( (LA58_0==CROSS||LA58_0==INNER_SYM||LA58_0==JOIN_SYM) ) {
				alt58=1;
			}
			switch (alt58) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1344:20: ( INNER_SYM | CROSS )? JOIN_SYM ^ table_atom ( join_condition )?
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1344:20: ( INNER_SYM | CROSS )?
					int alt56=2;
					int LA56_0 = input.LA(1);
					if ( (LA56_0==CROSS||LA56_0==INNER_SYM) ) {
						alt56=1;
					}
					switch (alt56) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
							{
							set224=input.LT(1);
							if ( input.LA(1)==CROSS||input.LA(1)==INNER_SYM ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set224));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					JOIN_SYM225=(Token)match(input,JOIN_SYM,FOLLOW_JOIN_SYM_in_table_factor123477); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					JOIN_SYM225_tree = (CommonTree)adaptor.create(JOIN_SYM225);
					root_0 = (CommonTree)adaptor.becomeRoot(JOIN_SYM225_tree, root_0);
					}

					pushFollow(FOLLOW_table_atom_in_table_factor123481);
					table_atom226=table_atom();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_atom226.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1344:63: ( join_condition )?
					int alt57=2;
					int LA57_0 = input.LA(1);
					if ( (LA57_0==ON) ) {
						int LA57_1 = input.LA(2);
						if ( (synpred343_SQL()) ) {
							alt57=1;
						}
					}
					else if ( (LA57_0==USING_SYM) ) {
						alt57=1;
					}
					switch (alt57) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1344:64: join_condition
							{
							pushFollow(FOLLOW_join_condition_in_table_factor123484);
							join_condition227=join_condition();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, join_condition227.getTree());

							}
							break;

					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_factor1"


	public static class table_factor2_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "table_factor2"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1346:1: table_factor2 : table_factor3 ( STRAIGHT_JOIN ^ table_atom ( ON expression )? )? ;
	public final SQLParser.table_factor2_return table_factor2() throws RecognitionException {
		SQLParser.table_factor2_return retval = new SQLParser.table_factor2_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token STRAIGHT_JOIN229=null;
		Token ON231=null;
		ParserRuleReturnScope table_factor3228 =null;
		ParserRuleReturnScope table_atom230 =null;
		ParserRuleReturnScope expression232 =null;

		CommonTree STRAIGHT_JOIN229_tree=null;
		CommonTree ON231_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1346:14: ( table_factor3 ( STRAIGHT_JOIN ^ table_atom ( ON expression )? )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1347:3: table_factor3 ( STRAIGHT_JOIN ^ table_atom ( ON expression )? )?
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_table_factor3_in_table_factor223499);
			table_factor3228=table_factor3();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_factor3228.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1347:17: ( STRAIGHT_JOIN ^ table_atom ( ON expression )? )?
			int alt60=2;
			int LA60_0 = input.LA(1);
			if ( (LA60_0==STRAIGHT_JOIN) ) {
				alt60=1;
			}
			switch (alt60) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1347:20: STRAIGHT_JOIN ^ table_atom ( ON expression )?
					{
					STRAIGHT_JOIN229=(Token)match(input,STRAIGHT_JOIN,FOLLOW_STRAIGHT_JOIN_in_table_factor223504); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					STRAIGHT_JOIN229_tree = (CommonTree)adaptor.create(STRAIGHT_JOIN229);
					root_0 = (CommonTree)adaptor.becomeRoot(STRAIGHT_JOIN229_tree, root_0);
					}

					pushFollow(FOLLOW_table_atom_in_table_factor223508);
					table_atom230=table_atom();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_atom230.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1347:47: ( ON expression )?
					int alt59=2;
					int LA59_0 = input.LA(1);
					if ( (LA59_0==ON) ) {
						int LA59_1 = input.LA(2);
						if ( (synpred345_SQL()) ) {
							alt59=1;
						}
					}
					switch (alt59) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1347:48: ON expression
							{
							ON231=(Token)match(input,ON,FOLLOW_ON_in_table_factor223511); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ON231_tree = (CommonTree)adaptor.create(ON231);
							adaptor.addChild(root_0, ON231_tree);
							}

							pushFollow(FOLLOW_expression_in_table_factor223513);
							expression232=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression232.getTree());

							}
							break;

					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_factor2"


	public static class table_factor3_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "table_factor3"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1349:1: table_factor3 : table_factor4 ( ( LEFT | RIGHT ) ( OUTER )? JOIN_SYM ^ table_factor4 join_condition )? ;
	public final SQLParser.table_factor3_return table_factor3() throws RecognitionException {
		SQLParser.table_factor3_return retval = new SQLParser.table_factor3_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token set234=null;
		Token OUTER235=null;
		Token JOIN_SYM236=null;
		ParserRuleReturnScope table_factor4233 =null;
		ParserRuleReturnScope table_factor4237 =null;
		ParserRuleReturnScope join_condition238 =null;

		CommonTree set234_tree=null;
		CommonTree OUTER235_tree=null;
		CommonTree JOIN_SYM236_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1349:14: ( table_factor4 ( ( LEFT | RIGHT ) ( OUTER )? JOIN_SYM ^ table_factor4 join_condition )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1350:3: table_factor4 ( ( LEFT | RIGHT ) ( OUTER )? JOIN_SYM ^ table_factor4 join_condition )?
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_table_factor4_in_table_factor323528);
			table_factor4233=table_factor4();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_factor4233.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1350:17: ( ( LEFT | RIGHT ) ( OUTER )? JOIN_SYM ^ table_factor4 join_condition )?
			int alt62=2;
			int LA62_0 = input.LA(1);
			if ( (LA62_0==LEFT) ) {
				int LA62_1 = input.LA(2);
				if ( (synpred349_SQL()) ) {
					alt62=1;
				}
			}
			else if ( (LA62_0==RIGHT) ) {
				alt62=1;
			}
			switch (alt62) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1350:20: ( LEFT | RIGHT ) ( OUTER )? JOIN_SYM ^ table_factor4 join_condition
					{
					set234=input.LT(1);
					if ( input.LA(1)==LEFT||input.LA(1)==RIGHT ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set234));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1350:33: ( OUTER )?
					int alt61=2;
					int LA61_0 = input.LA(1);
					if ( (LA61_0==OUTER) ) {
						alt61=1;
					}
					switch (alt61) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1350:34: OUTER
							{
							OUTER235=(Token)match(input,OUTER,FOLLOW_OUTER_in_table_factor323540); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							OUTER235_tree = (CommonTree)adaptor.create(OUTER235);
							adaptor.addChild(root_0, OUTER235_tree);
							}

							}
							break;

					}

					JOIN_SYM236=(Token)match(input,JOIN_SYM,FOLLOW_JOIN_SYM_in_table_factor323544); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					JOIN_SYM236_tree = (CommonTree)adaptor.create(JOIN_SYM236);
					root_0 = (CommonTree)adaptor.becomeRoot(JOIN_SYM236_tree, root_0);
					}

					pushFollow(FOLLOW_table_factor4_in_table_factor323548);
					table_factor4237=table_factor4();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_factor4237.getTree());

					pushFollow(FOLLOW_join_condition_in_table_factor323550);
					join_condition238=join_condition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, join_condition238.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_factor3"


	public static class table_factor4_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "table_factor4"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1352:1: table_factor4 : table_atom ( NATURAL ( ( LEFT | RIGHT ) ( OUTER )? )? JOIN_SYM ^ table_atom )? ;
	public final SQLParser.table_factor4_return table_factor4() throws RecognitionException {
		SQLParser.table_factor4_return retval = new SQLParser.table_factor4_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token NATURAL240=null;
		Token set241=null;
		Token OUTER242=null;
		Token JOIN_SYM243=null;
		ParserRuleReturnScope table_atom239 =null;
		ParserRuleReturnScope table_atom244 =null;

		CommonTree NATURAL240_tree=null;
		CommonTree set241_tree=null;
		CommonTree OUTER242_tree=null;
		CommonTree JOIN_SYM243_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1352:14: ( table_atom ( NATURAL ( ( LEFT | RIGHT ) ( OUTER )? )? JOIN_SYM ^ table_atom )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1353:3: table_atom ( NATURAL ( ( LEFT | RIGHT ) ( OUTER )? )? JOIN_SYM ^ table_atom )?
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_table_atom_in_table_factor423563);
			table_atom239=table_atom();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_atom239.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1353:14: ( NATURAL ( ( LEFT | RIGHT ) ( OUTER )? )? JOIN_SYM ^ table_atom )?
			int alt65=2;
			int LA65_0 = input.LA(1);
			if ( (LA65_0==NATURAL) ) {
				alt65=1;
			}
			switch (alt65) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1353:17: NATURAL ( ( LEFT | RIGHT ) ( OUTER )? )? JOIN_SYM ^ table_atom
					{
					NATURAL240=(Token)match(input,NATURAL,FOLLOW_NATURAL_in_table_factor423568); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NATURAL240_tree = (CommonTree)adaptor.create(NATURAL240);
					adaptor.addChild(root_0, NATURAL240_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1353:25: ( ( LEFT | RIGHT ) ( OUTER )? )?
					int alt64=2;
					int LA64_0 = input.LA(1);
					if ( (LA64_0==LEFT||LA64_0==RIGHT) ) {
						alt64=1;
					}
					switch (alt64) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1353:27: ( LEFT | RIGHT ) ( OUTER )?
							{
							set241=input.LT(1);
							if ( input.LA(1)==LEFT||input.LA(1)==RIGHT ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set241));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1353:40: ( OUTER )?
							int alt63=2;
							int LA63_0 = input.LA(1);
							if ( (LA63_0==OUTER) ) {
								alt63=1;
							}
							switch (alt63) {
								case 1 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1353:41: OUTER
									{
									OUTER242=(Token)match(input,OUTER,FOLLOW_OUTER_in_table_factor423579); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									OUTER242_tree = (CommonTree)adaptor.create(OUTER242);
									adaptor.addChild(root_0, OUTER242_tree);
									}

									}
									break;

							}

							}
							break;

					}

					JOIN_SYM243=(Token)match(input,JOIN_SYM,FOLLOW_JOIN_SYM_in_table_factor423586); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					JOIN_SYM243_tree = (CommonTree)adaptor.create(JOIN_SYM243);
					root_0 = (CommonTree)adaptor.becomeRoot(JOIN_SYM243_tree, root_0);
					}

					pushFollow(FOLLOW_table_atom_in_table_factor423590);
					table_atom244=table_atom();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_atom244.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_factor4"


	public static class table_atom_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "table_atom"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1355:1: table_atom : ( ( table_spec ( partition_clause )? ( alias )? ( index_hint_list )? ) | ( subquery alias ) | ( LPAREN table_references RPAREN ) | ( OJ_SYM table_reference LEFT OUTER JOIN_SYM table_reference ON expression ) );
	public final SQLParser.table_atom_return table_atom() throws RecognitionException {
		SQLParser.table_atom_return retval = new SQLParser.table_atom_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LPAREN251=null;
		Token RPAREN253=null;
		Token OJ_SYM254=null;
		Token LEFT256=null;
		Token OUTER257=null;
		Token JOIN_SYM258=null;
		Token ON260=null;
		ParserRuleReturnScope table_spec245 =null;
		ParserRuleReturnScope partition_clause246 =null;
		ParserRuleReturnScope alias247 =null;
		ParserRuleReturnScope index_hint_list248 =null;
		ParserRuleReturnScope subquery249 =null;
		ParserRuleReturnScope alias250 =null;
		ParserRuleReturnScope table_references252 =null;
		ParserRuleReturnScope table_reference255 =null;
		ParserRuleReturnScope table_reference259 =null;
		ParserRuleReturnScope expression261 =null;

		CommonTree LPAREN251_tree=null;
		CommonTree RPAREN253_tree=null;
		CommonTree OJ_SYM254_tree=null;
		CommonTree LEFT256_tree=null;
		CommonTree OUTER257_tree=null;
		CommonTree JOIN_SYM258_tree=null;
		CommonTree ON260_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1355:11: ( ( table_spec ( partition_clause )? ( alias )? ( index_hint_list )? ) | ( subquery alias ) | ( LPAREN table_references RPAREN ) | ( OJ_SYM table_reference LEFT OUTER JOIN_SYM table_reference ON expression ) )
			int alt69=4;
			switch ( input.LA(1) ) {
			case ID:
				{
				alt69=1;
				}
				break;
			case LPAREN:
				{
				int LA69_2 = input.LA(2);
				if ( (LA69_2==SELECT) ) {
					alt69=2;
				}
				else if ( (LA69_2==ID||LA69_2==LPAREN||LA69_2==OJ_SYM) ) {
					alt69=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 69, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case OJ_SYM:
				{
				alt69=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 69, 0, input);
				throw nvae;
			}
			switch (alt69) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1356:5: ( table_spec ( partition_clause )? ( alias )? ( index_hint_list )? )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1356:5: ( table_spec ( partition_clause )? ( alias )? ( index_hint_list )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1356:7: table_spec ( partition_clause )? ( alias )? ( index_hint_list )?
					{
					pushFollow(FOLLOW_table_spec_in_table_atom23606);
					table_spec245=table_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_spec245.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1356:18: ( partition_clause )?
					int alt66=2;
					alt66 = dfa66.predict(input);
					switch (alt66) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1356:19: partition_clause
							{
							pushFollow(FOLLOW_partition_clause_in_table_atom23609);
							partition_clause246=partition_clause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_clause246.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1356:38: ( alias )?
					int alt67=2;
					int LA67_0 = input.LA(1);
					if ( (LA67_0==AS_SYM||LA67_0==ID) ) {
						alt67=1;
					}
					switch (alt67) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1356:39: alias
							{
							pushFollow(FOLLOW_alias_in_table_atom23614);
							alias247=alias();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, alias247.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1356:47: ( index_hint_list )?
					int alt68=2;
					int LA68_0 = input.LA(1);
					if ( (LA68_0==FORCE_SYM||LA68_0==IGNORE_SYM||LA68_0==USE_SYM) ) {
						alt68=1;
					}
					switch (alt68) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1356:48: index_hint_list
							{
							pushFollow(FOLLOW_index_hint_list_in_table_atom23619);
							index_hint_list248=index_hint_list();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_hint_list248.getTree());

							}
							break;

					}

					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1357:5: ( subquery alias )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1357:5: ( subquery alias )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1357:7: subquery alias
					{
					pushFollow(FOLLOW_subquery_in_table_atom23631);
					subquery249=subquery();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery249.getTree());

					pushFollow(FOLLOW_alias_in_table_atom23633);
					alias250=alias();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alias250.getTree());

					}

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1358:5: ( LPAREN table_references RPAREN )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1358:5: ( LPAREN table_references RPAREN )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1358:7: LPAREN table_references RPAREN
					{
					LPAREN251=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_table_atom23643); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN251_tree = (CommonTree)adaptor.create(LPAREN251);
					adaptor.addChild(root_0, LPAREN251_tree);
					}

					pushFollow(FOLLOW_table_references_in_table_atom23645);
					table_references252=table_references();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_references252.getTree());

					RPAREN253=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_table_atom23647); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN253_tree = (CommonTree)adaptor.create(RPAREN253);
					adaptor.addChild(root_0, RPAREN253_tree);
					}

					}

					}
					break;
				case 4 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1359:5: ( OJ_SYM table_reference LEFT OUTER JOIN_SYM table_reference ON expression )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1359:5: ( OJ_SYM table_reference LEFT OUTER JOIN_SYM table_reference ON expression )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1359:7: OJ_SYM table_reference LEFT OUTER JOIN_SYM table_reference ON expression
					{
					OJ_SYM254=(Token)match(input,OJ_SYM,FOLLOW_OJ_SYM_in_table_atom23657); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					OJ_SYM254_tree = (CommonTree)adaptor.create(OJ_SYM254);
					adaptor.addChild(root_0, OJ_SYM254_tree);
					}

					pushFollow(FOLLOW_table_reference_in_table_atom23659);
					table_reference255=table_reference();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_reference255.getTree());

					LEFT256=(Token)match(input,LEFT,FOLLOW_LEFT_in_table_atom23661); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LEFT256_tree = (CommonTree)adaptor.create(LEFT256);
					adaptor.addChild(root_0, LEFT256_tree);
					}

					OUTER257=(Token)match(input,OUTER,FOLLOW_OUTER_in_table_atom23663); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					OUTER257_tree = (CommonTree)adaptor.create(OUTER257);
					adaptor.addChild(root_0, OUTER257_tree);
					}

					JOIN_SYM258=(Token)match(input,JOIN_SYM,FOLLOW_JOIN_SYM_in_table_atom23665); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					JOIN_SYM258_tree = (CommonTree)adaptor.create(JOIN_SYM258);
					adaptor.addChild(root_0, JOIN_SYM258_tree);
					}

					pushFollow(FOLLOW_table_reference_in_table_atom23667);
					table_reference259=table_reference();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_reference259.getTree());

					ON260=(Token)match(input,ON,FOLLOW_ON_in_table_atom23669); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ON260_tree = (CommonTree)adaptor.create(ON260);
					adaptor.addChild(root_0, ON260_tree);
					}

					pushFollow(FOLLOW_expression_in_table_atom23671);
					expression261=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression261.getTree());

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_atom"


	public static class join_condition_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "join_condition"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1361:1: join_condition : ( ( ON ^ expression ) | ( USING_SYM ^ column_list ) );
	public final SQLParser.join_condition_return join_condition() throws RecognitionException {
		SQLParser.join_condition_return retval = new SQLParser.join_condition_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token ON262=null;
		Token USING_SYM264=null;
		ParserRuleReturnScope expression263 =null;
		ParserRuleReturnScope column_list265 =null;

		CommonTree ON262_tree=null;
		CommonTree USING_SYM264_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1361:15: ( ( ON ^ expression ) | ( USING_SYM ^ column_list ) )
			int alt70=2;
			int LA70_0 = input.LA(1);
			if ( (LA70_0==ON) ) {
				alt70=1;
			}
			else if ( (LA70_0==USING_SYM) ) {
				alt70=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 70, 0, input);
				throw nvae;
			}

			switch (alt70) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1362:5: ( ON ^ expression )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1362:5: ( ON ^ expression )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1362:6: ON ^ expression
					{
					ON262=(Token)match(input,ON,FOLLOW_ON_in_join_condition23685); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ON262_tree = (CommonTree)adaptor.create(ON262);
					root_0 = (CommonTree)adaptor.becomeRoot(ON262_tree, root_0);
					}

					pushFollow(FOLLOW_expression_in_join_condition23689);
					expression263=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression263.getTree());

					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1362:25: ( USING_SYM ^ column_list )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1362:25: ( USING_SYM ^ column_list )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1362:26: USING_SYM ^ column_list
					{
					USING_SYM264=(Token)match(input,USING_SYM,FOLLOW_USING_SYM_in_join_condition23695); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					USING_SYM264_tree = (CommonTree)adaptor.create(USING_SYM264);
					root_0 = (CommonTree)adaptor.becomeRoot(USING_SYM264_tree, root_0);
					}

					pushFollow(FOLLOW_column_list_in_join_condition23699);
					column_list265=column_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_list265.getTree());

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "join_condition"


	public static class index_hint_list_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "index_hint_list"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1364:1: index_hint_list : index_hint ( COMMA index_hint )* ;
	public final SQLParser.index_hint_list_return index_hint_list() throws RecognitionException {
		SQLParser.index_hint_list_return retval = new SQLParser.index_hint_list_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA267=null;
		ParserRuleReturnScope index_hint266 =null;
		ParserRuleReturnScope index_hint268 =null;

		CommonTree COMMA267_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1364:16: ( index_hint ( COMMA index_hint )* )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1365:3: index_hint ( COMMA index_hint )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_index_hint_in_index_hint_list23709);
			index_hint266=index_hint();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, index_hint266.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1365:14: ( COMMA index_hint )*
			loop71:
			while (true) {
				int alt71=2;
				int LA71_0 = input.LA(1);
				if ( (LA71_0==COMMA) ) {
					int LA71_1 = input.LA(2);
					if ( (LA71_1==FORCE_SYM||LA71_1==IGNORE_SYM||LA71_1==USE_SYM) ) {
						alt71=1;
					}

				}

				switch (alt71) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1365:15: COMMA index_hint
					{
					COMMA267=(Token)match(input,COMMA,FOLLOW_COMMA_in_index_hint_list23712); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA267_tree = (CommonTree)adaptor.create(COMMA267);
					adaptor.addChild(root_0, COMMA267_tree);
					}

					pushFollow(FOLLOW_index_hint_in_index_hint_list23714);
					index_hint268=index_hint();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_hint268.getTree());

					}
					break;

				default :
					break loop71;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "index_hint_list"


	public static class index_options_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "index_options"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1367:1: index_options : ( INDEX_SYM | KEY_SYM ) ( FOR_SYM ( ( JOIN_SYM ) | ( ORDER_SYM BY_SYM ) | ( GROUP_SYM BY_SYM ) ) )? ;
	public final SQLParser.index_options_return index_options() throws RecognitionException {
		SQLParser.index_options_return retval = new SQLParser.index_options_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token set269=null;
		Token FOR_SYM270=null;
		Token JOIN_SYM271=null;
		Token ORDER_SYM272=null;
		Token BY_SYM273=null;
		Token GROUP_SYM274=null;
		Token BY_SYM275=null;

		CommonTree set269_tree=null;
		CommonTree FOR_SYM270_tree=null;
		CommonTree JOIN_SYM271_tree=null;
		CommonTree ORDER_SYM272_tree=null;
		CommonTree BY_SYM273_tree=null;
		CommonTree GROUP_SYM274_tree=null;
		CommonTree BY_SYM275_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1367:14: ( ( INDEX_SYM | KEY_SYM ) ( FOR_SYM ( ( JOIN_SYM ) | ( ORDER_SYM BY_SYM ) | ( GROUP_SYM BY_SYM ) ) )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1368:3: ( INDEX_SYM | KEY_SYM ) ( FOR_SYM ( ( JOIN_SYM ) | ( ORDER_SYM BY_SYM ) | ( GROUP_SYM BY_SYM ) ) )?
			{
			root_0 = (CommonTree)adaptor.nil();


			set269=input.LT(1);
			if ( input.LA(1)==INDEX_SYM||input.LA(1)==KEY_SYM ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set269));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1368:25: ( FOR_SYM ( ( JOIN_SYM ) | ( ORDER_SYM BY_SYM ) | ( GROUP_SYM BY_SYM ) ) )?
			int alt73=2;
			int LA73_0 = input.LA(1);
			if ( (LA73_0==FOR_SYM) ) {
				alt73=1;
			}
			switch (alt73) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1368:28: FOR_SYM ( ( JOIN_SYM ) | ( ORDER_SYM BY_SYM ) | ( GROUP_SYM BY_SYM ) )
					{
					FOR_SYM270=(Token)match(input,FOR_SYM,FOLLOW_FOR_SYM_in_index_options23736); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					FOR_SYM270_tree = (CommonTree)adaptor.create(FOR_SYM270);
					adaptor.addChild(root_0, FOR_SYM270_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1368:36: ( ( JOIN_SYM ) | ( ORDER_SYM BY_SYM ) | ( GROUP_SYM BY_SYM ) )
					int alt72=3;
					switch ( input.LA(1) ) {
					case JOIN_SYM:
						{
						alt72=1;
						}
						break;
					case ORDER_SYM:
						{
						alt72=2;
						}
						break;
					case GROUP_SYM:
						{
						alt72=3;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 72, 0, input);
						throw nvae;
					}
					switch (alt72) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1368:37: ( JOIN_SYM )
							{
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1368:37: ( JOIN_SYM )
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1368:38: JOIN_SYM
							{
							JOIN_SYM271=(Token)match(input,JOIN_SYM,FOLLOW_JOIN_SYM_in_index_options23740); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							JOIN_SYM271_tree = (CommonTree)adaptor.create(JOIN_SYM271);
							adaptor.addChild(root_0, JOIN_SYM271_tree);
							}

							}

							}
							break;
						case 2 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1368:50: ( ORDER_SYM BY_SYM )
							{
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1368:50: ( ORDER_SYM BY_SYM )
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1368:51: ORDER_SYM BY_SYM
							{
							ORDER_SYM272=(Token)match(input,ORDER_SYM,FOLLOW_ORDER_SYM_in_index_options23746); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ORDER_SYM272_tree = (CommonTree)adaptor.create(ORDER_SYM272);
							adaptor.addChild(root_0, ORDER_SYM272_tree);
							}

							BY_SYM273=(Token)match(input,BY_SYM,FOLLOW_BY_SYM_in_index_options23748); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							BY_SYM273_tree = (CommonTree)adaptor.create(BY_SYM273);
							adaptor.addChild(root_0, BY_SYM273_tree);
							}

							}

							}
							break;
						case 3 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1368:71: ( GROUP_SYM BY_SYM )
							{
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1368:71: ( GROUP_SYM BY_SYM )
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1368:72: GROUP_SYM BY_SYM
							{
							GROUP_SYM274=(Token)match(input,GROUP_SYM,FOLLOW_GROUP_SYM_in_index_options23754); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							GROUP_SYM274_tree = (CommonTree)adaptor.create(GROUP_SYM274);
							adaptor.addChild(root_0, GROUP_SYM274_tree);
							}

							BY_SYM275=(Token)match(input,BY_SYM,FOLLOW_BY_SYM_in_index_options23756); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							BY_SYM275_tree = (CommonTree)adaptor.create(BY_SYM275);
							adaptor.addChild(root_0, BY_SYM275_tree);
							}

							}

							}
							break;

					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "index_options"


	public static class index_hint_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "index_hint"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1370:1: index_hint : ( USE_SYM index_options LPAREN ( index_list )? RPAREN | IGNORE_SYM index_options LPAREN index_list RPAREN | FORCE_SYM index_options LPAREN index_list RPAREN );
	public final SQLParser.index_hint_return index_hint() throws RecognitionException {
		SQLParser.index_hint_return retval = new SQLParser.index_hint_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token USE_SYM276=null;
		Token LPAREN278=null;
		Token RPAREN280=null;
		Token IGNORE_SYM281=null;
		Token LPAREN283=null;
		Token RPAREN285=null;
		Token FORCE_SYM286=null;
		Token LPAREN288=null;
		Token RPAREN290=null;
		ParserRuleReturnScope index_options277 =null;
		ParserRuleReturnScope index_list279 =null;
		ParserRuleReturnScope index_options282 =null;
		ParserRuleReturnScope index_list284 =null;
		ParserRuleReturnScope index_options287 =null;
		ParserRuleReturnScope index_list289 =null;

		CommonTree USE_SYM276_tree=null;
		CommonTree LPAREN278_tree=null;
		CommonTree RPAREN280_tree=null;
		CommonTree IGNORE_SYM281_tree=null;
		CommonTree LPAREN283_tree=null;
		CommonTree RPAREN285_tree=null;
		CommonTree FORCE_SYM286_tree=null;
		CommonTree LPAREN288_tree=null;
		CommonTree RPAREN290_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1370:11: ( USE_SYM index_options LPAREN ( index_list )? RPAREN | IGNORE_SYM index_options LPAREN index_list RPAREN | FORCE_SYM index_options LPAREN index_list RPAREN )
			int alt75=3;
			switch ( input.LA(1) ) {
			case USE_SYM:
				{
				alt75=1;
				}
				break;
			case IGNORE_SYM:
				{
				alt75=2;
				}
				break;
			case FORCE_SYM:
				{
				alt75=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 75, 0, input);
				throw nvae;
			}
			switch (alt75) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1371:5: USE_SYM index_options LPAREN ( index_list )? RPAREN
					{
					root_0 = (CommonTree)adaptor.nil();


					USE_SYM276=(Token)match(input,USE_SYM,FOLLOW_USE_SYM_in_index_hint23773); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					USE_SYM276_tree = (CommonTree)adaptor.create(USE_SYM276);
					adaptor.addChild(root_0, USE_SYM276_tree);
					}

					pushFollow(FOLLOW_index_options_in_index_hint23778);
					index_options277=index_options();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_options277.getTree());

					LPAREN278=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_index_hint23780); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN278_tree = (CommonTree)adaptor.create(LPAREN278);
					adaptor.addChild(root_0, LPAREN278_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1371:37: ( index_list )?
					int alt74=2;
					int LA74_0 = input.LA(1);
					if ( (LA74_0==ID) ) {
						alt74=1;
					}
					switch (alt74) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1371:38: index_list
							{
							pushFollow(FOLLOW_index_list_in_index_hint23783);
							index_list279=index_list();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_list279.getTree());

							}
							break;

					}

					RPAREN280=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_index_hint23787); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN280_tree = (CommonTree)adaptor.create(RPAREN280);
					adaptor.addChild(root_0, RPAREN280_tree);
					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1372:5: IGNORE_SYM index_options LPAREN index_list RPAREN
					{
					root_0 = (CommonTree)adaptor.nil();


					IGNORE_SYM281=(Token)match(input,IGNORE_SYM,FOLLOW_IGNORE_SYM_in_index_hint23793); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IGNORE_SYM281_tree = (CommonTree)adaptor.create(IGNORE_SYM281);
					adaptor.addChild(root_0, IGNORE_SYM281_tree);
					}

					pushFollow(FOLLOW_index_options_in_index_hint23795);
					index_options282=index_options();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_options282.getTree());

					LPAREN283=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_index_hint23797); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN283_tree = (CommonTree)adaptor.create(LPAREN283);
					adaptor.addChild(root_0, LPAREN283_tree);
					}

					pushFollow(FOLLOW_index_list_in_index_hint23799);
					index_list284=index_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_list284.getTree());

					RPAREN285=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_index_hint23801); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN285_tree = (CommonTree)adaptor.create(RPAREN285);
					adaptor.addChild(root_0, RPAREN285_tree);
					}

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1373:5: FORCE_SYM index_options LPAREN index_list RPAREN
					{
					root_0 = (CommonTree)adaptor.nil();


					FORCE_SYM286=(Token)match(input,FORCE_SYM,FOLLOW_FORCE_SYM_in_index_hint23807); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					FORCE_SYM286_tree = (CommonTree)adaptor.create(FORCE_SYM286);
					adaptor.addChild(root_0, FORCE_SYM286_tree);
					}

					pushFollow(FOLLOW_index_options_in_index_hint23810);
					index_options287=index_options();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_options287.getTree());

					LPAREN288=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_index_hint23812); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN288_tree = (CommonTree)adaptor.create(LPAREN288);
					adaptor.addChild(root_0, LPAREN288_tree);
					}

					pushFollow(FOLLOW_index_list_in_index_hint23814);
					index_list289=index_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_list289.getTree());

					RPAREN290=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_index_hint23816); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN290_tree = (CommonTree)adaptor.create(RPAREN290);
					adaptor.addChild(root_0, RPAREN290_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "index_hint"


	public static class index_list_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "index_list"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1375:1: index_list : index_name ( COMMA index_name )* ;
	public final SQLParser.index_list_return index_list() throws RecognitionException {
		SQLParser.index_list_return retval = new SQLParser.index_list_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA292=null;
		ParserRuleReturnScope index_name291 =null;
		ParserRuleReturnScope index_name293 =null;

		CommonTree COMMA292_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1375:11: ( index_name ( COMMA index_name )* )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1376:3: index_name ( COMMA index_name )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_index_name_in_index_list23825);
			index_name291=index_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name291.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1376:14: ( COMMA index_name )*
			loop76:
			while (true) {
				int alt76=2;
				int LA76_0 = input.LA(1);
				if ( (LA76_0==COMMA) ) {
					alt76=1;
				}

				switch (alt76) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1376:15: COMMA index_name
					{
					COMMA292=(Token)match(input,COMMA,FOLLOW_COMMA_in_index_list23828); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA292_tree = (CommonTree)adaptor.create(COMMA292);
					adaptor.addChild(root_0, COMMA292_tree);
					}

					pushFollow(FOLLOW_index_name_in_index_list23830);
					index_name293=index_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name293.getTree());

					}
					break;

				default :
					break loop76;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "index_list"


	public static class partition_clause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "partition_clause"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1378:1: partition_clause : PARTITION_SYM LPAREN partition_names RPAREN ;
	public final SQLParser.partition_clause_return partition_clause() throws RecognitionException {
		SQLParser.partition_clause_return retval = new SQLParser.partition_clause_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token PARTITION_SYM294=null;
		Token LPAREN295=null;
		Token RPAREN297=null;
		ParserRuleReturnScope partition_names296 =null;

		CommonTree PARTITION_SYM294_tree=null;
		CommonTree LPAREN295_tree=null;
		CommonTree RPAREN297_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1378:17: ( PARTITION_SYM LPAREN partition_names RPAREN )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1379:3: PARTITION_SYM LPAREN partition_names RPAREN
			{
			root_0 = (CommonTree)adaptor.nil();


			PARTITION_SYM294=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_partition_clause23841); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			PARTITION_SYM294_tree = (CommonTree)adaptor.create(PARTITION_SYM294);
			adaptor.addChild(root_0, PARTITION_SYM294_tree);
			}

			LPAREN295=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_clause23843); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN295_tree = (CommonTree)adaptor.create(LPAREN295);
			adaptor.addChild(root_0, LPAREN295_tree);
			}

			pushFollow(FOLLOW_partition_names_in_partition_clause23845);
			partition_names296=partition_names();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_names296.getTree());

			RPAREN297=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_clause23847); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN297_tree = (CommonTree)adaptor.create(RPAREN297);
			adaptor.addChild(root_0, RPAREN297_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "partition_clause"


	public static class partition_names_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "partition_names"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1381:1: partition_names : partition_name ( COMMA partition_name )* ;
	public final SQLParser.partition_names_return partition_names() throws RecognitionException {
		SQLParser.partition_names_return retval = new SQLParser.partition_names_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA299=null;
		ParserRuleReturnScope partition_name298 =null;
		ParserRuleReturnScope partition_name300 =null;

		CommonTree COMMA299_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1381:16: ( partition_name ( COMMA partition_name )* )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1381:19: partition_name ( COMMA partition_name )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_partition_name_in_partition_names23855);
			partition_name298=partition_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_name298.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1381:34: ( COMMA partition_name )*
			loop77:
			while (true) {
				int alt77=2;
				int LA77_0 = input.LA(1);
				if ( (LA77_0==COMMA) ) {
					int LA77_2 = input.LA(2);
					if ( (LA77_2==ID) ) {
						alt77=1;
					}

				}

				switch (alt77) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1381:35: COMMA partition_name
					{
					COMMA299=(Token)match(input,COMMA,FOLLOW_COMMA_in_partition_names23858); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA299_tree = (CommonTree)adaptor.create(COMMA299);
					adaptor.addChild(root_0, COMMA299_tree);
					}

					pushFollow(FOLLOW_partition_name_in_partition_names23860);
					partition_name300=partition_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_name300.getTree());

					}
					break;

				default :
					break loop77;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "partition_names"


	public static class root_statement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "root_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1389:1: root_statement : ( SHIFT_LEFT SHIFT_RIGHT )? ( data_manipulation_statements | data_definition_statements ) ( SEMI )? ;
	public final SQLParser.root_statement_return root_statement() throws RecognitionException {
		SQLParser.root_statement_return retval = new SQLParser.root_statement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token SHIFT_LEFT301=null;
		Token SHIFT_RIGHT302=null;
		Token SEMI305=null;
		ParserRuleReturnScope data_manipulation_statements303 =null;
		ParserRuleReturnScope data_definition_statements304 =null;

		CommonTree SHIFT_LEFT301_tree=null;
		CommonTree SHIFT_RIGHT302_tree=null;
		CommonTree SEMI305_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1389:15: ( ( SHIFT_LEFT SHIFT_RIGHT )? ( data_manipulation_statements | data_definition_statements ) ( SEMI )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1390:3: ( SHIFT_LEFT SHIFT_RIGHT )? ( data_manipulation_statements | data_definition_statements ) ( SEMI )?
			{
			root_0 = (CommonTree)adaptor.nil();


			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1390:3: ( SHIFT_LEFT SHIFT_RIGHT )?
			int alt78=2;
			int LA78_0 = input.LA(1);
			if ( (LA78_0==SHIFT_LEFT) ) {
				alt78=1;
			}
			switch (alt78) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1390:4: SHIFT_LEFT SHIFT_RIGHT
					{
					SHIFT_LEFT301=(Token)match(input,SHIFT_LEFT,FOLLOW_SHIFT_LEFT_in_root_statement23879); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SHIFT_LEFT301_tree = (CommonTree)adaptor.create(SHIFT_LEFT301);
					adaptor.addChild(root_0, SHIFT_LEFT301_tree);
					}

					SHIFT_RIGHT302=(Token)match(input,SHIFT_RIGHT,FOLLOW_SHIFT_RIGHT_in_root_statement23881); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SHIFT_RIGHT302_tree = (CommonTree)adaptor.create(SHIFT_RIGHT302);
					adaptor.addChild(root_0, SHIFT_RIGHT302_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1391:3: ( data_manipulation_statements | data_definition_statements )
			int alt79=2;
			int LA79_0 = input.LA(1);
			if ( (LA79_0==CALL_SYM||LA79_0==DELETE_SYM||LA79_0==DO_SYM||LA79_0==HANDLER_SYM||LA79_0==INSERT||LA79_0==LOAD||LA79_0==REPLACE||LA79_0==SELECT||LA79_0==UPDATE) ) {
				alt79=1;
			}
			else if ( (LA79_0==ALTER||LA79_0==CREATE||LA79_0==DROP||LA79_0==RENAME||LA79_0==TRUNCATE) ) {
				alt79=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 79, 0, input);
				throw nvae;
			}

			switch (alt79) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1391:5: data_manipulation_statements
					{
					pushFollow(FOLLOW_data_manipulation_statements_in_root_statement23891);
					data_manipulation_statements303=data_manipulation_statements();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, data_manipulation_statements303.getTree());

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1391:36: data_definition_statements
					{
					pushFollow(FOLLOW_data_definition_statements_in_root_statement23895);
					data_definition_statements304=data_definition_statements();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, data_definition_statements304.getTree());

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1392:3: ( SEMI )?
			int alt80=2;
			int LA80_0 = input.LA(1);
			if ( (LA80_0==SEMI) ) {
				int LA80_1 = input.LA(2);
				if ( (synpred373_SQL()) ) {
					alt80=1;
				}
			}
			switch (alt80) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1392:4: SEMI
					{
					SEMI305=(Token)match(input,SEMI,FOLLOW_SEMI_in_root_statement23904); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SEMI305_tree = (CommonTree)adaptor.create(SEMI305);
					adaptor.addChild(root_0, SEMI305_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "root_statement"


	public static class data_manipulation_statements_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "data_manipulation_statements"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1395:1: data_manipulation_statements : ( select_statement | delete_statements | insert_statements | update_statements | call_statement | do_statement | handler_statements | load_data_statement | load_xml_statement | replace_statement );
	public final SQLParser.data_manipulation_statements_return data_manipulation_statements() throws RecognitionException {
		SQLParser.data_manipulation_statements_return retval = new SQLParser.data_manipulation_statements_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope select_statement306 =null;
		ParserRuleReturnScope delete_statements307 =null;
		ParserRuleReturnScope insert_statements308 =null;
		ParserRuleReturnScope update_statements309 =null;
		ParserRuleReturnScope call_statement310 =null;
		ParserRuleReturnScope do_statement311 =null;
		ParserRuleReturnScope handler_statements312 =null;
		ParserRuleReturnScope load_data_statement313 =null;
		ParserRuleReturnScope load_xml_statement314 =null;
		ParserRuleReturnScope replace_statement315 =null;


		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1395:29: ( select_statement | delete_statements | insert_statements | update_statements | call_statement | do_statement | handler_statements | load_data_statement | load_xml_statement | replace_statement )
			int alt81=10;
			switch ( input.LA(1) ) {
			case SELECT:
				{
				alt81=1;
				}
				break;
			case DELETE_SYM:
				{
				alt81=2;
				}
				break;
			case INSERT:
				{
				alt81=3;
				}
				break;
			case UPDATE:
				{
				alt81=4;
				}
				break;
			case CALL_SYM:
				{
				alt81=5;
				}
				break;
			case DO_SYM:
				{
				alt81=6;
				}
				break;
			case HANDLER_SYM:
				{
				alt81=7;
				}
				break;
			case LOAD:
				{
				int LA81_8 = input.LA(2);
				if ( (LA81_8==DATA_SYM) ) {
					alt81=8;
				}
				else if ( (LA81_8==XML_SYM) ) {
					alt81=9;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 81, 8, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case REPLACE:
				{
				alt81=10;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 81, 0, input);
				throw nvae;
			}
			switch (alt81) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1396:5: select_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_select_statement_in_data_manipulation_statements23918);
					select_statement306=select_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement306.getTree());

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1397:5: delete_statements
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_delete_statements_in_data_manipulation_statements23924);
					delete_statements307=delete_statements();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, delete_statements307.getTree());

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1398:5: insert_statements
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_insert_statements_in_data_manipulation_statements23930);
					insert_statements308=insert_statements();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, insert_statements308.getTree());

					}
					break;
				case 4 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1399:5: update_statements
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_update_statements_in_data_manipulation_statements23936);
					update_statements309=update_statements();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, update_statements309.getTree());

					}
					break;
				case 5 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1401:5: call_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_call_statement_in_data_manipulation_statements23943);
					call_statement310=call_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, call_statement310.getTree());

					}
					break;
				case 6 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1402:5: do_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_do_statement_in_data_manipulation_statements23949);
					do_statement311=do_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, do_statement311.getTree());

					}
					break;
				case 7 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1403:5: handler_statements
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_handler_statements_in_data_manipulation_statements23955);
					handler_statements312=handler_statements();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, handler_statements312.getTree());

					}
					break;
				case 8 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1404:5: load_data_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_load_data_statement_in_data_manipulation_statements23961);
					load_data_statement313=load_data_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, load_data_statement313.getTree());

					}
					break;
				case 9 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1405:5: load_xml_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_load_xml_statement_in_data_manipulation_statements23967);
					load_xml_statement314=load_xml_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, load_xml_statement314.getTree());

					}
					break;
				case 10 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1406:5: replace_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_replace_statement_in_data_manipulation_statements23973);
					replace_statement315=replace_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, replace_statement315.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "data_manipulation_statements"


	public static class data_definition_statements_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "data_definition_statements"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1409:1: data_definition_statements : ( create_database_statement | alter_database_statements | drop_database_statement | create_event_statement | alter_event_statement | drop_event_statement | create_server_statement | alter_server_statement | drop_server_statement | create_table_statement | alter_table_statement | drop_table_statement | create_view_statement | alter_view_statement | rename_table_statement | drop_view_statement | truncate_table_statement | create_index_statement | drop_index_statement );
	public final SQLParser.data_definition_statements_return data_definition_statements() throws RecognitionException {
		SQLParser.data_definition_statements_return retval = new SQLParser.data_definition_statements_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope create_database_statement316 =null;
		ParserRuleReturnScope alter_database_statements317 =null;
		ParserRuleReturnScope drop_database_statement318 =null;
		ParserRuleReturnScope create_event_statement319 =null;
		ParserRuleReturnScope alter_event_statement320 =null;
		ParserRuleReturnScope drop_event_statement321 =null;
		ParserRuleReturnScope create_server_statement322 =null;
		ParserRuleReturnScope alter_server_statement323 =null;
		ParserRuleReturnScope drop_server_statement324 =null;
		ParserRuleReturnScope create_table_statement325 =null;
		ParserRuleReturnScope alter_table_statement326 =null;
		ParserRuleReturnScope drop_table_statement327 =null;
		ParserRuleReturnScope create_view_statement328 =null;
		ParserRuleReturnScope alter_view_statement329 =null;
		ParserRuleReturnScope rename_table_statement330 =null;
		ParserRuleReturnScope drop_view_statement331 =null;
		ParserRuleReturnScope truncate_table_statement332 =null;
		ParserRuleReturnScope create_index_statement333 =null;
		ParserRuleReturnScope drop_index_statement334 =null;


		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1409:27: ( create_database_statement | alter_database_statements | drop_database_statement | create_event_statement | alter_event_statement | drop_event_statement | create_server_statement | alter_server_statement | drop_server_statement | create_table_statement | alter_table_statement | drop_table_statement | create_view_statement | alter_view_statement | rename_table_statement | drop_view_statement | truncate_table_statement | create_index_statement | drop_index_statement )
			int alt82=19;
			switch ( input.LA(1) ) {
			case CREATE:
				{
				switch ( input.LA(2) ) {
				case DATABASE:
				case SCHEMA:
					{
					alt82=1;
					}
					break;
				case SERVER_SYM:
					{
					alt82=7;
					}
					break;
				case DEFINER:
					{
					int LA82_8 = input.LA(3);
					if ( (LA82_8==EQ_SYM) ) {
						int LA82_25 = input.LA(4);
						if ( (LA82_25==ID) ) {
							int LA82_27 = input.LA(5);
							if ( (LA82_27==EVENT_SYM) ) {
								alt82=4;
							}
							else if ( (LA82_27==SQL_SYM||LA82_27==VIEW_SYM) ) {
								alt82=13;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 82, 27, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}

						}
						else if ( (LA82_25==CURRENT_USER) ) {
							int LA82_28 = input.LA(5);
							if ( (LA82_28==EVENT_SYM) ) {
								alt82=4;
							}
							else if ( (LA82_28==SQL_SYM||LA82_28==VIEW_SYM) ) {
								alt82=13;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 82, 28, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}

						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 82, 25, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 82, 8, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case EVENT_SYM:
					{
					alt82=4;
					}
					break;
				case TABLE:
				case TEMPORARY:
					{
					alt82=10;
					}
					break;
				case ALGORITHM_SYM:
				case OR_SYM:
				case SQL_SYM:
				case VIEW_SYM:
					{
					alt82=13;
					}
					break;
				case FULLTEXT_SYM:
				case INDEX_SYM:
				case SPATIAL_SYM:
				case UNIQUE_SYM:
					{
					alt82=18;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 82, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case ALTER:
				{
				switch ( input.LA(2) ) {
				case DATABASE:
				case SCHEMA:
					{
					alt82=2;
					}
					break;
				case SERVER_SYM:
					{
					alt82=8;
					}
					break;
				case DEFINER:
					{
					int LA82_15 = input.LA(3);
					if ( (LA82_15==EQ_SYM) ) {
						int LA82_26 = input.LA(4);
						if ( (LA82_26==ID) ) {
							int LA82_29 = input.LA(5);
							if ( (LA82_29==EVENT_SYM) ) {
								alt82=5;
							}
							else if ( (LA82_29==SQL_SYM||LA82_29==VIEW_SYM) ) {
								alt82=14;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 82, 29, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}

						}
						else if ( (LA82_26==CURRENT_USER) ) {
							int LA82_30 = input.LA(5);
							if ( (LA82_30==EVENT_SYM) ) {
								alt82=5;
							}
							else if ( (LA82_30==SQL_SYM||LA82_30==VIEW_SYM) ) {
								alt82=14;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 82, 30, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}

						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 82, 26, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 82, 15, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case EVENT_SYM:
					{
					alt82=5;
					}
					break;
				case IGNORE_SYM:
				case TABLE:
					{
					alt82=11;
					}
					break;
				case ALGORITHM_SYM:
				case SQL_SYM:
				case VIEW_SYM:
					{
					alt82=14;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 82, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case DROP:
				{
				switch ( input.LA(2) ) {
				case DATABASE:
				case SCHEMA:
					{
					alt82=3;
					}
					break;
				case EVENT_SYM:
					{
					alt82=6;
					}
					break;
				case SERVER_SYM:
					{
					alt82=9;
					}
					break;
				case VIEW_SYM:
					{
					alt82=16;
					}
					break;
				case INDEX_SYM:
					{
					alt82=19;
					}
					break;
				case TABLE:
				case TEMPORARY:
					{
					alt82=12;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 82, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case RENAME:
				{
				alt82=15;
				}
				break;
			case TRUNCATE:
				{
				alt82=17;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 82, 0, input);
				throw nvae;
			}
			switch (alt82) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1410:5: create_database_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_create_database_statement_in_data_definition_statements23986);
					create_database_statement316=create_database_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_database_statement316.getTree());

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1411:5: alter_database_statements
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alter_database_statements_in_data_definition_statements23992);
					alter_database_statements317=alter_database_statements();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_database_statements317.getTree());

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1412:5: drop_database_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_drop_database_statement_in_data_definition_statements23998);
					drop_database_statement318=drop_database_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, drop_database_statement318.getTree());

					}
					break;
				case 4 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1414:5: create_event_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_create_event_statement_in_data_definition_statements24007);
					create_event_statement319=create_event_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_event_statement319.getTree());

					}
					break;
				case 5 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1415:5: alter_event_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alter_event_statement_in_data_definition_statements24013);
					alter_event_statement320=alter_event_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_event_statement320.getTree());

					}
					break;
				case 6 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1416:5: drop_event_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_drop_event_statement_in_data_definition_statements24019);
					drop_event_statement321=drop_event_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, drop_event_statement321.getTree());

					}
					break;
				case 7 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1429:5: create_server_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_create_server_statement_in_data_definition_statements24061);
					create_server_statement322=create_server_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_server_statement322.getTree());

					}
					break;
				case 8 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1430:5: alter_server_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alter_server_statement_in_data_definition_statements24067);
					alter_server_statement323=alter_server_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_server_statement323.getTree());

					}
					break;
				case 9 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1431:5: drop_server_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_drop_server_statement_in_data_definition_statements24073);
					drop_server_statement324=drop_server_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, drop_server_statement324.getTree());

					}
					break;
				case 10 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1433:5: create_table_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_create_table_statement_in_data_definition_statements24082);
					create_table_statement325=create_table_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_table_statement325.getTree());

					}
					break;
				case 11 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1434:5: alter_table_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alter_table_statement_in_data_definition_statements24088);
					alter_table_statement326=alter_table_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_table_statement326.getTree());

					}
					break;
				case 12 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1435:5: drop_table_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_drop_table_statement_in_data_definition_statements24094);
					drop_table_statement327=drop_table_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, drop_table_statement327.getTree());

					}
					break;
				case 13 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1437:5: create_view_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_create_view_statement_in_data_definition_statements24103);
					create_view_statement328=create_view_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_view_statement328.getTree());

					}
					break;
				case 14 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1438:5: alter_view_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alter_view_statement_in_data_definition_statements24109);
					alter_view_statement329=alter_view_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_view_statement329.getTree());

					}
					break;
				case 15 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1439:5: rename_table_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_rename_table_statement_in_data_definition_statements24115);
					rename_table_statement330=rename_table_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, rename_table_statement330.getTree());

					}
					break;
				case 16 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1440:5: drop_view_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_drop_view_statement_in_data_definition_statements24121);
					drop_view_statement331=drop_view_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, drop_view_statement331.getTree());

					}
					break;
				case 17 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1441:5: truncate_table_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_truncate_table_statement_in_data_definition_statements24127);
					truncate_table_statement332=truncate_table_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, truncate_table_statement332.getTree());

					}
					break;
				case 18 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1443:5: create_index_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_create_index_statement_in_data_definition_statements24136);
					create_index_statement333=create_index_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_index_statement333.getTree());

					}
					break;
				case 19 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1444:5: drop_index_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_drop_index_statement_in_data_definition_statements24142);
					drop_index_statement334=drop_index_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, drop_index_statement334.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "data_definition_statements"


	public static class select_statement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "select_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1477:1: select_statement : select_expression ( ( UNION_SYM ( ALL )? ) select_expression )* ;
	public final SQLParser.select_statement_return select_statement() throws RecognitionException {
		SQLParser.select_statement_return retval = new SQLParser.select_statement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token UNION_SYM336=null;
		Token ALL337=null;
		ParserRuleReturnScope select_expression335 =null;
		ParserRuleReturnScope select_expression338 =null;

		CommonTree UNION_SYM336_tree=null;
		CommonTree ALL337_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1477:17: ( select_expression ( ( UNION_SYM ( ALL )? ) select_expression )* )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1478:9: select_expression ( ( UNION_SYM ( ALL )? ) select_expression )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_select_expression_in_select_statement24168);
			select_expression335=select_expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, select_expression335.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1478:27: ( ( UNION_SYM ( ALL )? ) select_expression )*
			loop84:
			while (true) {
				int alt84=2;
				int LA84_0 = input.LA(1);
				if ( (LA84_0==UNION_SYM) ) {
					alt84=1;
				}

				switch (alt84) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1478:29: ( UNION_SYM ( ALL )? ) select_expression
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1478:29: ( UNION_SYM ( ALL )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1478:30: UNION_SYM ( ALL )?
					{
					UNION_SYM336=(Token)match(input,UNION_SYM,FOLLOW_UNION_SYM_in_select_statement24173); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					UNION_SYM336_tree = (CommonTree)adaptor.create(UNION_SYM336);
					adaptor.addChild(root_0, UNION_SYM336_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1478:40: ( ALL )?
					int alt83=2;
					int LA83_0 = input.LA(1);
					if ( (LA83_0==ALL) ) {
						alt83=1;
					}
					switch (alt83) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1478:41: ALL
							{
							ALL337=(Token)match(input,ALL,FOLLOW_ALL_in_select_statement24176); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ALL337_tree = (CommonTree)adaptor.create(ALL337);
							adaptor.addChild(root_0, ALL337_tree);
							}

							}
							break;

					}

					}

					pushFollow(FOLLOW_select_expression_in_select_statement24181);
					select_expression338=select_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, select_expression338.getTree());

					}
					break;

				default :
					break loop84;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "select_statement"


	public static class select_expression_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "select_expression"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1481:1: select_expression : select_part ( from_part ( partition_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? )? ( orderby_clause )? ( limit_clause )? ( ( FOR_SYM UPDATE ) | ( LOCK IN_SYM SHARE_SYM MODE_SYM ) )? ;
	public final SQLParser.select_expression_return select_expression() throws RecognitionException {
		SQLParser.select_expression_return retval = new SQLParser.select_expression_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token FOR_SYM347=null;
		Token UPDATE348=null;
		Token LOCK349=null;
		Token IN_SYM350=null;
		Token SHARE_SYM351=null;
		Token MODE_SYM352=null;
		ParserRuleReturnScope select_part339 =null;
		ParserRuleReturnScope from_part340 =null;
		ParserRuleReturnScope partition_clause341 =null;
		ParserRuleReturnScope where_clause342 =null;
		ParserRuleReturnScope groupby_clause343 =null;
		ParserRuleReturnScope having_clause344 =null;
		ParserRuleReturnScope orderby_clause345 =null;
		ParserRuleReturnScope limit_clause346 =null;

		CommonTree FOR_SYM347_tree=null;
		CommonTree UPDATE348_tree=null;
		CommonTree LOCK349_tree=null;
		CommonTree IN_SYM350_tree=null;
		CommonTree SHARE_SYM351_tree=null;
		CommonTree MODE_SYM352_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1481:18: ( select_part ( from_part ( partition_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? )? ( orderby_clause )? ( limit_clause )? ( ( FOR_SYM UPDATE ) | ( LOCK IN_SYM SHARE_SYM MODE_SYM ) )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1482:3: select_part ( from_part ( partition_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? )? ( orderby_clause )? ( limit_clause )? ( ( FOR_SYM UPDATE ) | ( LOCK IN_SYM SHARE_SYM MODE_SYM ) )?
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_select_part_in_select_expression24195);
			select_part339=select_part();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, select_part339.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1483:3: ( from_part ( partition_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? )?
			int alt89=2;
			int LA89_0 = input.LA(1);
			if ( (LA89_0==FROM) ) {
				alt89=1;
			}
			switch (alt89) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1484:5: from_part ( partition_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )?
					{
					pushFollow(FOLLOW_from_part_in_select_expression24206);
					from_part340=from_part();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, from_part340.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1485:5: ( partition_clause )?
					int alt85=2;
					int LA85_0 = input.LA(1);
					if ( (LA85_0==PARTITION_SYM) ) {
						alt85=1;
					}
					switch (alt85) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1485:7: partition_clause
							{
							pushFollow(FOLLOW_partition_clause_in_select_expression24214);
							partition_clause341=partition_clause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_clause341.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1486:5: ( where_clause )?
					int alt86=2;
					int LA86_0 = input.LA(1);
					if ( (LA86_0==WHERE) ) {
						alt86=1;
					}
					switch (alt86) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1486:7: where_clause
							{
							pushFollow(FOLLOW_where_clause_in_select_expression24225);
							where_clause342=where_clause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, where_clause342.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1487:5: ( groupby_clause )?
					int alt87=2;
					int LA87_0 = input.LA(1);
					if ( (LA87_0==GROUP_SYM) ) {
						alt87=1;
					}
					switch (alt87) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1487:7: groupby_clause
							{
							pushFollow(FOLLOW_groupby_clause_in_select_expression24237);
							groupby_clause343=groupby_clause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, groupby_clause343.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1488:5: ( having_clause )?
					int alt88=2;
					int LA88_0 = input.LA(1);
					if ( (LA88_0==HAVING) ) {
						alt88=1;
					}
					switch (alt88) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1488:7: having_clause
							{
							pushFollow(FOLLOW_having_clause_in_select_expression24248);
							having_clause344=having_clause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, having_clause344.getTree());

							}
							break;

					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1491:3: ( orderby_clause )?
			int alt90=2;
			int LA90_0 = input.LA(1);
			if ( (LA90_0==ORDER_SYM) ) {
				alt90=1;
			}
			switch (alt90) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1491:5: orderby_clause
					{
					pushFollow(FOLLOW_orderby_clause_in_select_expression24266);
					orderby_clause345=orderby_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, orderby_clause345.getTree());

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1492:3: ( limit_clause )?
			int alt91=2;
			int LA91_0 = input.LA(1);
			if ( (LA91_0==INTEGER_NUM||LA91_0==LIMIT) ) {
				alt91=1;
			}
			switch (alt91) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1492:5: limit_clause
					{
					pushFollow(FOLLOW_limit_clause_in_select_expression24275);
					limit_clause346=limit_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, limit_clause346.getTree());

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1493:3: ( ( FOR_SYM UPDATE ) | ( LOCK IN_SYM SHARE_SYM MODE_SYM ) )?
			int alt92=3;
			int LA92_0 = input.LA(1);
			if ( (LA92_0==FOR_SYM) ) {
				alt92=1;
			}
			else if ( (LA92_0==LOCK) ) {
				alt92=2;
			}
			switch (alt92) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1493:5: ( FOR_SYM UPDATE )
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1493:5: ( FOR_SYM UPDATE )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1493:7: FOR_SYM UPDATE
					{
					FOR_SYM347=(Token)match(input,FOR_SYM,FOLLOW_FOR_SYM_in_select_expression24286); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					FOR_SYM347_tree = (CommonTree)adaptor.create(FOR_SYM347);
					adaptor.addChild(root_0, FOR_SYM347_tree);
					}

					UPDATE348=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_select_expression24288); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					UPDATE348_tree = (CommonTree)adaptor.create(UPDATE348);
					adaptor.addChild(root_0, UPDATE348_tree);
					}

					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1493:25: ( LOCK IN_SYM SHARE_SYM MODE_SYM )
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1493:25: ( LOCK IN_SYM SHARE_SYM MODE_SYM )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1493:26: LOCK IN_SYM SHARE_SYM MODE_SYM
					{
					LOCK349=(Token)match(input,LOCK,FOLLOW_LOCK_in_select_expression24294); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LOCK349_tree = (CommonTree)adaptor.create(LOCK349);
					adaptor.addChild(root_0, LOCK349_tree);
					}

					IN_SYM350=(Token)match(input,IN_SYM,FOLLOW_IN_SYM_in_select_expression24296); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IN_SYM350_tree = (CommonTree)adaptor.create(IN_SYM350);
					adaptor.addChild(root_0, IN_SYM350_tree);
					}

					SHARE_SYM351=(Token)match(input,SHARE_SYM,FOLLOW_SHARE_SYM_in_select_expression24298); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SHARE_SYM351_tree = (CommonTree)adaptor.create(SHARE_SYM351);
					adaptor.addChild(root_0, SHARE_SYM351_tree);
					}

					MODE_SYM352=(Token)match(input,MODE_SYM,FOLLOW_MODE_SYM_in_select_expression24300); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MODE_SYM352_tree = (CommonTree)adaptor.create(MODE_SYM352);
					adaptor.addChild(root_0, MODE_SYM352_tree);
					}

					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "select_expression"


	public static class select_part_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "select_part"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1496:1: select_part : SELECT ^ ( ALL | DISTINCT | DISTINCTROW )? ( HIGH_PRIORITY )? ( STRAIGHT_JOIN )? ( SQL_SMALL_RESULT )? ( SQL_BIG_RESULT )? ( SQL_BUFFER_RESULT )? ( SQL_CACHE_SYM | SQL_NO_CACHE_SYM )? ( SQL_CALC_FOUND_ROWS )? select_list ;
	public final SQLParser.select_part_return select_part() throws RecognitionException {
		SQLParser.select_part_return retval = new SQLParser.select_part_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token SELECT353=null;
		Token set354=null;
		Token HIGH_PRIORITY355=null;
		Token STRAIGHT_JOIN356=null;
		Token SQL_SMALL_RESULT357=null;
		Token SQL_BIG_RESULT358=null;
		Token SQL_BUFFER_RESULT359=null;
		Token set360=null;
		Token SQL_CALC_FOUND_ROWS361=null;
		ParserRuleReturnScope select_list362 =null;

		CommonTree SELECT353_tree=null;
		CommonTree set354_tree=null;
		CommonTree HIGH_PRIORITY355_tree=null;
		CommonTree STRAIGHT_JOIN356_tree=null;
		CommonTree SQL_SMALL_RESULT357_tree=null;
		CommonTree SQL_BIG_RESULT358_tree=null;
		CommonTree SQL_BUFFER_RESULT359_tree=null;
		CommonTree set360_tree=null;
		CommonTree SQL_CALC_FOUND_ROWS361_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1496:12: ( SELECT ^ ( ALL | DISTINCT | DISTINCTROW )? ( HIGH_PRIORITY )? ( STRAIGHT_JOIN )? ( SQL_SMALL_RESULT )? ( SQL_BIG_RESULT )? ( SQL_BUFFER_RESULT )? ( SQL_CACHE_SYM | SQL_NO_CACHE_SYM )? ( SQL_CALC_FOUND_ROWS )? select_list )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1497:3: SELECT ^ ( ALL | DISTINCT | DISTINCTROW )? ( HIGH_PRIORITY )? ( STRAIGHT_JOIN )? ( SQL_SMALL_RESULT )? ( SQL_BIG_RESULT )? ( SQL_BUFFER_RESULT )? ( SQL_CACHE_SYM | SQL_NO_CACHE_SYM )? ( SQL_CALC_FOUND_ROWS )? select_list
			{
			root_0 = (CommonTree)adaptor.nil();


			SELECT353=(Token)match(input,SELECT,FOLLOW_SELECT_in_select_part24315); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			SELECT353_tree = (CommonTree)adaptor.create(SELECT353);
			root_0 = (CommonTree)adaptor.becomeRoot(SELECT353_tree, root_0);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1499:3: ( ALL | DISTINCT | DISTINCTROW )?
			int alt93=2;
			int LA93_0 = input.LA(1);
			if ( (LA93_0==ALL||(LA93_0 >= DISTINCT && LA93_0 <= DISTINCTROW)) ) {
				alt93=1;
			}
			switch (alt93) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
					{
					set354=input.LT(1);
					if ( input.LA(1)==ALL||(input.LA(1) >= DISTINCT && input.LA(1) <= DISTINCTROW) ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set354));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1500:3: ( HIGH_PRIORITY )?
			int alt94=2;
			int LA94_0 = input.LA(1);
			if ( (LA94_0==HIGH_PRIORITY) ) {
				alt94=1;
			}
			switch (alt94) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1500:4: HIGH_PRIORITY
					{
					HIGH_PRIORITY355=(Token)match(input,HIGH_PRIORITY,FOLLOW_HIGH_PRIORITY_in_select_part24343); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					HIGH_PRIORITY355_tree = (CommonTree)adaptor.create(HIGH_PRIORITY355);
					adaptor.addChild(root_0, HIGH_PRIORITY355_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1501:3: ( STRAIGHT_JOIN )?
			int alt95=2;
			int LA95_0 = input.LA(1);
			if ( (LA95_0==STRAIGHT_JOIN) ) {
				alt95=1;
			}
			switch (alt95) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1501:4: STRAIGHT_JOIN
					{
					STRAIGHT_JOIN356=(Token)match(input,STRAIGHT_JOIN,FOLLOW_STRAIGHT_JOIN_in_select_part24350); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					STRAIGHT_JOIN356_tree = (CommonTree)adaptor.create(STRAIGHT_JOIN356);
					adaptor.addChild(root_0, STRAIGHT_JOIN356_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1502:3: ( SQL_SMALL_RESULT )?
			int alt96=2;
			int LA96_0 = input.LA(1);
			if ( (LA96_0==SQL_SMALL_RESULT) ) {
				alt96=1;
			}
			switch (alt96) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1502:4: SQL_SMALL_RESULT
					{
					SQL_SMALL_RESULT357=(Token)match(input,SQL_SMALL_RESULT,FOLLOW_SQL_SMALL_RESULT_in_select_part24357); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SQL_SMALL_RESULT357_tree = (CommonTree)adaptor.create(SQL_SMALL_RESULT357);
					adaptor.addChild(root_0, SQL_SMALL_RESULT357_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1502:23: ( SQL_BIG_RESULT )?
			int alt97=2;
			int LA97_0 = input.LA(1);
			if ( (LA97_0==SQL_BIG_RESULT) ) {
				alt97=1;
			}
			switch (alt97) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1502:24: SQL_BIG_RESULT
					{
					SQL_BIG_RESULT358=(Token)match(input,SQL_BIG_RESULT,FOLLOW_SQL_BIG_RESULT_in_select_part24362); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SQL_BIG_RESULT358_tree = (CommonTree)adaptor.create(SQL_BIG_RESULT358);
					adaptor.addChild(root_0, SQL_BIG_RESULT358_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1502:41: ( SQL_BUFFER_RESULT )?
			int alt98=2;
			int LA98_0 = input.LA(1);
			if ( (LA98_0==SQL_BUFFER_RESULT) ) {
				alt98=1;
			}
			switch (alt98) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1502:42: SQL_BUFFER_RESULT
					{
					SQL_BUFFER_RESULT359=(Token)match(input,SQL_BUFFER_RESULT,FOLLOW_SQL_BUFFER_RESULT_in_select_part24367); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SQL_BUFFER_RESULT359_tree = (CommonTree)adaptor.create(SQL_BUFFER_RESULT359);
					adaptor.addChild(root_0, SQL_BUFFER_RESULT359_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1503:3: ( SQL_CACHE_SYM | SQL_NO_CACHE_SYM )?
			int alt99=2;
			int LA99_0 = input.LA(1);
			if ( (LA99_0==SQL_CACHE_SYM||LA99_0==SQL_NO_CACHE_SYM) ) {
				alt99=1;
			}
			switch (alt99) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
					{
					set360=input.LT(1);
					if ( input.LA(1)==SQL_CACHE_SYM||input.LA(1)==SQL_NO_CACHE_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set360));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1503:39: ( SQL_CALC_FOUND_ROWS )?
			int alt100=2;
			int LA100_0 = input.LA(1);
			if ( (LA100_0==SQL_CALC_FOUND_ROWS) ) {
				alt100=1;
			}
			switch (alt100) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1503:40: SQL_CALC_FOUND_ROWS
					{
					SQL_CALC_FOUND_ROWS361=(Token)match(input,SQL_CALC_FOUND_ROWS,FOLLOW_SQL_CALC_FOUND_ROWS_in_select_part24383); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SQL_CALC_FOUND_ROWS361_tree = (CommonTree)adaptor.create(SQL_CALC_FOUND_ROWS361);
					adaptor.addChild(root_0, SQL_CALC_FOUND_ROWS361_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_select_list_in_select_part24390);
			select_list362=select_list();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, select_list362.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "select_part"


	public static class from_part_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "from_part"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1508:1: from_part : FROM ^ table_references ;
	public final SQLParser.from_part_return from_part() throws RecognitionException {
		SQLParser.from_part_return retval = new SQLParser.from_part_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token FROM363=null;
		ParserRuleReturnScope table_references364 =null;

		CommonTree FROM363_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1508:10: ( FROM ^ table_references )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1509:3: FROM ^ table_references
			{
			root_0 = (CommonTree)adaptor.nil();


			FROM363=(Token)match(input,FROM,FOLLOW_FROM_in_from_part24400); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			FROM363_tree = (CommonTree)adaptor.create(FROM363);
			root_0 = (CommonTree)adaptor.becomeRoot(FROM363_tree, root_0);
			}

			pushFollow(FOLLOW_table_references_in_from_part24404);
			table_references364=table_references();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_references364.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "from_part"


	public static class where_clause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "where_clause"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1512:1: where_clause : WHERE ^ expression ;
	public final SQLParser.where_clause_return where_clause() throws RecognitionException {
		SQLParser.where_clause_return retval = new SQLParser.where_clause_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token WHERE365=null;
		ParserRuleReturnScope expression366 =null;

		CommonTree WHERE365_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1512:13: ( WHERE ^ expression )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1513:3: WHERE ^ expression
			{
			root_0 = (CommonTree)adaptor.nil();


			WHERE365=(Token)match(input,WHERE,FOLLOW_WHERE_in_where_clause24419); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			WHERE365_tree = (CommonTree)adaptor.create(WHERE365);
			root_0 = (CommonTree)adaptor.becomeRoot(WHERE365_tree, root_0);
			}

			pushFollow(FOLLOW_expression_in_where_clause24423);
			expression366=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression366.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "where_clause"


	public static class groupby_clause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "groupby_clause"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1516:1: groupby_clause : GROUP_SYM BY_SYM ^ groupby_item ( COMMA groupby_item )* ( WITH ROLLUP_SYM )? ;
	public final SQLParser.groupby_clause_return groupby_clause() throws RecognitionException {
		SQLParser.groupby_clause_return retval = new SQLParser.groupby_clause_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token GROUP_SYM367=null;
		Token BY_SYM368=null;
		Token COMMA370=null;
		Token WITH372=null;
		Token ROLLUP_SYM373=null;
		ParserRuleReturnScope groupby_item369 =null;
		ParserRuleReturnScope groupby_item371 =null;

		CommonTree GROUP_SYM367_tree=null;
		CommonTree BY_SYM368_tree=null;
		CommonTree COMMA370_tree=null;
		CommonTree WITH372_tree=null;
		CommonTree ROLLUP_SYM373_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1516:15: ( GROUP_SYM BY_SYM ^ groupby_item ( COMMA groupby_item )* ( WITH ROLLUP_SYM )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1517:3: GROUP_SYM BY_SYM ^ groupby_item ( COMMA groupby_item )* ( WITH ROLLUP_SYM )?
			{
			root_0 = (CommonTree)adaptor.nil();


			GROUP_SYM367=(Token)match(input,GROUP_SYM,FOLLOW_GROUP_SYM_in_groupby_clause24433); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			GROUP_SYM367_tree = (CommonTree)adaptor.create(GROUP_SYM367);
			adaptor.addChild(root_0, GROUP_SYM367_tree);
			}

			BY_SYM368=(Token)match(input,BY_SYM,FOLLOW_BY_SYM_in_groupby_clause24435); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			BY_SYM368_tree = (CommonTree)adaptor.create(BY_SYM368);
			root_0 = (CommonTree)adaptor.becomeRoot(BY_SYM368_tree, root_0);
			}

			pushFollow(FOLLOW_groupby_item_in_groupby_clause24439);
			groupby_item369=groupby_item();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, groupby_item369.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1517:35: ( COMMA groupby_item )*
			loop101:
			while (true) {
				int alt101=2;
				int LA101_0 = input.LA(1);
				if ( (LA101_0==COMMA) ) {
					switch ( input.LA(2) ) {
					case INSERT:
						{
						int LA101_3 = input.LA(3);
						if ( (LA101_3==EOF||LA101_3==ASTERISK||LA101_3==BITAND||LA101_3==COMMA||LA101_3==DIVIDE||LA101_3==FOR_SYM||LA101_3==HAVING||LA101_3==INTEGER_NUM||LA101_3==LIMIT||LA101_3==LOCK||LA101_3==LPAREN||LA101_3==MINUS||LA101_3==MOD_SYM||LA101_3==ON||LA101_3==ORDER_SYM||LA101_3==PLUS||LA101_3==POWER_OP||LA101_3==RPAREN||LA101_3==SEMI||(LA101_3 >= SHIFT_LEFT && LA101_3 <= SHIFT_RIGHT)||LA101_3==UNION_SYM||LA101_3==VERTBAR||LA101_3==WITH) ) {
							alt101=1;
						}

						}
						break;
					case REPLACE:
						{
						int LA101_4 = input.LA(3);
						if ( (LA101_4==EOF||LA101_4==ASTERISK||LA101_4==BITAND||LA101_4==COMMA||LA101_4==DIVIDE||LA101_4==FOR_SYM||LA101_4==HAVING||LA101_4==INTEGER_NUM||LA101_4==LIMIT||LA101_4==LOCK||LA101_4==LPAREN||LA101_4==MINUS||LA101_4==MOD_SYM||LA101_4==ON||LA101_4==ORDER_SYM||LA101_4==PLUS||LA101_4==POWER_OP||LA101_4==RPAREN||LA101_4==SEMI||(LA101_4 >= SHIFT_LEFT && LA101_4 <= SHIFT_RIGHT)||LA101_4==UNION_SYM||LA101_4==VERTBAR||LA101_4==WITH) ) {
							alt101=1;
						}

						}
						break;
					case TRUNCATE:
						{
						int LA101_5 = input.LA(3);
						if ( (LA101_5==EOF||LA101_5==ASTERISK||LA101_5==BITAND||LA101_5==COMMA||LA101_5==DIVIDE||LA101_5==FOR_SYM||LA101_5==HAVING||LA101_5==INTEGER_NUM||LA101_5==LIMIT||LA101_5==LOCK||LA101_5==LPAREN||LA101_5==MINUS||LA101_5==MOD_SYM||LA101_5==ON||LA101_5==ORDER_SYM||LA101_5==PLUS||LA101_5==POWER_OP||LA101_5==RPAREN||LA101_5==SEMI||(LA101_5 >= SHIFT_LEFT && LA101_5 <= SHIFT_RIGHT)||LA101_5==UNION_SYM||LA101_5==VERTBAR||LA101_5==WITH) ) {
							alt101=1;
						}

						}
						break;
					case ABS:
					case ACOS:
					case ADDDATE:
					case ADDTIME:
					case AES_DECRYPT:
					case AES_ENCRYPT:
					case ASCII_SYM:
					case ASIN:
					case ATAN:
					case ATAN2:
					case AVG:
					case BENCHMARK:
					case BIN:
					case BINARY:
					case BIT_AND:
					case BIT_LENGTH:
					case BIT_NUM:
					case BIT_OR:
					case BIT_XOR:
					case CASE_SYM:
					case CAST_SYM:
					case CEIL:
					case CEILING:
					case CHAR:
					case CHARSET:
					case CHAR_LENGTH:
					case COERCIBILITY:
					case COLLATION:
					case CONCAT:
					case CONCAT_WS:
					case CONNECTION_ID:
					case CONV:
					case CONVERT_SYM:
					case CONVERT_TZ:
					case COS:
					case COT:
					case COUNT:
					case CRC32:
					case CURDATE:
					case CURRENT_USER:
					case CURTIME:
					case DATABASE:
					case DATEDIFF:
					case DATE_ADD:
					case DATE_FORMAT:
					case DATE_SUB:
					case DATE_SYM:
					case DAYNAME:
					case DAYOFMONTH:
					case DAYOFWEEK:
					case DAYOFYEAR:
					case DECODE:
					case DEFAULT:
					case DEGREES:
					case DES_DECRYPT:
					case DES_ENCRYPT:
					case ELT:
					case ENCODE:
					case ENCRYPT:
					case EXISTS:
					case EXP:
					case EXPORT_SET:
					case EXTRACT:
					case FALSE_SYM:
					case FIELD:
					case FIND_IN_SET:
					case FLOOR:
					case FORMAT:
					case FOUND_ROWS:
					case FROM_BASE64:
					case FROM_DAYS:
					case FROM_UNIXTIME:
					case GET_FORMAT:
					case GET_LOCK:
					case GROUP_CONCAT:
					case HEX:
					case HEX_DIGIT:
					case HOUR:
					case ID:
					case IF:
					case IFNULL:
					case INET_ATON:
					case INET_NTOA:
					case INSTR:
					case INTEGER_NUM:
					case INTERVAL_SYM:
					case IS_FREE_LOCK:
					case IS_USED_LOCK:
					case LAST_DAY:
					case LAST_INSERT_ID:
					case LEFT:
					case LENGTH:
					case LN:
					case LOAD_FILE:
					case LOCATE:
					case LOG:
					case LOG10:
					case LOG2:
					case LOWER:
					case LPAD:
					case LPAREN:
					case LTRIM:
					case MAKEDATE:
					case MAKETIME:
					case MAKE_SET:
					case MASTER_POS_WAIT:
					case MATCH:
					case MAX_SYM:
					case MD5:
					case MICROSECOND:
					case MID:
					case MINUS:
					case MINUTE:
					case MIN_SYM:
					case MOD:
					case MONTH:
					case MONTHNAME:
					case NAME_CONST:
					case NEGATION:
					case NOW:
					case NULL_SYM:
					case OCT:
					case OLD_PASSWORD:
					case ORD:
					case PASSWORD:
					case PERIOD_ADD:
					case PERIOD_DIFF:
					case PI:
					case PLUS:
					case POW:
					case POWER:
					case QUARTER:
					case QUOTE:
					case RADIANS:
					case RAND:
					case REAL_NUMBER:
					case RELEASE_LOCK:
					case REPEAT:
					case REVERSE:
					case RIGHT:
					case ROUND:
					case ROW_SYM:
					case RPAD:
					case RTRIM:
					case SCHEMA:
					case SECOND:
					case SEC_TO_TIME:
					case SESSION_USER:
					case SIGN:
					case SIN:
					case SLEEP:
					case SOUNDEX:
					case SPACE:
					case SQRT:
					case STD:
					case STDDEV:
					case STDDEV_POP:
					case STDDEV_SAMP:
					case STRCMP:
					case STR_TO_DATE:
					case SUBSTRING:
					case SUBSTRING_INDEX:
					case SUBTIME:
					case SUM:
					case SYSDATE:
					case SYSTEM_USER:
					case TAN:
					case TEXT_STRING:
					case TIMEDIFF:
					case TIMESTAMP:
					case TIMESTAMPADD:
					case TIMESTAMPDIFF:
					case TIME_FORMAT:
					case TIME_SYM:
					case TIME_TO_SEC:
					case TO_BASE64:
					case TO_DAYS:
					case TO_SECONDS:
					case TRIM:
					case TRUE_SYM:
					case UNHEX:
					case UNIX_TIMESTAMP:
					case UPPER:
					case USER:
					case USER_VAR:
					case UTC_DATE:
					case UTC_TIME:
					case UTC_TIMESTAMP:
					case UUID:
					case VALUES:
					case VARIANCE:
					case VAR_POP:
					case VAR_SAMP:
					case VERSION_SYM:
					case WEEK:
					case WEEKDAY:
					case WEEKOFYEAR:
					case WEIGHT_STRING:
					case YEAR:
					case YEARWEEK:
						{
						alt101=1;
						}
						break;
					}
				}

				switch (alt101) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1517:36: COMMA groupby_item
					{
					COMMA370=(Token)match(input,COMMA,FOLLOW_COMMA_in_groupby_clause24442); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA370_tree = (CommonTree)adaptor.create(COMMA370);
					adaptor.addChild(root_0, COMMA370_tree);
					}

					pushFollow(FOLLOW_groupby_item_in_groupby_clause24444);
					groupby_item371=groupby_item();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, groupby_item371.getTree());

					}
					break;

				default :
					break loop101;
				}
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1517:57: ( WITH ROLLUP_SYM )?
			int alt102=2;
			int LA102_0 = input.LA(1);
			if ( (LA102_0==WITH) ) {
				int LA102_1 = input.LA(2);
				if ( (LA102_1==ROLLUP_SYM) ) {
					alt102=1;
				}
			}
			switch (alt102) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1517:58: WITH ROLLUP_SYM
					{
					WITH372=(Token)match(input,WITH,FOLLOW_WITH_in_groupby_clause24449); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					WITH372_tree = (CommonTree)adaptor.create(WITH372);
					adaptor.addChild(root_0, WITH372_tree);
					}

					ROLLUP_SYM373=(Token)match(input,ROLLUP_SYM,FOLLOW_ROLLUP_SYM_in_groupby_clause24451); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ROLLUP_SYM373_tree = (CommonTree)adaptor.create(ROLLUP_SYM373);
					adaptor.addChild(root_0, ROLLUP_SYM373_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "groupby_clause"


	public static class groupby_item_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "groupby_item"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1519:1: groupby_item : ( column_spec | INTEGER_NUM | bit_expr );
	public final SQLParser.groupby_item_return groupby_item() throws RecognitionException {
		SQLParser.groupby_item_return retval = new SQLParser.groupby_item_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token INTEGER_NUM375=null;
		ParserRuleReturnScope column_spec374 =null;
		ParserRuleReturnScope bit_expr376 =null;

		CommonTree INTEGER_NUM375_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1519:13: ( column_spec | INTEGER_NUM | bit_expr )
			int alt103=3;
			switch ( input.LA(1) ) {
			case ID:
				{
				int LA103_1 = input.LA(2);
				if ( (synpred425_SQL()) ) {
					alt103=1;
				}
				else if ( (true) ) {
					alt103=3;
				}

				}
				break;
			case INTEGER_NUM:
				{
				int LA103_2 = input.LA(2);
				if ( (synpred426_SQL()) ) {
					alt103=2;
				}
				else if ( (true) ) {
					alt103=3;
				}

				}
				break;
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case ASCII_SYM:
			case ASIN:
			case ATAN:
			case ATAN2:
			case AVG:
			case BENCHMARK:
			case BIN:
			case BINARY:
			case BIT_AND:
			case BIT_LENGTH:
			case BIT_NUM:
			case BIT_OR:
			case BIT_XOR:
			case CASE_SYM:
			case CAST_SYM:
			case CEIL:
			case CEILING:
			case CHAR:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_SYM:
			case CONVERT_TZ:
			case COS:
			case COT:
			case COUNT:
			case CRC32:
			case CURDATE:
			case CURRENT_USER:
			case CURTIME:
			case DATABASE:
			case DATEDIFF:
			case DATE_ADD:
			case DATE_FORMAT:
			case DATE_SUB:
			case DATE_SYM:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEFAULT:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case EXISTS:
			case EXP:
			case EXPORT_SET:
			case EXTRACT:
			case FALSE_SYM:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GET_FORMAT:
			case GET_LOCK:
			case GROUP_CONCAT:
			case HEX:
			case HEX_DIGIT:
			case HOUR:
			case IF:
			case IFNULL:
			case INET_ATON:
			case INET_NTOA:
			case INSERT:
			case INSTR:
			case INTERVAL_SYM:
			case IS_FREE_LOCK:
			case IS_USED_LOCK:
			case LAST_DAY:
			case LAST_INSERT_ID:
			case LEFT:
			case LENGTH:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LPAREN:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MATCH:
			case MAX_SYM:
			case MD5:
			case MICROSECOND:
			case MID:
			case MINUS:
			case MINUTE:
			case MIN_SYM:
			case MOD:
			case MONTH:
			case MONTHNAME:
			case NAME_CONST:
			case NEGATION:
			case NOW:
			case NULL_SYM:
			case OCT:
			case OLD_PASSWORD:
			case ORD:
			case PASSWORD:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case PLUS:
			case POW:
			case POWER:
			case QUARTER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case REAL_NUMBER:
			case RELEASE_LOCK:
			case REPEAT:
			case REPLACE:
			case REVERSE:
			case RIGHT:
			case ROUND:
			case ROW_SYM:
			case RPAD:
			case RTRIM:
			case SCHEMA:
			case SECOND:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STRCMP:
			case STR_TO_DATE:
			case SUBSTRING:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SUM:
			case SYSDATE:
			case SYSTEM_USER:
			case TAN:
			case TEXT_STRING:
			case TIMEDIFF:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_SYM:
			case TIME_TO_SEC:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case TRIM:
			case TRUE_SYM:
			case TRUNCATE:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPPER:
			case USER:
			case USER_VAR:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case UUID:
			case VALUES:
			case VARIANCE:
			case VAR_POP:
			case VAR_SAMP:
			case VERSION_SYM:
			case WEEK:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case YEAR:
			case YEARWEEK:
				{
				alt103=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 103, 0, input);
				throw nvae;
			}
			switch (alt103) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1519:15: column_spec
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_column_spec_in_groupby_item24460);
					column_spec374=column_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec374.getTree());

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1519:29: INTEGER_NUM
					{
					root_0 = (CommonTree)adaptor.nil();


					INTEGER_NUM375=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_groupby_item24464); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM375_tree = (CommonTree)adaptor.create(INTEGER_NUM375);
					adaptor.addChild(root_0, INTEGER_NUM375_tree);
					}

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1519:43: bit_expr
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_bit_expr_in_groupby_item24468);
					bit_expr376=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr376.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "groupby_item"


	public static class having_clause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "having_clause"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1521:1: having_clause : HAVING expression ;
	public final SQLParser.having_clause_return having_clause() throws RecognitionException {
		SQLParser.having_clause_return retval = new SQLParser.having_clause_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token HAVING377=null;
		ParserRuleReturnScope expression378 =null;

		CommonTree HAVING377_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1521:14: ( HAVING expression )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1522:3: HAVING expression
			{
			root_0 = (CommonTree)adaptor.nil();


			HAVING377=(Token)match(input,HAVING,FOLLOW_HAVING_in_having_clause24478); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			HAVING377_tree = (CommonTree)adaptor.create(HAVING377);
			adaptor.addChild(root_0, HAVING377_tree);
			}

			pushFollow(FOLLOW_expression_in_having_clause24480);
			expression378=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression378.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "having_clause"


	public static class orderby_clause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "orderby_clause"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1525:1: orderby_clause : ORDER_SYM BY_SYM ^ orderby_item ( COMMA orderby_item )* ;
	public final SQLParser.orderby_clause_return orderby_clause() throws RecognitionException {
		SQLParser.orderby_clause_return retval = new SQLParser.orderby_clause_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token ORDER_SYM379=null;
		Token BY_SYM380=null;
		Token COMMA382=null;
		ParserRuleReturnScope orderby_item381 =null;
		ParserRuleReturnScope orderby_item383 =null;

		CommonTree ORDER_SYM379_tree=null;
		CommonTree BY_SYM380_tree=null;
		CommonTree COMMA382_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1525:15: ( ORDER_SYM BY_SYM ^ orderby_item ( COMMA orderby_item )* )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1526:3: ORDER_SYM BY_SYM ^ orderby_item ( COMMA orderby_item )*
			{
			root_0 = (CommonTree)adaptor.nil();


			ORDER_SYM379=(Token)match(input,ORDER_SYM,FOLLOW_ORDER_SYM_in_orderby_clause24490); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			ORDER_SYM379_tree = (CommonTree)adaptor.create(ORDER_SYM379);
			adaptor.addChild(root_0, ORDER_SYM379_tree);
			}

			BY_SYM380=(Token)match(input,BY_SYM,FOLLOW_BY_SYM_in_orderby_clause24492); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			BY_SYM380_tree = (CommonTree)adaptor.create(BY_SYM380);
			root_0 = (CommonTree)adaptor.becomeRoot(BY_SYM380_tree, root_0);
			}

			pushFollow(FOLLOW_orderby_item_in_orderby_clause24496);
			orderby_item381=orderby_item();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, orderby_item381.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1526:35: ( COMMA orderby_item )*
			loop104:
			while (true) {
				int alt104=2;
				int LA104_0 = input.LA(1);
				if ( (LA104_0==COMMA) ) {
					switch ( input.LA(2) ) {
					case INSERT:
						{
						int LA104_3 = input.LA(3);
						if ( (LA104_3==EOF||LA104_3==ASC||LA104_3==ASTERISK||LA104_3==BITAND||LA104_3==COMMA||LA104_3==DESC||LA104_3==DIVIDE||LA104_3==FOR_SYM||LA104_3==INTEGER_NUM||LA104_3==LIMIT||LA104_3==LOCK||LA104_3==LPAREN||LA104_3==MINUS||LA104_3==MOD_SYM||LA104_3==ON||LA104_3==PLUS||LA104_3==POWER_OP||LA104_3==RPAREN||LA104_3==SEMI||(LA104_3 >= SHIFT_LEFT && LA104_3 <= SHIFT_RIGHT)||LA104_3==UNION_SYM||LA104_3==VERTBAR||LA104_3==WITH) ) {
							alt104=1;
						}

						}
						break;
					case REPLACE:
						{
						int LA104_4 = input.LA(3);
						if ( (LA104_4==EOF||LA104_4==ASC||LA104_4==ASTERISK||LA104_4==BITAND||LA104_4==COMMA||LA104_4==DESC||LA104_4==DIVIDE||LA104_4==FOR_SYM||LA104_4==INTEGER_NUM||LA104_4==LIMIT||LA104_4==LOCK||LA104_4==LPAREN||LA104_4==MINUS||LA104_4==MOD_SYM||LA104_4==ON||LA104_4==PLUS||LA104_4==POWER_OP||LA104_4==RPAREN||LA104_4==SEMI||(LA104_4 >= SHIFT_LEFT && LA104_4 <= SHIFT_RIGHT)||LA104_4==UNION_SYM||LA104_4==VERTBAR||LA104_4==WITH) ) {
							alt104=1;
						}

						}
						break;
					case TRUNCATE:
						{
						int LA104_5 = input.LA(3);
						if ( (LA104_5==EOF||LA104_5==ASC||LA104_5==ASTERISK||LA104_5==BITAND||LA104_5==COMMA||LA104_5==DESC||LA104_5==DIVIDE||LA104_5==FOR_SYM||LA104_5==INTEGER_NUM||LA104_5==LIMIT||LA104_5==LOCK||LA104_5==LPAREN||LA104_5==MINUS||LA104_5==MOD_SYM||LA104_5==ON||LA104_5==PLUS||LA104_5==POWER_OP||LA104_5==RPAREN||LA104_5==SEMI||(LA104_5 >= SHIFT_LEFT && LA104_5 <= SHIFT_RIGHT)||LA104_5==UNION_SYM||LA104_5==VERTBAR||LA104_5==WITH) ) {
							alt104=1;
						}

						}
						break;
					case ABS:
					case ACOS:
					case ADDDATE:
					case ADDTIME:
					case AES_DECRYPT:
					case AES_ENCRYPT:
					case ASCII_SYM:
					case ASIN:
					case ATAN:
					case ATAN2:
					case AVG:
					case BENCHMARK:
					case BIN:
					case BINARY:
					case BIT_AND:
					case BIT_LENGTH:
					case BIT_NUM:
					case BIT_OR:
					case BIT_XOR:
					case CASE_SYM:
					case CAST_SYM:
					case CEIL:
					case CEILING:
					case CHAR:
					case CHARSET:
					case CHAR_LENGTH:
					case COERCIBILITY:
					case COLLATION:
					case CONCAT:
					case CONCAT_WS:
					case CONNECTION_ID:
					case CONV:
					case CONVERT_SYM:
					case CONVERT_TZ:
					case COS:
					case COT:
					case COUNT:
					case CRC32:
					case CURDATE:
					case CURRENT_USER:
					case CURTIME:
					case DATABASE:
					case DATEDIFF:
					case DATE_ADD:
					case DATE_FORMAT:
					case DATE_SUB:
					case DATE_SYM:
					case DAYNAME:
					case DAYOFMONTH:
					case DAYOFWEEK:
					case DAYOFYEAR:
					case DECODE:
					case DEFAULT:
					case DEGREES:
					case DES_DECRYPT:
					case DES_ENCRYPT:
					case ELT:
					case ENCODE:
					case ENCRYPT:
					case EXISTS:
					case EXP:
					case EXPORT_SET:
					case EXTRACT:
					case FALSE_SYM:
					case FIELD:
					case FIND_IN_SET:
					case FLOOR:
					case FORMAT:
					case FOUND_ROWS:
					case FROM_BASE64:
					case FROM_DAYS:
					case FROM_UNIXTIME:
					case GET_FORMAT:
					case GET_LOCK:
					case GROUP_CONCAT:
					case HEX:
					case HEX_DIGIT:
					case HOUR:
					case ID:
					case IF:
					case IFNULL:
					case INET_ATON:
					case INET_NTOA:
					case INSTR:
					case INTEGER_NUM:
					case INTERVAL_SYM:
					case IS_FREE_LOCK:
					case IS_USED_LOCK:
					case LAST_DAY:
					case LAST_INSERT_ID:
					case LEFT:
					case LENGTH:
					case LN:
					case LOAD_FILE:
					case LOCATE:
					case LOG:
					case LOG10:
					case LOG2:
					case LOWER:
					case LPAD:
					case LPAREN:
					case LTRIM:
					case MAKEDATE:
					case MAKETIME:
					case MAKE_SET:
					case MASTER_POS_WAIT:
					case MATCH:
					case MAX_SYM:
					case MD5:
					case MICROSECOND:
					case MID:
					case MINUS:
					case MINUTE:
					case MIN_SYM:
					case MOD:
					case MONTH:
					case MONTHNAME:
					case NAME_CONST:
					case NEGATION:
					case NOW:
					case NULL_SYM:
					case OCT:
					case OLD_PASSWORD:
					case ORD:
					case PASSWORD:
					case PERIOD_ADD:
					case PERIOD_DIFF:
					case PI:
					case PLUS:
					case POW:
					case POWER:
					case QUARTER:
					case QUOTE:
					case RADIANS:
					case RAND:
					case REAL_NUMBER:
					case RELEASE_LOCK:
					case REPEAT:
					case REVERSE:
					case RIGHT:
					case ROUND:
					case ROW_SYM:
					case RPAD:
					case RTRIM:
					case SCHEMA:
					case SECOND:
					case SEC_TO_TIME:
					case SESSION_USER:
					case SIGN:
					case SIN:
					case SLEEP:
					case SOUNDEX:
					case SPACE:
					case SQRT:
					case STD:
					case STDDEV:
					case STDDEV_POP:
					case STDDEV_SAMP:
					case STRCMP:
					case STR_TO_DATE:
					case SUBSTRING:
					case SUBSTRING_INDEX:
					case SUBTIME:
					case SUM:
					case SYSDATE:
					case SYSTEM_USER:
					case TAN:
					case TEXT_STRING:
					case TIMEDIFF:
					case TIMESTAMP:
					case TIMESTAMPADD:
					case TIMESTAMPDIFF:
					case TIME_FORMAT:
					case TIME_SYM:
					case TIME_TO_SEC:
					case TO_BASE64:
					case TO_DAYS:
					case TO_SECONDS:
					case TRIM:
					case TRUE_SYM:
					case UNHEX:
					case UNIX_TIMESTAMP:
					case UPPER:
					case USER:
					case USER_VAR:
					case UTC_DATE:
					case UTC_TIME:
					case UTC_TIMESTAMP:
					case UUID:
					case VALUES:
					case VARIANCE:
					case VAR_POP:
					case VAR_SAMP:
					case VERSION_SYM:
					case WEEK:
					case WEEKDAY:
					case WEEKOFYEAR:
					case WEIGHT_STRING:
					case YEAR:
					case YEARWEEK:
						{
						alt104=1;
						}
						break;
					}
				}

				switch (alt104) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1526:36: COMMA orderby_item
					{
					COMMA382=(Token)match(input,COMMA,FOLLOW_COMMA_in_orderby_clause24499); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA382_tree = (CommonTree)adaptor.create(COMMA382);
					adaptor.addChild(root_0, COMMA382_tree);
					}

					pushFollow(FOLLOW_orderby_item_in_orderby_clause24501);
					orderby_item383=orderby_item();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, orderby_item383.getTree());

					}
					break;

				default :
					break loop104;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "orderby_clause"


	public static class orderby_item_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "orderby_item"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1528:1: orderby_item : groupby_item ( ASC | DESC )? ;
	public final SQLParser.orderby_item_return orderby_item() throws RecognitionException {
		SQLParser.orderby_item_return retval = new SQLParser.orderby_item_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token set385=null;
		ParserRuleReturnScope groupby_item384 =null;

		CommonTree set385_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1528:13: ( groupby_item ( ASC | DESC )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1528:15: groupby_item ( ASC | DESC )?
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_groupby_item_in_orderby_item24510);
			groupby_item384=groupby_item();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, groupby_item384.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1528:28: ( ASC | DESC )?
			int alt105=2;
			int LA105_0 = input.LA(1);
			if ( (LA105_0==ASC||LA105_0==DESC) ) {
				alt105=1;
			}
			switch (alt105) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
					{
					set385=input.LT(1);
					if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set385));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "orderby_item"


	public static class limit_clause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "limit_clause"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1530:1: limit_clause : ( LIMIT ( ( offset COMMA )? row_count ) | ( row_count OFFSET_SYM offset ) );
	public final SQLParser.limit_clause_return limit_clause() throws RecognitionException {
		SQLParser.limit_clause_return retval = new SQLParser.limit_clause_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LIMIT386=null;
		Token COMMA388=null;
		Token OFFSET_SYM391=null;
		ParserRuleReturnScope offset387 =null;
		ParserRuleReturnScope row_count389 =null;
		ParserRuleReturnScope row_count390 =null;
		ParserRuleReturnScope offset392 =null;

		CommonTree LIMIT386_tree=null;
		CommonTree COMMA388_tree=null;
		CommonTree OFFSET_SYM391_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1530:13: ( LIMIT ( ( offset COMMA )? row_count ) | ( row_count OFFSET_SYM offset ) )
			int alt107=2;
			int LA107_0 = input.LA(1);
			if ( (LA107_0==LIMIT) ) {
				alt107=1;
			}
			else if ( (LA107_0==INTEGER_NUM) ) {
				alt107=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 107, 0, input);
				throw nvae;
			}

			switch (alt107) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1531:3: LIMIT ( ( offset COMMA )? row_count )
					{
					root_0 = (CommonTree)adaptor.nil();


					LIMIT386=(Token)match(input,LIMIT,FOLLOW_LIMIT_in_limit_clause24529); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LIMIT386_tree = (CommonTree)adaptor.create(LIMIT386);
					adaptor.addChild(root_0, LIMIT386_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1531:9: ( ( offset COMMA )? row_count )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1531:10: ( offset COMMA )? row_count
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1531:10: ( offset COMMA )?
					int alt106=2;
					int LA106_0 = input.LA(1);
					if ( (LA106_0==INTEGER_NUM) ) {
						int LA106_1 = input.LA(2);
						if ( (LA106_1==COMMA) ) {
							int LA106_2 = input.LA(3);
							if ( (LA106_2==INTEGER_NUM) ) {
								alt106=1;
							}
						}
					}
					switch (alt106) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1531:11: offset COMMA
							{
							pushFollow(FOLLOW_offset_in_limit_clause24533);
							offset387=offset();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, offset387.getTree());

							COMMA388=(Token)match(input,COMMA,FOLLOW_COMMA_in_limit_clause24535); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA388_tree = (CommonTree)adaptor.create(COMMA388);
							adaptor.addChild(root_0, COMMA388_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_row_count_in_limit_clause24539);
					row_count389=row_count();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, row_count389.getTree());

					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1531:39: ( row_count OFFSET_SYM offset )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1531:39: ( row_count OFFSET_SYM offset )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1531:40: row_count OFFSET_SYM offset
					{
					pushFollow(FOLLOW_row_count_in_limit_clause24545);
					row_count390=row_count();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, row_count390.getTree());

					OFFSET_SYM391=(Token)match(input,OFFSET_SYM,FOLLOW_OFFSET_SYM_in_limit_clause24547); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					OFFSET_SYM391_tree = (CommonTree)adaptor.create(OFFSET_SYM391);
					adaptor.addChild(root_0, OFFSET_SYM391_tree);
					}

					pushFollow(FOLLOW_offset_in_limit_clause24549);
					offset392=offset();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, offset392.getTree());

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "limit_clause"


	public static class offset_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "offset"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1533:1: offset : INTEGER_NUM ;
	public final SQLParser.offset_return offset() throws RecognitionException {
		SQLParser.offset_return retval = new SQLParser.offset_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token INTEGER_NUM393=null;

		CommonTree INTEGER_NUM393_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1533:7: ( INTEGER_NUM )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1533:11: INTEGER_NUM
			{
			root_0 = (CommonTree)adaptor.nil();


			INTEGER_NUM393=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_offset24559); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			INTEGER_NUM393_tree = (CommonTree)adaptor.create(INTEGER_NUM393);
			adaptor.addChild(root_0, INTEGER_NUM393_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "offset"


	public static class row_count_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "row_count"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1534:1: row_count : INTEGER_NUM ;
	public final SQLParser.row_count_return row_count() throws RecognitionException {
		SQLParser.row_count_return retval = new SQLParser.row_count_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token INTEGER_NUM394=null;

		CommonTree INTEGER_NUM394_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1534:10: ( INTEGER_NUM )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1534:13: INTEGER_NUM
			{
			root_0 = (CommonTree)adaptor.nil();


			INTEGER_NUM394=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_row_count24567); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			INTEGER_NUM394_tree = (CommonTree)adaptor.create(INTEGER_NUM394);
			adaptor.addChild(root_0, INTEGER_NUM394_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "row_count"


	public static class select_list_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "select_list"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1536:1: select_list : ( ( displayed_column ( COMMA ! displayed_column )* ) | ASTERISK ) ;
	public final SQLParser.select_list_return select_list() throws RecognitionException {
		SQLParser.select_list_return retval = new SQLParser.select_list_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA396=null;
		Token ASTERISK398=null;
		ParserRuleReturnScope displayed_column395 =null;
		ParserRuleReturnScope displayed_column397 =null;

		CommonTree COMMA396_tree=null;
		CommonTree ASTERISK398_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1536:12: ( ( ( displayed_column ( COMMA ! displayed_column )* ) | ASTERISK ) )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1537:3: ( ( displayed_column ( COMMA ! displayed_column )* ) | ASTERISK )
			{
			root_0 = (CommonTree)adaptor.nil();


			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1537:3: ( ( displayed_column ( COMMA ! displayed_column )* ) | ASTERISK )
			int alt109=2;
			int LA109_0 = input.LA(1);
			if ( (LA109_0==ABS||LA109_0==ACOS||(LA109_0 >= ADDDATE && LA109_0 <= ADDTIME)||(LA109_0 >= AES_DECRYPT && LA109_0 <= AES_ENCRYPT)||LA109_0==ASCII_SYM||LA109_0==ASIN||(LA109_0 >= ATAN && LA109_0 <= ATAN2)||LA109_0==AVG||LA109_0==BENCHMARK||(LA109_0 >= BIN && LA109_0 <= BINARY)||(LA109_0 >= BIT_AND && LA109_0 <= BIT_OR)||LA109_0==BIT_XOR||(LA109_0 >= CASE_SYM && LA109_0 <= CEILING)||LA109_0==CHAR||(LA109_0 >= CHARSET && LA109_0 <= CHAR_LENGTH)||LA109_0==COERCIBILITY||LA109_0==COLLATION||(LA109_0 >= CONCAT && LA109_0 <= CONCAT_WS)||LA109_0==CONNECTION_ID||(LA109_0 >= CONV && LA109_0 <= CONVERT_TZ)||(LA109_0 >= COS && LA109_0 <= COUNT)||LA109_0==CRC32||LA109_0==CURDATE||LA109_0==CURRENT_USER||LA109_0==CURTIME||LA109_0==DATABASE||LA109_0==DATEDIFF||(LA109_0 >= DATE_ADD && LA109_0 <= DAYOFYEAR)||(LA109_0 >= DECODE && LA109_0 <= DEFAULT)||LA109_0==DEGREES||(LA109_0 >= DES_DECRYPT && LA109_0 <= DES_ENCRYPT)||LA109_0==ELT||(LA109_0 >= ENCODE && LA109_0 <= ENCRYPT)||LA109_0==EXISTS||LA109_0==EXP||LA109_0==EXPORT_SET||LA109_0==EXTRACT||LA109_0==FALSE_SYM||LA109_0==FIELD||LA109_0==FIND_IN_SET||LA109_0==FLOOR||LA109_0==FORMAT||LA109_0==FOUND_ROWS||(LA109_0 >= FROM_BASE64 && LA109_0 <= FROM_UNIXTIME)||(LA109_0 >= GET_FORMAT && LA109_0 <= GET_LOCK)||LA109_0==GROUP_CONCAT||(LA109_0 >= HEX && LA109_0 <= HEX_DIGIT)||LA109_0==HOUR||LA109_0==ID||(LA109_0 >= IF && LA109_0 <= IFNULL)||(LA109_0 >= INET_ATON && LA109_0 <= INET_NTOA)||LA109_0==INSERT||(LA109_0 >= INSTR && LA109_0 <= INTEGER_NUM)||LA109_0==INTERVAL_SYM||LA109_0==IS_FREE_LOCK||LA109_0==IS_USED_LOCK||(LA109_0 >= LAST_DAY && LA109_0 <= LAST_INSERT_ID)||(LA109_0 >= LEFT && LA109_0 <= LENGTH)||LA109_0==LN||LA109_0==LOAD_FILE||LA109_0==LOCATE||(LA109_0 >= LOG && LA109_0 <= LOG2)||LA109_0==LOWER||(LA109_0 >= LPAD && LA109_0 <= LPAREN)||LA109_0==LTRIM||(LA109_0 >= MAKEDATE && LA109_0 <= MAKE_SET)||LA109_0==MASTER_POS_WAIT||LA109_0==MATCH||LA109_0==MAX_SYM||LA109_0==MD5||(LA109_0 >= MICROSECOND && LA109_0 <= MID)||(LA109_0 >= MINUS && LA109_0 <= MINUTE)||LA109_0==MIN_SYM||LA109_0==MOD||(LA109_0 >= MONTH && LA109_0 <= MONTHNAME)||LA109_0==NAME_CONST||LA109_0==NEGATION||LA109_0==NOW||LA109_0==NULL_SYM||LA109_0==OCT||LA109_0==OLD_PASSWORD||LA109_0==ORD||(LA109_0 >= PASSWORD && LA109_0 <= PERIOD_DIFF)||LA109_0==PI||LA109_0==PLUS||(LA109_0 >= POW && LA109_0 <= POWER)||LA109_0==QUARTER||LA109_0==QUOTE||(LA109_0 >= RADIANS && LA109_0 <= RAND)||LA109_0==REAL_NUMBER||LA109_0==RELEASE_LOCK||LA109_0==REPEAT||LA109_0==REPLACE||LA109_0==REVERSE||LA109_0==RIGHT||LA109_0==ROUND||(LA109_0 >= ROW_SYM && LA109_0 <= RPAD)||LA109_0==RTRIM||(LA109_0 >= SCHEMA && LA109_0 <= SECOND)||LA109_0==SEC_TO_TIME||LA109_0==SESSION_USER||LA109_0==SIGN||LA109_0==SIN||LA109_0==SLEEP||LA109_0==SOUNDEX||LA109_0==SPACE||LA109_0==SQRT||(LA109_0 >= STD && LA109_0 <= STDDEV_SAMP)||LA109_0==STRCMP||LA109_0==STR_TO_DATE||(LA109_0 >= SUBSTRING && LA109_0 <= SUM)||(LA109_0 >= SYSDATE && LA109_0 <= SYSTEM_USER)||LA109_0==TAN||LA109_0==TEXT_STRING||(LA109_0 >= TIMEDIFF && LA109_0 <= TIME_TO_SEC)||(LA109_0 >= TO_BASE64 && LA109_0 <= TO_SECONDS)||(LA109_0 >= TRIM && LA109_0 <= TRUNCATE)||LA109_0==UNHEX||LA109_0==UNIX_TIMESTAMP||LA109_0==UPPER||(LA109_0 >= USER && LA109_0 <= USER_VAR)||(LA109_0 >= UTC_DATE && LA109_0 <= UTC_TIMESTAMP)||LA109_0==UUID||LA109_0==VALUES||LA109_0==VARIANCE||(LA109_0 >= VAR_POP && LA109_0 <= VERSION_SYM)||(LA109_0 >= WEEK && LA109_0 <= WEIGHT_STRING)||(LA109_0 >= YEAR && LA109_0 <= YEARWEEK)) ) {
				alt109=1;
			}
			else if ( (LA109_0==ASTERISK) ) {
				alt109=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 109, 0, input);
				throw nvae;
			}

			switch (alt109) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1537:5: ( displayed_column ( COMMA ! displayed_column )* )
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1537:5: ( displayed_column ( COMMA ! displayed_column )* )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1537:7: displayed_column ( COMMA ! displayed_column )*
					{
					pushFollow(FOLLOW_displayed_column_in_select_list24581);
					displayed_column395=displayed_column();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, displayed_column395.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1537:24: ( COMMA ! displayed_column )*
					loop108:
					while (true) {
						int alt108=2;
						int LA108_0 = input.LA(1);
						if ( (LA108_0==COMMA) ) {
							switch ( input.LA(2) ) {
							case INSERT:
								{
								int LA108_3 = input.LA(3);
								if ( (LA108_3==ID) ) {
									int LA108_7 = input.LA(4);
									if ( (LA108_7==EOF||LA108_7==COMMA||LA108_7==FOR_SYM||LA108_7==FROM||LA108_7==INTEGER_NUM||LA108_7==LIMIT||LA108_7==LOCK||LA108_7==ON||LA108_7==ORDER_SYM||LA108_7==RPAREN||LA108_7==SEMI||LA108_7==UNION_SYM||LA108_7==WITH) ) {
										alt108=1;
									}

								}
								else if ( (LA108_3==EOF||(LA108_3 >= ASTERISK && LA108_3 <= AS_SYM)||LA108_3==BITAND||LA108_3==COMMA||LA108_3==DIVIDE||LA108_3==FOR_SYM||LA108_3==FROM||LA108_3==INTEGER_NUM||LA108_3==LIMIT||LA108_3==LOCK||LA108_3==LPAREN||LA108_3==MINUS||LA108_3==MOD_SYM||LA108_3==ON||LA108_3==ORDER_SYM||LA108_3==PLUS||LA108_3==POWER_OP||LA108_3==RPAREN||LA108_3==SEMI||(LA108_3 >= SHIFT_LEFT && LA108_3 <= SHIFT_RIGHT)||LA108_3==UNION_SYM||LA108_3==VERTBAR||LA108_3==WITH) ) {
									alt108=1;
								}

								}
								break;
							case REPLACE:
								{
								int LA108_4 = input.LA(3);
								if ( (LA108_4==ID) ) {
									int LA108_8 = input.LA(4);
									if ( (LA108_8==EOF||LA108_8==COMMA||LA108_8==FOR_SYM||LA108_8==FROM||LA108_8==INTEGER_NUM||LA108_8==LIMIT||LA108_8==LOCK||LA108_8==ON||LA108_8==ORDER_SYM||LA108_8==RPAREN||LA108_8==SEMI||LA108_8==UNION_SYM||LA108_8==WITH) ) {
										alt108=1;
									}

								}
								else if ( (LA108_4==EOF||(LA108_4 >= ASTERISK && LA108_4 <= AS_SYM)||LA108_4==BITAND||LA108_4==COMMA||LA108_4==DIVIDE||LA108_4==FOR_SYM||LA108_4==FROM||LA108_4==INTEGER_NUM||LA108_4==LIMIT||LA108_4==LOCK||LA108_4==LPAREN||LA108_4==MINUS||LA108_4==MOD_SYM||LA108_4==ON||LA108_4==ORDER_SYM||LA108_4==PLUS||LA108_4==POWER_OP||LA108_4==RPAREN||LA108_4==SEMI||(LA108_4 >= SHIFT_LEFT && LA108_4 <= SHIFT_RIGHT)||LA108_4==UNION_SYM||LA108_4==VERTBAR||LA108_4==WITH) ) {
									alt108=1;
								}

								}
								break;
							case TRUNCATE:
								{
								int LA108_5 = input.LA(3);
								if ( (LA108_5==ID) ) {
									int LA108_9 = input.LA(4);
									if ( (synpred432_SQL()) ) {
										alt108=1;
									}

								}
								else if ( (LA108_5==EOF||(LA108_5 >= ASTERISK && LA108_5 <= AS_SYM)||LA108_5==BITAND||LA108_5==COMMA||LA108_5==DIVIDE||LA108_5==FOR_SYM||LA108_5==FROM||LA108_5==INTEGER_NUM||LA108_5==LIMIT||LA108_5==LOCK||LA108_5==LPAREN||LA108_5==MINUS||LA108_5==MOD_SYM||LA108_5==ON||LA108_5==ORDER_SYM||LA108_5==PLUS||LA108_5==POWER_OP||LA108_5==RPAREN||LA108_5==SEMI||(LA108_5 >= SHIFT_LEFT && LA108_5 <= SHIFT_RIGHT)||LA108_5==UNION_SYM||LA108_5==VERTBAR||LA108_5==WITH) ) {
									alt108=1;
								}

								}
								break;
							case ABS:
							case ACOS:
							case ADDDATE:
							case ADDTIME:
							case AES_DECRYPT:
							case AES_ENCRYPT:
							case ASCII_SYM:
							case ASIN:
							case ATAN:
							case ATAN2:
							case AVG:
							case BENCHMARK:
							case BIN:
							case BINARY:
							case BIT_AND:
							case BIT_LENGTH:
							case BIT_NUM:
							case BIT_OR:
							case BIT_XOR:
							case CASE_SYM:
							case CAST_SYM:
							case CEIL:
							case CEILING:
							case CHAR:
							case CHARSET:
							case CHAR_LENGTH:
							case COERCIBILITY:
							case COLLATION:
							case CONCAT:
							case CONCAT_WS:
							case CONNECTION_ID:
							case CONV:
							case CONVERT_SYM:
							case CONVERT_TZ:
							case COS:
							case COT:
							case COUNT:
							case CRC32:
							case CURDATE:
							case CURRENT_USER:
							case CURTIME:
							case DATABASE:
							case DATEDIFF:
							case DATE_ADD:
							case DATE_FORMAT:
							case DATE_SUB:
							case DATE_SYM:
							case DAYNAME:
							case DAYOFMONTH:
							case DAYOFWEEK:
							case DAYOFYEAR:
							case DECODE:
							case DEFAULT:
							case DEGREES:
							case DES_DECRYPT:
							case DES_ENCRYPT:
							case ELT:
							case ENCODE:
							case ENCRYPT:
							case EXISTS:
							case EXP:
							case EXPORT_SET:
							case EXTRACT:
							case FALSE_SYM:
							case FIELD:
							case FIND_IN_SET:
							case FLOOR:
							case FORMAT:
							case FOUND_ROWS:
							case FROM_BASE64:
							case FROM_DAYS:
							case FROM_UNIXTIME:
							case GET_FORMAT:
							case GET_LOCK:
							case GROUP_CONCAT:
							case HEX:
							case HEX_DIGIT:
							case HOUR:
							case ID:
							case IF:
							case IFNULL:
							case INET_ATON:
							case INET_NTOA:
							case INSTR:
							case INTEGER_NUM:
							case INTERVAL_SYM:
							case IS_FREE_LOCK:
							case IS_USED_LOCK:
							case LAST_DAY:
							case LAST_INSERT_ID:
							case LEFT:
							case LENGTH:
							case LN:
							case LOAD_FILE:
							case LOCATE:
							case LOG:
							case LOG10:
							case LOG2:
							case LOWER:
							case LPAD:
							case LPAREN:
							case LTRIM:
							case MAKEDATE:
							case MAKETIME:
							case MAKE_SET:
							case MASTER_POS_WAIT:
							case MATCH:
							case MAX_SYM:
							case MD5:
							case MICROSECOND:
							case MID:
							case MINUS:
							case MINUTE:
							case MIN_SYM:
							case MOD:
							case MONTH:
							case MONTHNAME:
							case NAME_CONST:
							case NEGATION:
							case NOW:
							case NULL_SYM:
							case OCT:
							case OLD_PASSWORD:
							case ORD:
							case PASSWORD:
							case PERIOD_ADD:
							case PERIOD_DIFF:
							case PI:
							case PLUS:
							case POW:
							case POWER:
							case QUARTER:
							case QUOTE:
							case RADIANS:
							case RAND:
							case REAL_NUMBER:
							case RELEASE_LOCK:
							case REPEAT:
							case REVERSE:
							case RIGHT:
							case ROUND:
							case ROW_SYM:
							case RPAD:
							case RTRIM:
							case SCHEMA:
							case SECOND:
							case SEC_TO_TIME:
							case SESSION_USER:
							case SIGN:
							case SIN:
							case SLEEP:
							case SOUNDEX:
							case SPACE:
							case SQRT:
							case STD:
							case STDDEV:
							case STDDEV_POP:
							case STDDEV_SAMP:
							case STRCMP:
							case STR_TO_DATE:
							case SUBSTRING:
							case SUBSTRING_INDEX:
							case SUBTIME:
							case SUM:
							case SYSDATE:
							case SYSTEM_USER:
							case TAN:
							case TEXT_STRING:
							case TIMEDIFF:
							case TIMESTAMP:
							case TIMESTAMPADD:
							case TIMESTAMPDIFF:
							case TIME_FORMAT:
							case TIME_SYM:
							case TIME_TO_SEC:
							case TO_BASE64:
							case TO_DAYS:
							case TO_SECONDS:
							case TRIM:
							case TRUE_SYM:
							case UNHEX:
							case UNIX_TIMESTAMP:
							case UPPER:
							case USER:
							case USER_VAR:
							case UTC_DATE:
							case UTC_TIME:
							case UTC_TIMESTAMP:
							case UUID:
							case VALUES:
							case VARIANCE:
							case VAR_POP:
							case VAR_SAMP:
							case VERSION_SYM:
							case WEEK:
							case WEEKDAY:
							case WEEKOFYEAR:
							case WEIGHT_STRING:
							case YEAR:
							case YEARWEEK:
								{
								alt108=1;
								}
								break;
							}
						}

						switch (alt108) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1537:26: COMMA ! displayed_column
							{
							COMMA396=(Token)match(input,COMMA,FOLLOW_COMMA_in_select_list24585); if (state.failed) return retval;
							pushFollow(FOLLOW_displayed_column_in_select_list24589);
							displayed_column397=displayed_column();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, displayed_column397.getTree());

							}
							break;

						default :
							break loop108;
						}
					}

					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1538:5: ASTERISK
					{
					ASTERISK398=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_select_list24599); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ASTERISK398_tree = (CommonTree)adaptor.create(ASTERISK398);
					adaptor.addChild(root_0, ASTERISK398_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "select_list"


	public static class column_list_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "column_list"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1541:1: column_list : LPAREN column_spec ( COMMA column_spec )* RPAREN ;
	public final SQLParser.column_list_return column_list() throws RecognitionException {
		SQLParser.column_list_return retval = new SQLParser.column_list_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LPAREN399=null;
		Token COMMA401=null;
		Token RPAREN403=null;
		ParserRuleReturnScope column_spec400 =null;
		ParserRuleReturnScope column_spec402 =null;

		CommonTree LPAREN399_tree=null;
		CommonTree COMMA401_tree=null;
		CommonTree RPAREN403_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1541:12: ( LPAREN column_spec ( COMMA column_spec )* RPAREN )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1542:3: LPAREN column_spec ( COMMA column_spec )* RPAREN
			{
			root_0 = (CommonTree)adaptor.nil();


			LPAREN399=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_list24612); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN399_tree = (CommonTree)adaptor.create(LPAREN399);
			adaptor.addChild(root_0, LPAREN399_tree);
			}

			pushFollow(FOLLOW_column_spec_in_column_list24614);
			column_spec400=column_spec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec400.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1542:22: ( COMMA column_spec )*
			loop110:
			while (true) {
				int alt110=2;
				int LA110_0 = input.LA(1);
				if ( (LA110_0==COMMA) ) {
					alt110=1;
				}

				switch (alt110) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1542:23: COMMA column_spec
					{
					COMMA401=(Token)match(input,COMMA,FOLLOW_COMMA_in_column_list24617); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA401_tree = (CommonTree)adaptor.create(COMMA401);
					adaptor.addChild(root_0, COMMA401_tree);
					}

					pushFollow(FOLLOW_column_spec_in_column_list24619);
					column_spec402=column_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec402.getTree());

					}
					break;

				default :
					break loop110;
				}
			}

			RPAREN403=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_list24623); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN403_tree = (CommonTree)adaptor.create(RPAREN403);
			adaptor.addChild(root_0, RPAREN403_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "column_list"


	public static class subquery_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "subquery"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1545:1: subquery : LPAREN select_statement RPAREN ;
	public final SQLParser.subquery_return subquery() throws RecognitionException {
		SQLParser.subquery_return retval = new SQLParser.subquery_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LPAREN404=null;
		Token RPAREN406=null;
		ParserRuleReturnScope select_statement405 =null;

		CommonTree LPAREN404_tree=null;
		CommonTree RPAREN406_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1545:9: ( LPAREN select_statement RPAREN )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1546:3: LPAREN select_statement RPAREN
			{
			root_0 = (CommonTree)adaptor.nil();


			LPAREN404=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_subquery24633); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN404_tree = (CommonTree)adaptor.create(LPAREN404);
			adaptor.addChild(root_0, LPAREN404_tree);
			}

			pushFollow(FOLLOW_select_statement_in_subquery24635);
			select_statement405=select_statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement405.getTree());

			RPAREN406=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subquery24637); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN406_tree = (CommonTree)adaptor.create(RPAREN406);
			adaptor.addChild(root_0, RPAREN406_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subquery"


	public static class table_spec_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "table_spec"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1549:1: table_spec : ( schema_name DOT )? table_name ;
	public final SQLParser.table_spec_return table_spec() throws RecognitionException {
		SQLParser.table_spec_return retval = new SQLParser.table_spec_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token DOT408=null;
		ParserRuleReturnScope schema_name407 =null;
		ParserRuleReturnScope table_name409 =null;

		CommonTree DOT408_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1549:11: ( ( schema_name DOT )? table_name )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1550:3: ( schema_name DOT )? table_name
			{
			root_0 = (CommonTree)adaptor.nil();


			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1550:3: ( schema_name DOT )?
			int alt111=2;
			int LA111_0 = input.LA(1);
			if ( (LA111_0==ID) ) {
				int LA111_1 = input.LA(2);
				if ( (LA111_1==DOT) ) {
					int LA111_2 = input.LA(3);
					if ( (LA111_2==ID) ) {
						alt111=1;
					}
				}
			}
			switch (alt111) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1550:5: schema_name DOT
					{
					pushFollow(FOLLOW_schema_name_in_table_spec24649);
					schema_name407=schema_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, schema_name407.getTree());

					DOT408=(Token)match(input,DOT,FOLLOW_DOT_in_table_spec24651); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DOT408_tree = (CommonTree)adaptor.create(DOT408);
					adaptor.addChild(root_0, DOT408_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_table_name_in_table_spec24656);
			table_name409=table_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name409.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_spec"


	public static class displayed_column_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "displayed_column"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1553:1: displayed_column : ( ( table_spec DOT ASTERISK ) | ( column_spec ( alias )? ) | ( bit_expr ( alias )? ) );
	public final SQLParser.displayed_column_return displayed_column() throws RecognitionException {
		SQLParser.displayed_column_return retval = new SQLParser.displayed_column_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token DOT411=null;
		Token ASTERISK412=null;
		ParserRuleReturnScope table_spec410 =null;
		ParserRuleReturnScope column_spec413 =null;
		ParserRuleReturnScope alias414 =null;
		ParserRuleReturnScope bit_expr415 =null;
		ParserRuleReturnScope alias416 =null;

		CommonTree DOT411_tree=null;
		CommonTree ASTERISK412_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1553:18: ( ( table_spec DOT ASTERISK ) | ( column_spec ( alias )? ) | ( bit_expr ( alias )? ) )
			int alt114=3;
			int LA114_0 = input.LA(1);
			if ( (LA114_0==ID) ) {
				int LA114_1 = input.LA(2);
				if ( (LA114_1==DOT) ) {
					alt114=1;
				}
				else if ( (synpred438_SQL()) ) {
					alt114=2;
				}
				else if ( (true) ) {
					alt114=3;
				}

			}
			else if ( (LA114_0==ABS||LA114_0==ACOS||(LA114_0 >= ADDDATE && LA114_0 <= ADDTIME)||(LA114_0 >= AES_DECRYPT && LA114_0 <= AES_ENCRYPT)||LA114_0==ASCII_SYM||LA114_0==ASIN||(LA114_0 >= ATAN && LA114_0 <= ATAN2)||LA114_0==AVG||LA114_0==BENCHMARK||(LA114_0 >= BIN && LA114_0 <= BINARY)||(LA114_0 >= BIT_AND && LA114_0 <= BIT_OR)||LA114_0==BIT_XOR||(LA114_0 >= CASE_SYM && LA114_0 <= CEILING)||LA114_0==CHAR||(LA114_0 >= CHARSET && LA114_0 <= CHAR_LENGTH)||LA114_0==COERCIBILITY||LA114_0==COLLATION||(LA114_0 >= CONCAT && LA114_0 <= CONCAT_WS)||LA114_0==CONNECTION_ID||(LA114_0 >= CONV && LA114_0 <= CONVERT_TZ)||(LA114_0 >= COS && LA114_0 <= COUNT)||LA114_0==CRC32||LA114_0==CURDATE||LA114_0==CURRENT_USER||LA114_0==CURTIME||LA114_0==DATABASE||LA114_0==DATEDIFF||(LA114_0 >= DATE_ADD && LA114_0 <= DAYOFYEAR)||(LA114_0 >= DECODE && LA114_0 <= DEFAULT)||LA114_0==DEGREES||(LA114_0 >= DES_DECRYPT && LA114_0 <= DES_ENCRYPT)||LA114_0==ELT||(LA114_0 >= ENCODE && LA114_0 <= ENCRYPT)||LA114_0==EXISTS||LA114_0==EXP||LA114_0==EXPORT_SET||LA114_0==EXTRACT||LA114_0==FALSE_SYM||LA114_0==FIELD||LA114_0==FIND_IN_SET||LA114_0==FLOOR||LA114_0==FORMAT||LA114_0==FOUND_ROWS||(LA114_0 >= FROM_BASE64 && LA114_0 <= FROM_UNIXTIME)||(LA114_0 >= GET_FORMAT && LA114_0 <= GET_LOCK)||LA114_0==GROUP_CONCAT||(LA114_0 >= HEX && LA114_0 <= HEX_DIGIT)||LA114_0==HOUR||(LA114_0 >= IF && LA114_0 <= IFNULL)||(LA114_0 >= INET_ATON && LA114_0 <= INET_NTOA)||LA114_0==INSERT||(LA114_0 >= INSTR && LA114_0 <= INTEGER_NUM)||LA114_0==INTERVAL_SYM||LA114_0==IS_FREE_LOCK||LA114_0==IS_USED_LOCK||(LA114_0 >= LAST_DAY && LA114_0 <= LAST_INSERT_ID)||(LA114_0 >= LEFT && LA114_0 <= LENGTH)||LA114_0==LN||LA114_0==LOAD_FILE||LA114_0==LOCATE||(LA114_0 >= LOG && LA114_0 <= LOG2)||LA114_0==LOWER||(LA114_0 >= LPAD && LA114_0 <= LPAREN)||LA114_0==LTRIM||(LA114_0 >= MAKEDATE && LA114_0 <= MAKE_SET)||LA114_0==MASTER_POS_WAIT||LA114_0==MATCH||LA114_0==MAX_SYM||LA114_0==MD5||(LA114_0 >= MICROSECOND && LA114_0 <= MID)||(LA114_0 >= MINUS && LA114_0 <= MINUTE)||LA114_0==MIN_SYM||LA114_0==MOD||(LA114_0 >= MONTH && LA114_0 <= MONTHNAME)||LA114_0==NAME_CONST||LA114_0==NEGATION||LA114_0==NOW||LA114_0==NULL_SYM||LA114_0==OCT||LA114_0==OLD_PASSWORD||LA114_0==ORD||(LA114_0 >= PASSWORD && LA114_0 <= PERIOD_DIFF)||LA114_0==PI||LA114_0==PLUS||(LA114_0 >= POW && LA114_0 <= POWER)||LA114_0==QUARTER||LA114_0==QUOTE||(LA114_0 >= RADIANS && LA114_0 <= RAND)||LA114_0==REAL_NUMBER||LA114_0==RELEASE_LOCK||LA114_0==REPEAT||LA114_0==REPLACE||LA114_0==REVERSE||LA114_0==RIGHT||LA114_0==ROUND||(LA114_0 >= ROW_SYM && LA114_0 <= RPAD)||LA114_0==RTRIM||(LA114_0 >= SCHEMA && LA114_0 <= SECOND)||LA114_0==SEC_TO_TIME||LA114_0==SESSION_USER||LA114_0==SIGN||LA114_0==SIN||LA114_0==SLEEP||LA114_0==SOUNDEX||LA114_0==SPACE||LA114_0==SQRT||(LA114_0 >= STD && LA114_0 <= STDDEV_SAMP)||LA114_0==STRCMP||LA114_0==STR_TO_DATE||(LA114_0 >= SUBSTRING && LA114_0 <= SUM)||(LA114_0 >= SYSDATE && LA114_0 <= SYSTEM_USER)||LA114_0==TAN||LA114_0==TEXT_STRING||(LA114_0 >= TIMEDIFF && LA114_0 <= TIME_TO_SEC)||(LA114_0 >= TO_BASE64 && LA114_0 <= TO_SECONDS)||(LA114_0 >= TRIM && LA114_0 <= TRUNCATE)||LA114_0==UNHEX||LA114_0==UNIX_TIMESTAMP||LA114_0==UPPER||(LA114_0 >= USER && LA114_0 <= USER_VAR)||(LA114_0 >= UTC_DATE && LA114_0 <= UTC_TIMESTAMP)||LA114_0==UUID||LA114_0==VALUES||LA114_0==VARIANCE||(LA114_0 >= VAR_POP && LA114_0 <= VERSION_SYM)||(LA114_0 >= WEEK && LA114_0 <= WEIGHT_STRING)||(LA114_0 >= YEAR && LA114_0 <= YEARWEEK)) ) {
				alt114=3;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 114, 0, input);
				throw nvae;
			}

			switch (alt114) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1554:3: ( table_spec DOT ASTERISK )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1554:3: ( table_spec DOT ASTERISK )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1554:5: table_spec DOT ASTERISK
					{
					pushFollow(FOLLOW_table_spec_in_displayed_column24669);
					table_spec410=table_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_spec410.getTree());

					DOT411=(Token)match(input,DOT,FOLLOW_DOT_in_displayed_column24671); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DOT411_tree = (CommonTree)adaptor.create(DOT411);
					adaptor.addChild(root_0, DOT411_tree);
					}

					ASTERISK412=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_displayed_column24673); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ASTERISK412_tree = (CommonTree)adaptor.create(ASTERISK412);
					adaptor.addChild(root_0, ASTERISK412_tree);
					}

					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1556:3: ( column_spec ( alias )? )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1556:3: ( column_spec ( alias )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1556:5: column_spec ( alias )?
					{
					pushFollow(FOLLOW_column_spec_in_displayed_column24685);
					column_spec413=column_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec413.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1556:17: ( alias )?
					int alt112=2;
					int LA112_0 = input.LA(1);
					if ( (LA112_0==AS_SYM||LA112_0==ID) ) {
						alt112=1;
					}
					switch (alt112) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1556:18: alias
							{
							pushFollow(FOLLOW_alias_in_displayed_column24688);
							alias414=alias();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, alias414.getTree());

							}
							break;

					}

					}

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1558:3: ( bit_expr ( alias )? )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1558:3: ( bit_expr ( alias )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1558:5: bit_expr ( alias )?
					{
					pushFollow(FOLLOW_bit_expr_in_displayed_column24703);
					bit_expr415=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr415.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1558:14: ( alias )?
					int alt113=2;
					int LA113_0 = input.LA(1);
					if ( (LA113_0==AS_SYM||LA113_0==ID) ) {
						alt113=1;
					}
					switch (alt113) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1558:15: alias
							{
							pushFollow(FOLLOW_alias_in_displayed_column24706);
							alias416=alias();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, alias416.getTree());

							}
							break;

					}

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "displayed_column"


	public static class delete_statements_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "delete_statements"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1568:1: delete_statements : DELETE_SYM ( LOW_PRIORITY )? ( QUICK )? ( IGNORE_SYM )? ( delete_single_table_statement | delete_multiple_table_statement1 | delete_multiple_table_statement2 ) ;
	public final SQLParser.delete_statements_return delete_statements() throws RecognitionException {
		SQLParser.delete_statements_return retval = new SQLParser.delete_statements_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token DELETE_SYM417=null;
		Token LOW_PRIORITY418=null;
		Token QUICK419=null;
		Token IGNORE_SYM420=null;
		ParserRuleReturnScope delete_single_table_statement421 =null;
		ParserRuleReturnScope delete_multiple_table_statement1422 =null;
		ParserRuleReturnScope delete_multiple_table_statement2423 =null;

		CommonTree DELETE_SYM417_tree=null;
		CommonTree LOW_PRIORITY418_tree=null;
		CommonTree QUICK419_tree=null;
		CommonTree IGNORE_SYM420_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1568:18: ( DELETE_SYM ( LOW_PRIORITY )? ( QUICK )? ( IGNORE_SYM )? ( delete_single_table_statement | delete_multiple_table_statement1 | delete_multiple_table_statement2 ) )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1569:3: DELETE_SYM ( LOW_PRIORITY )? ( QUICK )? ( IGNORE_SYM )? ( delete_single_table_statement | delete_multiple_table_statement1 | delete_multiple_table_statement2 )
			{
			root_0 = (CommonTree)adaptor.nil();


			DELETE_SYM417=(Token)match(input,DELETE_SYM,FOLLOW_DELETE_SYM_in_delete_statements24727); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DELETE_SYM417_tree = (CommonTree)adaptor.create(DELETE_SYM417);
			adaptor.addChild(root_0, DELETE_SYM417_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1569:14: ( LOW_PRIORITY )?
			int alt115=2;
			int LA115_0 = input.LA(1);
			if ( (LA115_0==LOW_PRIORITY) ) {
				alt115=1;
			}
			switch (alt115) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1569:15: LOW_PRIORITY
					{
					LOW_PRIORITY418=(Token)match(input,LOW_PRIORITY,FOLLOW_LOW_PRIORITY_in_delete_statements24730); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LOW_PRIORITY418_tree = (CommonTree)adaptor.create(LOW_PRIORITY418);
					adaptor.addChild(root_0, LOW_PRIORITY418_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1569:30: ( QUICK )?
			int alt116=2;
			int LA116_0 = input.LA(1);
			if ( (LA116_0==QUICK) ) {
				alt116=1;
			}
			switch (alt116) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1569:31: QUICK
					{
					QUICK419=(Token)match(input,QUICK,FOLLOW_QUICK_in_delete_statements24735); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					QUICK419_tree = (CommonTree)adaptor.create(QUICK419);
					adaptor.addChild(root_0, QUICK419_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1569:39: ( IGNORE_SYM )?
			int alt117=2;
			int LA117_0 = input.LA(1);
			if ( (LA117_0==IGNORE_SYM) ) {
				alt117=1;
			}
			switch (alt117) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1569:40: IGNORE_SYM
					{
					IGNORE_SYM420=(Token)match(input,IGNORE_SYM,FOLLOW_IGNORE_SYM_in_delete_statements24740); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IGNORE_SYM420_tree = (CommonTree)adaptor.create(IGNORE_SYM420);
					adaptor.addChild(root_0, IGNORE_SYM420_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1570:3: ( delete_single_table_statement | delete_multiple_table_statement1 | delete_multiple_table_statement2 )
			int alt118=3;
			int LA118_0 = input.LA(1);
			if ( (LA118_0==FROM) ) {
				int LA118_1 = input.LA(2);
				if ( (LA118_1==ID) ) {
					switch ( input.LA(3) ) {
					case DOT:
						{
						int LA118_4 = input.LA(4);
						if ( (LA118_4==ID) ) {
							switch ( input.LA(5) ) {
							case EOF:
							case INTEGER_NUM:
							case LIMIT:
							case ORDER_SYM:
							case PARTITION_SYM:
							case SEMI:
							case WHERE:
								{
								alt118=1;
								}
								break;
							case COMMA:
								{
								int LA118_6 = input.LA(6);
								if ( (LA118_6==ALTER||LA118_6==CALL_SYM||LA118_6==CREATE||LA118_6==DELETE_SYM||(LA118_6 >= DO_SYM && LA118_6 <= DROP)||LA118_6==HANDLER_SYM||LA118_6==INSERT||LA118_6==LOAD||LA118_6==RENAME||LA118_6==REPLACE||LA118_6==SELECT||LA118_6==SHIFT_LEFT||LA118_6==TRUNCATE||LA118_6==UPDATE) ) {
									alt118=1;
								}
								else if ( (LA118_6==ID) ) {
									alt118=3;
								}

								else {
									if (state.backtracking>0) {state.failed=true; return retval;}
									int nvaeMark = input.mark();
									try {
										for (int nvaeConsume = 0; nvaeConsume < 6 - 1; nvaeConsume++) {
											input.consume();
										}
										NoViableAltException nvae =
											new NoViableAltException("", 118, 6, input);
										throw nvae;
									} finally {
										input.rewind(nvaeMark);
									}
								}

								}
								break;
							case ALL_FIELDS:
							case USING_SYM:
								{
								alt118=3;
								}
								break;
							default:
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 118, 8, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 118, 4, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case EOF:
					case INTEGER_NUM:
					case LIMIT:
					case ORDER_SYM:
					case PARTITION_SYM:
					case SEMI:
					case WHERE:
						{
						alt118=1;
						}
						break;
					case COMMA:
						{
						int LA118_6 = input.LA(4);
						if ( (LA118_6==ALTER||LA118_6==CALL_SYM||LA118_6==CREATE||LA118_6==DELETE_SYM||(LA118_6 >= DO_SYM && LA118_6 <= DROP)||LA118_6==HANDLER_SYM||LA118_6==INSERT||LA118_6==LOAD||LA118_6==RENAME||LA118_6==REPLACE||LA118_6==SELECT||LA118_6==SHIFT_LEFT||LA118_6==TRUNCATE||LA118_6==UPDATE) ) {
							alt118=1;
						}
						else if ( (LA118_6==ID) ) {
							alt118=3;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 118, 6, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case ALL_FIELDS:
					case USING_SYM:
						{
						alt118=3;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 118, 3, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 118, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA118_0==ID) ) {
				alt118=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 118, 0, input);
				throw nvae;
			}

			switch (alt118) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1570:5: delete_single_table_statement
					{
					pushFollow(FOLLOW_delete_single_table_statement_in_delete_statements24748);
					delete_single_table_statement421=delete_single_table_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, delete_single_table_statement421.getTree());

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1570:37: delete_multiple_table_statement1
					{
					pushFollow(FOLLOW_delete_multiple_table_statement1_in_delete_statements24752);
					delete_multiple_table_statement1422=delete_multiple_table_statement1();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, delete_multiple_table_statement1422.getTree());

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1570:72: delete_multiple_table_statement2
					{
					pushFollow(FOLLOW_delete_multiple_table_statement2_in_delete_statements24756);
					delete_multiple_table_statement2423=delete_multiple_table_statement2();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, delete_multiple_table_statement2423.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "delete_statements"


	public static class delete_single_table_statement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "delete_single_table_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1572:1: delete_single_table_statement : FROM table_spec ( partition_clause )? ( where_clause )? ( orderby_clause )? ( limit_clause )? ;
	public final SQLParser.delete_single_table_statement_return delete_single_table_statement() throws RecognitionException {
		SQLParser.delete_single_table_statement_return retval = new SQLParser.delete_single_table_statement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token FROM424=null;
		ParserRuleReturnScope table_spec425 =null;
		ParserRuleReturnScope partition_clause426 =null;
		ParserRuleReturnScope where_clause427 =null;
		ParserRuleReturnScope orderby_clause428 =null;
		ParserRuleReturnScope limit_clause429 =null;

		CommonTree FROM424_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1572:30: ( FROM table_spec ( partition_clause )? ( where_clause )? ( orderby_clause )? ( limit_clause )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1573:3: FROM table_spec ( partition_clause )? ( where_clause )? ( orderby_clause )? ( limit_clause )?
			{
			root_0 = (CommonTree)adaptor.nil();


			FROM424=(Token)match(input,FROM,FOLLOW_FROM_in_delete_single_table_statement24767); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			FROM424_tree = (CommonTree)adaptor.create(FROM424);
			adaptor.addChild(root_0, FROM424_tree);
			}

			pushFollow(FOLLOW_table_spec_in_delete_single_table_statement24769);
			table_spec425=table_spec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_spec425.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1574:3: ( partition_clause )?
			int alt119=2;
			int LA119_0 = input.LA(1);
			if ( (LA119_0==PARTITION_SYM) ) {
				alt119=1;
			}
			switch (alt119) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1574:4: partition_clause
					{
					pushFollow(FOLLOW_partition_clause_in_delete_single_table_statement24774);
					partition_clause426=partition_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_clause426.getTree());

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1575:3: ( where_clause )?
			int alt120=2;
			int LA120_0 = input.LA(1);
			if ( (LA120_0==WHERE) ) {
				alt120=1;
			}
			switch (alt120) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1575:4: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_delete_single_table_statement24781);
					where_clause427=where_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, where_clause427.getTree());

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1576:3: ( orderby_clause )?
			int alt121=2;
			int LA121_0 = input.LA(1);
			if ( (LA121_0==ORDER_SYM) ) {
				alt121=1;
			}
			switch (alt121) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1576:4: orderby_clause
					{
					pushFollow(FOLLOW_orderby_clause_in_delete_single_table_statement24788);
					orderby_clause428=orderby_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, orderby_clause428.getTree());

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1577:3: ( limit_clause )?
			int alt122=2;
			int LA122_0 = input.LA(1);
			if ( (LA122_0==INTEGER_NUM||LA122_0==LIMIT) ) {
				alt122=1;
			}
			switch (alt122) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1577:4: limit_clause
					{
					pushFollow(FOLLOW_limit_clause_in_delete_single_table_statement24795);
					limit_clause429=limit_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, limit_clause429.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "delete_single_table_statement"


	public static class delete_multiple_table_statement1_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "delete_multiple_table_statement1"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1579:1: delete_multiple_table_statement1 : table_spec ( ALL_FIELDS )? ( COMMA table_spec ( ALL_FIELDS )? )* FROM table_references ( where_clause )? ;
	public final SQLParser.delete_multiple_table_statement1_return delete_multiple_table_statement1() throws RecognitionException {
		SQLParser.delete_multiple_table_statement1_return retval = new SQLParser.delete_multiple_table_statement1_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token ALL_FIELDS431=null;
		Token COMMA432=null;
		Token ALL_FIELDS434=null;
		Token FROM435=null;
		ParserRuleReturnScope table_spec430 =null;
		ParserRuleReturnScope table_spec433 =null;
		ParserRuleReturnScope table_references436 =null;
		ParserRuleReturnScope where_clause437 =null;

		CommonTree ALL_FIELDS431_tree=null;
		CommonTree COMMA432_tree=null;
		CommonTree ALL_FIELDS434_tree=null;
		CommonTree FROM435_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1579:33: ( table_spec ( ALL_FIELDS )? ( COMMA table_spec ( ALL_FIELDS )? )* FROM table_references ( where_clause )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1580:3: table_spec ( ALL_FIELDS )? ( COMMA table_spec ( ALL_FIELDS )? )* FROM table_references ( where_clause )?
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_table_spec_in_delete_multiple_table_statement124806);
			table_spec430=table_spec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_spec430.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1580:14: ( ALL_FIELDS )?
			int alt123=2;
			int LA123_0 = input.LA(1);
			if ( (LA123_0==ALL_FIELDS) ) {
				alt123=1;
			}
			switch (alt123) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1580:15: ALL_FIELDS
					{
					ALL_FIELDS431=(Token)match(input,ALL_FIELDS,FOLLOW_ALL_FIELDS_in_delete_multiple_table_statement124809); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ALL_FIELDS431_tree = (CommonTree)adaptor.create(ALL_FIELDS431);
					adaptor.addChild(root_0, ALL_FIELDS431_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1580:28: ( COMMA table_spec ( ALL_FIELDS )? )*
			loop125:
			while (true) {
				int alt125=2;
				int LA125_0 = input.LA(1);
				if ( (LA125_0==COMMA) ) {
					alt125=1;
				}

				switch (alt125) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1580:29: COMMA table_spec ( ALL_FIELDS )?
					{
					COMMA432=(Token)match(input,COMMA,FOLLOW_COMMA_in_delete_multiple_table_statement124814); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA432_tree = (CommonTree)adaptor.create(COMMA432);
					adaptor.addChild(root_0, COMMA432_tree);
					}

					pushFollow(FOLLOW_table_spec_in_delete_multiple_table_statement124816);
					table_spec433=table_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_spec433.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1580:46: ( ALL_FIELDS )?
					int alt124=2;
					int LA124_0 = input.LA(1);
					if ( (LA124_0==ALL_FIELDS) ) {
						alt124=1;
					}
					switch (alt124) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1580:47: ALL_FIELDS
							{
							ALL_FIELDS434=(Token)match(input,ALL_FIELDS,FOLLOW_ALL_FIELDS_in_delete_multiple_table_statement124819); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ALL_FIELDS434_tree = (CommonTree)adaptor.create(ALL_FIELDS434);
							adaptor.addChild(root_0, ALL_FIELDS434_tree);
							}

							}
							break;

					}

					}
					break;

				default :
					break loop125;
				}
			}

			FROM435=(Token)match(input,FROM,FOLLOW_FROM_in_delete_multiple_table_statement124827); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			FROM435_tree = (CommonTree)adaptor.create(FROM435);
			adaptor.addChild(root_0, FROM435_tree);
			}

			pushFollow(FOLLOW_table_references_in_delete_multiple_table_statement124829);
			table_references436=table_references();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_references436.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1582:3: ( where_clause )?
			int alt126=2;
			int LA126_0 = input.LA(1);
			if ( (LA126_0==WHERE) ) {
				alt126=1;
			}
			switch (alt126) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1582:4: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_delete_multiple_table_statement124834);
					where_clause437=where_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, where_clause437.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "delete_multiple_table_statement1"


	public static class delete_multiple_table_statement2_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "delete_multiple_table_statement2"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1584:1: delete_multiple_table_statement2 : FROM table_spec ( ALL_FIELDS )? ( COMMA table_spec ( ALL_FIELDS )? )* USING_SYM table_references ( where_clause )? ;
	public final SQLParser.delete_multiple_table_statement2_return delete_multiple_table_statement2() throws RecognitionException {
		SQLParser.delete_multiple_table_statement2_return retval = new SQLParser.delete_multiple_table_statement2_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token FROM438=null;
		Token ALL_FIELDS440=null;
		Token COMMA441=null;
		Token ALL_FIELDS443=null;
		Token USING_SYM444=null;
		ParserRuleReturnScope table_spec439 =null;
		ParserRuleReturnScope table_spec442 =null;
		ParserRuleReturnScope table_references445 =null;
		ParserRuleReturnScope where_clause446 =null;

		CommonTree FROM438_tree=null;
		CommonTree ALL_FIELDS440_tree=null;
		CommonTree COMMA441_tree=null;
		CommonTree ALL_FIELDS443_tree=null;
		CommonTree USING_SYM444_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1584:33: ( FROM table_spec ( ALL_FIELDS )? ( COMMA table_spec ( ALL_FIELDS )? )* USING_SYM table_references ( where_clause )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1585:3: FROM table_spec ( ALL_FIELDS )? ( COMMA table_spec ( ALL_FIELDS )? )* USING_SYM table_references ( where_clause )?
			{
			root_0 = (CommonTree)adaptor.nil();


			FROM438=(Token)match(input,FROM,FOLLOW_FROM_in_delete_multiple_table_statement224845); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			FROM438_tree = (CommonTree)adaptor.create(FROM438);
			adaptor.addChild(root_0, FROM438_tree);
			}

			pushFollow(FOLLOW_table_spec_in_delete_multiple_table_statement224847);
			table_spec439=table_spec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_spec439.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1585:19: ( ALL_FIELDS )?
			int alt127=2;
			int LA127_0 = input.LA(1);
			if ( (LA127_0==ALL_FIELDS) ) {
				alt127=1;
			}
			switch (alt127) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1585:20: ALL_FIELDS
					{
					ALL_FIELDS440=(Token)match(input,ALL_FIELDS,FOLLOW_ALL_FIELDS_in_delete_multiple_table_statement224850); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ALL_FIELDS440_tree = (CommonTree)adaptor.create(ALL_FIELDS440);
					adaptor.addChild(root_0, ALL_FIELDS440_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1585:33: ( COMMA table_spec ( ALL_FIELDS )? )*
			loop129:
			while (true) {
				int alt129=2;
				int LA129_0 = input.LA(1);
				if ( (LA129_0==COMMA) ) {
					alt129=1;
				}

				switch (alt129) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1585:34: COMMA table_spec ( ALL_FIELDS )?
					{
					COMMA441=(Token)match(input,COMMA,FOLLOW_COMMA_in_delete_multiple_table_statement224855); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA441_tree = (CommonTree)adaptor.create(COMMA441);
					adaptor.addChild(root_0, COMMA441_tree);
					}

					pushFollow(FOLLOW_table_spec_in_delete_multiple_table_statement224857);
					table_spec442=table_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_spec442.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1585:51: ( ALL_FIELDS )?
					int alt128=2;
					int LA128_0 = input.LA(1);
					if ( (LA128_0==ALL_FIELDS) ) {
						alt128=1;
					}
					switch (alt128) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1585:52: ALL_FIELDS
							{
							ALL_FIELDS443=(Token)match(input,ALL_FIELDS,FOLLOW_ALL_FIELDS_in_delete_multiple_table_statement224860); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ALL_FIELDS443_tree = (CommonTree)adaptor.create(ALL_FIELDS443);
							adaptor.addChild(root_0, ALL_FIELDS443_tree);
							}

							}
							break;

					}

					}
					break;

				default :
					break loop129;
				}
			}

			USING_SYM444=(Token)match(input,USING_SYM,FOLLOW_USING_SYM_in_delete_multiple_table_statement224868); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			USING_SYM444_tree = (CommonTree)adaptor.create(USING_SYM444);
			adaptor.addChild(root_0, USING_SYM444_tree);
			}

			pushFollow(FOLLOW_table_references_in_delete_multiple_table_statement224870);
			table_references445=table_references();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_references445.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1587:3: ( where_clause )?
			int alt130=2;
			int LA130_0 = input.LA(1);
			if ( (LA130_0==WHERE) ) {
				alt130=1;
			}
			switch (alt130) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1587:4: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_delete_multiple_table_statement224875);
					where_clause446=where_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, where_clause446.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "delete_multiple_table_statement2"


	public static class insert_statements_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "insert_statements"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1595:1: insert_statements : ( insert_statement1 | insert_statement2 | insert_statement3 );
	public final SQLParser.insert_statements_return insert_statements() throws RecognitionException {
		SQLParser.insert_statements_return retval = new SQLParser.insert_statements_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope insert_statement1447 =null;
		ParserRuleReturnScope insert_statement2448 =null;
		ParserRuleReturnScope insert_statement3449 =null;


		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1595:19: ( insert_statement1 | insert_statement2 | insert_statement3 )
			int alt131=3;
			alt131 = dfa131.predict(input);
			switch (alt131) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1596:3: insert_statement1
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_insert_statement1_in_insert_statements24893);
					insert_statement1447=insert_statement1();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, insert_statement1447.getTree());

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1596:23: insert_statement2
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_insert_statement2_in_insert_statements24897);
					insert_statement2448=insert_statement2();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, insert_statement2448.getTree());

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1596:43: insert_statement3
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_insert_statement3_in_insert_statements24901);
					insert_statement3449=insert_statement3();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, insert_statement3449.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "insert_statements"


	public static class insert_header_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "insert_header"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1599:1: insert_header : INSERT ( LOW_PRIORITY | HIGH_PRIORITY )? ( IGNORE_SYM )? ( INTO )? table_spec ( partition_clause )? ;
	public final SQLParser.insert_header_return insert_header() throws RecognitionException {
		SQLParser.insert_header_return retval = new SQLParser.insert_header_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token INSERT450=null;
		Token set451=null;
		Token IGNORE_SYM452=null;
		Token INTO453=null;
		ParserRuleReturnScope table_spec454 =null;
		ParserRuleReturnScope partition_clause455 =null;

		CommonTree INSERT450_tree=null;
		CommonTree set451_tree=null;
		CommonTree IGNORE_SYM452_tree=null;
		CommonTree INTO453_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1599:14: ( INSERT ( LOW_PRIORITY | HIGH_PRIORITY )? ( IGNORE_SYM )? ( INTO )? table_spec ( partition_clause )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1600:3: INSERT ( LOW_PRIORITY | HIGH_PRIORITY )? ( IGNORE_SYM )? ( INTO )? table_spec ( partition_clause )?
			{
			root_0 = (CommonTree)adaptor.nil();


			INSERT450=(Token)match(input,INSERT,FOLLOW_INSERT_in_insert_header24911); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			INSERT450_tree = (CommonTree)adaptor.create(INSERT450);
			adaptor.addChild(root_0, INSERT450_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1600:10: ( LOW_PRIORITY | HIGH_PRIORITY )?
			int alt132=2;
			int LA132_0 = input.LA(1);
			if ( (LA132_0==HIGH_PRIORITY||LA132_0==LOW_PRIORITY) ) {
				alt132=1;
			}
			switch (alt132) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
					{
					set451=input.LT(1);
					if ( input.LA(1)==HIGH_PRIORITY||input.LA(1)==LOW_PRIORITY ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set451));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1600:42: ( IGNORE_SYM )?
			int alt133=2;
			int LA133_0 = input.LA(1);
			if ( (LA133_0==IGNORE_SYM) ) {
				alt133=1;
			}
			switch (alt133) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1600:43: IGNORE_SYM
					{
					IGNORE_SYM452=(Token)match(input,IGNORE_SYM,FOLLOW_IGNORE_SYM_in_insert_header24923); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IGNORE_SYM452_tree = (CommonTree)adaptor.create(IGNORE_SYM452);
					adaptor.addChild(root_0, IGNORE_SYM452_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1601:3: ( INTO )?
			int alt134=2;
			int LA134_0 = input.LA(1);
			if ( (LA134_0==INTO) ) {
				alt134=1;
			}
			switch (alt134) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1601:4: INTO
					{
					INTO453=(Token)match(input,INTO,FOLLOW_INTO_in_insert_header24930); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTO453_tree = (CommonTree)adaptor.create(INTO453);
					adaptor.addChild(root_0, INTO453_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_table_spec_in_insert_header24934);
			table_spec454=table_spec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_spec454.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1602:3: ( partition_clause )?
			int alt135=2;
			int LA135_0 = input.LA(1);
			if ( (LA135_0==PARTITION_SYM) ) {
				alt135=1;
			}
			switch (alt135) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1602:4: partition_clause
					{
					pushFollow(FOLLOW_partition_clause_in_insert_header24940);
					partition_clause455=partition_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_clause455.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "insert_header"


	public static class insert_subfix_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "insert_subfix"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1605:1: insert_subfix : ON DUPLICATE_SYM KEY_SYM UPDATE column_spec EQ_SYM expression ( COMMA column_spec EQ_SYM expression )* ;
	public final SQLParser.insert_subfix_return insert_subfix() throws RecognitionException {
		SQLParser.insert_subfix_return retval = new SQLParser.insert_subfix_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token ON456=null;
		Token DUPLICATE_SYM457=null;
		Token KEY_SYM458=null;
		Token UPDATE459=null;
		Token EQ_SYM461=null;
		Token COMMA463=null;
		Token EQ_SYM465=null;
		ParserRuleReturnScope column_spec460 =null;
		ParserRuleReturnScope expression462 =null;
		ParserRuleReturnScope column_spec464 =null;
		ParserRuleReturnScope expression466 =null;

		CommonTree ON456_tree=null;
		CommonTree DUPLICATE_SYM457_tree=null;
		CommonTree KEY_SYM458_tree=null;
		CommonTree UPDATE459_tree=null;
		CommonTree EQ_SYM461_tree=null;
		CommonTree COMMA463_tree=null;
		CommonTree EQ_SYM465_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1605:14: ( ON DUPLICATE_SYM KEY_SYM UPDATE column_spec EQ_SYM expression ( COMMA column_spec EQ_SYM expression )* )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1606:3: ON DUPLICATE_SYM KEY_SYM UPDATE column_spec EQ_SYM expression ( COMMA column_spec EQ_SYM expression )*
			{
			root_0 = (CommonTree)adaptor.nil();


			ON456=(Token)match(input,ON,FOLLOW_ON_in_insert_subfix24952); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			ON456_tree = (CommonTree)adaptor.create(ON456);
			adaptor.addChild(root_0, ON456_tree);
			}

			DUPLICATE_SYM457=(Token)match(input,DUPLICATE_SYM,FOLLOW_DUPLICATE_SYM_in_insert_subfix24954); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DUPLICATE_SYM457_tree = (CommonTree)adaptor.create(DUPLICATE_SYM457);
			adaptor.addChild(root_0, DUPLICATE_SYM457_tree);
			}

			KEY_SYM458=(Token)match(input,KEY_SYM,FOLLOW_KEY_SYM_in_insert_subfix24956); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			KEY_SYM458_tree = (CommonTree)adaptor.create(KEY_SYM458);
			adaptor.addChild(root_0, KEY_SYM458_tree);
			}

			UPDATE459=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_insert_subfix24958); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			UPDATE459_tree = (CommonTree)adaptor.create(UPDATE459);
			adaptor.addChild(root_0, UPDATE459_tree);
			}

			pushFollow(FOLLOW_column_spec_in_insert_subfix24960);
			column_spec460=column_spec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec460.getTree());

			EQ_SYM461=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_insert_subfix24962); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			EQ_SYM461_tree = (CommonTree)adaptor.create(EQ_SYM461);
			adaptor.addChild(root_0, EQ_SYM461_tree);
			}

			pushFollow(FOLLOW_expression_in_insert_subfix24964);
			expression462=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression462.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1606:65: ( COMMA column_spec EQ_SYM expression )*
			loop136:
			while (true) {
				int alt136=2;
				int LA136_0 = input.LA(1);
				if ( (LA136_0==COMMA) ) {
					int LA136_2 = input.LA(2);
					if ( (LA136_2==ID) ) {
						alt136=1;
					}

				}

				switch (alt136) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1606:66: COMMA column_spec EQ_SYM expression
					{
					COMMA463=(Token)match(input,COMMA,FOLLOW_COMMA_in_insert_subfix24967); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA463_tree = (CommonTree)adaptor.create(COMMA463);
					adaptor.addChild(root_0, COMMA463_tree);
					}

					pushFollow(FOLLOW_column_spec_in_insert_subfix24969);
					column_spec464=column_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec464.getTree());

					EQ_SYM465=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_insert_subfix24971); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EQ_SYM465_tree = (CommonTree)adaptor.create(EQ_SYM465);
					adaptor.addChild(root_0, EQ_SYM465_tree);
					}

					pushFollow(FOLLOW_expression_in_insert_subfix24973);
					expression466=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression466.getTree());

					}
					break;

				default :
					break loop136;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "insert_subfix"


	public static class insert_statement1_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "insert_statement1"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1609:1: insert_statement1 : insert_header ( column_list )? value_list_clause ( insert_subfix )? ;
	public final SQLParser.insert_statement1_return insert_statement1() throws RecognitionException {
		SQLParser.insert_statement1_return retval = new SQLParser.insert_statement1_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope insert_header467 =null;
		ParserRuleReturnScope column_list468 =null;
		ParserRuleReturnScope value_list_clause469 =null;
		ParserRuleReturnScope insert_subfix470 =null;


		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1609:18: ( insert_header ( column_list )? value_list_clause ( insert_subfix )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1610:3: insert_header ( column_list )? value_list_clause ( insert_subfix )?
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_insert_header_in_insert_statement124985);
			insert_header467=insert_header();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, insert_header467.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1611:3: ( column_list )?
			int alt137=2;
			int LA137_0 = input.LA(1);
			if ( (LA137_0==LPAREN) ) {
				alt137=1;
			}
			switch (alt137) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1611:4: column_list
					{
					pushFollow(FOLLOW_column_list_in_insert_statement124990);
					column_list468=column_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_list468.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_value_list_clause_in_insert_statement124997);
			value_list_clause469=value_list_clause();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, value_list_clause469.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1613:3: ( insert_subfix )?
			int alt138=2;
			int LA138_0 = input.LA(1);
			if ( (LA138_0==ON) ) {
				alt138=1;
			}
			switch (alt138) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1613:5: insert_subfix
					{
					pushFollow(FOLLOW_insert_subfix_in_insert_statement125003);
					insert_subfix470=insert_subfix();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, insert_subfix470.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "insert_statement1"


	public static class value_list_clause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "value_list_clause"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1615:1: value_list_clause : ( VALUES | VALUE_SYM ) column_value_list ( COMMA column_value_list )* ;
	public final SQLParser.value_list_clause_return value_list_clause() throws RecognitionException {
		SQLParser.value_list_clause_return retval = new SQLParser.value_list_clause_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token set471=null;
		Token COMMA473=null;
		ParserRuleReturnScope column_value_list472 =null;
		ParserRuleReturnScope column_value_list474 =null;

		CommonTree set471_tree=null;
		CommonTree COMMA473_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1615:18: ( ( VALUES | VALUE_SYM ) column_value_list ( COMMA column_value_list )* )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1615:21: ( VALUES | VALUE_SYM ) column_value_list ( COMMA column_value_list )*
			{
			root_0 = (CommonTree)adaptor.nil();


			set471=input.LT(1);
			if ( (input.LA(1) >= VALUES && input.LA(1) <= VALUE_SYM) ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set471));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			pushFollow(FOLLOW_column_value_list_in_value_list_clause25022);
			column_value_list472=column_value_list();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, column_value_list472.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1615:60: ( COMMA column_value_list )*
			loop139:
			while (true) {
				int alt139=2;
				int LA139_0 = input.LA(1);
				if ( (LA139_0==COMMA) ) {
					int LA139_2 = input.LA(2);
					if ( (LA139_2==LPAREN) ) {
						alt139=1;
					}

				}

				switch (alt139) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1615:61: COMMA column_value_list
					{
					COMMA473=(Token)match(input,COMMA,FOLLOW_COMMA_in_value_list_clause25025); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA473_tree = (CommonTree)adaptor.create(COMMA473);
					adaptor.addChild(root_0, COMMA473_tree);
					}

					pushFollow(FOLLOW_column_value_list_in_value_list_clause25027);
					column_value_list474=column_value_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_value_list474.getTree());

					}
					break;

				default :
					break loop139;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "value_list_clause"


	public static class column_value_list_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "column_value_list"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1616:1: column_value_list : LPAREN ( bit_expr | DEFAULT ) ( COMMA ( bit_expr | DEFAULT ) )* RPAREN ;
	public final SQLParser.column_value_list_return column_value_list() throws RecognitionException {
		SQLParser.column_value_list_return retval = new SQLParser.column_value_list_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LPAREN475=null;
		Token DEFAULT477=null;
		Token COMMA478=null;
		Token DEFAULT480=null;
		Token RPAREN481=null;
		ParserRuleReturnScope bit_expr476 =null;
		ParserRuleReturnScope bit_expr479 =null;

		CommonTree LPAREN475_tree=null;
		CommonTree DEFAULT477_tree=null;
		CommonTree COMMA478_tree=null;
		CommonTree DEFAULT480_tree=null;
		CommonTree RPAREN481_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1616:18: ( LPAREN ( bit_expr | DEFAULT ) ( COMMA ( bit_expr | DEFAULT ) )* RPAREN )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1616:21: LPAREN ( bit_expr | DEFAULT ) ( COMMA ( bit_expr | DEFAULT ) )* RPAREN
			{
			root_0 = (CommonTree)adaptor.nil();


			LPAREN475=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_value_list25036); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN475_tree = (CommonTree)adaptor.create(LPAREN475);
			adaptor.addChild(root_0, LPAREN475_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1616:28: ( bit_expr | DEFAULT )
			int alt140=2;
			int LA140_0 = input.LA(1);
			if ( (LA140_0==ABS||LA140_0==ACOS||(LA140_0 >= ADDDATE && LA140_0 <= ADDTIME)||(LA140_0 >= AES_DECRYPT && LA140_0 <= AES_ENCRYPT)||LA140_0==ASCII_SYM||LA140_0==ASIN||(LA140_0 >= ATAN && LA140_0 <= ATAN2)||LA140_0==AVG||LA140_0==BENCHMARK||(LA140_0 >= BIN && LA140_0 <= BINARY)||(LA140_0 >= BIT_AND && LA140_0 <= BIT_OR)||LA140_0==BIT_XOR||(LA140_0 >= CASE_SYM && LA140_0 <= CEILING)||LA140_0==CHAR||(LA140_0 >= CHARSET && LA140_0 <= CHAR_LENGTH)||LA140_0==COERCIBILITY||LA140_0==COLLATION||(LA140_0 >= CONCAT && LA140_0 <= CONCAT_WS)||LA140_0==CONNECTION_ID||(LA140_0 >= CONV && LA140_0 <= CONVERT_TZ)||(LA140_0 >= COS && LA140_0 <= COUNT)||LA140_0==CRC32||LA140_0==CURDATE||LA140_0==CURRENT_USER||LA140_0==CURTIME||LA140_0==DATABASE||LA140_0==DATEDIFF||(LA140_0 >= DATE_ADD && LA140_0 <= DAYOFYEAR)||LA140_0==DECODE||LA140_0==DEGREES||(LA140_0 >= DES_DECRYPT && LA140_0 <= DES_ENCRYPT)||LA140_0==ELT||(LA140_0 >= ENCODE && LA140_0 <= ENCRYPT)||LA140_0==EXISTS||LA140_0==EXP||LA140_0==EXPORT_SET||LA140_0==EXTRACT||LA140_0==FALSE_SYM||LA140_0==FIELD||LA140_0==FIND_IN_SET||LA140_0==FLOOR||LA140_0==FORMAT||LA140_0==FOUND_ROWS||(LA140_0 >= FROM_BASE64 && LA140_0 <= FROM_UNIXTIME)||(LA140_0 >= GET_FORMAT && LA140_0 <= GET_LOCK)||LA140_0==GROUP_CONCAT||(LA140_0 >= HEX && LA140_0 <= HEX_DIGIT)||LA140_0==HOUR||LA140_0==ID||(LA140_0 >= IF && LA140_0 <= IFNULL)||(LA140_0 >= INET_ATON && LA140_0 <= INET_NTOA)||LA140_0==INSERT||(LA140_0 >= INSTR && LA140_0 <= INTEGER_NUM)||LA140_0==INTERVAL_SYM||LA140_0==IS_FREE_LOCK||LA140_0==IS_USED_LOCK||(LA140_0 >= LAST_DAY && LA140_0 <= LAST_INSERT_ID)||(LA140_0 >= LEFT && LA140_0 <= LENGTH)||LA140_0==LN||LA140_0==LOAD_FILE||LA140_0==LOCATE||(LA140_0 >= LOG && LA140_0 <= LOG2)||LA140_0==LOWER||(LA140_0 >= LPAD && LA140_0 <= LPAREN)||LA140_0==LTRIM||(LA140_0 >= MAKEDATE && LA140_0 <= MAKE_SET)||LA140_0==MASTER_POS_WAIT||LA140_0==MATCH||LA140_0==MAX_SYM||LA140_0==MD5||(LA140_0 >= MICROSECOND && LA140_0 <= MID)||(LA140_0 >= MINUS && LA140_0 <= MINUTE)||LA140_0==MIN_SYM||LA140_0==MOD||(LA140_0 >= MONTH && LA140_0 <= MONTHNAME)||LA140_0==NAME_CONST||LA140_0==NEGATION||LA140_0==NOW||LA140_0==NULL_SYM||LA140_0==OCT||LA140_0==OLD_PASSWORD||LA140_0==ORD||(LA140_0 >= PASSWORD && LA140_0 <= PERIOD_DIFF)||LA140_0==PI||LA140_0==PLUS||(LA140_0 >= POW && LA140_0 <= POWER)||LA140_0==QUARTER||LA140_0==QUOTE||(LA140_0 >= RADIANS && LA140_0 <= RAND)||LA140_0==REAL_NUMBER||LA140_0==RELEASE_LOCK||LA140_0==REPEAT||LA140_0==REPLACE||LA140_0==REVERSE||LA140_0==RIGHT||LA140_0==ROUND||(LA140_0 >= ROW_SYM && LA140_0 <= RPAD)||LA140_0==RTRIM||(LA140_0 >= SCHEMA && LA140_0 <= SECOND)||LA140_0==SEC_TO_TIME||LA140_0==SESSION_USER||LA140_0==SIGN||LA140_0==SIN||LA140_0==SLEEP||LA140_0==SOUNDEX||LA140_0==SPACE||LA140_0==SQRT||(LA140_0 >= STD && LA140_0 <= STDDEV_SAMP)||LA140_0==STRCMP||LA140_0==STR_TO_DATE||(LA140_0 >= SUBSTRING && LA140_0 <= SUM)||(LA140_0 >= SYSDATE && LA140_0 <= SYSTEM_USER)||LA140_0==TAN||LA140_0==TEXT_STRING||(LA140_0 >= TIMEDIFF && LA140_0 <= TIME_TO_SEC)||(LA140_0 >= TO_BASE64 && LA140_0 <= TO_SECONDS)||(LA140_0 >= TRIM && LA140_0 <= TRUNCATE)||LA140_0==UNHEX||LA140_0==UNIX_TIMESTAMP||LA140_0==UPPER||(LA140_0 >= USER && LA140_0 <= USER_VAR)||(LA140_0 >= UTC_DATE && LA140_0 <= UTC_TIMESTAMP)||LA140_0==UUID||LA140_0==VALUES||LA140_0==VARIANCE||(LA140_0 >= VAR_POP && LA140_0 <= VERSION_SYM)||(LA140_0 >= WEEK && LA140_0 <= WEIGHT_STRING)||(LA140_0 >= YEAR && LA140_0 <= YEARWEEK)) ) {
				alt140=1;
			}
			else if ( (LA140_0==DEFAULT) ) {
				int LA140_2 = input.LA(2);
				if ( (synpred469_SQL()) ) {
					alt140=1;
				}
				else if ( (true) ) {
					alt140=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 140, 0, input);
				throw nvae;
			}

			switch (alt140) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1616:29: bit_expr
					{
					pushFollow(FOLLOW_bit_expr_in_column_value_list25039);
					bit_expr476=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr476.getTree());

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1616:38: DEFAULT
					{
					DEFAULT477=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_value_list25041); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DEFAULT477_tree = (CommonTree)adaptor.create(DEFAULT477);
					adaptor.addChild(root_0, DEFAULT477_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1616:47: ( COMMA ( bit_expr | DEFAULT ) )*
			loop142:
			while (true) {
				int alt142=2;
				int LA142_0 = input.LA(1);
				if ( (LA142_0==COMMA) ) {
					alt142=1;
				}

				switch (alt142) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1616:48: COMMA ( bit_expr | DEFAULT )
					{
					COMMA478=(Token)match(input,COMMA,FOLLOW_COMMA_in_column_value_list25045); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA478_tree = (CommonTree)adaptor.create(COMMA478);
					adaptor.addChild(root_0, COMMA478_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1616:54: ( bit_expr | DEFAULT )
					int alt141=2;
					int LA141_0 = input.LA(1);
					if ( (LA141_0==ABS||LA141_0==ACOS||(LA141_0 >= ADDDATE && LA141_0 <= ADDTIME)||(LA141_0 >= AES_DECRYPT && LA141_0 <= AES_ENCRYPT)||LA141_0==ASCII_SYM||LA141_0==ASIN||(LA141_0 >= ATAN && LA141_0 <= ATAN2)||LA141_0==AVG||LA141_0==BENCHMARK||(LA141_0 >= BIN && LA141_0 <= BINARY)||(LA141_0 >= BIT_AND && LA141_0 <= BIT_OR)||LA141_0==BIT_XOR||(LA141_0 >= CASE_SYM && LA141_0 <= CEILING)||LA141_0==CHAR||(LA141_0 >= CHARSET && LA141_0 <= CHAR_LENGTH)||LA141_0==COERCIBILITY||LA141_0==COLLATION||(LA141_0 >= CONCAT && LA141_0 <= CONCAT_WS)||LA141_0==CONNECTION_ID||(LA141_0 >= CONV && LA141_0 <= CONVERT_TZ)||(LA141_0 >= COS && LA141_0 <= COUNT)||LA141_0==CRC32||LA141_0==CURDATE||LA141_0==CURRENT_USER||LA141_0==CURTIME||LA141_0==DATABASE||LA141_0==DATEDIFF||(LA141_0 >= DATE_ADD && LA141_0 <= DAYOFYEAR)||LA141_0==DECODE||LA141_0==DEGREES||(LA141_0 >= DES_DECRYPT && LA141_0 <= DES_ENCRYPT)||LA141_0==ELT||(LA141_0 >= ENCODE && LA141_0 <= ENCRYPT)||LA141_0==EXISTS||LA141_0==EXP||LA141_0==EXPORT_SET||LA141_0==EXTRACT||LA141_0==FALSE_SYM||LA141_0==FIELD||LA141_0==FIND_IN_SET||LA141_0==FLOOR||LA141_0==FORMAT||LA141_0==FOUND_ROWS||(LA141_0 >= FROM_BASE64 && LA141_0 <= FROM_UNIXTIME)||(LA141_0 >= GET_FORMAT && LA141_0 <= GET_LOCK)||LA141_0==GROUP_CONCAT||(LA141_0 >= HEX && LA141_0 <= HEX_DIGIT)||LA141_0==HOUR||LA141_0==ID||(LA141_0 >= IF && LA141_0 <= IFNULL)||(LA141_0 >= INET_ATON && LA141_0 <= INET_NTOA)||LA141_0==INSERT||(LA141_0 >= INSTR && LA141_0 <= INTEGER_NUM)||LA141_0==INTERVAL_SYM||LA141_0==IS_FREE_LOCK||LA141_0==IS_USED_LOCK||(LA141_0 >= LAST_DAY && LA141_0 <= LAST_INSERT_ID)||(LA141_0 >= LEFT && LA141_0 <= LENGTH)||LA141_0==LN||LA141_0==LOAD_FILE||LA141_0==LOCATE||(LA141_0 >= LOG && LA141_0 <= LOG2)||LA141_0==LOWER||(LA141_0 >= LPAD && LA141_0 <= LPAREN)||LA141_0==LTRIM||(LA141_0 >= MAKEDATE && LA141_0 <= MAKE_SET)||LA141_0==MASTER_POS_WAIT||LA141_0==MATCH||LA141_0==MAX_SYM||LA141_0==MD5||(LA141_0 >= MICROSECOND && LA141_0 <= MID)||(LA141_0 >= MINUS && LA141_0 <= MINUTE)||LA141_0==MIN_SYM||LA141_0==MOD||(LA141_0 >= MONTH && LA141_0 <= MONTHNAME)||LA141_0==NAME_CONST||LA141_0==NEGATION||LA141_0==NOW||LA141_0==NULL_SYM||LA141_0==OCT||LA141_0==OLD_PASSWORD||LA141_0==ORD||(LA141_0 >= PASSWORD && LA141_0 <= PERIOD_DIFF)||LA141_0==PI||LA141_0==PLUS||(LA141_0 >= POW && LA141_0 <= POWER)||LA141_0==QUARTER||LA141_0==QUOTE||(LA141_0 >= RADIANS && LA141_0 <= RAND)||LA141_0==REAL_NUMBER||LA141_0==RELEASE_LOCK||LA141_0==REPEAT||LA141_0==REPLACE||LA141_0==REVERSE||LA141_0==RIGHT||LA141_0==ROUND||(LA141_0 >= ROW_SYM && LA141_0 <= RPAD)||LA141_0==RTRIM||(LA141_0 >= SCHEMA && LA141_0 <= SECOND)||LA141_0==SEC_TO_TIME||LA141_0==SESSION_USER||LA141_0==SIGN||LA141_0==SIN||LA141_0==SLEEP||LA141_0==SOUNDEX||LA141_0==SPACE||LA141_0==SQRT||(LA141_0 >= STD && LA141_0 <= STDDEV_SAMP)||LA141_0==STRCMP||LA141_0==STR_TO_DATE||(LA141_0 >= SUBSTRING && LA141_0 <= SUM)||(LA141_0 >= SYSDATE && LA141_0 <= SYSTEM_USER)||LA141_0==TAN||LA141_0==TEXT_STRING||(LA141_0 >= TIMEDIFF && LA141_0 <= TIME_TO_SEC)||(LA141_0 >= TO_BASE64 && LA141_0 <= TO_SECONDS)||(LA141_0 >= TRIM && LA141_0 <= TRUNCATE)||LA141_0==UNHEX||LA141_0==UNIX_TIMESTAMP||LA141_0==UPPER||(LA141_0 >= USER && LA141_0 <= USER_VAR)||(LA141_0 >= UTC_DATE && LA141_0 <= UTC_TIMESTAMP)||LA141_0==UUID||LA141_0==VALUES||LA141_0==VARIANCE||(LA141_0 >= VAR_POP && LA141_0 <= VERSION_SYM)||(LA141_0 >= WEEK && LA141_0 <= WEIGHT_STRING)||(LA141_0 >= YEAR && LA141_0 <= YEARWEEK)) ) {
						alt141=1;
					}
					else if ( (LA141_0==DEFAULT) ) {
						int LA141_2 = input.LA(2);
						if ( (synpred470_SQL()) ) {
							alt141=1;
						}
						else if ( (true) ) {
							alt141=2;
						}

					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 141, 0, input);
						throw nvae;
					}

					switch (alt141) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1616:55: bit_expr
							{
							pushFollow(FOLLOW_bit_expr_in_column_value_list25048);
							bit_expr479=bit_expr();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr479.getTree());

							}
							break;
						case 2 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1616:64: DEFAULT
							{
							DEFAULT480=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_value_list25050); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT480_tree = (CommonTree)adaptor.create(DEFAULT480);
							adaptor.addChild(root_0, DEFAULT480_tree);
							}

							}
							break;

					}

					}
					break;

				default :
					break loop142;
				}
			}

			RPAREN481=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_value_list25056); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN481_tree = (CommonTree)adaptor.create(RPAREN481);
			adaptor.addChild(root_0, RPAREN481_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "column_value_list"


	public static class insert_statement2_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "insert_statement2"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1618:1: insert_statement2 : insert_header set_columns_cluase ( insert_subfix )? ;
	public final SQLParser.insert_statement2_return insert_statement2() throws RecognitionException {
		SQLParser.insert_statement2_return retval = new SQLParser.insert_statement2_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope insert_header482 =null;
		ParserRuleReturnScope set_columns_cluase483 =null;
		ParserRuleReturnScope insert_subfix484 =null;


		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1618:18: ( insert_header set_columns_cluase ( insert_subfix )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1619:3: insert_header set_columns_cluase ( insert_subfix )?
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_insert_header_in_insert_statement225066);
			insert_header482=insert_header();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, insert_header482.getTree());

			pushFollow(FOLLOW_set_columns_cluase_in_insert_statement225070);
			set_columns_cluase483=set_columns_cluase();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, set_columns_cluase483.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1621:3: ( insert_subfix )?
			int alt143=2;
			int LA143_0 = input.LA(1);
			if ( (LA143_0==ON) ) {
				alt143=1;
			}
			switch (alt143) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1621:5: insert_subfix
					{
					pushFollow(FOLLOW_insert_subfix_in_insert_statement225076);
					insert_subfix484=insert_subfix();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, insert_subfix484.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "insert_statement2"


	public static class set_columns_cluase_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "set_columns_cluase"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1623:1: set_columns_cluase : SET_SYM set_column_cluase ( COMMA set_column_cluase )* ;
	public final SQLParser.set_columns_cluase_return set_columns_cluase() throws RecognitionException {
		SQLParser.set_columns_cluase_return retval = new SQLParser.set_columns_cluase_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token SET_SYM485=null;
		Token COMMA487=null;
		ParserRuleReturnScope set_column_cluase486 =null;
		ParserRuleReturnScope set_column_cluase488 =null;

		CommonTree SET_SYM485_tree=null;
		CommonTree COMMA487_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1623:19: ( SET_SYM set_column_cluase ( COMMA set_column_cluase )* )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1623:21: SET_SYM set_column_cluase ( COMMA set_column_cluase )*
			{
			root_0 = (CommonTree)adaptor.nil();


			SET_SYM485=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_set_columns_cluase25086); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			SET_SYM485_tree = (CommonTree)adaptor.create(SET_SYM485);
			adaptor.addChild(root_0, SET_SYM485_tree);
			}

			pushFollow(FOLLOW_set_column_cluase_in_set_columns_cluase25088);
			set_column_cluase486=set_column_cluase();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, set_column_cluase486.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1623:47: ( COMMA set_column_cluase )*
			loop144:
			while (true) {
				int alt144=2;
				int LA144_0 = input.LA(1);
				if ( (LA144_0==COMMA) ) {
					int LA144_2 = input.LA(2);
					if ( (LA144_2==ID) ) {
						alt144=1;
					}

				}

				switch (alt144) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1623:49: COMMA set_column_cluase
					{
					COMMA487=(Token)match(input,COMMA,FOLLOW_COMMA_in_set_columns_cluase25092); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA487_tree = (CommonTree)adaptor.create(COMMA487);
					adaptor.addChild(root_0, COMMA487_tree);
					}

					pushFollow(FOLLOW_set_column_cluase_in_set_columns_cluase25094);
					set_column_cluase488=set_column_cluase();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, set_column_cluase488.getTree());

					}
					break;

				default :
					break loop144;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "set_columns_cluase"


	public static class set_column_cluase_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "set_column_cluase"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1624:1: set_column_cluase : column_spec EQ_SYM ( expression | DEFAULT ) ;
	public final SQLParser.set_column_cluase_return set_column_cluase() throws RecognitionException {
		SQLParser.set_column_cluase_return retval = new SQLParser.set_column_cluase_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token EQ_SYM490=null;
		Token DEFAULT492=null;
		ParserRuleReturnScope column_spec489 =null;
		ParserRuleReturnScope expression491 =null;

		CommonTree EQ_SYM490_tree=null;
		CommonTree DEFAULT492_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1624:18: ( column_spec EQ_SYM ( expression | DEFAULT ) )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1624:21: column_spec EQ_SYM ( expression | DEFAULT )
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_column_spec_in_set_column_cluase25104);
			column_spec489=column_spec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec489.getTree());

			EQ_SYM490=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_set_column_cluase25106); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			EQ_SYM490_tree = (CommonTree)adaptor.create(EQ_SYM490);
			adaptor.addChild(root_0, EQ_SYM490_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1624:40: ( expression | DEFAULT )
			int alt145=2;
			int LA145_0 = input.LA(1);
			if ( (LA145_0==ABS||LA145_0==ACOS||(LA145_0 >= ADDDATE && LA145_0 <= ADDTIME)||(LA145_0 >= AES_DECRYPT && LA145_0 <= AES_ENCRYPT)||LA145_0==ASCII_SYM||LA145_0==ASIN||(LA145_0 >= ATAN && LA145_0 <= ATAN2)||LA145_0==AVG||LA145_0==BENCHMARK||(LA145_0 >= BIN && LA145_0 <= BINARY)||(LA145_0 >= BIT_AND && LA145_0 <= BIT_OR)||LA145_0==BIT_XOR||(LA145_0 >= CASE_SYM && LA145_0 <= CEILING)||LA145_0==CHAR||(LA145_0 >= CHARSET && LA145_0 <= CHAR_LENGTH)||LA145_0==COERCIBILITY||LA145_0==COLLATION||(LA145_0 >= CONCAT && LA145_0 <= CONCAT_WS)||LA145_0==CONNECTION_ID||(LA145_0 >= CONV && LA145_0 <= CONVERT_TZ)||(LA145_0 >= COS && LA145_0 <= COUNT)||LA145_0==CRC32||LA145_0==CURDATE||LA145_0==CURRENT_USER||LA145_0==CURTIME||LA145_0==DATABASE||LA145_0==DATEDIFF||(LA145_0 >= DATE_ADD && LA145_0 <= DAYOFYEAR)||LA145_0==DECODE||LA145_0==DEGREES||(LA145_0 >= DES_DECRYPT && LA145_0 <= DES_ENCRYPT)||LA145_0==ELT||(LA145_0 >= ENCODE && LA145_0 <= ENCRYPT)||LA145_0==EXISTS||LA145_0==EXP||LA145_0==EXPORT_SET||LA145_0==EXTRACT||LA145_0==FALSE_SYM||LA145_0==FIELD||LA145_0==FIND_IN_SET||LA145_0==FLOOR||LA145_0==FORMAT||LA145_0==FOUND_ROWS||(LA145_0 >= FROM_BASE64 && LA145_0 <= FROM_UNIXTIME)||(LA145_0 >= GET_FORMAT && LA145_0 <= GET_LOCK)||LA145_0==GROUP_CONCAT||(LA145_0 >= HEX && LA145_0 <= HEX_DIGIT)||LA145_0==HOUR||LA145_0==ID||(LA145_0 >= IF && LA145_0 <= IFNULL)||(LA145_0 >= INET_ATON && LA145_0 <= INET_NTOA)||LA145_0==INSERT||(LA145_0 >= INSTR && LA145_0 <= INTEGER_NUM)||LA145_0==INTERVAL_SYM||LA145_0==IS_FREE_LOCK||LA145_0==IS_USED_LOCK||(LA145_0 >= LAST_DAY && LA145_0 <= LAST_INSERT_ID)||(LA145_0 >= LEFT && LA145_0 <= LENGTH)||LA145_0==LN||LA145_0==LOAD_FILE||LA145_0==LOCATE||(LA145_0 >= LOG && LA145_0 <= LOG2)||LA145_0==LOWER||(LA145_0 >= LPAD && LA145_0 <= LPAREN)||LA145_0==LTRIM||(LA145_0 >= MAKEDATE && LA145_0 <= MAKE_SET)||LA145_0==MASTER_POS_WAIT||LA145_0==MATCH||LA145_0==MAX_SYM||LA145_0==MD5||(LA145_0 >= MICROSECOND && LA145_0 <= MID)||(LA145_0 >= MINUS && LA145_0 <= MINUTE)||LA145_0==MIN_SYM||LA145_0==MOD||(LA145_0 >= MONTH && LA145_0 <= MONTHNAME)||LA145_0==NAME_CONST||LA145_0==NEGATION||(LA145_0 >= NOT_SYM && LA145_0 <= NOW)||LA145_0==NULL_SYM||LA145_0==OCT||LA145_0==OLD_PASSWORD||LA145_0==ORD||(LA145_0 >= PASSWORD && LA145_0 <= PERIOD_DIFF)||LA145_0==PI||LA145_0==PLUS||(LA145_0 >= POW && LA145_0 <= POWER)||LA145_0==QUARTER||LA145_0==QUOTE||(LA145_0 >= RADIANS && LA145_0 <= RAND)||LA145_0==REAL_NUMBER||LA145_0==RELEASE_LOCK||LA145_0==REPEAT||LA145_0==REPLACE||LA145_0==REVERSE||LA145_0==RIGHT||LA145_0==ROUND||(LA145_0 >= ROW_SYM && LA145_0 <= RPAD)||LA145_0==RTRIM||(LA145_0 >= SCHEMA && LA145_0 <= SECOND)||LA145_0==SEC_TO_TIME||LA145_0==SESSION_USER||LA145_0==SIGN||LA145_0==SIN||LA145_0==SLEEP||LA145_0==SOUNDEX||LA145_0==SPACE||LA145_0==SQRT||(LA145_0 >= STD && LA145_0 <= STDDEV_SAMP)||LA145_0==STRCMP||LA145_0==STR_TO_DATE||(LA145_0 >= SUBSTRING && LA145_0 <= SUM)||(LA145_0 >= SYSDATE && LA145_0 <= SYSTEM_USER)||LA145_0==TAN||LA145_0==TEXT_STRING||(LA145_0 >= TIMEDIFF && LA145_0 <= TIME_TO_SEC)||(LA145_0 >= TO_BASE64 && LA145_0 <= TO_SECONDS)||(LA145_0 >= TRIM && LA145_0 <= TRUNCATE)||LA145_0==UNHEX||LA145_0==UNIX_TIMESTAMP||LA145_0==UPPER||(LA145_0 >= USER && LA145_0 <= USER_VAR)||(LA145_0 >= UTC_DATE && LA145_0 <= UTC_TIMESTAMP)||LA145_0==UUID||LA145_0==VALUES||LA145_0==VARIANCE||(LA145_0 >= VAR_POP && LA145_0 <= VERSION_SYM)||(LA145_0 >= WEEK && LA145_0 <= WEIGHT_STRING)||(LA145_0 >= YEAR && LA145_0 <= YEARWEEK)) ) {
				alt145=1;
			}
			else if ( (LA145_0==DEFAULT) ) {
				int LA145_2 = input.LA(2);
				if ( (synpred474_SQL()) ) {
					alt145=1;
				}
				else if ( (true) ) {
					alt145=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 145, 0, input);
				throw nvae;
			}

			switch (alt145) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1624:41: expression
					{
					pushFollow(FOLLOW_expression_in_set_column_cluase25109);
					expression491=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression491.getTree());

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1624:52: DEFAULT
					{
					DEFAULT492=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_set_column_cluase25111); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DEFAULT492_tree = (CommonTree)adaptor.create(DEFAULT492);
					adaptor.addChild(root_0, DEFAULT492_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "set_column_cluase"


	public static class insert_statement3_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "insert_statement3"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1626:1: insert_statement3 : insert_header ( column_list )? select_expression ( insert_subfix )? ;
	public final SQLParser.insert_statement3_return insert_statement3() throws RecognitionException {
		SQLParser.insert_statement3_return retval = new SQLParser.insert_statement3_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope insert_header493 =null;
		ParserRuleReturnScope column_list494 =null;
		ParserRuleReturnScope select_expression495 =null;
		ParserRuleReturnScope insert_subfix496 =null;


		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1626:18: ( insert_header ( column_list )? select_expression ( insert_subfix )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1627:3: insert_header ( column_list )? select_expression ( insert_subfix )?
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_insert_header_in_insert_statement325122);
			insert_header493=insert_header();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, insert_header493.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1628:3: ( column_list )?
			int alt146=2;
			int LA146_0 = input.LA(1);
			if ( (LA146_0==LPAREN) ) {
				alt146=1;
			}
			switch (alt146) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1628:4: column_list
					{
					pushFollow(FOLLOW_column_list_in_insert_statement325127);
					column_list494=column_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_list494.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_select_expression_in_insert_statement325134);
			select_expression495=select_expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, select_expression495.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1630:3: ( insert_subfix )?
			int alt147=2;
			int LA147_0 = input.LA(1);
			if ( (LA147_0==ON) ) {
				alt147=1;
			}
			switch (alt147) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1630:5: insert_subfix
					{
					pushFollow(FOLLOW_insert_subfix_in_insert_statement325140);
					insert_subfix496=insert_subfix();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, insert_subfix496.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "insert_statement3"


	public static class update_statements_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "update_statements"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1640:1: update_statements : ( single_table_update_statement | multiple_table_update_statement );
	public final SQLParser.update_statements_return update_statements() throws RecognitionException {
		SQLParser.update_statements_return retval = new SQLParser.update_statements_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope single_table_update_statement497 =null;
		ParserRuleReturnScope multiple_table_update_statement498 =null;


		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1640:19: ( single_table_update_statement | multiple_table_update_statement )
			int alt148=2;
			int LA148_0 = input.LA(1);
			if ( (LA148_0==UPDATE) ) {
				int LA148_1 = input.LA(2);
				if ( (synpred477_SQL()) ) {
					alt148=1;
				}
				else if ( (true) ) {
					alt148=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 148, 0, input);
				throw nvae;
			}

			switch (alt148) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1641:3: single_table_update_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_single_table_update_statement_in_update_statements25161);
					single_table_update_statement497=single_table_update_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, single_table_update_statement497.getTree());

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1641:35: multiple_table_update_statement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_multiple_table_update_statement_in_update_statements25165);
					multiple_table_update_statement498=multiple_table_update_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, multiple_table_update_statement498.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "update_statements"


	public static class single_table_update_statement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "single_table_update_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1644:1: single_table_update_statement : UPDATE ( LOW_PRIORITY )? ( IGNORE_SYM )? table_reference set_columns_cluase ( where_clause )? ( orderby_clause )? ( limit_clause )? ;
	public final SQLParser.single_table_update_statement_return single_table_update_statement() throws RecognitionException {
		SQLParser.single_table_update_statement_return retval = new SQLParser.single_table_update_statement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token UPDATE499=null;
		Token LOW_PRIORITY500=null;
		Token IGNORE_SYM501=null;
		ParserRuleReturnScope table_reference502 =null;
		ParserRuleReturnScope set_columns_cluase503 =null;
		ParserRuleReturnScope where_clause504 =null;
		ParserRuleReturnScope orderby_clause505 =null;
		ParserRuleReturnScope limit_clause506 =null;

		CommonTree UPDATE499_tree=null;
		CommonTree LOW_PRIORITY500_tree=null;
		CommonTree IGNORE_SYM501_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1644:30: ( UPDATE ( LOW_PRIORITY )? ( IGNORE_SYM )? table_reference set_columns_cluase ( where_clause )? ( orderby_clause )? ( limit_clause )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1645:1: UPDATE ( LOW_PRIORITY )? ( IGNORE_SYM )? table_reference set_columns_cluase ( where_clause )? ( orderby_clause )? ( limit_clause )?
			{
			root_0 = (CommonTree)adaptor.nil();


			UPDATE499=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_single_table_update_statement25174); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			UPDATE499_tree = (CommonTree)adaptor.create(UPDATE499);
			adaptor.addChild(root_0, UPDATE499_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1645:8: ( LOW_PRIORITY )?
			int alt149=2;
			int LA149_0 = input.LA(1);
			if ( (LA149_0==LOW_PRIORITY) ) {
				alt149=1;
			}
			switch (alt149) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1645:9: LOW_PRIORITY
					{
					LOW_PRIORITY500=(Token)match(input,LOW_PRIORITY,FOLLOW_LOW_PRIORITY_in_single_table_update_statement25177); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LOW_PRIORITY500_tree = (CommonTree)adaptor.create(LOW_PRIORITY500);
					adaptor.addChild(root_0, LOW_PRIORITY500_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1645:24: ( IGNORE_SYM )?
			int alt150=2;
			int LA150_0 = input.LA(1);
			if ( (LA150_0==IGNORE_SYM) ) {
				alt150=1;
			}
			switch (alt150) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1645:25: IGNORE_SYM
					{
					IGNORE_SYM501=(Token)match(input,IGNORE_SYM,FOLLOW_IGNORE_SYM_in_single_table_update_statement25182); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IGNORE_SYM501_tree = (CommonTree)adaptor.create(IGNORE_SYM501);
					adaptor.addChild(root_0, IGNORE_SYM501_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_table_reference_in_single_table_update_statement25186);
			table_reference502=table_reference();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_reference502.getTree());

			pushFollow(FOLLOW_set_columns_cluase_in_single_table_update_statement25190);
			set_columns_cluase503=set_columns_cluase();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, set_columns_cluase503.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1647:3: ( where_clause )?
			int alt151=2;
			int LA151_0 = input.LA(1);
			if ( (LA151_0==WHERE) ) {
				alt151=1;
			}
			switch (alt151) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1647:4: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_single_table_update_statement25195);
					where_clause504=where_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, where_clause504.getTree());

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1648:3: ( orderby_clause )?
			int alt152=2;
			int LA152_0 = input.LA(1);
			if ( (LA152_0==ORDER_SYM) ) {
				alt152=1;
			}
			switch (alt152) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1648:4: orderby_clause
					{
					pushFollow(FOLLOW_orderby_clause_in_single_table_update_statement25202);
					orderby_clause505=orderby_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, orderby_clause505.getTree());

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1649:3: ( limit_clause )?
			int alt153=2;
			int LA153_0 = input.LA(1);
			if ( (LA153_0==INTEGER_NUM||LA153_0==LIMIT) ) {
				alt153=1;
			}
			switch (alt153) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1649:4: limit_clause
					{
					pushFollow(FOLLOW_limit_clause_in_single_table_update_statement25209);
					limit_clause506=limit_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, limit_clause506.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "single_table_update_statement"


	public static class multiple_table_update_statement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "multiple_table_update_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1652:1: multiple_table_update_statement : UPDATE ( LOW_PRIORITY )? ( IGNORE_SYM )? table_references set_columns_cluase ( where_clause )? ;
	public final SQLParser.multiple_table_update_statement_return multiple_table_update_statement() throws RecognitionException {
		SQLParser.multiple_table_update_statement_return retval = new SQLParser.multiple_table_update_statement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token UPDATE507=null;
		Token LOW_PRIORITY508=null;
		Token IGNORE_SYM509=null;
		ParserRuleReturnScope table_references510 =null;
		ParserRuleReturnScope set_columns_cluase511 =null;
		ParserRuleReturnScope where_clause512 =null;

		CommonTree UPDATE507_tree=null;
		CommonTree LOW_PRIORITY508_tree=null;
		CommonTree IGNORE_SYM509_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1652:32: ( UPDATE ( LOW_PRIORITY )? ( IGNORE_SYM )? table_references set_columns_cluase ( where_clause )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1653:3: UPDATE ( LOW_PRIORITY )? ( IGNORE_SYM )? table_references set_columns_cluase ( where_clause )?
			{
			root_0 = (CommonTree)adaptor.nil();


			UPDATE507=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_multiple_table_update_statement25222); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			UPDATE507_tree = (CommonTree)adaptor.create(UPDATE507);
			adaptor.addChild(root_0, UPDATE507_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1653:10: ( LOW_PRIORITY )?
			int alt154=2;
			int LA154_0 = input.LA(1);
			if ( (LA154_0==LOW_PRIORITY) ) {
				alt154=1;
			}
			switch (alt154) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1653:11: LOW_PRIORITY
					{
					LOW_PRIORITY508=(Token)match(input,LOW_PRIORITY,FOLLOW_LOW_PRIORITY_in_multiple_table_update_statement25225); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LOW_PRIORITY508_tree = (CommonTree)adaptor.create(LOW_PRIORITY508);
					adaptor.addChild(root_0, LOW_PRIORITY508_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1653:26: ( IGNORE_SYM )?
			int alt155=2;
			int LA155_0 = input.LA(1);
			if ( (LA155_0==IGNORE_SYM) ) {
				alt155=1;
			}
			switch (alt155) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1653:27: IGNORE_SYM
					{
					IGNORE_SYM509=(Token)match(input,IGNORE_SYM,FOLLOW_IGNORE_SYM_in_multiple_table_update_statement25230); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IGNORE_SYM509_tree = (CommonTree)adaptor.create(IGNORE_SYM509);
					adaptor.addChild(root_0, IGNORE_SYM509_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_table_references_in_multiple_table_update_statement25234);
			table_references510=table_references();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_references510.getTree());

			pushFollow(FOLLOW_set_columns_cluase_in_multiple_table_update_statement25238);
			set_columns_cluase511=set_columns_cluase();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, set_columns_cluase511.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1655:3: ( where_clause )?
			int alt156=2;
			int LA156_0 = input.LA(1);
			if ( (LA156_0==WHERE) ) {
				alt156=1;
			}
			switch (alt156) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1655:4: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_multiple_table_update_statement25243);
					where_clause512=where_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, where_clause512.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "multiple_table_update_statement"


	public static class call_statement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "call_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1664:1: call_statement : CALL_SYM procedure_name ( LPAREN ( bit_expr ( COMMA bit_expr )* )? RPAREN )? ;
	public final SQLParser.call_statement_return call_statement() throws RecognitionException {
		SQLParser.call_statement_return retval = new SQLParser.call_statement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token CALL_SYM513=null;
		Token LPAREN515=null;
		Token COMMA517=null;
		Token RPAREN519=null;
		ParserRuleReturnScope procedure_name514 =null;
		ParserRuleReturnScope bit_expr516 =null;
		ParserRuleReturnScope bit_expr518 =null;

		CommonTree CALL_SYM513_tree=null;
		CommonTree LPAREN515_tree=null;
		CommonTree COMMA517_tree=null;
		CommonTree RPAREN519_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1664:15: ( CALL_SYM procedure_name ( LPAREN ( bit_expr ( COMMA bit_expr )* )? RPAREN )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1665:3: CALL_SYM procedure_name ( LPAREN ( bit_expr ( COMMA bit_expr )* )? RPAREN )?
			{
			root_0 = (CommonTree)adaptor.nil();


			CALL_SYM513=(Token)match(input,CALL_SYM,FOLLOW_CALL_SYM_in_call_statement25261); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			CALL_SYM513_tree = (CommonTree)adaptor.create(CALL_SYM513);
			adaptor.addChild(root_0, CALL_SYM513_tree);
			}

			pushFollow(FOLLOW_procedure_name_in_call_statement25263);
			procedure_name514=procedure_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_name514.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1665:27: ( LPAREN ( bit_expr ( COMMA bit_expr )* )? RPAREN )?
			int alt159=2;
			int LA159_0 = input.LA(1);
			if ( (LA159_0==LPAREN) ) {
				alt159=1;
			}
			switch (alt159) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1665:28: LPAREN ( bit_expr ( COMMA bit_expr )* )? RPAREN
					{
					LPAREN515=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_call_statement25266); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN515_tree = (CommonTree)adaptor.create(LPAREN515);
					adaptor.addChild(root_0, LPAREN515_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1665:35: ( bit_expr ( COMMA bit_expr )* )?
					int alt158=2;
					int LA158_0 = input.LA(1);
					if ( (LA158_0==ABS||LA158_0==ACOS||(LA158_0 >= ADDDATE && LA158_0 <= ADDTIME)||(LA158_0 >= AES_DECRYPT && LA158_0 <= AES_ENCRYPT)||LA158_0==ASCII_SYM||LA158_0==ASIN||(LA158_0 >= ATAN && LA158_0 <= ATAN2)||LA158_0==AVG||LA158_0==BENCHMARK||(LA158_0 >= BIN && LA158_0 <= BINARY)||(LA158_0 >= BIT_AND && LA158_0 <= BIT_OR)||LA158_0==BIT_XOR||(LA158_0 >= CASE_SYM && LA158_0 <= CEILING)||LA158_0==CHAR||(LA158_0 >= CHARSET && LA158_0 <= CHAR_LENGTH)||LA158_0==COERCIBILITY||LA158_0==COLLATION||(LA158_0 >= CONCAT && LA158_0 <= CONCAT_WS)||LA158_0==CONNECTION_ID||(LA158_0 >= CONV && LA158_0 <= CONVERT_TZ)||(LA158_0 >= COS && LA158_0 <= COUNT)||LA158_0==CRC32||LA158_0==CURDATE||LA158_0==CURRENT_USER||LA158_0==CURTIME||LA158_0==DATABASE||LA158_0==DATEDIFF||(LA158_0 >= DATE_ADD && LA158_0 <= DAYOFYEAR)||(LA158_0 >= DECODE && LA158_0 <= DEFAULT)||LA158_0==DEGREES||(LA158_0 >= DES_DECRYPT && LA158_0 <= DES_ENCRYPT)||LA158_0==ELT||(LA158_0 >= ENCODE && LA158_0 <= ENCRYPT)||LA158_0==EXISTS||LA158_0==EXP||LA158_0==EXPORT_SET||LA158_0==EXTRACT||LA158_0==FALSE_SYM||LA158_0==FIELD||LA158_0==FIND_IN_SET||LA158_0==FLOOR||LA158_0==FORMAT||LA158_0==FOUND_ROWS||(LA158_0 >= FROM_BASE64 && LA158_0 <= FROM_UNIXTIME)||(LA158_0 >= GET_FORMAT && LA158_0 <= GET_LOCK)||LA158_0==GROUP_CONCAT||(LA158_0 >= HEX && LA158_0 <= HEX_DIGIT)||LA158_0==HOUR||LA158_0==ID||(LA158_0 >= IF && LA158_0 <= IFNULL)||(LA158_0 >= INET_ATON && LA158_0 <= INET_NTOA)||LA158_0==INSERT||(LA158_0 >= INSTR && LA158_0 <= INTEGER_NUM)||LA158_0==INTERVAL_SYM||LA158_0==IS_FREE_LOCK||LA158_0==IS_USED_LOCK||(LA158_0 >= LAST_DAY && LA158_0 <= LAST_INSERT_ID)||(LA158_0 >= LEFT && LA158_0 <= LENGTH)||LA158_0==LN||LA158_0==LOAD_FILE||LA158_0==LOCATE||(LA158_0 >= LOG && LA158_0 <= LOG2)||LA158_0==LOWER||(LA158_0 >= LPAD && LA158_0 <= LPAREN)||LA158_0==LTRIM||(LA158_0 >= MAKEDATE && LA158_0 <= MAKE_SET)||LA158_0==MASTER_POS_WAIT||LA158_0==MATCH||LA158_0==MAX_SYM||LA158_0==MD5||(LA158_0 >= MICROSECOND && LA158_0 <= MID)||(LA158_0 >= MINUS && LA158_0 <= MINUTE)||LA158_0==MIN_SYM||LA158_0==MOD||(LA158_0 >= MONTH && LA158_0 <= MONTHNAME)||LA158_0==NAME_CONST||LA158_0==NEGATION||LA158_0==NOW||LA158_0==NULL_SYM||LA158_0==OCT||LA158_0==OLD_PASSWORD||LA158_0==ORD||(LA158_0 >= PASSWORD && LA158_0 <= PERIOD_DIFF)||LA158_0==PI||LA158_0==PLUS||(LA158_0 >= POW && LA158_0 <= POWER)||LA158_0==QUARTER||LA158_0==QUOTE||(LA158_0 >= RADIANS && LA158_0 <= RAND)||LA158_0==REAL_NUMBER||LA158_0==RELEASE_LOCK||LA158_0==REPEAT||LA158_0==REPLACE||LA158_0==REVERSE||LA158_0==RIGHT||LA158_0==ROUND||(LA158_0 >= ROW_SYM && LA158_0 <= RPAD)||LA158_0==RTRIM||(LA158_0 >= SCHEMA && LA158_0 <= SECOND)||LA158_0==SEC_TO_TIME||LA158_0==SESSION_USER||LA158_0==SIGN||LA158_0==SIN||LA158_0==SLEEP||LA158_0==SOUNDEX||LA158_0==SPACE||LA158_0==SQRT||(LA158_0 >= STD && LA158_0 <= STDDEV_SAMP)||LA158_0==STRCMP||LA158_0==STR_TO_DATE||(LA158_0 >= SUBSTRING && LA158_0 <= SUM)||(LA158_0 >= SYSDATE && LA158_0 <= SYSTEM_USER)||LA158_0==TAN||LA158_0==TEXT_STRING||(LA158_0 >= TIMEDIFF && LA158_0 <= TIME_TO_SEC)||(LA158_0 >= TO_BASE64 && LA158_0 <= TO_SECONDS)||(LA158_0 >= TRIM && LA158_0 <= TRUNCATE)||LA158_0==UNHEX||LA158_0==UNIX_TIMESTAMP||LA158_0==UPPER||(LA158_0 >= USER && LA158_0 <= USER_VAR)||(LA158_0 >= UTC_DATE && LA158_0 <= UTC_TIMESTAMP)||LA158_0==UUID||LA158_0==VALUES||LA158_0==VARIANCE||(LA158_0 >= VAR_POP && LA158_0 <= VERSION_SYM)||(LA158_0 >= WEEK && LA158_0 <= WEIGHT_STRING)||(LA158_0 >= YEAR && LA158_0 <= YEARWEEK)) ) {
						alt158=1;
					}
					switch (alt158) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1665:37: bit_expr ( COMMA bit_expr )*
							{
							pushFollow(FOLLOW_bit_expr_in_call_statement25270);
							bit_expr516=bit_expr();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr516.getTree());

							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1665:46: ( COMMA bit_expr )*
							loop157:
							while (true) {
								int alt157=2;
								int LA157_0 = input.LA(1);
								if ( (LA157_0==COMMA) ) {
									alt157=1;
								}

								switch (alt157) {
								case 1 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1665:47: COMMA bit_expr
									{
									COMMA517=(Token)match(input,COMMA,FOLLOW_COMMA_in_call_statement25273); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									COMMA517_tree = (CommonTree)adaptor.create(COMMA517);
									adaptor.addChild(root_0, COMMA517_tree);
									}

									pushFollow(FOLLOW_bit_expr_in_call_statement25275);
									bit_expr518=bit_expr();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr518.getTree());

									}
									break;

								default :
									break loop157;
								}
							}

							}
							break;

					}

					RPAREN519=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_call_statement25282); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN519_tree = (CommonTree)adaptor.create(RPAREN519);
					adaptor.addChild(root_0, RPAREN519_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "call_statement"


	public static class do_statement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "do_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1674:1: do_statement : DO_SYM root_statement ( COMMA root_statement )* ;
	public final SQLParser.do_statement_return do_statement() throws RecognitionException {
		SQLParser.do_statement_return retval = new SQLParser.do_statement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token DO_SYM520=null;
		Token COMMA522=null;
		ParserRuleReturnScope root_statement521 =null;
		ParserRuleReturnScope root_statement523 =null;

		CommonTree DO_SYM520_tree=null;
		CommonTree COMMA522_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1674:13: ( DO_SYM root_statement ( COMMA root_statement )* )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1675:3: DO_SYM root_statement ( COMMA root_statement )*
			{
			root_0 = (CommonTree)adaptor.nil();


			DO_SYM520=(Token)match(input,DO_SYM,FOLLOW_DO_SYM_in_do_statement25300); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DO_SYM520_tree = (CommonTree)adaptor.create(DO_SYM520);
			adaptor.addChild(root_0, DO_SYM520_tree);
			}

			pushFollow(FOLLOW_root_statement_in_do_statement25302);
			root_statement521=root_statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, root_statement521.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1675:25: ( COMMA root_statement )*
			loop160:
			while (true) {
				int alt160=2;
				int LA160_0 = input.LA(1);
				if ( (LA160_0==COMMA) ) {
					int LA160_2 = input.LA(2);
					if ( (synpred489_SQL()) ) {
						alt160=1;
					}

				}

				switch (alt160) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1675:26: COMMA root_statement
					{
					COMMA522=(Token)match(input,COMMA,FOLLOW_COMMA_in_do_statement25305); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA522_tree = (CommonTree)adaptor.create(COMMA522);
					adaptor.addChild(root_0, COMMA522_tree);
					}

					pushFollow(FOLLOW_root_statement_in_do_statement25307);
					root_statement523=root_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, root_statement523.getTree());

					}
					break;

				default :
					break loop160;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "do_statement"


	public static class handler_statements_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "handler_statements"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1684:1: handler_statements : HANDLER_SYM table_name ( open_handler_statement | handler_statement1 | handler_statement2 | handler_statement3 | close_handler_statement ) ;
	public final SQLParser.handler_statements_return handler_statements() throws RecognitionException {
		SQLParser.handler_statements_return retval = new SQLParser.handler_statements_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token HANDLER_SYM524=null;
		ParserRuleReturnScope table_name525 =null;
		ParserRuleReturnScope open_handler_statement526 =null;
		ParserRuleReturnScope handler_statement1527 =null;
		ParserRuleReturnScope handler_statement2528 =null;
		ParserRuleReturnScope handler_statement3529 =null;
		ParserRuleReturnScope close_handler_statement530 =null;

		CommonTree HANDLER_SYM524_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1684:19: ( HANDLER_SYM table_name ( open_handler_statement | handler_statement1 | handler_statement2 | handler_statement3 | close_handler_statement ) )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1685:3: HANDLER_SYM table_name ( open_handler_statement | handler_statement1 | handler_statement2 | handler_statement3 | close_handler_statement )
			{
			root_0 = (CommonTree)adaptor.nil();


			HANDLER_SYM524=(Token)match(input,HANDLER_SYM,FOLLOW_HANDLER_SYM_in_handler_statements25325); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			HANDLER_SYM524_tree = (CommonTree)adaptor.create(HANDLER_SYM524);
			adaptor.addChild(root_0, HANDLER_SYM524_tree);
			}

			pushFollow(FOLLOW_table_name_in_handler_statements25327);
			table_name525=table_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name525.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1686:3: ( open_handler_statement | handler_statement1 | handler_statement2 | handler_statement3 | close_handler_statement )
			int alt161=5;
			switch ( input.LA(1) ) {
			case OPEN_SYM:
				{
				alt161=1;
				}
				break;
			case READ_SYM:
				{
				int LA161_2 = input.LA(2);
				if ( (LA161_2==FIRST_SYM||LA161_2==NEXT_SYM) ) {
					alt161=4;
				}
				else if ( (LA161_2==ID) ) {
					int LA161_5 = input.LA(3);
					if ( (LA161_5==EQ_SYM||LA161_5==GET||LA161_5==GTH||LA161_5==LET||LA161_5==LTH||LA161_5==NOT_EQ) ) {
						alt161=2;
					}
					else if ( (LA161_5==FIRST_SYM||LA161_5==LAST_SYM||LA161_5==NEXT_SYM||LA161_5==PREV_SYM) ) {
						alt161=3;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 161, 5, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 161, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CLOSE_SYM:
				{
				alt161=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 161, 0, input);
				throw nvae;
			}
			switch (alt161) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1686:4: open_handler_statement
					{
					pushFollow(FOLLOW_open_handler_statement_in_handler_statements25332);
					open_handler_statement526=open_handler_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, open_handler_statement526.getTree());

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1686:29: handler_statement1
					{
					pushFollow(FOLLOW_handler_statement1_in_handler_statements25336);
					handler_statement1527=handler_statement1();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, handler_statement1527.getTree());

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1686:50: handler_statement2
					{
					pushFollow(FOLLOW_handler_statement2_in_handler_statements25340);
					handler_statement2528=handler_statement2();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, handler_statement2528.getTree());

					}
					break;
				case 4 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1686:71: handler_statement3
					{
					pushFollow(FOLLOW_handler_statement3_in_handler_statements25344);
					handler_statement3529=handler_statement3();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, handler_statement3529.getTree());

					}
					break;
				case 5 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1686:92: close_handler_statement
					{
					pushFollow(FOLLOW_close_handler_statement_in_handler_statements25348);
					close_handler_statement530=close_handler_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, close_handler_statement530.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "handler_statements"


	public static class open_handler_statement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "open_handler_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1689:1: open_handler_statement : OPEN_SYM ( alias )? ;
	public final SQLParser.open_handler_statement_return open_handler_statement() throws RecognitionException {
		SQLParser.open_handler_statement_return retval = new SQLParser.open_handler_statement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token OPEN_SYM531=null;
		ParserRuleReturnScope alias532 =null;

		CommonTree OPEN_SYM531_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1689:23: ( OPEN_SYM ( alias )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1690:3: OPEN_SYM ( alias )?
			{
			root_0 = (CommonTree)adaptor.nil();


			OPEN_SYM531=(Token)match(input,OPEN_SYM,FOLLOW_OPEN_SYM_in_open_handler_statement25359); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			OPEN_SYM531_tree = (CommonTree)adaptor.create(OPEN_SYM531);
			adaptor.addChild(root_0, OPEN_SYM531_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1690:12: ( alias )?
			int alt162=2;
			int LA162_0 = input.LA(1);
			if ( (LA162_0==AS_SYM||LA162_0==ID) ) {
				alt162=1;
			}
			switch (alt162) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1690:13: alias
					{
					pushFollow(FOLLOW_alias_in_open_handler_statement25362);
					alias532=alias();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alias532.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "open_handler_statement"


	public static class handler_statement1_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "handler_statement1"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1693:1: handler_statement1 : READ_SYM index_name relational_op LPAREN bit_expr ( COMMA bit_expr )* RPAREN ( where_clause )? ( limit_clause )? ;
	public final SQLParser.handler_statement1_return handler_statement1() throws RecognitionException {
		SQLParser.handler_statement1_return retval = new SQLParser.handler_statement1_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token READ_SYM533=null;
		Token LPAREN536=null;
		Token COMMA538=null;
		Token RPAREN540=null;
		ParserRuleReturnScope index_name534 =null;
		ParserRuleReturnScope relational_op535 =null;
		ParserRuleReturnScope bit_expr537 =null;
		ParserRuleReturnScope bit_expr539 =null;
		ParserRuleReturnScope where_clause541 =null;
		ParserRuleReturnScope limit_clause542 =null;

		CommonTree READ_SYM533_tree=null;
		CommonTree LPAREN536_tree=null;
		CommonTree COMMA538_tree=null;
		CommonTree RPAREN540_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1693:19: ( READ_SYM index_name relational_op LPAREN bit_expr ( COMMA bit_expr )* RPAREN ( where_clause )? ( limit_clause )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1694:3: READ_SYM index_name relational_op LPAREN bit_expr ( COMMA bit_expr )* RPAREN ( where_clause )? ( limit_clause )?
			{
			root_0 = (CommonTree)adaptor.nil();


			READ_SYM533=(Token)match(input,READ_SYM,FOLLOW_READ_SYM_in_handler_statement125374); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			READ_SYM533_tree = (CommonTree)adaptor.create(READ_SYM533);
			adaptor.addChild(root_0, READ_SYM533_tree);
			}

			pushFollow(FOLLOW_index_name_in_handler_statement125376);
			index_name534=index_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name534.getTree());

			pushFollow(FOLLOW_relational_op_in_handler_statement125378);
			relational_op535=relational_op();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, relational_op535.getTree());

			LPAREN536=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_handler_statement125380); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN536_tree = (CommonTree)adaptor.create(LPAREN536);
			adaptor.addChild(root_0, LPAREN536_tree);
			}

			pushFollow(FOLLOW_bit_expr_in_handler_statement125382);
			bit_expr537=bit_expr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr537.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1694:53: ( COMMA bit_expr )*
			loop163:
			while (true) {
				int alt163=2;
				int LA163_0 = input.LA(1);
				if ( (LA163_0==COMMA) ) {
					alt163=1;
				}

				switch (alt163) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1694:54: COMMA bit_expr
					{
					COMMA538=(Token)match(input,COMMA,FOLLOW_COMMA_in_handler_statement125385); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA538_tree = (CommonTree)adaptor.create(COMMA538);
					adaptor.addChild(root_0, COMMA538_tree);
					}

					pushFollow(FOLLOW_bit_expr_in_handler_statement125387);
					bit_expr539=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr539.getTree());

					}
					break;

				default :
					break loop163;
				}
			}

			RPAREN540=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_handler_statement125391); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN540_tree = (CommonTree)adaptor.create(RPAREN540);
			adaptor.addChild(root_0, RPAREN540_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1695:3: ( where_clause )?
			int alt164=2;
			int LA164_0 = input.LA(1);
			if ( (LA164_0==WHERE) ) {
				alt164=1;
			}
			switch (alt164) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1695:4: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_handler_statement125396);
					where_clause541=where_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, where_clause541.getTree());

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1695:19: ( limit_clause )?
			int alt165=2;
			int LA165_0 = input.LA(1);
			if ( (LA165_0==INTEGER_NUM||LA165_0==LIMIT) ) {
				alt165=1;
			}
			switch (alt165) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1695:20: limit_clause
					{
					pushFollow(FOLLOW_limit_clause_in_handler_statement125401);
					limit_clause542=limit_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, limit_clause542.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "handler_statement1"


	public static class handler_statement2_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "handler_statement2"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1698:1: handler_statement2 : READ_SYM index_name ( FIRST_SYM | NEXT_SYM | PREV_SYM | LAST_SYM ) ( where_clause )? ( limit_clause )? ;
	public final SQLParser.handler_statement2_return handler_statement2() throws RecognitionException {
		SQLParser.handler_statement2_return retval = new SQLParser.handler_statement2_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token READ_SYM543=null;
		Token set545=null;
		ParserRuleReturnScope index_name544 =null;
		ParserRuleReturnScope where_clause546 =null;
		ParserRuleReturnScope limit_clause547 =null;

		CommonTree READ_SYM543_tree=null;
		CommonTree set545_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1698:19: ( READ_SYM index_name ( FIRST_SYM | NEXT_SYM | PREV_SYM | LAST_SYM ) ( where_clause )? ( limit_clause )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1699:3: READ_SYM index_name ( FIRST_SYM | NEXT_SYM | PREV_SYM | LAST_SYM ) ( where_clause )? ( limit_clause )?
			{
			root_0 = (CommonTree)adaptor.nil();


			READ_SYM543=(Token)match(input,READ_SYM,FOLLOW_READ_SYM_in_handler_statement225413); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			READ_SYM543_tree = (CommonTree)adaptor.create(READ_SYM543);
			adaptor.addChild(root_0, READ_SYM543_tree);
			}

			pushFollow(FOLLOW_index_name_in_handler_statement225415);
			index_name544=index_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name544.getTree());

			set545=input.LT(1);
			if ( input.LA(1)==FIRST_SYM||input.LA(1)==LAST_SYM||input.LA(1)==NEXT_SYM||input.LA(1)==PREV_SYM ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set545));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1700:3: ( where_clause )?
			int alt166=2;
			int LA166_0 = input.LA(1);
			if ( (LA166_0==WHERE) ) {
				alt166=1;
			}
			switch (alt166) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1700:4: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_handler_statement225436);
					where_clause546=where_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, where_clause546.getTree());

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1700:19: ( limit_clause )?
			int alt167=2;
			int LA167_0 = input.LA(1);
			if ( (LA167_0==INTEGER_NUM||LA167_0==LIMIT) ) {
				alt167=1;
			}
			switch (alt167) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1700:20: limit_clause
					{
					pushFollow(FOLLOW_limit_clause_in_handler_statement225441);
					limit_clause547=limit_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, limit_clause547.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "handler_statement2"


	public static class handler_statement3_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "handler_statement3"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1703:1: handler_statement3 : READ_SYM ( FIRST_SYM | NEXT_SYM ) ( where_clause )? ( limit_clause )? ;
	public final SQLParser.handler_statement3_return handler_statement3() throws RecognitionException {
		SQLParser.handler_statement3_return retval = new SQLParser.handler_statement3_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token READ_SYM548=null;
		Token set549=null;
		ParserRuleReturnScope where_clause550 =null;
		ParserRuleReturnScope limit_clause551 =null;

		CommonTree READ_SYM548_tree=null;
		CommonTree set549_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1703:19: ( READ_SYM ( FIRST_SYM | NEXT_SYM ) ( where_clause )? ( limit_clause )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1704:3: READ_SYM ( FIRST_SYM | NEXT_SYM ) ( where_clause )? ( limit_clause )?
			{
			root_0 = (CommonTree)adaptor.nil();


			READ_SYM548=(Token)match(input,READ_SYM,FOLLOW_READ_SYM_in_handler_statement325453); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			READ_SYM548_tree = (CommonTree)adaptor.create(READ_SYM548);
			adaptor.addChild(root_0, READ_SYM548_tree);
			}

			set549=input.LT(1);
			if ( input.LA(1)==FIRST_SYM||input.LA(1)==NEXT_SYM ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set549));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1705:3: ( where_clause )?
			int alt168=2;
			int LA168_0 = input.LA(1);
			if ( (LA168_0==WHERE) ) {
				alt168=1;
			}
			switch (alt168) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1705:4: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_handler_statement325466);
					where_clause550=where_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, where_clause550.getTree());

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1705:19: ( limit_clause )?
			int alt169=2;
			int LA169_0 = input.LA(1);
			if ( (LA169_0==INTEGER_NUM||LA169_0==LIMIT) ) {
				alt169=1;
			}
			switch (alt169) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1705:20: limit_clause
					{
					pushFollow(FOLLOW_limit_clause_in_handler_statement325471);
					limit_clause551=limit_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, limit_clause551.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "handler_statement3"


	public static class close_handler_statement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "close_handler_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1708:1: close_handler_statement : CLOSE_SYM ;
	public final SQLParser.close_handler_statement_return close_handler_statement() throws RecognitionException {
		SQLParser.close_handler_statement_return retval = new SQLParser.close_handler_statement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token CLOSE_SYM552=null;

		CommonTree CLOSE_SYM552_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1708:24: ( CLOSE_SYM )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1709:3: CLOSE_SYM
			{
			root_0 = (CommonTree)adaptor.nil();


			CLOSE_SYM552=(Token)match(input,CLOSE_SYM,FOLLOW_CLOSE_SYM_in_close_handler_statement25483); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			CLOSE_SYM552_tree = (CommonTree)adaptor.create(CLOSE_SYM552);
			adaptor.addChild(root_0, CLOSE_SYM552_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "close_handler_statement"


	public static class load_data_statement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "load_data_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1719:1: load_data_statement : LOAD DATA_SYM ( LOW_PRIORITY | CONCURRENT )? ( LOCAL_SYM )? INFILE TEXT_STRING ( REPLACE | IGNORE_SYM )? INTO TABLE table_spec ( partition_clause )? ( CHARACTER_SYM SET_SYM charset_name )? ( ( FIELDS_SYM | COLUMNS_SYM ) ( TERMINATED BY_SYM TEXT_STRING )? ( ( OPTIONALLY )? ENCLOSED BY_SYM TEXT_STRING )? ( ESCAPED BY_SYM TEXT_STRING )? )? ( LINES ( STARTING BY_SYM TEXT_STRING )? ( TERMINATED BY_SYM TEXT_STRING )? )? ( IGNORE_SYM INTEGER_NUM ( LINES | ROWS_SYM ) )? ( LPAREN ( column_spec | USER_VAR ) ( COMMA ( column_spec | USER_VAR ) )* RPAREN )? ( set_columns_cluase )? ;
	public final SQLParser.load_data_statement_return load_data_statement() throws RecognitionException {
		SQLParser.load_data_statement_return retval = new SQLParser.load_data_statement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LOAD553=null;
		Token DATA_SYM554=null;
		Token set555=null;
		Token LOCAL_SYM556=null;
		Token INFILE557=null;
		Token TEXT_STRING558=null;
		Token set559=null;
		Token INTO560=null;
		Token TABLE561=null;
		Token CHARACTER_SYM564=null;
		Token SET_SYM565=null;
		Token set567=null;
		Token TERMINATED568=null;
		Token BY_SYM569=null;
		Token TEXT_STRING570=null;
		Token OPTIONALLY571=null;
		Token ENCLOSED572=null;
		Token BY_SYM573=null;
		Token TEXT_STRING574=null;
		Token ESCAPED575=null;
		Token BY_SYM576=null;
		Token TEXT_STRING577=null;
		Token LINES578=null;
		Token STARTING579=null;
		Token BY_SYM580=null;
		Token TEXT_STRING581=null;
		Token TERMINATED582=null;
		Token BY_SYM583=null;
		Token TEXT_STRING584=null;
		Token IGNORE_SYM585=null;
		Token INTEGER_NUM586=null;
		Token set587=null;
		Token LPAREN588=null;
		Token USER_VAR590=null;
		Token COMMA591=null;
		Token USER_VAR593=null;
		Token RPAREN594=null;
		ParserRuleReturnScope table_spec562 =null;
		ParserRuleReturnScope partition_clause563 =null;
		ParserRuleReturnScope charset_name566 =null;
		ParserRuleReturnScope column_spec589 =null;
		ParserRuleReturnScope column_spec592 =null;
		ParserRuleReturnScope set_columns_cluase595 =null;

		CommonTree LOAD553_tree=null;
		CommonTree DATA_SYM554_tree=null;
		CommonTree set555_tree=null;
		CommonTree LOCAL_SYM556_tree=null;
		CommonTree INFILE557_tree=null;
		CommonTree TEXT_STRING558_tree=null;
		CommonTree set559_tree=null;
		CommonTree INTO560_tree=null;
		CommonTree TABLE561_tree=null;
		CommonTree CHARACTER_SYM564_tree=null;
		CommonTree SET_SYM565_tree=null;
		CommonTree set567_tree=null;
		CommonTree TERMINATED568_tree=null;
		CommonTree BY_SYM569_tree=null;
		CommonTree TEXT_STRING570_tree=null;
		CommonTree OPTIONALLY571_tree=null;
		CommonTree ENCLOSED572_tree=null;
		CommonTree BY_SYM573_tree=null;
		CommonTree TEXT_STRING574_tree=null;
		CommonTree ESCAPED575_tree=null;
		CommonTree BY_SYM576_tree=null;
		CommonTree TEXT_STRING577_tree=null;
		CommonTree LINES578_tree=null;
		CommonTree STARTING579_tree=null;
		CommonTree BY_SYM580_tree=null;
		CommonTree TEXT_STRING581_tree=null;
		CommonTree TERMINATED582_tree=null;
		CommonTree BY_SYM583_tree=null;
		CommonTree TEXT_STRING584_tree=null;
		CommonTree IGNORE_SYM585_tree=null;
		CommonTree INTEGER_NUM586_tree=null;
		CommonTree set587_tree=null;
		CommonTree LPAREN588_tree=null;
		CommonTree USER_VAR590_tree=null;
		CommonTree COMMA591_tree=null;
		CommonTree USER_VAR593_tree=null;
		CommonTree RPAREN594_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1719:20: ( LOAD DATA_SYM ( LOW_PRIORITY | CONCURRENT )? ( LOCAL_SYM )? INFILE TEXT_STRING ( REPLACE | IGNORE_SYM )? INTO TABLE table_spec ( partition_clause )? ( CHARACTER_SYM SET_SYM charset_name )? ( ( FIELDS_SYM | COLUMNS_SYM ) ( TERMINATED BY_SYM TEXT_STRING )? ( ( OPTIONALLY )? ENCLOSED BY_SYM TEXT_STRING )? ( ESCAPED BY_SYM TEXT_STRING )? )? ( LINES ( STARTING BY_SYM TEXT_STRING )? ( TERMINATED BY_SYM TEXT_STRING )? )? ( IGNORE_SYM INTEGER_NUM ( LINES | ROWS_SYM ) )? ( LPAREN ( column_spec | USER_VAR ) ( COMMA ( column_spec | USER_VAR ) )* RPAREN )? ( set_columns_cluase )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1720:3: LOAD DATA_SYM ( LOW_PRIORITY | CONCURRENT )? ( LOCAL_SYM )? INFILE TEXT_STRING ( REPLACE | IGNORE_SYM )? INTO TABLE table_spec ( partition_clause )? ( CHARACTER_SYM SET_SYM charset_name )? ( ( FIELDS_SYM | COLUMNS_SYM ) ( TERMINATED BY_SYM TEXT_STRING )? ( ( OPTIONALLY )? ENCLOSED BY_SYM TEXT_STRING )? ( ESCAPED BY_SYM TEXT_STRING )? )? ( LINES ( STARTING BY_SYM TEXT_STRING )? ( TERMINATED BY_SYM TEXT_STRING )? )? ( IGNORE_SYM INTEGER_NUM ( LINES | ROWS_SYM ) )? ( LPAREN ( column_spec | USER_VAR ) ( COMMA ( column_spec | USER_VAR ) )* RPAREN )? ( set_columns_cluase )?
			{
			root_0 = (CommonTree)adaptor.nil();


			LOAD553=(Token)match(input,LOAD,FOLLOW_LOAD_in_load_data_statement25500); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LOAD553_tree = (CommonTree)adaptor.create(LOAD553);
			adaptor.addChild(root_0, LOAD553_tree);
			}

			DATA_SYM554=(Token)match(input,DATA_SYM,FOLLOW_DATA_SYM_in_load_data_statement25502); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DATA_SYM554_tree = (CommonTree)adaptor.create(DATA_SYM554);
			adaptor.addChild(root_0, DATA_SYM554_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1720:17: ( LOW_PRIORITY | CONCURRENT )?
			int alt170=2;
			int LA170_0 = input.LA(1);
			if ( (LA170_0==CONCURRENT||LA170_0==LOW_PRIORITY) ) {
				alt170=1;
			}
			switch (alt170) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
					{
					set555=input.LT(1);
					if ( input.LA(1)==CONCURRENT||input.LA(1)==LOW_PRIORITY ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set555));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1720:46: ( LOCAL_SYM )?
			int alt171=2;
			int LA171_0 = input.LA(1);
			if ( (LA171_0==LOCAL_SYM) ) {
				alt171=1;
			}
			switch (alt171) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1720:47: LOCAL_SYM
					{
					LOCAL_SYM556=(Token)match(input,LOCAL_SYM,FOLLOW_LOCAL_SYM_in_load_data_statement25514); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LOCAL_SYM556_tree = (CommonTree)adaptor.create(LOCAL_SYM556);
					adaptor.addChild(root_0, LOCAL_SYM556_tree);
					}

					}
					break;

			}

			INFILE557=(Token)match(input,INFILE,FOLLOW_INFILE_in_load_data_statement25518); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			INFILE557_tree = (CommonTree)adaptor.create(INFILE557);
			adaptor.addChild(root_0, INFILE557_tree);
			}

			TEXT_STRING558=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_load_data_statement25520); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			TEXT_STRING558_tree = (CommonTree)adaptor.create(TEXT_STRING558);
			adaptor.addChild(root_0, TEXT_STRING558_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1721:3: ( REPLACE | IGNORE_SYM )?
			int alt172=2;
			int LA172_0 = input.LA(1);
			if ( (LA172_0==IGNORE_SYM||LA172_0==REPLACE) ) {
				alt172=1;
			}
			switch (alt172) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
					{
					set559=input.LT(1);
					if ( input.LA(1)==IGNORE_SYM||input.LA(1)==REPLACE ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set559));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			INTO560=(Token)match(input,INTO,FOLLOW_INTO_in_load_data_statement25535); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			INTO560_tree = (CommonTree)adaptor.create(INTO560);
			adaptor.addChild(root_0, INTO560_tree);
			}

			TABLE561=(Token)match(input,TABLE,FOLLOW_TABLE_in_load_data_statement25537); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			TABLE561_tree = (CommonTree)adaptor.create(TABLE561);
			adaptor.addChild(root_0, TABLE561_tree);
			}

			pushFollow(FOLLOW_table_spec_in_load_data_statement25539);
			table_spec562=table_spec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_spec562.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1723:3: ( partition_clause )?
			int alt173=2;
			int LA173_0 = input.LA(1);
			if ( (LA173_0==PARTITION_SYM) ) {
				alt173=1;
			}
			switch (alt173) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1723:4: partition_clause
					{
					pushFollow(FOLLOW_partition_clause_in_load_data_statement25544);
					partition_clause563=partition_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_clause563.getTree());

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1724:3: ( CHARACTER_SYM SET_SYM charset_name )?
			int alt174=2;
			int LA174_0 = input.LA(1);
			if ( (LA174_0==CHARACTER_SYM) ) {
				alt174=1;
			}
			switch (alt174) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1724:4: CHARACTER_SYM SET_SYM charset_name
					{
					CHARACTER_SYM564=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_load_data_statement25551); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CHARACTER_SYM564_tree = (CommonTree)adaptor.create(CHARACTER_SYM564);
					adaptor.addChild(root_0, CHARACTER_SYM564_tree);
					}

					SET_SYM565=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_load_data_statement25553); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SET_SYM565_tree = (CommonTree)adaptor.create(SET_SYM565);
					adaptor.addChild(root_0, SET_SYM565_tree);
					}

					pushFollow(FOLLOW_charset_name_in_load_data_statement25555);
					charset_name566=charset_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name566.getTree());

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1725:3: ( ( FIELDS_SYM | COLUMNS_SYM ) ( TERMINATED BY_SYM TEXT_STRING )? ( ( OPTIONALLY )? ENCLOSED BY_SYM TEXT_STRING )? ( ESCAPED BY_SYM TEXT_STRING )? )?
			int alt179=2;
			int LA179_0 = input.LA(1);
			if ( (LA179_0==COLUMNS_SYM||LA179_0==FIELDS_SYM) ) {
				alt179=1;
			}
			switch (alt179) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1726:5: ( FIELDS_SYM | COLUMNS_SYM ) ( TERMINATED BY_SYM TEXT_STRING )? ( ( OPTIONALLY )? ENCLOSED BY_SYM TEXT_STRING )? ( ESCAPED BY_SYM TEXT_STRING )?
					{
					set567=input.LT(1);
					if ( input.LA(1)==COLUMNS_SYM||input.LA(1)==FIELDS_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set567));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1727:5: ( TERMINATED BY_SYM TEXT_STRING )?
					int alt175=2;
					int LA175_0 = input.LA(1);
					if ( (LA175_0==TERMINATED) ) {
						alt175=1;
					}
					switch (alt175) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1727:6: TERMINATED BY_SYM TEXT_STRING
							{
							TERMINATED568=(Token)match(input,TERMINATED,FOLLOW_TERMINATED_in_load_data_statement25580); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TERMINATED568_tree = (CommonTree)adaptor.create(TERMINATED568);
							adaptor.addChild(root_0, TERMINATED568_tree);
							}

							BY_SYM569=(Token)match(input,BY_SYM,FOLLOW_BY_SYM_in_load_data_statement25582); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							BY_SYM569_tree = (CommonTree)adaptor.create(BY_SYM569);
							adaptor.addChild(root_0, BY_SYM569_tree);
							}

							TEXT_STRING570=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_load_data_statement25584); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TEXT_STRING570_tree = (CommonTree)adaptor.create(TEXT_STRING570);
							adaptor.addChild(root_0, TEXT_STRING570_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1728:5: ( ( OPTIONALLY )? ENCLOSED BY_SYM TEXT_STRING )?
					int alt177=2;
					int LA177_0 = input.LA(1);
					if ( (LA177_0==ENCLOSED||LA177_0==OPTIONALLY) ) {
						alt177=1;
					}
					switch (alt177) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1728:6: ( OPTIONALLY )? ENCLOSED BY_SYM TEXT_STRING
							{
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1728:6: ( OPTIONALLY )?
							int alt176=2;
							int LA176_0 = input.LA(1);
							if ( (LA176_0==OPTIONALLY) ) {
								alt176=1;
							}
							switch (alt176) {
								case 1 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1728:7: OPTIONALLY
									{
									OPTIONALLY571=(Token)match(input,OPTIONALLY,FOLLOW_OPTIONALLY_in_load_data_statement25594); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									OPTIONALLY571_tree = (CommonTree)adaptor.create(OPTIONALLY571);
									adaptor.addChild(root_0, OPTIONALLY571_tree);
									}

									}
									break;

							}

							ENCLOSED572=(Token)match(input,ENCLOSED,FOLLOW_ENCLOSED_in_load_data_statement25598); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ENCLOSED572_tree = (CommonTree)adaptor.create(ENCLOSED572);
							adaptor.addChild(root_0, ENCLOSED572_tree);
							}

							BY_SYM573=(Token)match(input,BY_SYM,FOLLOW_BY_SYM_in_load_data_statement25600); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							BY_SYM573_tree = (CommonTree)adaptor.create(BY_SYM573);
							adaptor.addChild(root_0, BY_SYM573_tree);
							}

							TEXT_STRING574=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_load_data_statement25602); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TEXT_STRING574_tree = (CommonTree)adaptor.create(TEXT_STRING574);
							adaptor.addChild(root_0, TEXT_STRING574_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1729:5: ( ESCAPED BY_SYM TEXT_STRING )?
					int alt178=2;
					int LA178_0 = input.LA(1);
					if ( (LA178_0==ESCAPED) ) {
						alt178=1;
					}
					switch (alt178) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1729:6: ESCAPED BY_SYM TEXT_STRING
							{
							ESCAPED575=(Token)match(input,ESCAPED,FOLLOW_ESCAPED_in_load_data_statement25611); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ESCAPED575_tree = (CommonTree)adaptor.create(ESCAPED575);
							adaptor.addChild(root_0, ESCAPED575_tree);
							}

							BY_SYM576=(Token)match(input,BY_SYM,FOLLOW_BY_SYM_in_load_data_statement25613); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							BY_SYM576_tree = (CommonTree)adaptor.create(BY_SYM576);
							adaptor.addChild(root_0, BY_SYM576_tree);
							}

							TEXT_STRING577=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_load_data_statement25615); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TEXT_STRING577_tree = (CommonTree)adaptor.create(TEXT_STRING577);
							adaptor.addChild(root_0, TEXT_STRING577_tree);
							}

							}
							break;

					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1731:3: ( LINES ( STARTING BY_SYM TEXT_STRING )? ( TERMINATED BY_SYM TEXT_STRING )? )?
			int alt182=2;
			int LA182_0 = input.LA(1);
			if ( (LA182_0==LINES) ) {
				alt182=1;
			}
			switch (alt182) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1732:5: LINES ( STARTING BY_SYM TEXT_STRING )? ( TERMINATED BY_SYM TEXT_STRING )?
					{
					LINES578=(Token)match(input,LINES,FOLLOW_LINES_in_load_data_statement25632); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LINES578_tree = (CommonTree)adaptor.create(LINES578);
					adaptor.addChild(root_0, LINES578_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1733:5: ( STARTING BY_SYM TEXT_STRING )?
					int alt180=2;
					int LA180_0 = input.LA(1);
					if ( (LA180_0==STARTING) ) {
						alt180=1;
					}
					switch (alt180) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1733:6: STARTING BY_SYM TEXT_STRING
							{
							STARTING579=(Token)match(input,STARTING,FOLLOW_STARTING_in_load_data_statement25639); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							STARTING579_tree = (CommonTree)adaptor.create(STARTING579);
							adaptor.addChild(root_0, STARTING579_tree);
							}

							BY_SYM580=(Token)match(input,BY_SYM,FOLLOW_BY_SYM_in_load_data_statement25641); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							BY_SYM580_tree = (CommonTree)adaptor.create(BY_SYM580);
							adaptor.addChild(root_0, BY_SYM580_tree);
							}

							TEXT_STRING581=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_load_data_statement25643); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TEXT_STRING581_tree = (CommonTree)adaptor.create(TEXT_STRING581);
							adaptor.addChild(root_0, TEXT_STRING581_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1734:5: ( TERMINATED BY_SYM TEXT_STRING )?
					int alt181=2;
					int LA181_0 = input.LA(1);
					if ( (LA181_0==TERMINATED) ) {
						alt181=1;
					}
					switch (alt181) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1734:6: TERMINATED BY_SYM TEXT_STRING
							{
							TERMINATED582=(Token)match(input,TERMINATED,FOLLOW_TERMINATED_in_load_data_statement25652); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TERMINATED582_tree = (CommonTree)adaptor.create(TERMINATED582);
							adaptor.addChild(root_0, TERMINATED582_tree);
							}

							BY_SYM583=(Token)match(input,BY_SYM,FOLLOW_BY_SYM_in_load_data_statement25654); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							BY_SYM583_tree = (CommonTree)adaptor.create(BY_SYM583);
							adaptor.addChild(root_0, BY_SYM583_tree);
							}

							TEXT_STRING584=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_load_data_statement25656); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TEXT_STRING584_tree = (CommonTree)adaptor.create(TEXT_STRING584);
							adaptor.addChild(root_0, TEXT_STRING584_tree);
							}

							}
							break;

					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1736:3: ( IGNORE_SYM INTEGER_NUM ( LINES | ROWS_SYM ) )?
			int alt183=2;
			int LA183_0 = input.LA(1);
			if ( (LA183_0==IGNORE_SYM) ) {
				alt183=1;
			}
			switch (alt183) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1736:4: IGNORE_SYM INTEGER_NUM ( LINES | ROWS_SYM )
					{
					IGNORE_SYM585=(Token)match(input,IGNORE_SYM,FOLLOW_IGNORE_SYM_in_load_data_statement25668); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IGNORE_SYM585_tree = (CommonTree)adaptor.create(IGNORE_SYM585);
					adaptor.addChild(root_0, IGNORE_SYM585_tree);
					}

					INTEGER_NUM586=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_load_data_statement25670); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM586_tree = (CommonTree)adaptor.create(INTEGER_NUM586);
					adaptor.addChild(root_0, INTEGER_NUM586_tree);
					}

					set587=input.LT(1);
					if ( input.LA(1)==LINES||input.LA(1)==ROWS_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set587));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1737:3: ( LPAREN ( column_spec | USER_VAR ) ( COMMA ( column_spec | USER_VAR ) )* RPAREN )?
			int alt187=2;
			int LA187_0 = input.LA(1);
			if ( (LA187_0==LPAREN) ) {
				alt187=1;
			}
			switch (alt187) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1737:4: LPAREN ( column_spec | USER_VAR ) ( COMMA ( column_spec | USER_VAR ) )* RPAREN
					{
					LPAREN588=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_load_data_statement25685); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN588_tree = (CommonTree)adaptor.create(LPAREN588);
					adaptor.addChild(root_0, LPAREN588_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1737:11: ( column_spec | USER_VAR )
					int alt184=2;
					int LA184_0 = input.LA(1);
					if ( (LA184_0==ID) ) {
						alt184=1;
					}
					else if ( (LA184_0==USER_VAR) ) {
						alt184=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 184, 0, input);
						throw nvae;
					}

					switch (alt184) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1737:12: column_spec
							{
							pushFollow(FOLLOW_column_spec_in_load_data_statement25688);
							column_spec589=column_spec();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec589.getTree());

							}
							break;
						case 2 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1737:24: USER_VAR
							{
							USER_VAR590=(Token)match(input,USER_VAR,FOLLOW_USER_VAR_in_load_data_statement25690); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							USER_VAR590_tree = (CommonTree)adaptor.create(USER_VAR590);
							adaptor.addChild(root_0, USER_VAR590_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1737:34: ( COMMA ( column_spec | USER_VAR ) )*
					loop186:
					while (true) {
						int alt186=2;
						int LA186_0 = input.LA(1);
						if ( (LA186_0==COMMA) ) {
							alt186=1;
						}

						switch (alt186) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1737:35: COMMA ( column_spec | USER_VAR )
							{
							COMMA591=(Token)match(input,COMMA,FOLLOW_COMMA_in_load_data_statement25694); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA591_tree = (CommonTree)adaptor.create(COMMA591);
							adaptor.addChild(root_0, COMMA591_tree);
							}

							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1737:41: ( column_spec | USER_VAR )
							int alt185=2;
							int LA185_0 = input.LA(1);
							if ( (LA185_0==ID) ) {
								alt185=1;
							}
							else if ( (LA185_0==USER_VAR) ) {
								alt185=2;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae =
									new NoViableAltException("", 185, 0, input);
								throw nvae;
							}

							switch (alt185) {
								case 1 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1737:42: column_spec
									{
									pushFollow(FOLLOW_column_spec_in_load_data_statement25697);
									column_spec592=column_spec();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec592.getTree());

									}
									break;
								case 2 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1737:54: USER_VAR
									{
									USER_VAR593=(Token)match(input,USER_VAR,FOLLOW_USER_VAR_in_load_data_statement25699); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									USER_VAR593_tree = (CommonTree)adaptor.create(USER_VAR593);
									adaptor.addChild(root_0, USER_VAR593_tree);
									}

									}
									break;

							}

							}
							break;

						default :
							break loop186;
						}
					}

					RPAREN594=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_load_data_statement25704); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN594_tree = (CommonTree)adaptor.create(RPAREN594);
					adaptor.addChild(root_0, RPAREN594_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1738:3: ( set_columns_cluase )?
			int alt188=2;
			int LA188_0 = input.LA(1);
			if ( (LA188_0==SET_SYM) ) {
				alt188=1;
			}
			switch (alt188) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1738:4: set_columns_cluase
					{
					pushFollow(FOLLOW_set_columns_cluase_in_load_data_statement25711);
					set_columns_cluase595=set_columns_cluase();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, set_columns_cluase595.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "load_data_statement"


	public static class load_xml_statement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "load_xml_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1747:1: load_xml_statement : LOAD XML_SYM ( LOW_PRIORITY | CONCURRENT )? ( LOCAL_SYM )? INFILE TEXT_STRING ( REPLACE | IGNORE_SYM )? INTO TABLE table_spec ( partition_clause )? ( CHARACTER_SYM SET_SYM charset_name )? ( ROWS_SYM IDENTIFIED_SYM BY_SYM TEXT_STRING )? ( IGNORE_SYM INTEGER_NUM ( LINES | ROWS_SYM ) )? ( LPAREN ( column_spec | USER_VAR ) ( COMMA ( column_spec | USER_VAR ) )* RPAREN )? ( set_columns_cluase )? ;
	public final SQLParser.load_xml_statement_return load_xml_statement() throws RecognitionException {
		SQLParser.load_xml_statement_return retval = new SQLParser.load_xml_statement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LOAD596=null;
		Token XML_SYM597=null;
		Token set598=null;
		Token LOCAL_SYM599=null;
		Token INFILE600=null;
		Token TEXT_STRING601=null;
		Token set602=null;
		Token INTO603=null;
		Token TABLE604=null;
		Token CHARACTER_SYM607=null;
		Token SET_SYM608=null;
		Token ROWS_SYM610=null;
		Token IDENTIFIED_SYM611=null;
		Token BY_SYM612=null;
		Token TEXT_STRING613=null;
		Token IGNORE_SYM614=null;
		Token INTEGER_NUM615=null;
		Token set616=null;
		Token LPAREN617=null;
		Token USER_VAR619=null;
		Token COMMA620=null;
		Token USER_VAR622=null;
		Token RPAREN623=null;
		ParserRuleReturnScope table_spec605 =null;
		ParserRuleReturnScope partition_clause606 =null;
		ParserRuleReturnScope charset_name609 =null;
		ParserRuleReturnScope column_spec618 =null;
		ParserRuleReturnScope column_spec621 =null;
		ParserRuleReturnScope set_columns_cluase624 =null;

		CommonTree LOAD596_tree=null;
		CommonTree XML_SYM597_tree=null;
		CommonTree set598_tree=null;
		CommonTree LOCAL_SYM599_tree=null;
		CommonTree INFILE600_tree=null;
		CommonTree TEXT_STRING601_tree=null;
		CommonTree set602_tree=null;
		CommonTree INTO603_tree=null;
		CommonTree TABLE604_tree=null;
		CommonTree CHARACTER_SYM607_tree=null;
		CommonTree SET_SYM608_tree=null;
		CommonTree ROWS_SYM610_tree=null;
		CommonTree IDENTIFIED_SYM611_tree=null;
		CommonTree BY_SYM612_tree=null;
		CommonTree TEXT_STRING613_tree=null;
		CommonTree IGNORE_SYM614_tree=null;
		CommonTree INTEGER_NUM615_tree=null;
		CommonTree set616_tree=null;
		CommonTree LPAREN617_tree=null;
		CommonTree USER_VAR619_tree=null;
		CommonTree COMMA620_tree=null;
		CommonTree USER_VAR622_tree=null;
		CommonTree RPAREN623_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1747:19: ( LOAD XML_SYM ( LOW_PRIORITY | CONCURRENT )? ( LOCAL_SYM )? INFILE TEXT_STRING ( REPLACE | IGNORE_SYM )? INTO TABLE table_spec ( partition_clause )? ( CHARACTER_SYM SET_SYM charset_name )? ( ROWS_SYM IDENTIFIED_SYM BY_SYM TEXT_STRING )? ( IGNORE_SYM INTEGER_NUM ( LINES | ROWS_SYM ) )? ( LPAREN ( column_spec | USER_VAR ) ( COMMA ( column_spec | USER_VAR ) )* RPAREN )? ( set_columns_cluase )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1748:3: LOAD XML_SYM ( LOW_PRIORITY | CONCURRENT )? ( LOCAL_SYM )? INFILE TEXT_STRING ( REPLACE | IGNORE_SYM )? INTO TABLE table_spec ( partition_clause )? ( CHARACTER_SYM SET_SYM charset_name )? ( ROWS_SYM IDENTIFIED_SYM BY_SYM TEXT_STRING )? ( IGNORE_SYM INTEGER_NUM ( LINES | ROWS_SYM ) )? ( LPAREN ( column_spec | USER_VAR ) ( COMMA ( column_spec | USER_VAR ) )* RPAREN )? ( set_columns_cluase )?
			{
			root_0 = (CommonTree)adaptor.nil();


			LOAD596=(Token)match(input,LOAD,FOLLOW_LOAD_in_load_xml_statement25729); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LOAD596_tree = (CommonTree)adaptor.create(LOAD596);
			adaptor.addChild(root_0, LOAD596_tree);
			}

			XML_SYM597=(Token)match(input,XML_SYM,FOLLOW_XML_SYM_in_load_xml_statement25731); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			XML_SYM597_tree = (CommonTree)adaptor.create(XML_SYM597);
			adaptor.addChild(root_0, XML_SYM597_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1748:16: ( LOW_PRIORITY | CONCURRENT )?
			int alt189=2;
			int LA189_0 = input.LA(1);
			if ( (LA189_0==CONCURRENT||LA189_0==LOW_PRIORITY) ) {
				alt189=1;
			}
			switch (alt189) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
					{
					set598=input.LT(1);
					if ( input.LA(1)==CONCURRENT||input.LA(1)==LOW_PRIORITY ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set598));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1748:45: ( LOCAL_SYM )?
			int alt190=2;
			int LA190_0 = input.LA(1);
			if ( (LA190_0==LOCAL_SYM) ) {
				alt190=1;
			}
			switch (alt190) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1748:46: LOCAL_SYM
					{
					LOCAL_SYM599=(Token)match(input,LOCAL_SYM,FOLLOW_LOCAL_SYM_in_load_xml_statement25743); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LOCAL_SYM599_tree = (CommonTree)adaptor.create(LOCAL_SYM599);
					adaptor.addChild(root_0, LOCAL_SYM599_tree);
					}

					}
					break;

			}

			INFILE600=(Token)match(input,INFILE,FOLLOW_INFILE_in_load_xml_statement25747); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			INFILE600_tree = (CommonTree)adaptor.create(INFILE600);
			adaptor.addChild(root_0, INFILE600_tree);
			}

			TEXT_STRING601=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_load_xml_statement25749); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			TEXT_STRING601_tree = (CommonTree)adaptor.create(TEXT_STRING601);
			adaptor.addChild(root_0, TEXT_STRING601_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1749:3: ( REPLACE | IGNORE_SYM )?
			int alt191=2;
			int LA191_0 = input.LA(1);
			if ( (LA191_0==IGNORE_SYM||LA191_0==REPLACE) ) {
				alt191=1;
			}
			switch (alt191) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
					{
					set602=input.LT(1);
					if ( input.LA(1)==IGNORE_SYM||input.LA(1)==REPLACE ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set602));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			INTO603=(Token)match(input,INTO,FOLLOW_INTO_in_load_xml_statement25764); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			INTO603_tree = (CommonTree)adaptor.create(INTO603);
			adaptor.addChild(root_0, INTO603_tree);
			}

			TABLE604=(Token)match(input,TABLE,FOLLOW_TABLE_in_load_xml_statement25766); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			TABLE604_tree = (CommonTree)adaptor.create(TABLE604);
			adaptor.addChild(root_0, TABLE604_tree);
			}

			pushFollow(FOLLOW_table_spec_in_load_xml_statement25768);
			table_spec605=table_spec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_spec605.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1751:3: ( partition_clause )?
			int alt192=2;
			int LA192_0 = input.LA(1);
			if ( (LA192_0==PARTITION_SYM) ) {
				alt192=1;
			}
			switch (alt192) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1751:4: partition_clause
					{
					pushFollow(FOLLOW_partition_clause_in_load_xml_statement25773);
					partition_clause606=partition_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_clause606.getTree());

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1752:3: ( CHARACTER_SYM SET_SYM charset_name )?
			int alt193=2;
			int LA193_0 = input.LA(1);
			if ( (LA193_0==CHARACTER_SYM) ) {
				alt193=1;
			}
			switch (alt193) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1752:4: CHARACTER_SYM SET_SYM charset_name
					{
					CHARACTER_SYM607=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_load_xml_statement25780); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CHARACTER_SYM607_tree = (CommonTree)adaptor.create(CHARACTER_SYM607);
					adaptor.addChild(root_0, CHARACTER_SYM607_tree);
					}

					SET_SYM608=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_load_xml_statement25782); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SET_SYM608_tree = (CommonTree)adaptor.create(SET_SYM608);
					adaptor.addChild(root_0, SET_SYM608_tree);
					}

					pushFollow(FOLLOW_charset_name_in_load_xml_statement25784);
					charset_name609=charset_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name609.getTree());

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1753:3: ( ROWS_SYM IDENTIFIED_SYM BY_SYM TEXT_STRING )?
			int alt194=2;
			int LA194_0 = input.LA(1);
			if ( (LA194_0==ROWS_SYM) ) {
				alt194=1;
			}
			switch (alt194) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1753:4: ROWS_SYM IDENTIFIED_SYM BY_SYM TEXT_STRING
					{
					ROWS_SYM610=(Token)match(input,ROWS_SYM,FOLLOW_ROWS_SYM_in_load_xml_statement25791); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ROWS_SYM610_tree = (CommonTree)adaptor.create(ROWS_SYM610);
					adaptor.addChild(root_0, ROWS_SYM610_tree);
					}

					IDENTIFIED_SYM611=(Token)match(input,IDENTIFIED_SYM,FOLLOW_IDENTIFIED_SYM_in_load_xml_statement25793); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IDENTIFIED_SYM611_tree = (CommonTree)adaptor.create(IDENTIFIED_SYM611);
					adaptor.addChild(root_0, IDENTIFIED_SYM611_tree);
					}

					BY_SYM612=(Token)match(input,BY_SYM,FOLLOW_BY_SYM_in_load_xml_statement25795); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BY_SYM612_tree = (CommonTree)adaptor.create(BY_SYM612);
					adaptor.addChild(root_0, BY_SYM612_tree);
					}

					TEXT_STRING613=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_load_xml_statement25797); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING613_tree = (CommonTree)adaptor.create(TEXT_STRING613);
					adaptor.addChild(root_0, TEXT_STRING613_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1754:3: ( IGNORE_SYM INTEGER_NUM ( LINES | ROWS_SYM ) )?
			int alt195=2;
			int LA195_0 = input.LA(1);
			if ( (LA195_0==IGNORE_SYM) ) {
				alt195=1;
			}
			switch (alt195) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1754:4: IGNORE_SYM INTEGER_NUM ( LINES | ROWS_SYM )
					{
					IGNORE_SYM614=(Token)match(input,IGNORE_SYM,FOLLOW_IGNORE_SYM_in_load_xml_statement25804); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IGNORE_SYM614_tree = (CommonTree)adaptor.create(IGNORE_SYM614);
					adaptor.addChild(root_0, IGNORE_SYM614_tree);
					}

					INTEGER_NUM615=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_load_xml_statement25806); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM615_tree = (CommonTree)adaptor.create(INTEGER_NUM615);
					adaptor.addChild(root_0, INTEGER_NUM615_tree);
					}

					set616=input.LT(1);
					if ( input.LA(1)==LINES||input.LA(1)==ROWS_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set616));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1755:3: ( LPAREN ( column_spec | USER_VAR ) ( COMMA ( column_spec | USER_VAR ) )* RPAREN )?
			int alt199=2;
			int LA199_0 = input.LA(1);
			if ( (LA199_0==LPAREN) ) {
				alt199=1;
			}
			switch (alt199) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1755:4: LPAREN ( column_spec | USER_VAR ) ( COMMA ( column_spec | USER_VAR ) )* RPAREN
					{
					LPAREN617=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_load_xml_statement25821); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN617_tree = (CommonTree)adaptor.create(LPAREN617);
					adaptor.addChild(root_0, LPAREN617_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1755:11: ( column_spec | USER_VAR )
					int alt196=2;
					int LA196_0 = input.LA(1);
					if ( (LA196_0==ID) ) {
						alt196=1;
					}
					else if ( (LA196_0==USER_VAR) ) {
						alt196=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 196, 0, input);
						throw nvae;
					}

					switch (alt196) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1755:12: column_spec
							{
							pushFollow(FOLLOW_column_spec_in_load_xml_statement25824);
							column_spec618=column_spec();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec618.getTree());

							}
							break;
						case 2 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1755:24: USER_VAR
							{
							USER_VAR619=(Token)match(input,USER_VAR,FOLLOW_USER_VAR_in_load_xml_statement25826); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							USER_VAR619_tree = (CommonTree)adaptor.create(USER_VAR619);
							adaptor.addChild(root_0, USER_VAR619_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1755:34: ( COMMA ( column_spec | USER_VAR ) )*
					loop198:
					while (true) {
						int alt198=2;
						int LA198_0 = input.LA(1);
						if ( (LA198_0==COMMA) ) {
							alt198=1;
						}

						switch (alt198) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1755:35: COMMA ( column_spec | USER_VAR )
							{
							COMMA620=(Token)match(input,COMMA,FOLLOW_COMMA_in_load_xml_statement25830); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA620_tree = (CommonTree)adaptor.create(COMMA620);
							adaptor.addChild(root_0, COMMA620_tree);
							}

							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1755:41: ( column_spec | USER_VAR )
							int alt197=2;
							int LA197_0 = input.LA(1);
							if ( (LA197_0==ID) ) {
								alt197=1;
							}
							else if ( (LA197_0==USER_VAR) ) {
								alt197=2;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae =
									new NoViableAltException("", 197, 0, input);
								throw nvae;
							}

							switch (alt197) {
								case 1 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1755:42: column_spec
									{
									pushFollow(FOLLOW_column_spec_in_load_xml_statement25833);
									column_spec621=column_spec();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec621.getTree());

									}
									break;
								case 2 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1755:54: USER_VAR
									{
									USER_VAR622=(Token)match(input,USER_VAR,FOLLOW_USER_VAR_in_load_xml_statement25835); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									USER_VAR622_tree = (CommonTree)adaptor.create(USER_VAR622);
									adaptor.addChild(root_0, USER_VAR622_tree);
									}

									}
									break;

							}

							}
							break;

						default :
							break loop198;
						}
					}

					RPAREN623=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_load_xml_statement25840); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN623_tree = (CommonTree)adaptor.create(RPAREN623);
					adaptor.addChild(root_0, RPAREN623_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1756:3: ( set_columns_cluase )?
			int alt200=2;
			int LA200_0 = input.LA(1);
			if ( (LA200_0==SET_SYM) ) {
				alt200=1;
			}
			switch (alt200) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1756:4: set_columns_cluase
					{
					pushFollow(FOLLOW_set_columns_cluase_in_load_xml_statement25847);
					set_columns_cluase624=set_columns_cluase();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, set_columns_cluase624.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "load_xml_statement"


	public static class replace_statement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "replace_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1765:1: replace_statement : replace_statement_header ( replace_statement1 | replace_statement2 | replace_statement3 ) ;
	public final SQLParser.replace_statement_return replace_statement() throws RecognitionException {
		SQLParser.replace_statement_return retval = new SQLParser.replace_statement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope replace_statement_header625 =null;
		ParserRuleReturnScope replace_statement1626 =null;
		ParserRuleReturnScope replace_statement2627 =null;
		ParserRuleReturnScope replace_statement3628 =null;


		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1765:18: ( replace_statement_header ( replace_statement1 | replace_statement2 | replace_statement3 ) )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1766:3: replace_statement_header ( replace_statement1 | replace_statement2 | replace_statement3 )
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_replace_statement_header_in_replace_statement25865);
			replace_statement_header625=replace_statement_header();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, replace_statement_header625.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1767:3: ( replace_statement1 | replace_statement2 | replace_statement3 )
			int alt201=3;
			alt201 = dfa201.predict(input);
			switch (alt201) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1767:5: replace_statement1
					{
					pushFollow(FOLLOW_replace_statement1_in_replace_statement25871);
					replace_statement1626=replace_statement1();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, replace_statement1626.getTree());

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1767:26: replace_statement2
					{
					pushFollow(FOLLOW_replace_statement2_in_replace_statement25875);
					replace_statement2627=replace_statement2();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, replace_statement2627.getTree());

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1767:47: replace_statement3
					{
					pushFollow(FOLLOW_replace_statement3_in_replace_statement25879);
					replace_statement3628=replace_statement3();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, replace_statement3628.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "replace_statement"


	public static class replace_statement_header_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "replace_statement_header"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1770:1: replace_statement_header : REPLACE ( LOW_PRIORITY | DELAYED_SYM )? ( INTO )? table_name ( partition_clause )? ;
	public final SQLParser.replace_statement_header_return replace_statement_header() throws RecognitionException {
		SQLParser.replace_statement_header_return retval = new SQLParser.replace_statement_header_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token REPLACE629=null;
		Token set630=null;
		Token INTO631=null;
		ParserRuleReturnScope table_name632 =null;
		ParserRuleReturnScope partition_clause633 =null;

		CommonTree REPLACE629_tree=null;
		CommonTree set630_tree=null;
		CommonTree INTO631_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1770:25: ( REPLACE ( LOW_PRIORITY | DELAYED_SYM )? ( INTO )? table_name ( partition_clause )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1771:3: REPLACE ( LOW_PRIORITY | DELAYED_SYM )? ( INTO )? table_name ( partition_clause )?
			{
			root_0 = (CommonTree)adaptor.nil();


			REPLACE629=(Token)match(input,REPLACE,FOLLOW_REPLACE_in_replace_statement_header25891); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			REPLACE629_tree = (CommonTree)adaptor.create(REPLACE629);
			adaptor.addChild(root_0, REPLACE629_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1771:11: ( LOW_PRIORITY | DELAYED_SYM )?
			int alt202=2;
			int LA202_0 = input.LA(1);
			if ( (LA202_0==DELAYED_SYM||LA202_0==LOW_PRIORITY) ) {
				alt202=1;
			}
			switch (alt202) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
					{
					set630=input.LT(1);
					if ( input.LA(1)==DELAYED_SYM||input.LA(1)==LOW_PRIORITY ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set630));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1772:3: ( INTO )?
			int alt203=2;
			int LA203_0 = input.LA(1);
			if ( (LA203_0==INTO) ) {
				alt203=1;
			}
			switch (alt203) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1772:4: INTO
					{
					INTO631=(Token)match(input,INTO,FOLLOW_INTO_in_replace_statement_header25905); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTO631_tree = (CommonTree)adaptor.create(INTO631);
					adaptor.addChild(root_0, INTO631_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_table_name_in_replace_statement_header25909);
			table_name632=table_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name632.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1773:3: ( partition_clause )?
			int alt204=2;
			int LA204_0 = input.LA(1);
			if ( (LA204_0==PARTITION_SYM) ) {
				alt204=1;
			}
			switch (alt204) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1773:4: partition_clause
					{
					pushFollow(FOLLOW_partition_clause_in_replace_statement_header25914);
					partition_clause633=partition_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_clause633.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "replace_statement_header"


	public static class replace_statement1_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "replace_statement1"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1776:1: replace_statement1 : ( column_list )? value_list_clause ;
	public final SQLParser.replace_statement1_return replace_statement1() throws RecognitionException {
		SQLParser.replace_statement1_return retval = new SQLParser.replace_statement1_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope column_list634 =null;
		ParserRuleReturnScope value_list_clause635 =null;


		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1776:19: ( ( column_list )? value_list_clause )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1777:3: ( column_list )? value_list_clause
			{
			root_0 = (CommonTree)adaptor.nil();


			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1777:3: ( column_list )?
			int alt205=2;
			int LA205_0 = input.LA(1);
			if ( (LA205_0==LPAREN) ) {
				alt205=1;
			}
			switch (alt205) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1777:4: column_list
					{
					pushFollow(FOLLOW_column_list_in_replace_statement125927);
					column_list634=column_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_list634.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_value_list_clause_in_replace_statement125933);
			value_list_clause635=value_list_clause();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, value_list_clause635.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "replace_statement1"


	public static class replace_statement2_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "replace_statement2"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1781:1: replace_statement2 : set_columns_cluase ;
	public final SQLParser.replace_statement2_return replace_statement2() throws RecognitionException {
		SQLParser.replace_statement2_return retval = new SQLParser.replace_statement2_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope set_columns_cluase636 =null;


		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1781:19: ( set_columns_cluase )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1782:3: set_columns_cluase
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_set_columns_cluase_in_replace_statement225943);
			set_columns_cluase636=set_columns_cluase();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, set_columns_cluase636.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "replace_statement2"


	public static class replace_statement3_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "replace_statement3"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1785:1: replace_statement3 : ( column_list )? select_statement ;
	public final SQLParser.replace_statement3_return replace_statement3() throws RecognitionException {
		SQLParser.replace_statement3_return retval = new SQLParser.replace_statement3_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope column_list637 =null;
		ParserRuleReturnScope select_statement638 =null;


		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1785:19: ( ( column_list )? select_statement )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1786:3: ( column_list )? select_statement
			{
			root_0 = (CommonTree)adaptor.nil();


			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1786:3: ( column_list )?
			int alt206=2;
			int LA206_0 = input.LA(1);
			if ( (LA206_0==LPAREN) ) {
				alt206=1;
			}
			switch (alt206) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1786:4: column_list
					{
					pushFollow(FOLLOW_column_list_in_replace_statement325954);
					column_list637=column_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_list637.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_select_statement_in_replace_statement325960);
			select_statement638=select_statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement638.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "replace_statement3"


	public static class create_database_statement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "create_database_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1797:1: create_database_statement : CREATE ( DATABASE | SCHEMA ) ( IF NOT_SYM EXISTS )? schema_name ( create_specification ( COMMA create_specification )* )* ;
	public final SQLParser.create_database_statement_return create_database_statement() throws RecognitionException {
		SQLParser.create_database_statement_return retval = new SQLParser.create_database_statement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token CREATE639=null;
		Token set640=null;
		Token IF641=null;
		Token NOT_SYM642=null;
		Token EXISTS643=null;
		Token COMMA646=null;
		ParserRuleReturnScope schema_name644 =null;
		ParserRuleReturnScope create_specification645 =null;
		ParserRuleReturnScope create_specification647 =null;

		CommonTree CREATE639_tree=null;
		CommonTree set640_tree=null;
		CommonTree IF641_tree=null;
		CommonTree NOT_SYM642_tree=null;
		CommonTree EXISTS643_tree=null;
		CommonTree COMMA646_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1797:26: ( CREATE ( DATABASE | SCHEMA ) ( IF NOT_SYM EXISTS )? schema_name ( create_specification ( COMMA create_specification )* )* )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1798:3: CREATE ( DATABASE | SCHEMA ) ( IF NOT_SYM EXISTS )? schema_name ( create_specification ( COMMA create_specification )* )*
			{
			root_0 = (CommonTree)adaptor.nil();


			CREATE639=(Token)match(input,CREATE,FOLLOW_CREATE_in_create_database_statement25977); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			CREATE639_tree = (CommonTree)adaptor.create(CREATE639);
			adaptor.addChild(root_0, CREATE639_tree);
			}

			set640=input.LT(1);
			if ( input.LA(1)==DATABASE||input.LA(1)==SCHEMA ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set640));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1798:30: ( IF NOT_SYM EXISTS )?
			int alt207=2;
			int LA207_0 = input.LA(1);
			if ( (LA207_0==IF) ) {
				alt207=1;
			}
			switch (alt207) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1798:31: IF NOT_SYM EXISTS
					{
					IF641=(Token)match(input,IF,FOLLOW_IF_in_create_database_statement25988); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IF641_tree = (CommonTree)adaptor.create(IF641);
					adaptor.addChild(root_0, IF641_tree);
					}

					NOT_SYM642=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_create_database_statement25990); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NOT_SYM642_tree = (CommonTree)adaptor.create(NOT_SYM642);
					adaptor.addChild(root_0, NOT_SYM642_tree);
					}

					EXISTS643=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_create_database_statement25992); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXISTS643_tree = (CommonTree)adaptor.create(EXISTS643);
					adaptor.addChild(root_0, EXISTS643_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_schema_name_in_create_database_statement25996);
			schema_name644=schema_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, schema_name644.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1799:3: ( create_specification ( COMMA create_specification )* )*
			loop209:
			while (true) {
				int alt209=2;
				int LA209_0 = input.LA(1);
				if ( (LA209_0==CHARACTER_SYM||LA209_0==COLLATE_SYM||LA209_0==DEFAULT) ) {
					alt209=1;
				}

				switch (alt209) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1799:5: create_specification ( COMMA create_specification )*
					{
					pushFollow(FOLLOW_create_specification_in_create_database_statement26002);
					create_specification645=create_specification();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_specification645.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1799:26: ( COMMA create_specification )*
					loop208:
					while (true) {
						int alt208=2;
						int LA208_0 = input.LA(1);
						if ( (LA208_0==COMMA) ) {
							int LA208_2 = input.LA(2);
							if ( (LA208_2==CHARACTER_SYM||LA208_2==COLLATE_SYM||LA208_2==DEFAULT) ) {
								alt208=1;
							}

						}

						switch (alt208) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1799:27: COMMA create_specification
							{
							COMMA646=(Token)match(input,COMMA,FOLLOW_COMMA_in_create_database_statement26005); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA646_tree = (CommonTree)adaptor.create(COMMA646);
							adaptor.addChild(root_0, COMMA646_tree);
							}

							pushFollow(FOLLOW_create_specification_in_create_database_statement26007);
							create_specification647=create_specification();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, create_specification647.getTree());

							}
							break;

						default :
							break loop208;
						}
					}

					}
					break;

				default :
					break loop209;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_database_statement"


	public static class create_specification_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "create_specification"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1801:1: create_specification : ( DEFAULT )? ( ( CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ) | ( COLLATE_SYM ( EQ_SYM )? collation_name ) ) ;
	public final SQLParser.create_specification_return create_specification() throws RecognitionException {
		SQLParser.create_specification_return retval = new SQLParser.create_specification_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token DEFAULT648=null;
		Token CHARACTER_SYM649=null;
		Token SET_SYM650=null;
		Token EQ_SYM651=null;
		Token COLLATE_SYM653=null;
		Token EQ_SYM654=null;
		ParserRuleReturnScope charset_name652 =null;
		ParserRuleReturnScope collation_name655 =null;

		CommonTree DEFAULT648_tree=null;
		CommonTree CHARACTER_SYM649_tree=null;
		CommonTree SET_SYM650_tree=null;
		CommonTree EQ_SYM651_tree=null;
		CommonTree COLLATE_SYM653_tree=null;
		CommonTree EQ_SYM654_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1801:21: ( ( DEFAULT )? ( ( CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ) | ( COLLATE_SYM ( EQ_SYM )? collation_name ) ) )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1802:3: ( DEFAULT )? ( ( CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ) | ( COLLATE_SYM ( EQ_SYM )? collation_name ) )
			{
			root_0 = (CommonTree)adaptor.nil();


			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1802:3: ( DEFAULT )?
			int alt210=2;
			int LA210_0 = input.LA(1);
			if ( (LA210_0==DEFAULT) ) {
				alt210=1;
			}
			switch (alt210) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1802:4: DEFAULT
					{
					DEFAULT648=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_create_specification26022); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DEFAULT648_tree = (CommonTree)adaptor.create(DEFAULT648);
					adaptor.addChild(root_0, DEFAULT648_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1803:3: ( ( CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ) | ( COLLATE_SYM ( EQ_SYM )? collation_name ) )
			int alt213=2;
			int LA213_0 = input.LA(1);
			if ( (LA213_0==CHARACTER_SYM) ) {
				alt213=1;
			}
			else if ( (LA213_0==COLLATE_SYM) ) {
				alt213=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 213, 0, input);
				throw nvae;
			}

			switch (alt213) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1804:5: ( CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name )
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1804:5: ( CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1804:8: CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name
					{
					CHARACTER_SYM649=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_create_specification26038); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CHARACTER_SYM649_tree = (CommonTree)adaptor.create(CHARACTER_SYM649);
					adaptor.addChild(root_0, CHARACTER_SYM649_tree);
					}

					SET_SYM650=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_create_specification26040); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SET_SYM650_tree = (CommonTree)adaptor.create(SET_SYM650);
					adaptor.addChild(root_0, SET_SYM650_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1804:30: ( EQ_SYM )?
					int alt211=2;
					int LA211_0 = input.LA(1);
					if ( (LA211_0==EQ_SYM) ) {
						alt211=1;
					}
					switch (alt211) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1804:31: EQ_SYM
							{
							EQ_SYM651=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_create_specification26043); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM651_tree = (CommonTree)adaptor.create(EQ_SYM651);
							adaptor.addChild(root_0, EQ_SYM651_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_charset_name_in_create_specification26047);
					charset_name652=charset_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name652.getTree());

					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1806:5: ( COLLATE_SYM ( EQ_SYM )? collation_name )
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1806:5: ( COLLATE_SYM ( EQ_SYM )? collation_name )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1806:8: COLLATE_SYM ( EQ_SYM )? collation_name
					{
					COLLATE_SYM653=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_create_specification26065); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COLLATE_SYM653_tree = (CommonTree)adaptor.create(COLLATE_SYM653);
					adaptor.addChild(root_0, COLLATE_SYM653_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1806:20: ( EQ_SYM )?
					int alt212=2;
					int LA212_0 = input.LA(1);
					if ( (LA212_0==EQ_SYM) ) {
						alt212=1;
					}
					switch (alt212) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1806:21: EQ_SYM
							{
							EQ_SYM654=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_create_specification26068); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM654_tree = (CommonTree)adaptor.create(EQ_SYM654);
							adaptor.addChild(root_0, EQ_SYM654_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_collation_name_in_create_specification26072);
					collation_name655=collation_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name655.getTree());

					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_specification"


	public static class alter_database_statements_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alter_database_statements"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1812:1: alter_database_statements : ( alter_database_statement1 | alter_database_statement2 );
	public final SQLParser.alter_database_statements_return alter_database_statements() throws RecognitionException {
		SQLParser.alter_database_statements_return retval = new SQLParser.alter_database_statements_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope alter_database_statement1656 =null;
		ParserRuleReturnScope alter_database_statement2657 =null;


		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1812:26: ( alter_database_statement1 | alter_database_statement2 )
			int alt214=2;
			int LA214_0 = input.LA(1);
			if ( (LA214_0==ALTER) ) {
				int LA214_1 = input.LA(2);
				if ( (LA214_1==DATABASE||LA214_1==SCHEMA) ) {
					int LA214_2 = input.LA(3);
					if ( (LA214_2==ID) ) {
						int LA214_3 = input.LA(4);
						if ( (LA214_3==CHARACTER_SYM||LA214_3==COLLATE_SYM||LA214_3==DEFAULT) ) {
							alt214=1;
						}
						else if ( (LA214_3==UPGRADE_SYM) ) {
							alt214=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 214, 3, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}
					else if ( (LA214_2==CHARACTER_SYM||LA214_2==COLLATE_SYM||LA214_2==DEFAULT) ) {
						alt214=1;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 214, 2, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 214, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 214, 0, input);
				throw nvae;
			}

			switch (alt214) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1813:3: alter_database_statement1
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alter_database_statement1_in_alter_database_statements26091);
					alter_database_statement1656=alter_database_statement1();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_database_statement1656.getTree());

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1813:31: alter_database_statement2
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alter_database_statement2_in_alter_database_statements26095);
					alter_database_statement2657=alter_database_statement2();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_database_statement2657.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_database_statements"


	public static class alter_database_statement1_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alter_database_statement1"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1815:1: alter_database_statement1 : ALTER ( DATABASE | SCHEMA ) ( schema_name )? alter_database_specification ;
	public final SQLParser.alter_database_statement1_return alter_database_statement1() throws RecognitionException {
		SQLParser.alter_database_statement1_return retval = new SQLParser.alter_database_statement1_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token ALTER658=null;
		Token set659=null;
		ParserRuleReturnScope schema_name660 =null;
		ParserRuleReturnScope alter_database_specification661 =null;

		CommonTree ALTER658_tree=null;
		CommonTree set659_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1815:26: ( ALTER ( DATABASE | SCHEMA ) ( schema_name )? alter_database_specification )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1816:3: ALTER ( DATABASE | SCHEMA ) ( schema_name )? alter_database_specification
			{
			root_0 = (CommonTree)adaptor.nil();


			ALTER658=(Token)match(input,ALTER,FOLLOW_ALTER_in_alter_database_statement126104); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			ALTER658_tree = (CommonTree)adaptor.create(ALTER658);
			adaptor.addChild(root_0, ALTER658_tree);
			}

			set659=input.LT(1);
			if ( input.LA(1)==DATABASE||input.LA(1)==SCHEMA ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set659));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1816:29: ( schema_name )?
			int alt215=2;
			int LA215_0 = input.LA(1);
			if ( (LA215_0==ID) ) {
				alt215=1;
			}
			switch (alt215) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1816:30: schema_name
					{
					pushFollow(FOLLOW_schema_name_in_alter_database_statement126115);
					schema_name660=schema_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, schema_name660.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_alter_database_specification_in_alter_database_statement126121);
			alter_database_specification661=alter_database_specification();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_database_specification661.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_database_statement1"


	public static class alter_database_statement2_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alter_database_statement2"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1819:1: alter_database_statement2 : ALTER ( DATABASE | SCHEMA ) schema_name UPGRADE_SYM DATA_SYM DIRECTORY_SYM NAME_SYM ;
	public final SQLParser.alter_database_statement2_return alter_database_statement2() throws RecognitionException {
		SQLParser.alter_database_statement2_return retval = new SQLParser.alter_database_statement2_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token ALTER662=null;
		Token set663=null;
		Token UPGRADE_SYM665=null;
		Token DATA_SYM666=null;
		Token DIRECTORY_SYM667=null;
		Token NAME_SYM668=null;
		ParserRuleReturnScope schema_name664 =null;

		CommonTree ALTER662_tree=null;
		CommonTree set663_tree=null;
		CommonTree UPGRADE_SYM665_tree=null;
		CommonTree DATA_SYM666_tree=null;
		CommonTree DIRECTORY_SYM667_tree=null;
		CommonTree NAME_SYM668_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1819:26: ( ALTER ( DATABASE | SCHEMA ) schema_name UPGRADE_SYM DATA_SYM DIRECTORY_SYM NAME_SYM )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1820:3: ALTER ( DATABASE | SCHEMA ) schema_name UPGRADE_SYM DATA_SYM DIRECTORY_SYM NAME_SYM
			{
			root_0 = (CommonTree)adaptor.nil();


			ALTER662=(Token)match(input,ALTER,FOLLOW_ALTER_in_alter_database_statement226130); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			ALTER662_tree = (CommonTree)adaptor.create(ALTER662);
			adaptor.addChild(root_0, ALTER662_tree);
			}

			set663=input.LT(1);
			if ( input.LA(1)==DATABASE||input.LA(1)==SCHEMA ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set663));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			pushFollow(FOLLOW_schema_name_in_alter_database_statement226140);
			schema_name664=schema_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, schema_name664.getTree());

			UPGRADE_SYM665=(Token)match(input,UPGRADE_SYM,FOLLOW_UPGRADE_SYM_in_alter_database_statement226144); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			UPGRADE_SYM665_tree = (CommonTree)adaptor.create(UPGRADE_SYM665);
			adaptor.addChild(root_0, UPGRADE_SYM665_tree);
			}

			DATA_SYM666=(Token)match(input,DATA_SYM,FOLLOW_DATA_SYM_in_alter_database_statement226146); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DATA_SYM666_tree = (CommonTree)adaptor.create(DATA_SYM666);
			adaptor.addChild(root_0, DATA_SYM666_tree);
			}

			DIRECTORY_SYM667=(Token)match(input,DIRECTORY_SYM,FOLLOW_DIRECTORY_SYM_in_alter_database_statement226148); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DIRECTORY_SYM667_tree = (CommonTree)adaptor.create(DIRECTORY_SYM667);
			adaptor.addChild(root_0, DIRECTORY_SYM667_tree);
			}

			NAME_SYM668=(Token)match(input,NAME_SYM,FOLLOW_NAME_SYM_in_alter_database_statement226150); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			NAME_SYM668_tree = (CommonTree)adaptor.create(NAME_SYM668);
			adaptor.addChild(root_0, NAME_SYM668_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_database_statement2"


	public static class alter_database_specification_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alter_database_specification"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1823:1: alter_database_specification : ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name | ( DEFAULT )? COLLATE_SYM ( EQ_SYM )? collation_names );
	public final SQLParser.alter_database_specification_return alter_database_specification() throws RecognitionException {
		SQLParser.alter_database_specification_return retval = new SQLParser.alter_database_specification_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token DEFAULT669=null;
		Token CHARACTER_SYM670=null;
		Token SET_SYM671=null;
		Token EQ_SYM672=null;
		Token DEFAULT674=null;
		Token COLLATE_SYM675=null;
		Token EQ_SYM676=null;
		ParserRuleReturnScope charset_name673 =null;
		ParserRuleReturnScope collation_names677 =null;

		CommonTree DEFAULT669_tree=null;
		CommonTree CHARACTER_SYM670_tree=null;
		CommonTree SET_SYM671_tree=null;
		CommonTree EQ_SYM672_tree=null;
		CommonTree DEFAULT674_tree=null;
		CommonTree COLLATE_SYM675_tree=null;
		CommonTree EQ_SYM676_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1823:29: ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name | ( DEFAULT )? COLLATE_SYM ( EQ_SYM )? collation_names )
			int alt220=2;
			switch ( input.LA(1) ) {
			case DEFAULT:
				{
				int LA220_1 = input.LA(2);
				if ( (LA220_1==CHARACTER_SYM) ) {
					alt220=1;
				}
				else if ( (LA220_1==COLLATE_SYM) ) {
					alt220=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 220, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CHARACTER_SYM:
				{
				alt220=1;
				}
				break;
			case COLLATE_SYM:
				{
				alt220=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 220, 0, input);
				throw nvae;
			}
			switch (alt220) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1824:3: ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1824:3: ( DEFAULT )?
					int alt216=2;
					int LA216_0 = input.LA(1);
					if ( (LA216_0==DEFAULT) ) {
						alt216=1;
					}
					switch (alt216) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1824:4: DEFAULT
							{
							DEFAULT669=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_alter_database_specification26160); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT669_tree = (CommonTree)adaptor.create(DEFAULT669);
							adaptor.addChild(root_0, DEFAULT669_tree);
							}

							}
							break;

					}

					CHARACTER_SYM670=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_alter_database_specification26164); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CHARACTER_SYM670_tree = (CommonTree)adaptor.create(CHARACTER_SYM670);
					adaptor.addChild(root_0, CHARACTER_SYM670_tree);
					}

					SET_SYM671=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_alter_database_specification26166); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SET_SYM671_tree = (CommonTree)adaptor.create(SET_SYM671);
					adaptor.addChild(root_0, SET_SYM671_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1824:36: ( EQ_SYM )?
					int alt217=2;
					int LA217_0 = input.LA(1);
					if ( (LA217_0==EQ_SYM) ) {
						alt217=1;
					}
					switch (alt217) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1824:37: EQ_SYM
							{
							EQ_SYM672=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_alter_database_specification26169); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM672_tree = (CommonTree)adaptor.create(EQ_SYM672);
							adaptor.addChild(root_0, EQ_SYM672_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_charset_name_in_alter_database_specification26173);
					charset_name673=charset_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name673.getTree());

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1826:3: ( DEFAULT )? COLLATE_SYM ( EQ_SYM )? collation_names
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1826:3: ( DEFAULT )?
					int alt218=2;
					int LA218_0 = input.LA(1);
					if ( (LA218_0==DEFAULT) ) {
						alt218=1;
					}
					switch (alt218) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1826:4: DEFAULT
							{
							DEFAULT674=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_alter_database_specification26183); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT674_tree = (CommonTree)adaptor.create(DEFAULT674);
							adaptor.addChild(root_0, DEFAULT674_tree);
							}

							}
							break;

					}

					COLLATE_SYM675=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_alter_database_specification26187); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COLLATE_SYM675_tree = (CommonTree)adaptor.create(COLLATE_SYM675);
					adaptor.addChild(root_0, COLLATE_SYM675_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1826:26: ( EQ_SYM )?
					int alt219=2;
					int LA219_0 = input.LA(1);
					if ( (LA219_0==EQ_SYM) ) {
						alt219=1;
					}
					switch (alt219) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1826:27: EQ_SYM
							{
							EQ_SYM676=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_alter_database_specification26190); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM676_tree = (CommonTree)adaptor.create(EQ_SYM676);
							adaptor.addChild(root_0, EQ_SYM676_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_collation_names_in_alter_database_specification26194);
					collation_names677=collation_names();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_names677.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_database_specification"


	public static class drop_database_statement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "drop_database_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1832:1: drop_database_statement : DROP ( DATABASE | SCHEMA ) ( IF EXISTS )? schema_name ;
	public final SQLParser.drop_database_statement_return drop_database_statement() throws RecognitionException {
		SQLParser.drop_database_statement_return retval = new SQLParser.drop_database_statement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token DROP678=null;
		Token set679=null;
		Token IF680=null;
		Token EXISTS681=null;
		ParserRuleReturnScope schema_name682 =null;

		CommonTree DROP678_tree=null;
		CommonTree set679_tree=null;
		CommonTree IF680_tree=null;
		CommonTree EXISTS681_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1832:24: ( DROP ( DATABASE | SCHEMA ) ( IF EXISTS )? schema_name )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1833:3: DROP ( DATABASE | SCHEMA ) ( IF EXISTS )? schema_name
			{
			root_0 = (CommonTree)adaptor.nil();


			DROP678=(Token)match(input,DROP,FOLLOW_DROP_in_drop_database_statement26207); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DROP678_tree = (CommonTree)adaptor.create(DROP678);
			adaptor.addChild(root_0, DROP678_tree);
			}

			set679=input.LT(1);
			if ( input.LA(1)==DATABASE||input.LA(1)==SCHEMA ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set679));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1833:28: ( IF EXISTS )?
			int alt221=2;
			int LA221_0 = input.LA(1);
			if ( (LA221_0==IF) ) {
				alt221=1;
			}
			switch (alt221) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1833:29: IF EXISTS
					{
					IF680=(Token)match(input,IF,FOLLOW_IF_in_drop_database_statement26218); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IF680_tree = (CommonTree)adaptor.create(IF680);
					adaptor.addChild(root_0, IF680_tree);
					}

					EXISTS681=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_drop_database_statement26220); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXISTS681_tree = (CommonTree)adaptor.create(EXISTS681);
					adaptor.addChild(root_0, EXISTS681_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_schema_name_in_drop_database_statement26224);
			schema_name682=schema_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, schema_name682.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_database_statement"


	public static class create_event_statement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "create_event_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1842:1: create_event_statement : CREATE ( DEFINER EQ_SYM ( user_name | CURRENT_USER ) )? EVENT_SYM ( IF NOT_SYM EXISTS )? event_name ON SCHEDULE_SYM schedule_definition ( ON COMPLETION_SYM ( NOT_SYM )? PRESERVE_SYM )? ( ENABLE_SYM | DISABLE_SYM | ( DISABLE_SYM ON SLAVE ) )? ( COMMENT_SYM TEXT_STRING )? do_statement ;
	public final SQLParser.create_event_statement_return create_event_statement() throws RecognitionException {
		SQLParser.create_event_statement_return retval = new SQLParser.create_event_statement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token CREATE683=null;
		Token DEFINER684=null;
		Token EQ_SYM685=null;
		Token CURRENT_USER687=null;
		Token EVENT_SYM688=null;
		Token IF689=null;
		Token NOT_SYM690=null;
		Token EXISTS691=null;
		Token ON693=null;
		Token SCHEDULE_SYM694=null;
		Token ON696=null;
		Token COMPLETION_SYM697=null;
		Token NOT_SYM698=null;
		Token PRESERVE_SYM699=null;
		Token ENABLE_SYM700=null;
		Token DISABLE_SYM701=null;
		Token DISABLE_SYM702=null;
		Token ON703=null;
		Token SLAVE704=null;
		Token COMMENT_SYM705=null;
		Token TEXT_STRING706=null;
		ParserRuleReturnScope user_name686 =null;
		ParserRuleReturnScope event_name692 =null;
		ParserRuleReturnScope schedule_definition695 =null;
		ParserRuleReturnScope do_statement707 =null;

		CommonTree CREATE683_tree=null;
		CommonTree DEFINER684_tree=null;
		CommonTree EQ_SYM685_tree=null;
		CommonTree CURRENT_USER687_tree=null;
		CommonTree EVENT_SYM688_tree=null;
		CommonTree IF689_tree=null;
		CommonTree NOT_SYM690_tree=null;
		CommonTree EXISTS691_tree=null;
		CommonTree ON693_tree=null;
		CommonTree SCHEDULE_SYM694_tree=null;
		CommonTree ON696_tree=null;
		CommonTree COMPLETION_SYM697_tree=null;
		CommonTree NOT_SYM698_tree=null;
		CommonTree PRESERVE_SYM699_tree=null;
		CommonTree ENABLE_SYM700_tree=null;
		CommonTree DISABLE_SYM701_tree=null;
		CommonTree DISABLE_SYM702_tree=null;
		CommonTree ON703_tree=null;
		CommonTree SLAVE704_tree=null;
		CommonTree COMMENT_SYM705_tree=null;
		CommonTree TEXT_STRING706_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1842:23: ( CREATE ( DEFINER EQ_SYM ( user_name | CURRENT_USER ) )? EVENT_SYM ( IF NOT_SYM EXISTS )? event_name ON SCHEDULE_SYM schedule_definition ( ON COMPLETION_SYM ( NOT_SYM )? PRESERVE_SYM )? ( ENABLE_SYM | DISABLE_SYM | ( DISABLE_SYM ON SLAVE ) )? ( COMMENT_SYM TEXT_STRING )? do_statement )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1843:3: CREATE ( DEFINER EQ_SYM ( user_name | CURRENT_USER ) )? EVENT_SYM ( IF NOT_SYM EXISTS )? event_name ON SCHEDULE_SYM schedule_definition ( ON COMPLETION_SYM ( NOT_SYM )? PRESERVE_SYM )? ( ENABLE_SYM | DISABLE_SYM | ( DISABLE_SYM ON SLAVE ) )? ( COMMENT_SYM TEXT_STRING )? do_statement
			{
			root_0 = (CommonTree)adaptor.nil();


			CREATE683=(Token)match(input,CREATE,FOLLOW_CREATE_in_create_event_statement26240); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			CREATE683_tree = (CommonTree)adaptor.create(CREATE683);
			adaptor.addChild(root_0, CREATE683_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1844:3: ( DEFINER EQ_SYM ( user_name | CURRENT_USER ) )?
			int alt223=2;
			int LA223_0 = input.LA(1);
			if ( (LA223_0==DEFINER) ) {
				alt223=1;
			}
			switch (alt223) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1844:4: DEFINER EQ_SYM ( user_name | CURRENT_USER )
					{
					DEFINER684=(Token)match(input,DEFINER,FOLLOW_DEFINER_in_create_event_statement26245); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DEFINER684_tree = (CommonTree)adaptor.create(DEFINER684);
					adaptor.addChild(root_0, DEFINER684_tree);
					}

					EQ_SYM685=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_create_event_statement26247); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EQ_SYM685_tree = (CommonTree)adaptor.create(EQ_SYM685);
					adaptor.addChild(root_0, EQ_SYM685_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1844:19: ( user_name | CURRENT_USER )
					int alt222=2;
					int LA222_0 = input.LA(1);
					if ( (LA222_0==ID) ) {
						alt222=1;
					}
					else if ( (LA222_0==CURRENT_USER) ) {
						alt222=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 222, 0, input);
						throw nvae;
					}

					switch (alt222) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1844:21: user_name
							{
							pushFollow(FOLLOW_user_name_in_create_event_statement26251);
							user_name686=user_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, user_name686.getTree());

							}
							break;
						case 2 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1844:33: CURRENT_USER
							{
							CURRENT_USER687=(Token)match(input,CURRENT_USER,FOLLOW_CURRENT_USER_in_create_event_statement26255); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CURRENT_USER687_tree = (CommonTree)adaptor.create(CURRENT_USER687);
							adaptor.addChild(root_0, CURRENT_USER687_tree);
							}

							}
							break;

					}

					}
					break;

			}

			EVENT_SYM688=(Token)match(input,EVENT_SYM,FOLLOW_EVENT_SYM_in_create_event_statement26263); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			EVENT_SYM688_tree = (CommonTree)adaptor.create(EVENT_SYM688);
			adaptor.addChild(root_0, EVENT_SYM688_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1846:3: ( IF NOT_SYM EXISTS )?
			int alt224=2;
			int LA224_0 = input.LA(1);
			if ( (LA224_0==IF) ) {
				alt224=1;
			}
			switch (alt224) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1846:4: IF NOT_SYM EXISTS
					{
					IF689=(Token)match(input,IF,FOLLOW_IF_in_create_event_statement26268); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IF689_tree = (CommonTree)adaptor.create(IF689);
					adaptor.addChild(root_0, IF689_tree);
					}

					NOT_SYM690=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_create_event_statement26270); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NOT_SYM690_tree = (CommonTree)adaptor.create(NOT_SYM690);
					adaptor.addChild(root_0, NOT_SYM690_tree);
					}

					EXISTS691=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_create_event_statement26272); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXISTS691_tree = (CommonTree)adaptor.create(EXISTS691);
					adaptor.addChild(root_0, EXISTS691_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_event_name_in_create_event_statement26278);
			event_name692=event_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, event_name692.getTree());

			ON693=(Token)match(input,ON,FOLLOW_ON_in_create_event_statement26282); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			ON693_tree = (CommonTree)adaptor.create(ON693);
			adaptor.addChild(root_0, ON693_tree);
			}

			SCHEDULE_SYM694=(Token)match(input,SCHEDULE_SYM,FOLLOW_SCHEDULE_SYM_in_create_event_statement26284); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			SCHEDULE_SYM694_tree = (CommonTree)adaptor.create(SCHEDULE_SYM694);
			adaptor.addChild(root_0, SCHEDULE_SYM694_tree);
			}

			pushFollow(FOLLOW_schedule_definition_in_create_event_statement26286);
			schedule_definition695=schedule_definition();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, schedule_definition695.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1849:3: ( ON COMPLETION_SYM ( NOT_SYM )? PRESERVE_SYM )?
			int alt226=2;
			int LA226_0 = input.LA(1);
			if ( (LA226_0==ON) ) {
				alt226=1;
			}
			switch (alt226) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1849:4: ON COMPLETION_SYM ( NOT_SYM )? PRESERVE_SYM
					{
					ON696=(Token)match(input,ON,FOLLOW_ON_in_create_event_statement26291); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ON696_tree = (CommonTree)adaptor.create(ON696);
					adaptor.addChild(root_0, ON696_tree);
					}

					COMPLETION_SYM697=(Token)match(input,COMPLETION_SYM,FOLLOW_COMPLETION_SYM_in_create_event_statement26293); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMPLETION_SYM697_tree = (CommonTree)adaptor.create(COMPLETION_SYM697);
					adaptor.addChild(root_0, COMPLETION_SYM697_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1849:22: ( NOT_SYM )?
					int alt225=2;
					int LA225_0 = input.LA(1);
					if ( (LA225_0==NOT_SYM) ) {
						alt225=1;
					}
					switch (alt225) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1849:23: NOT_SYM
							{
							NOT_SYM698=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_create_event_statement26296); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							NOT_SYM698_tree = (CommonTree)adaptor.create(NOT_SYM698);
							adaptor.addChild(root_0, NOT_SYM698_tree);
							}

							}
							break;

					}

					PRESERVE_SYM699=(Token)match(input,PRESERVE_SYM,FOLLOW_PRESERVE_SYM_in_create_event_statement26300); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PRESERVE_SYM699_tree = (CommonTree)adaptor.create(PRESERVE_SYM699);
					adaptor.addChild(root_0, PRESERVE_SYM699_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1850:3: ( ENABLE_SYM | DISABLE_SYM | ( DISABLE_SYM ON SLAVE ) )?
			int alt227=4;
			int LA227_0 = input.LA(1);
			if ( (LA227_0==ENABLE_SYM) ) {
				alt227=1;
			}
			else if ( (LA227_0==DISABLE_SYM) ) {
				int LA227_2 = input.LA(2);
				if ( (LA227_2==ON) ) {
					alt227=3;
				}
				else if ( (LA227_2==COMMENT_SYM||LA227_2==DO_SYM) ) {
					alt227=2;
				}
			}
			switch (alt227) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1850:5: ENABLE_SYM
					{
					ENABLE_SYM700=(Token)match(input,ENABLE_SYM,FOLLOW_ENABLE_SYM_in_create_event_statement26308); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ENABLE_SYM700_tree = (CommonTree)adaptor.create(ENABLE_SYM700);
					adaptor.addChild(root_0, ENABLE_SYM700_tree);
					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1850:18: DISABLE_SYM
					{
					DISABLE_SYM701=(Token)match(input,DISABLE_SYM,FOLLOW_DISABLE_SYM_in_create_event_statement26312); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DISABLE_SYM701_tree = (CommonTree)adaptor.create(DISABLE_SYM701);
					adaptor.addChild(root_0, DISABLE_SYM701_tree);
					}

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1850:32: ( DISABLE_SYM ON SLAVE )
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1850:32: ( DISABLE_SYM ON SLAVE )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1850:33: DISABLE_SYM ON SLAVE
					{
					DISABLE_SYM702=(Token)match(input,DISABLE_SYM,FOLLOW_DISABLE_SYM_in_create_event_statement26317); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DISABLE_SYM702_tree = (CommonTree)adaptor.create(DISABLE_SYM702);
					adaptor.addChild(root_0, DISABLE_SYM702_tree);
					}

					ON703=(Token)match(input,ON,FOLLOW_ON_in_create_event_statement26319); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ON703_tree = (CommonTree)adaptor.create(ON703);
					adaptor.addChild(root_0, ON703_tree);
					}

					SLAVE704=(Token)match(input,SLAVE,FOLLOW_SLAVE_in_create_event_statement26321); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SLAVE704_tree = (CommonTree)adaptor.create(SLAVE704);
					adaptor.addChild(root_0, SLAVE704_tree);
					}

					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1851:3: ( COMMENT_SYM TEXT_STRING )?
			int alt228=2;
			int LA228_0 = input.LA(1);
			if ( (LA228_0==COMMENT_SYM) ) {
				alt228=1;
			}
			switch (alt228) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1851:4: COMMENT_SYM TEXT_STRING
					{
					COMMENT_SYM705=(Token)match(input,COMMENT_SYM,FOLLOW_COMMENT_SYM_in_create_event_statement26330); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMENT_SYM705_tree = (CommonTree)adaptor.create(COMMENT_SYM705);
					adaptor.addChild(root_0, COMMENT_SYM705_tree);
					}

					TEXT_STRING706=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_create_event_statement26332); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING706_tree = (CommonTree)adaptor.create(TEXT_STRING706);
					adaptor.addChild(root_0, TEXT_STRING706_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_do_statement_in_create_event_statement26338);
			do_statement707=do_statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, do_statement707.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_event_statement"


	public static class schedule_definition_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "schedule_definition"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1854:1: schedule_definition : ( ( AT_SYM timestamp ( PLUS INTERVAL_SYM interval )* ) | ( EVERY_SYM interval ) ( STARTS_SYM timestamp ( PLUS INTERVAL_SYM interval )* )? ( ENDS_SYM timestamp ( PLUS INTERVAL_SYM interval )* )? );
	public final SQLParser.schedule_definition_return schedule_definition() throws RecognitionException {
		SQLParser.schedule_definition_return retval = new SQLParser.schedule_definition_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token AT_SYM708=null;
		Token PLUS710=null;
		Token INTERVAL_SYM711=null;
		Token EVERY_SYM713=null;
		Token STARTS_SYM715=null;
		Token PLUS717=null;
		Token INTERVAL_SYM718=null;
		Token ENDS_SYM720=null;
		Token PLUS722=null;
		Token INTERVAL_SYM723=null;
		ParserRuleReturnScope timestamp709 =null;
		ParserRuleReturnScope interval712 =null;
		ParserRuleReturnScope interval714 =null;
		ParserRuleReturnScope timestamp716 =null;
		ParserRuleReturnScope interval719 =null;
		ParserRuleReturnScope timestamp721 =null;
		ParserRuleReturnScope interval724 =null;

		CommonTree AT_SYM708_tree=null;
		CommonTree PLUS710_tree=null;
		CommonTree INTERVAL_SYM711_tree=null;
		CommonTree EVERY_SYM713_tree=null;
		CommonTree STARTS_SYM715_tree=null;
		CommonTree PLUS717_tree=null;
		CommonTree INTERVAL_SYM718_tree=null;
		CommonTree ENDS_SYM720_tree=null;
		CommonTree PLUS722_tree=null;
		CommonTree INTERVAL_SYM723_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1854:20: ( ( AT_SYM timestamp ( PLUS INTERVAL_SYM interval )* ) | ( EVERY_SYM interval ) ( STARTS_SYM timestamp ( PLUS INTERVAL_SYM interval )* )? ( ENDS_SYM timestamp ( PLUS INTERVAL_SYM interval )* )? )
			int alt234=2;
			int LA234_0 = input.LA(1);
			if ( (LA234_0==AT_SYM) ) {
				alt234=1;
			}
			else if ( (LA234_0==EVERY_SYM) ) {
				alt234=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 234, 0, input);
				throw nvae;
			}

			switch (alt234) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1855:3: ( AT_SYM timestamp ( PLUS INTERVAL_SYM interval )* )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1855:3: ( AT_SYM timestamp ( PLUS INTERVAL_SYM interval )* )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1855:5: AT_SYM timestamp ( PLUS INTERVAL_SYM interval )*
					{
					AT_SYM708=(Token)match(input,AT_SYM,FOLLOW_AT_SYM_in_schedule_definition26349); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					AT_SYM708_tree = (CommonTree)adaptor.create(AT_SYM708);
					adaptor.addChild(root_0, AT_SYM708_tree);
					}

					pushFollow(FOLLOW_timestamp_in_schedule_definition26351);
					timestamp709=timestamp();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, timestamp709.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1855:22: ( PLUS INTERVAL_SYM interval )*
					loop229:
					while (true) {
						int alt229=2;
						int LA229_0 = input.LA(1);
						if ( (LA229_0==PLUS) ) {
							alt229=1;
						}

						switch (alt229) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1855:23: PLUS INTERVAL_SYM interval
							{
							PLUS710=(Token)match(input,PLUS,FOLLOW_PLUS_in_schedule_definition26354); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							PLUS710_tree = (CommonTree)adaptor.create(PLUS710);
							adaptor.addChild(root_0, PLUS710_tree);
							}

							INTERVAL_SYM711=(Token)match(input,INTERVAL_SYM,FOLLOW_INTERVAL_SYM_in_schedule_definition26356); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							INTERVAL_SYM711_tree = (CommonTree)adaptor.create(INTERVAL_SYM711);
							adaptor.addChild(root_0, INTERVAL_SYM711_tree);
							}

							pushFollow(FOLLOW_interval_in_schedule_definition26358);
							interval712=interval();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, interval712.getTree());

							}
							break;

						default :
							break loop229;
						}
					}

					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1857:3: ( EVERY_SYM interval ) ( STARTS_SYM timestamp ( PLUS INTERVAL_SYM interval )* )? ( ENDS_SYM timestamp ( PLUS INTERVAL_SYM interval )* )?
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1857:3: ( EVERY_SYM interval )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1857:5: EVERY_SYM interval
					{
					EVERY_SYM713=(Token)match(input,EVERY_SYM,FOLLOW_EVERY_SYM_in_schedule_definition26373); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EVERY_SYM713_tree = (CommonTree)adaptor.create(EVERY_SYM713);
					adaptor.addChild(root_0, EVERY_SYM713_tree);
					}

					pushFollow(FOLLOW_interval_in_schedule_definition26375);
					interval714=interval();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, interval714.getTree());

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1858:3: ( STARTS_SYM timestamp ( PLUS INTERVAL_SYM interval )* )?
					int alt231=2;
					int LA231_0 = input.LA(1);
					if ( (LA231_0==STARTS_SYM) ) {
						alt231=1;
					}
					switch (alt231) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1858:5: STARTS_SYM timestamp ( PLUS INTERVAL_SYM interval )*
							{
							STARTS_SYM715=(Token)match(input,STARTS_SYM,FOLLOW_STARTS_SYM_in_schedule_definition26383); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							STARTS_SYM715_tree = (CommonTree)adaptor.create(STARTS_SYM715);
							adaptor.addChild(root_0, STARTS_SYM715_tree);
							}

							pushFollow(FOLLOW_timestamp_in_schedule_definition26385);
							timestamp716=timestamp();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, timestamp716.getTree());

							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1858:26: ( PLUS INTERVAL_SYM interval )*
							loop230:
							while (true) {
								int alt230=2;
								int LA230_0 = input.LA(1);
								if ( (LA230_0==PLUS) ) {
									alt230=1;
								}

								switch (alt230) {
								case 1 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1858:27: PLUS INTERVAL_SYM interval
									{
									PLUS717=(Token)match(input,PLUS,FOLLOW_PLUS_in_schedule_definition26388); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									PLUS717_tree = (CommonTree)adaptor.create(PLUS717);
									adaptor.addChild(root_0, PLUS717_tree);
									}

									INTERVAL_SYM718=(Token)match(input,INTERVAL_SYM,FOLLOW_INTERVAL_SYM_in_schedule_definition26390); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									INTERVAL_SYM718_tree = (CommonTree)adaptor.create(INTERVAL_SYM718);
									adaptor.addChild(root_0, INTERVAL_SYM718_tree);
									}

									pushFollow(FOLLOW_interval_in_schedule_definition26392);
									interval719=interval();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, interval719.getTree());

									}
									break;

								default :
									break loop230;
								}
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1859:3: ( ENDS_SYM timestamp ( PLUS INTERVAL_SYM interval )* )?
					int alt233=2;
					int LA233_0 = input.LA(1);
					if ( (LA233_0==ENDS_SYM) ) {
						alt233=1;
					}
					switch (alt233) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1859:5: ENDS_SYM timestamp ( PLUS INTERVAL_SYM interval )*
							{
							ENDS_SYM720=(Token)match(input,ENDS_SYM,FOLLOW_ENDS_SYM_in_schedule_definition26403); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ENDS_SYM720_tree = (CommonTree)adaptor.create(ENDS_SYM720);
							adaptor.addChild(root_0, ENDS_SYM720_tree);
							}

							pushFollow(FOLLOW_timestamp_in_schedule_definition26405);
							timestamp721=timestamp();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, timestamp721.getTree());

							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1859:24: ( PLUS INTERVAL_SYM interval )*
							loop232:
							while (true) {
								int alt232=2;
								int LA232_0 = input.LA(1);
								if ( (LA232_0==PLUS) ) {
									alt232=1;
								}

								switch (alt232) {
								case 1 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1859:25: PLUS INTERVAL_SYM interval
									{
									PLUS722=(Token)match(input,PLUS,FOLLOW_PLUS_in_schedule_definition26408); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									PLUS722_tree = (CommonTree)adaptor.create(PLUS722);
									adaptor.addChild(root_0, PLUS722_tree);
									}

									INTERVAL_SYM723=(Token)match(input,INTERVAL_SYM,FOLLOW_INTERVAL_SYM_in_schedule_definition26410); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									INTERVAL_SYM723_tree = (CommonTree)adaptor.create(INTERVAL_SYM723);
									adaptor.addChild(root_0, INTERVAL_SYM723_tree);
									}

									pushFollow(FOLLOW_interval_in_schedule_definition26412);
									interval724=interval();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, interval724.getTree());

									}
									break;

								default :
									break loop232;
								}
							}

							}
							break;

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "schedule_definition"


	public static class interval_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "interval"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1861:1: interval : INTEGER_NUM ( YEAR | QUARTER | MONTH | DAY_SYM | HOUR | MINUTE | WEEK | SECOND | YEAR_MONTH | DAY_HOUR | DAY_MINUTE | DAY_SECOND | HOUR_MINUTE | HOUR_SECOND | MINUTE_SECOND ) ;
	public final SQLParser.interval_return interval() throws RecognitionException {
		SQLParser.interval_return retval = new SQLParser.interval_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token INTEGER_NUM725=null;
		Token set726=null;

		CommonTree INTEGER_NUM725_tree=null;
		CommonTree set726_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1861:9: ( INTEGER_NUM ( YEAR | QUARTER | MONTH | DAY_SYM | HOUR | MINUTE | WEEK | SECOND | YEAR_MONTH | DAY_HOUR | DAY_MINUTE | DAY_SECOND | HOUR_MINUTE | HOUR_SECOND | MINUTE_SECOND ) )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1862:3: INTEGER_NUM ( YEAR | QUARTER | MONTH | DAY_SYM | HOUR | MINUTE | WEEK | SECOND | YEAR_MONTH | DAY_HOUR | DAY_MINUTE | DAY_SECOND | HOUR_MINUTE | HOUR_SECOND | MINUTE_SECOND )
			{
			root_0 = (CommonTree)adaptor.nil();


			INTEGER_NUM725=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_interval26426); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			INTEGER_NUM725_tree = (CommonTree)adaptor.create(INTEGER_NUM725);
			adaptor.addChild(root_0, INTEGER_NUM725_tree);
			}

			set726=input.LT(1);
			if ( input.LA(1)==DAY_HOUR||(input.LA(1) >= DAY_MINUTE && input.LA(1) <= DAY_SYM)||input.LA(1)==HOUR||(input.LA(1) >= HOUR_MINUTE && input.LA(1) <= HOUR_SECOND)||input.LA(1)==MINUTE||input.LA(1)==MINUTE_SECOND||input.LA(1)==MONTH||input.LA(1)==QUARTER||input.LA(1)==SECOND||input.LA(1)==WEEK||input.LA(1)==YEAR||input.LA(1)==YEAR_MONTH ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set726));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "interval"


	public static class timestamp_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "timestamp"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1867:1: timestamp : CURRENT_TIMESTAMP ;
	public final SQLParser.timestamp_return timestamp() throws RecognitionException {
		SQLParser.timestamp_return retval = new SQLParser.timestamp_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token CURRENT_TIMESTAMP727=null;

		CommonTree CURRENT_TIMESTAMP727_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1867:10: ( CURRENT_TIMESTAMP )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1868:3: CURRENT_TIMESTAMP
			{
			root_0 = (CommonTree)adaptor.nil();


			CURRENT_TIMESTAMP727=(Token)match(input,CURRENT_TIMESTAMP,FOLLOW_CURRENT_TIMESTAMP_in_timestamp26520); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			CURRENT_TIMESTAMP727_tree = (CommonTree)adaptor.create(CURRENT_TIMESTAMP727);
			adaptor.addChild(root_0, CURRENT_TIMESTAMP727_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "timestamp"


	public static class alter_event_statement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alter_event_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1875:1: alter_event_statement : ALTER ( DEFINER EQ_SYM ( user_name | CURRENT_USER ) )? EVENT_SYM event_name ( ON SCHEDULE_SYM schedule_definition )? ( ON COMPLETION_SYM ( NOT_SYM )? PRESERVE_SYM )? ( RENAME TO_SYM event_name )? ( ENABLE_SYM | DISABLE_SYM | ( DISABLE_SYM ON SLAVE ) )? ( COMMENT_SYM TEXT_STRING )? ( do_statement )? ;
	public final SQLParser.alter_event_statement_return alter_event_statement() throws RecognitionException {
		SQLParser.alter_event_statement_return retval = new SQLParser.alter_event_statement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token ALTER728=null;
		Token DEFINER729=null;
		Token EQ_SYM730=null;
		Token CURRENT_USER732=null;
		Token EVENT_SYM733=null;
		Token ON735=null;
		Token SCHEDULE_SYM736=null;
		Token ON738=null;
		Token COMPLETION_SYM739=null;
		Token NOT_SYM740=null;
		Token PRESERVE_SYM741=null;
		Token RENAME742=null;
		Token TO_SYM743=null;
		Token ENABLE_SYM745=null;
		Token DISABLE_SYM746=null;
		Token DISABLE_SYM747=null;
		Token ON748=null;
		Token SLAVE749=null;
		Token COMMENT_SYM750=null;
		Token TEXT_STRING751=null;
		ParserRuleReturnScope user_name731 =null;
		ParserRuleReturnScope event_name734 =null;
		ParserRuleReturnScope schedule_definition737 =null;
		ParserRuleReturnScope event_name744 =null;
		ParserRuleReturnScope do_statement752 =null;

		CommonTree ALTER728_tree=null;
		CommonTree DEFINER729_tree=null;
		CommonTree EQ_SYM730_tree=null;
		CommonTree CURRENT_USER732_tree=null;
		CommonTree EVENT_SYM733_tree=null;
		CommonTree ON735_tree=null;
		CommonTree SCHEDULE_SYM736_tree=null;
		CommonTree ON738_tree=null;
		CommonTree COMPLETION_SYM739_tree=null;
		CommonTree NOT_SYM740_tree=null;
		CommonTree PRESERVE_SYM741_tree=null;
		CommonTree RENAME742_tree=null;
		CommonTree TO_SYM743_tree=null;
		CommonTree ENABLE_SYM745_tree=null;
		CommonTree DISABLE_SYM746_tree=null;
		CommonTree DISABLE_SYM747_tree=null;
		CommonTree ON748_tree=null;
		CommonTree SLAVE749_tree=null;
		CommonTree COMMENT_SYM750_tree=null;
		CommonTree TEXT_STRING751_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1875:22: ( ALTER ( DEFINER EQ_SYM ( user_name | CURRENT_USER ) )? EVENT_SYM event_name ( ON SCHEDULE_SYM schedule_definition )? ( ON COMPLETION_SYM ( NOT_SYM )? PRESERVE_SYM )? ( RENAME TO_SYM event_name )? ( ENABLE_SYM | DISABLE_SYM | ( DISABLE_SYM ON SLAVE ) )? ( COMMENT_SYM TEXT_STRING )? ( do_statement )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1876:3: ALTER ( DEFINER EQ_SYM ( user_name | CURRENT_USER ) )? EVENT_SYM event_name ( ON SCHEDULE_SYM schedule_definition )? ( ON COMPLETION_SYM ( NOT_SYM )? PRESERVE_SYM )? ( RENAME TO_SYM event_name )? ( ENABLE_SYM | DISABLE_SYM | ( DISABLE_SYM ON SLAVE ) )? ( COMMENT_SYM TEXT_STRING )? ( do_statement )?
			{
			root_0 = (CommonTree)adaptor.nil();


			ALTER728=(Token)match(input,ALTER,FOLLOW_ALTER_in_alter_event_statement26539); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			ALTER728_tree = (CommonTree)adaptor.create(ALTER728);
			adaptor.addChild(root_0, ALTER728_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1877:3: ( DEFINER EQ_SYM ( user_name | CURRENT_USER ) )?
			int alt236=2;
			int LA236_0 = input.LA(1);
			if ( (LA236_0==DEFINER) ) {
				alt236=1;
			}
			switch (alt236) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1877:4: DEFINER EQ_SYM ( user_name | CURRENT_USER )
					{
					DEFINER729=(Token)match(input,DEFINER,FOLLOW_DEFINER_in_alter_event_statement26544); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DEFINER729_tree = (CommonTree)adaptor.create(DEFINER729);
					adaptor.addChild(root_0, DEFINER729_tree);
					}

					EQ_SYM730=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_alter_event_statement26546); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EQ_SYM730_tree = (CommonTree)adaptor.create(EQ_SYM730);
					adaptor.addChild(root_0, EQ_SYM730_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1877:19: ( user_name | CURRENT_USER )
					int alt235=2;
					int LA235_0 = input.LA(1);
					if ( (LA235_0==ID) ) {
						alt235=1;
					}
					else if ( (LA235_0==CURRENT_USER) ) {
						alt235=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 235, 0, input);
						throw nvae;
					}

					switch (alt235) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1877:21: user_name
							{
							pushFollow(FOLLOW_user_name_in_alter_event_statement26550);
							user_name731=user_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, user_name731.getTree());

							}
							break;
						case 2 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1877:33: CURRENT_USER
							{
							CURRENT_USER732=(Token)match(input,CURRENT_USER,FOLLOW_CURRENT_USER_in_alter_event_statement26554); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CURRENT_USER732_tree = (CommonTree)adaptor.create(CURRENT_USER732);
							adaptor.addChild(root_0, CURRENT_USER732_tree);
							}

							}
							break;

					}

					}
					break;

			}

			EVENT_SYM733=(Token)match(input,EVENT_SYM,FOLLOW_EVENT_SYM_in_alter_event_statement26562); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			EVENT_SYM733_tree = (CommonTree)adaptor.create(EVENT_SYM733);
			adaptor.addChild(root_0, EVENT_SYM733_tree);
			}

			pushFollow(FOLLOW_event_name_in_alter_event_statement26564);
			event_name734=event_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, event_name734.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1879:3: ( ON SCHEDULE_SYM schedule_definition )?
			int alt237=2;
			int LA237_0 = input.LA(1);
			if ( (LA237_0==ON) ) {
				int LA237_1 = input.LA(2);
				if ( (LA237_1==SCHEDULE_SYM) ) {
					alt237=1;
				}
			}
			switch (alt237) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1879:4: ON SCHEDULE_SYM schedule_definition
					{
					ON735=(Token)match(input,ON,FOLLOW_ON_in_alter_event_statement26569); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ON735_tree = (CommonTree)adaptor.create(ON735);
					adaptor.addChild(root_0, ON735_tree);
					}

					SCHEDULE_SYM736=(Token)match(input,SCHEDULE_SYM,FOLLOW_SCHEDULE_SYM_in_alter_event_statement26571); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SCHEDULE_SYM736_tree = (CommonTree)adaptor.create(SCHEDULE_SYM736);
					adaptor.addChild(root_0, SCHEDULE_SYM736_tree);
					}

					pushFollow(FOLLOW_schedule_definition_in_alter_event_statement26573);
					schedule_definition737=schedule_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, schedule_definition737.getTree());

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1880:3: ( ON COMPLETION_SYM ( NOT_SYM )? PRESERVE_SYM )?
			int alt239=2;
			int LA239_0 = input.LA(1);
			if ( (LA239_0==ON) ) {
				alt239=1;
			}
			switch (alt239) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1880:4: ON COMPLETION_SYM ( NOT_SYM )? PRESERVE_SYM
					{
					ON738=(Token)match(input,ON,FOLLOW_ON_in_alter_event_statement26580); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ON738_tree = (CommonTree)adaptor.create(ON738);
					adaptor.addChild(root_0, ON738_tree);
					}

					COMPLETION_SYM739=(Token)match(input,COMPLETION_SYM,FOLLOW_COMPLETION_SYM_in_alter_event_statement26582); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMPLETION_SYM739_tree = (CommonTree)adaptor.create(COMPLETION_SYM739);
					adaptor.addChild(root_0, COMPLETION_SYM739_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1880:22: ( NOT_SYM )?
					int alt238=2;
					int LA238_0 = input.LA(1);
					if ( (LA238_0==NOT_SYM) ) {
						alt238=1;
					}
					switch (alt238) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1880:23: NOT_SYM
							{
							NOT_SYM740=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_alter_event_statement26585); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							NOT_SYM740_tree = (CommonTree)adaptor.create(NOT_SYM740);
							adaptor.addChild(root_0, NOT_SYM740_tree);
							}

							}
							break;

					}

					PRESERVE_SYM741=(Token)match(input,PRESERVE_SYM,FOLLOW_PRESERVE_SYM_in_alter_event_statement26589); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PRESERVE_SYM741_tree = (CommonTree)adaptor.create(PRESERVE_SYM741);
					adaptor.addChild(root_0, PRESERVE_SYM741_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1881:3: ( RENAME TO_SYM event_name )?
			int alt240=2;
			int LA240_0 = input.LA(1);
			if ( (LA240_0==RENAME) ) {
				alt240=1;
			}
			switch (alt240) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1881:4: RENAME TO_SYM event_name
					{
					RENAME742=(Token)match(input,RENAME,FOLLOW_RENAME_in_alter_event_statement26596); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RENAME742_tree = (CommonTree)adaptor.create(RENAME742);
					adaptor.addChild(root_0, RENAME742_tree);
					}

					TO_SYM743=(Token)match(input,TO_SYM,FOLLOW_TO_SYM_in_alter_event_statement26598); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TO_SYM743_tree = (CommonTree)adaptor.create(TO_SYM743);
					adaptor.addChild(root_0, TO_SYM743_tree);
					}

					pushFollow(FOLLOW_event_name_in_alter_event_statement26600);
					event_name744=event_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, event_name744.getTree());

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1882:3: ( ENABLE_SYM | DISABLE_SYM | ( DISABLE_SYM ON SLAVE ) )?
			int alt241=4;
			int LA241_0 = input.LA(1);
			if ( (LA241_0==ENABLE_SYM) ) {
				alt241=1;
			}
			else if ( (LA241_0==DISABLE_SYM) ) {
				int LA241_2 = input.LA(2);
				if ( (LA241_2==ON) ) {
					alt241=3;
				}
				else if ( (LA241_2==EOF||(LA241_2 >= COMMA && LA241_2 <= COMMENT_SYM)||LA241_2==DO_SYM||LA241_2==SEMI) ) {
					alt241=2;
				}
			}
			switch (alt241) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1882:5: ENABLE_SYM
					{
					ENABLE_SYM745=(Token)match(input,ENABLE_SYM,FOLLOW_ENABLE_SYM_in_alter_event_statement26608); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ENABLE_SYM745_tree = (CommonTree)adaptor.create(ENABLE_SYM745);
					adaptor.addChild(root_0, ENABLE_SYM745_tree);
					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1882:18: DISABLE_SYM
					{
					DISABLE_SYM746=(Token)match(input,DISABLE_SYM,FOLLOW_DISABLE_SYM_in_alter_event_statement26612); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DISABLE_SYM746_tree = (CommonTree)adaptor.create(DISABLE_SYM746);
					adaptor.addChild(root_0, DISABLE_SYM746_tree);
					}

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1882:32: ( DISABLE_SYM ON SLAVE )
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1882:32: ( DISABLE_SYM ON SLAVE )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1882:33: DISABLE_SYM ON SLAVE
					{
					DISABLE_SYM747=(Token)match(input,DISABLE_SYM,FOLLOW_DISABLE_SYM_in_alter_event_statement26617); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DISABLE_SYM747_tree = (CommonTree)adaptor.create(DISABLE_SYM747);
					adaptor.addChild(root_0, DISABLE_SYM747_tree);
					}

					ON748=(Token)match(input,ON,FOLLOW_ON_in_alter_event_statement26619); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ON748_tree = (CommonTree)adaptor.create(ON748);
					adaptor.addChild(root_0, ON748_tree);
					}

					SLAVE749=(Token)match(input,SLAVE,FOLLOW_SLAVE_in_alter_event_statement26621); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SLAVE749_tree = (CommonTree)adaptor.create(SLAVE749);
					adaptor.addChild(root_0, SLAVE749_tree);
					}

					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1883:3: ( COMMENT_SYM TEXT_STRING )?
			int alt242=2;
			int LA242_0 = input.LA(1);
			if ( (LA242_0==COMMENT_SYM) ) {
				alt242=1;
			}
			switch (alt242) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1883:4: COMMENT_SYM TEXT_STRING
					{
					COMMENT_SYM750=(Token)match(input,COMMENT_SYM,FOLLOW_COMMENT_SYM_in_alter_event_statement26630); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMENT_SYM750_tree = (CommonTree)adaptor.create(COMMENT_SYM750);
					adaptor.addChild(root_0, COMMENT_SYM750_tree);
					}

					TEXT_STRING751=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_alter_event_statement26632); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING751_tree = (CommonTree)adaptor.create(TEXT_STRING751);
					adaptor.addChild(root_0, TEXT_STRING751_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1884:3: ( do_statement )?
			int alt243=2;
			int LA243_0 = input.LA(1);
			if ( (LA243_0==DO_SYM) ) {
				alt243=1;
			}
			switch (alt243) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1884:4: do_statement
					{
					pushFollow(FOLLOW_do_statement_in_alter_event_statement26639);
					do_statement752=do_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, do_statement752.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_event_statement"


	public static class drop_event_statement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "drop_event_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1889:1: drop_event_statement : DROP EVENT_SYM ( IF EXISTS )? event_name ;
	public final SQLParser.drop_event_statement_return drop_event_statement() throws RecognitionException {
		SQLParser.drop_event_statement_return retval = new SQLParser.drop_event_statement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token DROP753=null;
		Token EVENT_SYM754=null;
		Token IF755=null;
		Token EXISTS756=null;
		ParserRuleReturnScope event_name757 =null;

		CommonTree DROP753_tree=null;
		CommonTree EVENT_SYM754_tree=null;
		CommonTree IF755_tree=null;
		CommonTree EXISTS756_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1889:21: ( DROP EVENT_SYM ( IF EXISTS )? event_name )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1890:3: DROP EVENT_SYM ( IF EXISTS )? event_name
			{
			root_0 = (CommonTree)adaptor.nil();


			DROP753=(Token)match(input,DROP,FOLLOW_DROP_in_drop_event_statement26653); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DROP753_tree = (CommonTree)adaptor.create(DROP753);
			adaptor.addChild(root_0, DROP753_tree);
			}

			EVENT_SYM754=(Token)match(input,EVENT_SYM,FOLLOW_EVENT_SYM_in_drop_event_statement26655); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			EVENT_SYM754_tree = (CommonTree)adaptor.create(EVENT_SYM754);
			adaptor.addChild(root_0, EVENT_SYM754_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1890:18: ( IF EXISTS )?
			int alt244=2;
			int LA244_0 = input.LA(1);
			if ( (LA244_0==IF) ) {
				alt244=1;
			}
			switch (alt244) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1890:19: IF EXISTS
					{
					IF755=(Token)match(input,IF,FOLLOW_IF_in_drop_event_statement26658); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IF755_tree = (CommonTree)adaptor.create(IF755);
					adaptor.addChild(root_0, IF755_tree);
					}

					EXISTS756=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_drop_event_statement26660); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXISTS756_tree = (CommonTree)adaptor.create(EXISTS756);
					adaptor.addChild(root_0, EXISTS756_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_event_name_in_drop_event_statement26664);
			event_name757=event_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, event_name757.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_event_statement"


	public static class create_index_statement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "create_index_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1926:1: create_index_statement : CREATE ( UNIQUE_SYM | FULLTEXT_SYM | SPATIAL_SYM )? INDEX_SYM index_name ( index_type )? ON table_name LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( algorithm_option | lock_option )* ;
	public final SQLParser.create_index_statement_return create_index_statement() throws RecognitionException {
		SQLParser.create_index_statement_return retval = new SQLParser.create_index_statement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token CREATE758=null;
		Token set759=null;
		Token INDEX_SYM760=null;
		Token ON763=null;
		Token LPAREN765=null;
		Token COMMA767=null;
		Token RPAREN769=null;
		ParserRuleReturnScope index_name761 =null;
		ParserRuleReturnScope index_type762 =null;
		ParserRuleReturnScope table_name764 =null;
		ParserRuleReturnScope index_column_name766 =null;
		ParserRuleReturnScope index_column_name768 =null;
		ParserRuleReturnScope algorithm_option770 =null;
		ParserRuleReturnScope lock_option771 =null;

		CommonTree CREATE758_tree=null;
		CommonTree set759_tree=null;
		CommonTree INDEX_SYM760_tree=null;
		CommonTree ON763_tree=null;
		CommonTree LPAREN765_tree=null;
		CommonTree COMMA767_tree=null;
		CommonTree RPAREN769_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1926:23: ( CREATE ( UNIQUE_SYM | FULLTEXT_SYM | SPATIAL_SYM )? INDEX_SYM index_name ( index_type )? ON table_name LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( algorithm_option | lock_option )* )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1927:3: CREATE ( UNIQUE_SYM | FULLTEXT_SYM | SPATIAL_SYM )? INDEX_SYM index_name ( index_type )? ON table_name LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( algorithm_option | lock_option )*
			{
			root_0 = (CommonTree)adaptor.nil();


			CREATE758=(Token)match(input,CREATE,FOLLOW_CREATE_in_create_index_statement26687); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			CREATE758_tree = (CommonTree)adaptor.create(CREATE758);
			adaptor.addChild(root_0, CREATE758_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1927:10: ( UNIQUE_SYM | FULLTEXT_SYM | SPATIAL_SYM )?
			int alt245=2;
			int LA245_0 = input.LA(1);
			if ( (LA245_0==FULLTEXT_SYM||LA245_0==SPATIAL_SYM||LA245_0==UNIQUE_SYM) ) {
				alt245=1;
			}
			switch (alt245) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
					{
					set759=input.LT(1);
					if ( input.LA(1)==FULLTEXT_SYM||input.LA(1)==SPATIAL_SYM||input.LA(1)==UNIQUE_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set759));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			INDEX_SYM760=(Token)match(input,INDEX_SYM,FOLLOW_INDEX_SYM_in_create_index_statement26698); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			INDEX_SYM760_tree = (CommonTree)adaptor.create(INDEX_SYM760);
			adaptor.addChild(root_0, INDEX_SYM760_tree);
			}

			pushFollow(FOLLOW_index_name_in_create_index_statement26700);
			index_name761=index_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name761.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1928:3: ( index_type )?
			int alt246=2;
			int LA246_0 = input.LA(1);
			if ( (LA246_0==USING_SYM) ) {
				alt246=1;
			}
			switch (alt246) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1928:4: index_type
					{
					pushFollow(FOLLOW_index_type_in_create_index_statement26705);
					index_type762=index_type();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_type762.getTree());

					}
					break;

			}

			ON763=(Token)match(input,ON,FOLLOW_ON_in_create_index_statement26711); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			ON763_tree = (CommonTree)adaptor.create(ON763);
			adaptor.addChild(root_0, ON763_tree);
			}

			pushFollow(FOLLOW_table_name_in_create_index_statement26713);
			table_name764=table_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name764.getTree());

			LPAREN765=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_create_index_statement26715); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN765_tree = (CommonTree)adaptor.create(LPAREN765);
			adaptor.addChild(root_0, LPAREN765_tree);
			}

			pushFollow(FOLLOW_index_column_name_in_create_index_statement26717);
			index_column_name766=index_column_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name766.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1929:42: ( COMMA index_column_name )*
			loop247:
			while (true) {
				int alt247=2;
				int LA247_0 = input.LA(1);
				if ( (LA247_0==COMMA) ) {
					alt247=1;
				}

				switch (alt247) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1929:43: COMMA index_column_name
					{
					COMMA767=(Token)match(input,COMMA,FOLLOW_COMMA_in_create_index_statement26720); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA767_tree = (CommonTree)adaptor.create(COMMA767);
					adaptor.addChild(root_0, COMMA767_tree);
					}

					pushFollow(FOLLOW_index_column_name_in_create_index_statement26722);
					index_column_name768=index_column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name768.getTree());

					}
					break;

				default :
					break loop247;
				}
			}

			RPAREN769=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_create_index_statement26726); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN769_tree = (CommonTree)adaptor.create(RPAREN769);
			adaptor.addChild(root_0, RPAREN769_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1930:3: ( algorithm_option | lock_option )*
			loop248:
			while (true) {
				int alt248=3;
				int LA248_0 = input.LA(1);
				if ( (LA248_0==ALGORITHM_SYM) ) {
					alt248=1;
				}
				else if ( (LA248_0==LOCK) ) {
					alt248=2;
				}

				switch (alt248) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1930:4: algorithm_option
					{
					pushFollow(FOLLOW_algorithm_option_in_create_index_statement26731);
					algorithm_option770=algorithm_option();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, algorithm_option770.getTree());

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1930:23: lock_option
					{
					pushFollow(FOLLOW_lock_option_in_create_index_statement26735);
					lock_option771=lock_option();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, lock_option771.getTree());

					}
					break;

				default :
					break loop248;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_index_statement"


	public static class algorithm_option_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "algorithm_option"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1932:1: algorithm_option : ALGORITHM_SYM ( EQ_SYM )? ( DEFAULT | INPLACE_SYM | COPY_SYM ) ;
	public final SQLParser.algorithm_option_return algorithm_option() throws RecognitionException {
		SQLParser.algorithm_option_return retval = new SQLParser.algorithm_option_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token ALGORITHM_SYM772=null;
		Token EQ_SYM773=null;
		Token set774=null;

		CommonTree ALGORITHM_SYM772_tree=null;
		CommonTree EQ_SYM773_tree=null;
		CommonTree set774_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1932:17: ( ALGORITHM_SYM ( EQ_SYM )? ( DEFAULT | INPLACE_SYM | COPY_SYM ) )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1933:3: ALGORITHM_SYM ( EQ_SYM )? ( DEFAULT | INPLACE_SYM | COPY_SYM )
			{
			root_0 = (CommonTree)adaptor.nil();


			ALGORITHM_SYM772=(Token)match(input,ALGORITHM_SYM,FOLLOW_ALGORITHM_SYM_in_algorithm_option26746); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			ALGORITHM_SYM772_tree = (CommonTree)adaptor.create(ALGORITHM_SYM772);
			adaptor.addChild(root_0, ALGORITHM_SYM772_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1933:17: ( EQ_SYM )?
			int alt249=2;
			int LA249_0 = input.LA(1);
			if ( (LA249_0==EQ_SYM) ) {
				alt249=1;
			}
			switch (alt249) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1933:18: EQ_SYM
					{
					EQ_SYM773=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_algorithm_option26749); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EQ_SYM773_tree = (CommonTree)adaptor.create(EQ_SYM773);
					adaptor.addChild(root_0, EQ_SYM773_tree);
					}

					}
					break;

			}

			set774=input.LT(1);
			if ( input.LA(1)==COPY_SYM||input.LA(1)==DEFAULT||input.LA(1)==INPLACE_SYM ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set774));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "algorithm_option"


	public static class lock_option_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "lock_option"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1935:1: lock_option : LOCK ( EQ_SYM )? ( DEFAULT | NONE_SYM | SHARED_SYM | EXCLUSIVE_SYM ) ;
	public final SQLParser.lock_option_return lock_option() throws RecognitionException {
		SQLParser.lock_option_return retval = new SQLParser.lock_option_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LOCK775=null;
		Token EQ_SYM776=null;
		Token set777=null;

		CommonTree LOCK775_tree=null;
		CommonTree EQ_SYM776_tree=null;
		CommonTree set777_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1935:12: ( LOCK ( EQ_SYM )? ( DEFAULT | NONE_SYM | SHARED_SYM | EXCLUSIVE_SYM ) )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1936:3: LOCK ( EQ_SYM )? ( DEFAULT | NONE_SYM | SHARED_SYM | EXCLUSIVE_SYM )
			{
			root_0 = (CommonTree)adaptor.nil();


			LOCK775=(Token)match(input,LOCK,FOLLOW_LOCK_in_lock_option26768); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LOCK775_tree = (CommonTree)adaptor.create(LOCK775);
			adaptor.addChild(root_0, LOCK775_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1936:8: ( EQ_SYM )?
			int alt250=2;
			int LA250_0 = input.LA(1);
			if ( (LA250_0==EQ_SYM) ) {
				alt250=1;
			}
			switch (alt250) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1936:9: EQ_SYM
					{
					EQ_SYM776=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_lock_option26771); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EQ_SYM776_tree = (CommonTree)adaptor.create(EQ_SYM776);
					adaptor.addChild(root_0, EQ_SYM776_tree);
					}

					}
					break;

			}

			set777=input.LT(1);
			if ( input.LA(1)==DEFAULT||input.LA(1)==EXCLUSIVE_SYM||input.LA(1)==NONE_SYM||input.LA(1)==SHARED_SYM ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set777));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "lock_option"


	public static class drop_index_statement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "drop_index_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1941:1: drop_index_statement : DROP INDEX_SYM index_name ON table_name ( algorithm_option | lock_option )* ;
	public final SQLParser.drop_index_statement_return drop_index_statement() throws RecognitionException {
		SQLParser.drop_index_statement_return retval = new SQLParser.drop_index_statement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token DROP778=null;
		Token INDEX_SYM779=null;
		Token ON781=null;
		ParserRuleReturnScope index_name780 =null;
		ParserRuleReturnScope table_name782 =null;
		ParserRuleReturnScope algorithm_option783 =null;
		ParserRuleReturnScope lock_option784 =null;

		CommonTree DROP778_tree=null;
		CommonTree INDEX_SYM779_tree=null;
		CommonTree ON781_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1941:21: ( DROP INDEX_SYM index_name ON table_name ( algorithm_option | lock_option )* )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1942:3: DROP INDEX_SYM index_name ON table_name ( algorithm_option | lock_option )*
			{
			root_0 = (CommonTree)adaptor.nil();


			DROP778=(Token)match(input,DROP,FOLLOW_DROP_in_drop_index_statement26795); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DROP778_tree = (CommonTree)adaptor.create(DROP778);
			adaptor.addChild(root_0, DROP778_tree);
			}

			INDEX_SYM779=(Token)match(input,INDEX_SYM,FOLLOW_INDEX_SYM_in_drop_index_statement26797); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			INDEX_SYM779_tree = (CommonTree)adaptor.create(INDEX_SYM779);
			adaptor.addChild(root_0, INDEX_SYM779_tree);
			}

			pushFollow(FOLLOW_index_name_in_drop_index_statement26799);
			index_name780=index_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name780.getTree());

			ON781=(Token)match(input,ON,FOLLOW_ON_in_drop_index_statement26801); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			ON781_tree = (CommonTree)adaptor.create(ON781);
			adaptor.addChild(root_0, ON781_tree);
			}

			pushFollow(FOLLOW_table_name_in_drop_index_statement26803);
			table_name782=table_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name782.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1943:3: ( algorithm_option | lock_option )*
			loop251:
			while (true) {
				int alt251=3;
				int LA251_0 = input.LA(1);
				if ( (LA251_0==ALGORITHM_SYM) ) {
					alt251=1;
				}
				else if ( (LA251_0==LOCK) ) {
					alt251=2;
				}

				switch (alt251) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1943:4: algorithm_option
					{
					pushFollow(FOLLOW_algorithm_option_in_drop_index_statement26808);
					algorithm_option783=algorithm_option();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, algorithm_option783.getTree());

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1943:23: lock_option
					{
					pushFollow(FOLLOW_lock_option_in_drop_index_statement26812);
					lock_option784=lock_option();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, lock_option784.getTree());

					}
					break;

				default :
					break loop251;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_index_statement"


	public static class create_server_statement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "create_server_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1975:1: create_server_statement : CREATE SERVER_SYM server_name FOREIGN DATA_SYM WRAPPER_SYM wrapper_name OPTIONS_SYM LPAREN create_server_option ( COMMA create_server_option )* RPAREN ;
	public final SQLParser.create_server_statement_return create_server_statement() throws RecognitionException {
		SQLParser.create_server_statement_return retval = new SQLParser.create_server_statement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token CREATE785=null;
		Token SERVER_SYM786=null;
		Token FOREIGN788=null;
		Token DATA_SYM789=null;
		Token WRAPPER_SYM790=null;
		Token OPTIONS_SYM792=null;
		Token LPAREN793=null;
		Token COMMA795=null;
		Token RPAREN797=null;
		ParserRuleReturnScope server_name787 =null;
		ParserRuleReturnScope wrapper_name791 =null;
		ParserRuleReturnScope create_server_option794 =null;
		ParserRuleReturnScope create_server_option796 =null;

		CommonTree CREATE785_tree=null;
		CommonTree SERVER_SYM786_tree=null;
		CommonTree FOREIGN788_tree=null;
		CommonTree DATA_SYM789_tree=null;
		CommonTree WRAPPER_SYM790_tree=null;
		CommonTree OPTIONS_SYM792_tree=null;
		CommonTree LPAREN793_tree=null;
		CommonTree COMMA795_tree=null;
		CommonTree RPAREN797_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1975:24: ( CREATE SERVER_SYM server_name FOREIGN DATA_SYM WRAPPER_SYM wrapper_name OPTIONS_SYM LPAREN create_server_option ( COMMA create_server_option )* RPAREN )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1976:3: CREATE SERVER_SYM server_name FOREIGN DATA_SYM WRAPPER_SYM wrapper_name OPTIONS_SYM LPAREN create_server_option ( COMMA create_server_option )* RPAREN
			{
			root_0 = (CommonTree)adaptor.nil();


			CREATE785=(Token)match(input,CREATE,FOLLOW_CREATE_in_create_server_statement26839); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			CREATE785_tree = (CommonTree)adaptor.create(CREATE785);
			adaptor.addChild(root_0, CREATE785_tree);
			}

			SERVER_SYM786=(Token)match(input,SERVER_SYM,FOLLOW_SERVER_SYM_in_create_server_statement26841); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			SERVER_SYM786_tree = (CommonTree)adaptor.create(SERVER_SYM786);
			adaptor.addChild(root_0, SERVER_SYM786_tree);
			}

			pushFollow(FOLLOW_server_name_in_create_server_statement26843);
			server_name787=server_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, server_name787.getTree());

			FOREIGN788=(Token)match(input,FOREIGN,FOLLOW_FOREIGN_in_create_server_statement26847); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			FOREIGN788_tree = (CommonTree)adaptor.create(FOREIGN788);
			adaptor.addChild(root_0, FOREIGN788_tree);
			}

			DATA_SYM789=(Token)match(input,DATA_SYM,FOLLOW_DATA_SYM_in_create_server_statement26849); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DATA_SYM789_tree = (CommonTree)adaptor.create(DATA_SYM789);
			adaptor.addChild(root_0, DATA_SYM789_tree);
			}

			WRAPPER_SYM790=(Token)match(input,WRAPPER_SYM,FOLLOW_WRAPPER_SYM_in_create_server_statement26851); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			WRAPPER_SYM790_tree = (CommonTree)adaptor.create(WRAPPER_SYM790);
			adaptor.addChild(root_0, WRAPPER_SYM790_tree);
			}

			pushFollow(FOLLOW_wrapper_name_in_create_server_statement26853);
			wrapper_name791=wrapper_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, wrapper_name791.getTree());

			OPTIONS_SYM792=(Token)match(input,OPTIONS_SYM,FOLLOW_OPTIONS_SYM_in_create_server_statement26857); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			OPTIONS_SYM792_tree = (CommonTree)adaptor.create(OPTIONS_SYM792);
			adaptor.addChild(root_0, OPTIONS_SYM792_tree);
			}

			LPAREN793=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_create_server_statement26859); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN793_tree = (CommonTree)adaptor.create(LPAREN793);
			adaptor.addChild(root_0, LPAREN793_tree);
			}

			pushFollow(FOLLOW_create_server_option_in_create_server_statement26861);
			create_server_option794=create_server_option();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, create_server_option794.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1978:43: ( COMMA create_server_option )*
			loop252:
			while (true) {
				int alt252=2;
				int LA252_0 = input.LA(1);
				if ( (LA252_0==COMMA) ) {
					alt252=1;
				}

				switch (alt252) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1978:44: COMMA create_server_option
					{
					COMMA795=(Token)match(input,COMMA,FOLLOW_COMMA_in_create_server_statement26864); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA795_tree = (CommonTree)adaptor.create(COMMA795);
					adaptor.addChild(root_0, COMMA795_tree);
					}

					pushFollow(FOLLOW_create_server_option_in_create_server_statement26866);
					create_server_option796=create_server_option();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_server_option796.getTree());

					}
					break;

				default :
					break loop252;
				}
			}

			RPAREN797=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_create_server_statement26870); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN797_tree = (CommonTree)adaptor.create(RPAREN797);
			adaptor.addChild(root_0, RPAREN797_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_server_statement"


	public static class create_server_option_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "create_server_option"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1980:1: create_server_option : (| ( HOST_SYM string_literal ) | ( DATABASE string_literal ) | ( USER string_literal ) | ( PASSWORD string_literal ) | ( SOCKET_SYM string_literal ) | ( OWNER_SYM string_literal ) | ( PORT_SYM number_literal ) );
	public final SQLParser.create_server_option_return create_server_option() throws RecognitionException {
		SQLParser.create_server_option_return retval = new SQLParser.create_server_option_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token HOST_SYM798=null;
		Token DATABASE800=null;
		Token USER802=null;
		Token PASSWORD804=null;
		Token SOCKET_SYM806=null;
		Token OWNER_SYM808=null;
		Token PORT_SYM810=null;
		ParserRuleReturnScope string_literal799 =null;
		ParserRuleReturnScope string_literal801 =null;
		ParserRuleReturnScope string_literal803 =null;
		ParserRuleReturnScope string_literal805 =null;
		ParserRuleReturnScope string_literal807 =null;
		ParserRuleReturnScope string_literal809 =null;
		ParserRuleReturnScope number_literal811 =null;

		CommonTree HOST_SYM798_tree=null;
		CommonTree DATABASE800_tree=null;
		CommonTree USER802_tree=null;
		CommonTree PASSWORD804_tree=null;
		CommonTree SOCKET_SYM806_tree=null;
		CommonTree OWNER_SYM808_tree=null;
		CommonTree PORT_SYM810_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1980:21: (| ( HOST_SYM string_literal ) | ( DATABASE string_literal ) | ( USER string_literal ) | ( PASSWORD string_literal ) | ( SOCKET_SYM string_literal ) | ( OWNER_SYM string_literal ) | ( PORT_SYM number_literal ) )
			int alt253=8;
			switch ( input.LA(1) ) {
			case EOF:
			case COMMA:
			case RPAREN:
				{
				alt253=1;
				}
				break;
			case HOST_SYM:
				{
				alt253=2;
				}
				break;
			case DATABASE:
				{
				alt253=3;
				}
				break;
			case USER:
				{
				alt253=4;
				}
				break;
			case PASSWORD:
				{
				alt253=5;
				}
				break;
			case SOCKET_SYM:
				{
				alt253=6;
				}
				break;
			case OWNER_SYM:
				{
				alt253=7;
				}
				break;
			case PORT_SYM:
				{
				alt253=8;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 253, 0, input);
				throw nvae;
			}
			switch (alt253) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1981:3: 
					{
					root_0 = (CommonTree)adaptor.nil();


					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1981:5: ( HOST_SYM string_literal )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1981:5: ( HOST_SYM string_literal )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1981:7: HOST_SYM string_literal
					{
					HOST_SYM798=(Token)match(input,HOST_SYM,FOLLOW_HOST_SYM_in_create_server_option26883); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					HOST_SYM798_tree = (CommonTree)adaptor.create(HOST_SYM798);
					adaptor.addChild(root_0, HOST_SYM798_tree);
					}

					pushFollow(FOLLOW_string_literal_in_create_server_option26885);
					string_literal799=string_literal();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, string_literal799.getTree());

					}

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1982:5: ( DATABASE string_literal )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1982:5: ( DATABASE string_literal )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1982:7: DATABASE string_literal
					{
					DATABASE800=(Token)match(input,DATABASE,FOLLOW_DATABASE_in_create_server_option26895); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DATABASE800_tree = (CommonTree)adaptor.create(DATABASE800);
					adaptor.addChild(root_0, DATABASE800_tree);
					}

					pushFollow(FOLLOW_string_literal_in_create_server_option26897);
					string_literal801=string_literal();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, string_literal801.getTree());

					}

					}
					break;
				case 4 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1983:5: ( USER string_literal )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1983:5: ( USER string_literal )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1983:7: USER string_literal
					{
					USER802=(Token)match(input,USER,FOLLOW_USER_in_create_server_option26907); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					USER802_tree = (CommonTree)adaptor.create(USER802);
					adaptor.addChild(root_0, USER802_tree);
					}

					pushFollow(FOLLOW_string_literal_in_create_server_option26909);
					string_literal803=string_literal();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, string_literal803.getTree());

					}

					}
					break;
				case 5 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1984:5: ( PASSWORD string_literal )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1984:5: ( PASSWORD string_literal )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1984:7: PASSWORD string_literal
					{
					PASSWORD804=(Token)match(input,PASSWORD,FOLLOW_PASSWORD_in_create_server_option26919); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PASSWORD804_tree = (CommonTree)adaptor.create(PASSWORD804);
					adaptor.addChild(root_0, PASSWORD804_tree);
					}

					pushFollow(FOLLOW_string_literal_in_create_server_option26921);
					string_literal805=string_literal();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, string_literal805.getTree());

					}

					}
					break;
				case 6 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1985:5: ( SOCKET_SYM string_literal )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1985:5: ( SOCKET_SYM string_literal )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1985:7: SOCKET_SYM string_literal
					{
					SOCKET_SYM806=(Token)match(input,SOCKET_SYM,FOLLOW_SOCKET_SYM_in_create_server_option26931); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SOCKET_SYM806_tree = (CommonTree)adaptor.create(SOCKET_SYM806);
					adaptor.addChild(root_0, SOCKET_SYM806_tree);
					}

					pushFollow(FOLLOW_string_literal_in_create_server_option26933);
					string_literal807=string_literal();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, string_literal807.getTree());

					}

					}
					break;
				case 7 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1986:5: ( OWNER_SYM string_literal )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1986:5: ( OWNER_SYM string_literal )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1986:7: OWNER_SYM string_literal
					{
					OWNER_SYM808=(Token)match(input,OWNER_SYM,FOLLOW_OWNER_SYM_in_create_server_option26943); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					OWNER_SYM808_tree = (CommonTree)adaptor.create(OWNER_SYM808);
					adaptor.addChild(root_0, OWNER_SYM808_tree);
					}

					pushFollow(FOLLOW_string_literal_in_create_server_option26945);
					string_literal809=string_literal();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, string_literal809.getTree());

					}

					}
					break;
				case 8 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1987:5: ( PORT_SYM number_literal )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1987:5: ( PORT_SYM number_literal )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1987:7: PORT_SYM number_literal
					{
					PORT_SYM810=(Token)match(input,PORT_SYM,FOLLOW_PORT_SYM_in_create_server_option26955); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PORT_SYM810_tree = (CommonTree)adaptor.create(PORT_SYM810);
					adaptor.addChild(root_0, PORT_SYM810_tree);
					}

					pushFollow(FOLLOW_number_literal_in_create_server_option26957);
					number_literal811=number_literal();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal811.getTree());

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_server_option"


	public static class alter_server_statement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alter_server_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1992:1: alter_server_statement : ALTER SERVER_SYM server_name OPTIONS_SYM LPAREN alter_server_option ( COMMA alter_server_option )* RPAREN ;
	public final SQLParser.alter_server_statement_return alter_server_statement() throws RecognitionException {
		SQLParser.alter_server_statement_return retval = new SQLParser.alter_server_statement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token ALTER812=null;
		Token SERVER_SYM813=null;
		Token OPTIONS_SYM815=null;
		Token LPAREN816=null;
		Token COMMA818=null;
		Token RPAREN820=null;
		ParserRuleReturnScope server_name814 =null;
		ParserRuleReturnScope alter_server_option817 =null;
		ParserRuleReturnScope alter_server_option819 =null;

		CommonTree ALTER812_tree=null;
		CommonTree SERVER_SYM813_tree=null;
		CommonTree OPTIONS_SYM815_tree=null;
		CommonTree LPAREN816_tree=null;
		CommonTree COMMA818_tree=null;
		CommonTree RPAREN820_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1992:23: ( ALTER SERVER_SYM server_name OPTIONS_SYM LPAREN alter_server_option ( COMMA alter_server_option )* RPAREN )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1993:3: ALTER SERVER_SYM server_name OPTIONS_SYM LPAREN alter_server_option ( COMMA alter_server_option )* RPAREN
			{
			root_0 = (CommonTree)adaptor.nil();


			ALTER812=(Token)match(input,ALTER,FOLLOW_ALTER_in_alter_server_statement26971); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			ALTER812_tree = (CommonTree)adaptor.create(ALTER812);
			adaptor.addChild(root_0, ALTER812_tree);
			}

			SERVER_SYM813=(Token)match(input,SERVER_SYM,FOLLOW_SERVER_SYM_in_alter_server_statement26973); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			SERVER_SYM813_tree = (CommonTree)adaptor.create(SERVER_SYM813);
			adaptor.addChild(root_0, SERVER_SYM813_tree);
			}

			pushFollow(FOLLOW_server_name_in_alter_server_statement26975);
			server_name814=server_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, server_name814.getTree());

			OPTIONS_SYM815=(Token)match(input,OPTIONS_SYM,FOLLOW_OPTIONS_SYM_in_alter_server_statement26979); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			OPTIONS_SYM815_tree = (CommonTree)adaptor.create(OPTIONS_SYM815);
			adaptor.addChild(root_0, OPTIONS_SYM815_tree);
			}

			LPAREN816=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alter_server_statement26981); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN816_tree = (CommonTree)adaptor.create(LPAREN816);
			adaptor.addChild(root_0, LPAREN816_tree);
			}

			pushFollow(FOLLOW_alter_server_option_in_alter_server_statement26983);
			alter_server_option817=alter_server_option();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_server_option817.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1994:42: ( COMMA alter_server_option )*
			loop254:
			while (true) {
				int alt254=2;
				int LA254_0 = input.LA(1);
				if ( (LA254_0==COMMA) ) {
					alt254=1;
				}

				switch (alt254) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1994:43: COMMA alter_server_option
					{
					COMMA818=(Token)match(input,COMMA,FOLLOW_COMMA_in_alter_server_statement26986); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA818_tree = (CommonTree)adaptor.create(COMMA818);
					adaptor.addChild(root_0, COMMA818_tree);
					}

					pushFollow(FOLLOW_alter_server_option_in_alter_server_statement26988);
					alter_server_option819=alter_server_option();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_server_option819.getTree());

					}
					break;

				default :
					break loop254;
				}
			}

			RPAREN820=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alter_server_statement26992); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN820_tree = (CommonTree)adaptor.create(RPAREN820);
			adaptor.addChild(root_0, RPAREN820_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_server_statement"


	public static class alter_server_option_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alter_server_option"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1996:1: alter_server_option : ( USER ) ( ID | TEXT_STRING ) ;
	public final SQLParser.alter_server_option_return alter_server_option() throws RecognitionException {
		SQLParser.alter_server_option_return retval = new SQLParser.alter_server_option_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token USER821=null;
		Token set822=null;

		CommonTree USER821_tree=null;
		CommonTree set822_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1996:20: ( ( USER ) ( ID | TEXT_STRING ) )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1997:3: ( USER ) ( ID | TEXT_STRING )
			{
			root_0 = (CommonTree)adaptor.nil();


			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1997:3: ( USER )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1997:4: USER
			{
			USER821=(Token)match(input,USER,FOLLOW_USER_in_alter_server_option27002); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			USER821_tree = (CommonTree)adaptor.create(USER821);
			adaptor.addChild(root_0, USER821_tree);
			}

			}

			set822=input.LT(1);
			if ( input.LA(1)==ID||input.LA(1)==TEXT_STRING ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set822));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_server_option"


	public static class drop_server_statement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "drop_server_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2002:1: drop_server_statement : DROP SERVER_SYM ( IF EXISTS )? server_name ;
	public final SQLParser.drop_server_statement_return drop_server_statement() throws RecognitionException {
		SQLParser.drop_server_statement_return retval = new SQLParser.drop_server_statement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token DROP823=null;
		Token SERVER_SYM824=null;
		Token IF825=null;
		Token EXISTS826=null;
		ParserRuleReturnScope server_name827 =null;

		CommonTree DROP823_tree=null;
		CommonTree SERVER_SYM824_tree=null;
		CommonTree IF825_tree=null;
		CommonTree EXISTS826_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2002:22: ( DROP SERVER_SYM ( IF EXISTS )? server_name )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2003:3: DROP SERVER_SYM ( IF EXISTS )? server_name
			{
			root_0 = (CommonTree)adaptor.nil();


			DROP823=(Token)match(input,DROP,FOLLOW_DROP_in_drop_server_statement27021); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DROP823_tree = (CommonTree)adaptor.create(DROP823);
			adaptor.addChild(root_0, DROP823_tree);
			}

			SERVER_SYM824=(Token)match(input,SERVER_SYM,FOLLOW_SERVER_SYM_in_drop_server_statement27023); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			SERVER_SYM824_tree = (CommonTree)adaptor.create(SERVER_SYM824);
			adaptor.addChild(root_0, SERVER_SYM824_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2003:19: ( IF EXISTS )?
			int alt255=2;
			int LA255_0 = input.LA(1);
			if ( (LA255_0==IF) ) {
				alt255=1;
			}
			switch (alt255) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2003:20: IF EXISTS
					{
					IF825=(Token)match(input,IF,FOLLOW_IF_in_drop_server_statement27026); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IF825_tree = (CommonTree)adaptor.create(IF825);
					adaptor.addChild(root_0, IF825_tree);
					}

					EXISTS826=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_drop_server_statement27028); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXISTS826_tree = (CommonTree)adaptor.create(EXISTS826);
					adaptor.addChild(root_0, EXISTS826_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_server_name_in_drop_server_statement27032);
			server_name827=server_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, server_name827.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_server_statement"


	public static class create_table_statement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "create_table_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2012:1: create_table_statement : ( create_table_statement1 | create_table_statement2 | create_table_statement3 );
	public final SQLParser.create_table_statement_return create_table_statement() throws RecognitionException {
		SQLParser.create_table_statement_return retval = new SQLParser.create_table_statement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope create_table_statement1828 =null;
		ParserRuleReturnScope create_table_statement2829 =null;
		ParserRuleReturnScope create_table_statement3830 =null;


		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2012:23: ( create_table_statement1 | create_table_statement2 | create_table_statement3 )
			int alt256=3;
			int LA256_0 = input.LA(1);
			if ( (LA256_0==CREATE) ) {
				int LA256_1 = input.LA(2);
				if ( (LA256_1==TEMPORARY) ) {
					int LA256_2 = input.LA(3);
					if ( (LA256_2==TABLE) ) {
						int LA256_3 = input.LA(4);
						if ( (LA256_3==IF) ) {
							int LA256_4 = input.LA(5);
							if ( (LA256_4==NOT_SYM) ) {
								int LA256_6 = input.LA(6);
								if ( (LA256_6==EXISTS) ) {
									int LA256_10 = input.LA(7);
									if ( (LA256_10==ID) ) {
										switch ( input.LA(8) ) {
										case LPAREN:
											{
											int LA256_7 = input.LA(9);
											if ( (LA256_7==LIKE_SYM) ) {
												alt256=3;
											}
											else if ( (LA256_7==CHECK_SYM||LA256_7==CONSTRAINT||LA256_7==FOREIGN||LA256_7==FULLTEXT_SYM||LA256_7==ID||LA256_7==INDEX_SYM||LA256_7==KEY_SYM||LA256_7==PRIMARY_SYM||LA256_7==SPATIAL_SYM||LA256_7==UNIQUE_SYM) ) {
												alt256=1;
											}

											else {
												if (state.backtracking>0) {state.failed=true; return retval;}
												int nvaeMark = input.mark();
												try {
													for (int nvaeConsume = 0; nvaeConsume < 9 - 1; nvaeConsume++) {
														input.consume();
													}
													NoViableAltException nvae =
														new NoViableAltException("", 256, 7, input);
													throw nvae;
												} finally {
													input.rewind(nvaeMark);
												}
											}

											}
											break;
										case AUTO_INCREMENT:
										case AVG_ROW_LENGTH:
										case CHARACTER_SYM:
										case CHECKSUM_SYM:
										case COLLATE_SYM:
										case COMMENT_SYM:
										case CONNECTION_SYM:
										case DATA_SYM:
										case DEFAULT:
										case DELAY_KEY_WRITE_SYM:
										case ENGINE_SYM:
										case INDEX_SYM:
										case INSERT_METHOD:
										case KEY_BLOCK_SIZE:
										case MAX_ROWS:
										case MIN_ROWS:
										case PACK_KEYS_SYM:
										case PARTITION_SYM:
										case PASSWORD:
										case ROW_FORMAT_SYM:
										case SELECT:
										case STATS_AUTO_RECALC:
										case STATS_PERSISTENT:
										case UNION_SYM:
											{
											alt256=2;
											}
											break;
										case LIKE_SYM:
											{
											alt256=3;
											}
											break;
										default:
											if (state.backtracking>0) {state.failed=true; return retval;}
											int nvaeMark = input.mark();
											try {
												for (int nvaeConsume = 0; nvaeConsume < 8 - 1; nvaeConsume++) {
													input.consume();
												}
												NoViableAltException nvae =
													new NoViableAltException("", 256, 5, input);
												throw nvae;
											} finally {
												input.rewind(nvaeMark);
											}
										}
									}

									else {
										if (state.backtracking>0) {state.failed=true; return retval;}
										int nvaeMark = input.mark();
										try {
											for (int nvaeConsume = 0; nvaeConsume < 7 - 1; nvaeConsume++) {
												input.consume();
											}
											NoViableAltException nvae =
												new NoViableAltException("", 256, 10, input);
											throw nvae;
										} finally {
											input.rewind(nvaeMark);
										}
									}

								}

								else {
									if (state.backtracking>0) {state.failed=true; return retval;}
									int nvaeMark = input.mark();
									try {
										for (int nvaeConsume = 0; nvaeConsume < 6 - 1; nvaeConsume++) {
											input.consume();
										}
										NoViableAltException nvae =
											new NoViableAltException("", 256, 6, input);
										throw nvae;
									} finally {
										input.rewind(nvaeMark);
									}
								}

							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 256, 4, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}

						}
						else if ( (LA256_3==ID) ) {
							switch ( input.LA(5) ) {
							case LPAREN:
								{
								int LA256_7 = input.LA(6);
								if ( (LA256_7==LIKE_SYM) ) {
									alt256=3;
								}
								else if ( (LA256_7==CHECK_SYM||LA256_7==CONSTRAINT||LA256_7==FOREIGN||LA256_7==FULLTEXT_SYM||LA256_7==ID||LA256_7==INDEX_SYM||LA256_7==KEY_SYM||LA256_7==PRIMARY_SYM||LA256_7==SPATIAL_SYM||LA256_7==UNIQUE_SYM) ) {
									alt256=1;
								}

								else {
									if (state.backtracking>0) {state.failed=true; return retval;}
									int nvaeMark = input.mark();
									try {
										for (int nvaeConsume = 0; nvaeConsume < 6 - 1; nvaeConsume++) {
											input.consume();
										}
										NoViableAltException nvae =
											new NoViableAltException("", 256, 7, input);
										throw nvae;
									} finally {
										input.rewind(nvaeMark);
									}
								}

								}
								break;
							case AUTO_INCREMENT:
							case AVG_ROW_LENGTH:
							case CHARACTER_SYM:
							case CHECKSUM_SYM:
							case COLLATE_SYM:
							case COMMENT_SYM:
							case CONNECTION_SYM:
							case DATA_SYM:
							case DEFAULT:
							case DELAY_KEY_WRITE_SYM:
							case ENGINE_SYM:
							case INDEX_SYM:
							case INSERT_METHOD:
							case KEY_BLOCK_SIZE:
							case MAX_ROWS:
							case MIN_ROWS:
							case PACK_KEYS_SYM:
							case PARTITION_SYM:
							case PASSWORD:
							case ROW_FORMAT_SYM:
							case SELECT:
							case STATS_AUTO_RECALC:
							case STATS_PERSISTENT:
							case UNION_SYM:
								{
								alt256=2;
								}
								break;
							case LIKE_SYM:
								{
								alt256=3;
								}
								break;
							default:
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 256, 5, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 256, 3, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 256, 2, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}
				else if ( (LA256_1==TABLE) ) {
					int LA256_3 = input.LA(3);
					if ( (LA256_3==IF) ) {
						int LA256_4 = input.LA(4);
						if ( (LA256_4==NOT_SYM) ) {
							int LA256_6 = input.LA(5);
							if ( (LA256_6==EXISTS) ) {
								int LA256_10 = input.LA(6);
								if ( (LA256_10==ID) ) {
									switch ( input.LA(7) ) {
									case LPAREN:
										{
										int LA256_7 = input.LA(8);
										if ( (LA256_7==LIKE_SYM) ) {
											alt256=3;
										}
										else if ( (LA256_7==CHECK_SYM||LA256_7==CONSTRAINT||LA256_7==FOREIGN||LA256_7==FULLTEXT_SYM||LA256_7==ID||LA256_7==INDEX_SYM||LA256_7==KEY_SYM||LA256_7==PRIMARY_SYM||LA256_7==SPATIAL_SYM||LA256_7==UNIQUE_SYM) ) {
											alt256=1;
										}

										else {
											if (state.backtracking>0) {state.failed=true; return retval;}
											int nvaeMark = input.mark();
											try {
												for (int nvaeConsume = 0; nvaeConsume < 8 - 1; nvaeConsume++) {
													input.consume();
												}
												NoViableAltException nvae =
													new NoViableAltException("", 256, 7, input);
												throw nvae;
											} finally {
												input.rewind(nvaeMark);
											}
										}

										}
										break;
									case AUTO_INCREMENT:
									case AVG_ROW_LENGTH:
									case CHARACTER_SYM:
									case CHECKSUM_SYM:
									case COLLATE_SYM:
									case COMMENT_SYM:
									case CONNECTION_SYM:
									case DATA_SYM:
									case DEFAULT:
									case DELAY_KEY_WRITE_SYM:
									case ENGINE_SYM:
									case INDEX_SYM:
									case INSERT_METHOD:
									case KEY_BLOCK_SIZE:
									case MAX_ROWS:
									case MIN_ROWS:
									case PACK_KEYS_SYM:
									case PARTITION_SYM:
									case PASSWORD:
									case ROW_FORMAT_SYM:
									case SELECT:
									case STATS_AUTO_RECALC:
									case STATS_PERSISTENT:
									case UNION_SYM:
										{
										alt256=2;
										}
										break;
									case LIKE_SYM:
										{
										alt256=3;
										}
										break;
									default:
										if (state.backtracking>0) {state.failed=true; return retval;}
										int nvaeMark = input.mark();
										try {
											for (int nvaeConsume = 0; nvaeConsume < 7 - 1; nvaeConsume++) {
												input.consume();
											}
											NoViableAltException nvae =
												new NoViableAltException("", 256, 5, input);
											throw nvae;
										} finally {
											input.rewind(nvaeMark);
										}
									}
								}

								else {
									if (state.backtracking>0) {state.failed=true; return retval;}
									int nvaeMark = input.mark();
									try {
										for (int nvaeConsume = 0; nvaeConsume < 6 - 1; nvaeConsume++) {
											input.consume();
										}
										NoViableAltException nvae =
											new NoViableAltException("", 256, 10, input);
										throw nvae;
									} finally {
										input.rewind(nvaeMark);
									}
								}

							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 256, 6, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}

						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 256, 4, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}
					else if ( (LA256_3==ID) ) {
						switch ( input.LA(4) ) {
						case LPAREN:
							{
							int LA256_7 = input.LA(5);
							if ( (LA256_7==LIKE_SYM) ) {
								alt256=3;
							}
							else if ( (LA256_7==CHECK_SYM||LA256_7==CONSTRAINT||LA256_7==FOREIGN||LA256_7==FULLTEXT_SYM||LA256_7==ID||LA256_7==INDEX_SYM||LA256_7==KEY_SYM||LA256_7==PRIMARY_SYM||LA256_7==SPATIAL_SYM||LA256_7==UNIQUE_SYM) ) {
								alt256=1;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 256, 7, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}

							}
							break;
						case AUTO_INCREMENT:
						case AVG_ROW_LENGTH:
						case CHARACTER_SYM:
						case CHECKSUM_SYM:
						case COLLATE_SYM:
						case COMMENT_SYM:
						case CONNECTION_SYM:
						case DATA_SYM:
						case DEFAULT:
						case DELAY_KEY_WRITE_SYM:
						case ENGINE_SYM:
						case INDEX_SYM:
						case INSERT_METHOD:
						case KEY_BLOCK_SIZE:
						case MAX_ROWS:
						case MIN_ROWS:
						case PACK_KEYS_SYM:
						case PARTITION_SYM:
						case PASSWORD:
						case ROW_FORMAT_SYM:
						case SELECT:
						case STATS_AUTO_RECALC:
						case STATS_PERSISTENT:
						case UNION_SYM:
							{
							alt256=2;
							}
							break;
						case LIKE_SYM:
							{
							alt256=3;
							}
							break;
						default:
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 256, 5, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 256, 3, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 256, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 256, 0, input);
				throw nvae;
			}

			switch (alt256) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2013:3: create_table_statement1
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_create_table_statement1_in_create_table_statement27048);
					create_table_statement1828=create_table_statement1();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_table_statement1828.getTree());

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2013:29: create_table_statement2
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_create_table_statement2_in_create_table_statement27052);
					create_table_statement2829=create_table_statement2();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_table_statement2829.getTree());

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2013:55: create_table_statement3
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_create_table_statement3_in_create_table_statement27056);
					create_table_statement3830=create_table_statement3();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_table_statement3830.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_table_statement"


	public static class create_table_statement1_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "create_table_statement1"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2016:1: create_table_statement1 : CREATE ( TEMPORARY )? TABLE ( IF NOT_SYM EXISTS )? table_name LPAREN create_definition ( COMMA create_definition )* RPAREN ( table_options )? ( partition_options )? ( select_statement )? ;
	public final SQLParser.create_table_statement1_return create_table_statement1() throws RecognitionException {
		SQLParser.create_table_statement1_return retval = new SQLParser.create_table_statement1_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token CREATE831=null;
		Token TEMPORARY832=null;
		Token TABLE833=null;
		Token IF834=null;
		Token NOT_SYM835=null;
		Token EXISTS836=null;
		Token LPAREN838=null;
		Token COMMA840=null;
		Token RPAREN842=null;
		ParserRuleReturnScope table_name837 =null;
		ParserRuleReturnScope create_definition839 =null;
		ParserRuleReturnScope create_definition841 =null;
		ParserRuleReturnScope table_options843 =null;
		ParserRuleReturnScope partition_options844 =null;
		ParserRuleReturnScope select_statement845 =null;

		CommonTree CREATE831_tree=null;
		CommonTree TEMPORARY832_tree=null;
		CommonTree TABLE833_tree=null;
		CommonTree IF834_tree=null;
		CommonTree NOT_SYM835_tree=null;
		CommonTree EXISTS836_tree=null;
		CommonTree LPAREN838_tree=null;
		CommonTree COMMA840_tree=null;
		CommonTree RPAREN842_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2016:24: ( CREATE ( TEMPORARY )? TABLE ( IF NOT_SYM EXISTS )? table_name LPAREN create_definition ( COMMA create_definition )* RPAREN ( table_options )? ( partition_options )? ( select_statement )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2017:3: CREATE ( TEMPORARY )? TABLE ( IF NOT_SYM EXISTS )? table_name LPAREN create_definition ( COMMA create_definition )* RPAREN ( table_options )? ( partition_options )? ( select_statement )?
			{
			root_0 = (CommonTree)adaptor.nil();


			CREATE831=(Token)match(input,CREATE,FOLLOW_CREATE_in_create_table_statement127068); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			CREATE831_tree = (CommonTree)adaptor.create(CREATE831);
			adaptor.addChild(root_0, CREATE831_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2017:10: ( TEMPORARY )?
			int alt257=2;
			int LA257_0 = input.LA(1);
			if ( (LA257_0==TEMPORARY) ) {
				alt257=1;
			}
			switch (alt257) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2017:11: TEMPORARY
					{
					TEMPORARY832=(Token)match(input,TEMPORARY,FOLLOW_TEMPORARY_in_create_table_statement127071); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEMPORARY832_tree = (CommonTree)adaptor.create(TEMPORARY832);
					adaptor.addChild(root_0, TEMPORARY832_tree);
					}

					}
					break;

			}

			TABLE833=(Token)match(input,TABLE,FOLLOW_TABLE_in_create_table_statement127075); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			TABLE833_tree = (CommonTree)adaptor.create(TABLE833);
			adaptor.addChild(root_0, TABLE833_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2017:29: ( IF NOT_SYM EXISTS )?
			int alt258=2;
			int LA258_0 = input.LA(1);
			if ( (LA258_0==IF) ) {
				alt258=1;
			}
			switch (alt258) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2017:30: IF NOT_SYM EXISTS
					{
					IF834=(Token)match(input,IF,FOLLOW_IF_in_create_table_statement127078); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IF834_tree = (CommonTree)adaptor.create(IF834);
					adaptor.addChild(root_0, IF834_tree);
					}

					NOT_SYM835=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_create_table_statement127080); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NOT_SYM835_tree = (CommonTree)adaptor.create(NOT_SYM835);
					adaptor.addChild(root_0, NOT_SYM835_tree);
					}

					EXISTS836=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_create_table_statement127082); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXISTS836_tree = (CommonTree)adaptor.create(EXISTS836);
					adaptor.addChild(root_0, EXISTS836_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_table_name_in_create_table_statement127086);
			table_name837=table_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name837.getTree());

			LPAREN838=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_create_table_statement127090); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN838_tree = (CommonTree)adaptor.create(LPAREN838);
			adaptor.addChild(root_0, LPAREN838_tree);
			}

			pushFollow(FOLLOW_create_definition_in_create_table_statement127092);
			create_definition839=create_definition();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, create_definition839.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2018:28: ( COMMA create_definition )*
			loop259:
			while (true) {
				int alt259=2;
				int LA259_0 = input.LA(1);
				if ( (LA259_0==COMMA) ) {
					alt259=1;
				}

				switch (alt259) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2018:29: COMMA create_definition
					{
					COMMA840=(Token)match(input,COMMA,FOLLOW_COMMA_in_create_table_statement127095); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA840_tree = (CommonTree)adaptor.create(COMMA840);
					adaptor.addChild(root_0, COMMA840_tree);
					}

					pushFollow(FOLLOW_create_definition_in_create_table_statement127097);
					create_definition841=create_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_definition841.getTree());

					}
					break;

				default :
					break loop259;
				}
			}

			RPAREN842=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_create_table_statement127101); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN842_tree = (CommonTree)adaptor.create(RPAREN842);
			adaptor.addChild(root_0, RPAREN842_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2019:3: ( table_options )?
			int alt260=2;
			int LA260_0 = input.LA(1);
			if ( (LA260_0==AUTO_INCREMENT||LA260_0==AVG_ROW_LENGTH||LA260_0==CHARACTER_SYM||LA260_0==CHECKSUM_SYM||LA260_0==COLLATE_SYM||LA260_0==COMMENT_SYM||LA260_0==CONNECTION_SYM||LA260_0==DATA_SYM||LA260_0==DEFAULT||LA260_0==DELAY_KEY_WRITE_SYM||LA260_0==ENGINE_SYM||LA260_0==INDEX_SYM||LA260_0==INSERT_METHOD||LA260_0==KEY_BLOCK_SIZE||LA260_0==MAX_ROWS||LA260_0==MIN_ROWS||LA260_0==PACK_KEYS_SYM||LA260_0==PASSWORD||LA260_0==ROW_FORMAT_SYM||(LA260_0 >= STATS_AUTO_RECALC && LA260_0 <= STATS_PERSISTENT)||LA260_0==UNION_SYM) ) {
				alt260=1;
			}
			switch (alt260) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2019:4: table_options
					{
					pushFollow(FOLLOW_table_options_in_create_table_statement127106);
					table_options843=table_options();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_options843.getTree());

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2020:3: ( partition_options )?
			int alt261=2;
			int LA261_0 = input.LA(1);
			if ( (LA261_0==PARTITION_SYM) ) {
				alt261=1;
			}
			switch (alt261) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2020:4: partition_options
					{
					pushFollow(FOLLOW_partition_options_in_create_table_statement127113);
					partition_options844=partition_options();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_options844.getTree());

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2021:3: ( select_statement )?
			int alt262=2;
			int LA262_0 = input.LA(1);
			if ( (LA262_0==SELECT) ) {
				alt262=1;
			}
			switch (alt262) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2021:4: select_statement
					{
					pushFollow(FOLLOW_select_statement_in_create_table_statement127120);
					select_statement845=select_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement845.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_table_statement1"


	public static class create_table_statement2_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "create_table_statement2"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2024:1: create_table_statement2 : CREATE ( TEMPORARY )? TABLE ( IF NOT_SYM EXISTS )? table_name ( table_options )? ( partition_options )? select_statement ;
	public final SQLParser.create_table_statement2_return create_table_statement2() throws RecognitionException {
		SQLParser.create_table_statement2_return retval = new SQLParser.create_table_statement2_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token CREATE846=null;
		Token TEMPORARY847=null;
		Token TABLE848=null;
		Token IF849=null;
		Token NOT_SYM850=null;
		Token EXISTS851=null;
		ParserRuleReturnScope table_name852 =null;
		ParserRuleReturnScope table_options853 =null;
		ParserRuleReturnScope partition_options854 =null;
		ParserRuleReturnScope select_statement855 =null;

		CommonTree CREATE846_tree=null;
		CommonTree TEMPORARY847_tree=null;
		CommonTree TABLE848_tree=null;
		CommonTree IF849_tree=null;
		CommonTree NOT_SYM850_tree=null;
		CommonTree EXISTS851_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2024:24: ( CREATE ( TEMPORARY )? TABLE ( IF NOT_SYM EXISTS )? table_name ( table_options )? ( partition_options )? select_statement )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2025:3: CREATE ( TEMPORARY )? TABLE ( IF NOT_SYM EXISTS )? table_name ( table_options )? ( partition_options )? select_statement
			{
			root_0 = (CommonTree)adaptor.nil();


			CREATE846=(Token)match(input,CREATE,FOLLOW_CREATE_in_create_table_statement227132); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			CREATE846_tree = (CommonTree)adaptor.create(CREATE846);
			adaptor.addChild(root_0, CREATE846_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2025:10: ( TEMPORARY )?
			int alt263=2;
			int LA263_0 = input.LA(1);
			if ( (LA263_0==TEMPORARY) ) {
				alt263=1;
			}
			switch (alt263) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2025:11: TEMPORARY
					{
					TEMPORARY847=(Token)match(input,TEMPORARY,FOLLOW_TEMPORARY_in_create_table_statement227135); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEMPORARY847_tree = (CommonTree)adaptor.create(TEMPORARY847);
					adaptor.addChild(root_0, TEMPORARY847_tree);
					}

					}
					break;

			}

			TABLE848=(Token)match(input,TABLE,FOLLOW_TABLE_in_create_table_statement227139); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			TABLE848_tree = (CommonTree)adaptor.create(TABLE848);
			adaptor.addChild(root_0, TABLE848_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2025:29: ( IF NOT_SYM EXISTS )?
			int alt264=2;
			int LA264_0 = input.LA(1);
			if ( (LA264_0==IF) ) {
				alt264=1;
			}
			switch (alt264) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2025:30: IF NOT_SYM EXISTS
					{
					IF849=(Token)match(input,IF,FOLLOW_IF_in_create_table_statement227142); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IF849_tree = (CommonTree)adaptor.create(IF849);
					adaptor.addChild(root_0, IF849_tree);
					}

					NOT_SYM850=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_create_table_statement227144); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NOT_SYM850_tree = (CommonTree)adaptor.create(NOT_SYM850);
					adaptor.addChild(root_0, NOT_SYM850_tree);
					}

					EXISTS851=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_create_table_statement227146); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXISTS851_tree = (CommonTree)adaptor.create(EXISTS851);
					adaptor.addChild(root_0, EXISTS851_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_table_name_in_create_table_statement227150);
			table_name852=table_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name852.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2026:3: ( table_options )?
			int alt265=2;
			int LA265_0 = input.LA(1);
			if ( (LA265_0==AUTO_INCREMENT||LA265_0==AVG_ROW_LENGTH||LA265_0==CHARACTER_SYM||LA265_0==CHECKSUM_SYM||LA265_0==COLLATE_SYM||LA265_0==COMMENT_SYM||LA265_0==CONNECTION_SYM||LA265_0==DATA_SYM||LA265_0==DEFAULT||LA265_0==DELAY_KEY_WRITE_SYM||LA265_0==ENGINE_SYM||LA265_0==INDEX_SYM||LA265_0==INSERT_METHOD||LA265_0==KEY_BLOCK_SIZE||LA265_0==MAX_ROWS||LA265_0==MIN_ROWS||LA265_0==PACK_KEYS_SYM||LA265_0==PASSWORD||LA265_0==ROW_FORMAT_SYM||(LA265_0 >= STATS_AUTO_RECALC && LA265_0 <= STATS_PERSISTENT)||LA265_0==UNION_SYM) ) {
				alt265=1;
			}
			switch (alt265) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2026:4: table_options
					{
					pushFollow(FOLLOW_table_options_in_create_table_statement227155);
					table_options853=table_options();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_options853.getTree());

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2027:3: ( partition_options )?
			int alt266=2;
			int LA266_0 = input.LA(1);
			if ( (LA266_0==PARTITION_SYM) ) {
				alt266=1;
			}
			switch (alt266) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2027:4: partition_options
					{
					pushFollow(FOLLOW_partition_options_in_create_table_statement227162);
					partition_options854=partition_options();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_options854.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_select_statement_in_create_table_statement227168);
			select_statement855=select_statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement855.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_table_statement2"


	public static class create_table_statement3_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "create_table_statement3"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2031:1: create_table_statement3 : CREATE ( TEMPORARY )? TABLE ( IF NOT_SYM EXISTS )? table_name ( ( LIKE_SYM table_name ) | ( LPAREN LIKE_SYM table_name RPAREN ) ) ;
	public final SQLParser.create_table_statement3_return create_table_statement3() throws RecognitionException {
		SQLParser.create_table_statement3_return retval = new SQLParser.create_table_statement3_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token CREATE856=null;
		Token TEMPORARY857=null;
		Token TABLE858=null;
		Token IF859=null;
		Token NOT_SYM860=null;
		Token EXISTS861=null;
		Token LIKE_SYM863=null;
		Token LPAREN865=null;
		Token LIKE_SYM866=null;
		Token RPAREN868=null;
		ParserRuleReturnScope table_name862 =null;
		ParserRuleReturnScope table_name864 =null;
		ParserRuleReturnScope table_name867 =null;

		CommonTree CREATE856_tree=null;
		CommonTree TEMPORARY857_tree=null;
		CommonTree TABLE858_tree=null;
		CommonTree IF859_tree=null;
		CommonTree NOT_SYM860_tree=null;
		CommonTree EXISTS861_tree=null;
		CommonTree LIKE_SYM863_tree=null;
		CommonTree LPAREN865_tree=null;
		CommonTree LIKE_SYM866_tree=null;
		CommonTree RPAREN868_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2031:24: ( CREATE ( TEMPORARY )? TABLE ( IF NOT_SYM EXISTS )? table_name ( ( LIKE_SYM table_name ) | ( LPAREN LIKE_SYM table_name RPAREN ) ) )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2032:3: CREATE ( TEMPORARY )? TABLE ( IF NOT_SYM EXISTS )? table_name ( ( LIKE_SYM table_name ) | ( LPAREN LIKE_SYM table_name RPAREN ) )
			{
			root_0 = (CommonTree)adaptor.nil();


			CREATE856=(Token)match(input,CREATE,FOLLOW_CREATE_in_create_table_statement327178); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			CREATE856_tree = (CommonTree)adaptor.create(CREATE856);
			adaptor.addChild(root_0, CREATE856_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2032:10: ( TEMPORARY )?
			int alt267=2;
			int LA267_0 = input.LA(1);
			if ( (LA267_0==TEMPORARY) ) {
				alt267=1;
			}
			switch (alt267) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2032:11: TEMPORARY
					{
					TEMPORARY857=(Token)match(input,TEMPORARY,FOLLOW_TEMPORARY_in_create_table_statement327181); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEMPORARY857_tree = (CommonTree)adaptor.create(TEMPORARY857);
					adaptor.addChild(root_0, TEMPORARY857_tree);
					}

					}
					break;

			}

			TABLE858=(Token)match(input,TABLE,FOLLOW_TABLE_in_create_table_statement327185); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			TABLE858_tree = (CommonTree)adaptor.create(TABLE858);
			adaptor.addChild(root_0, TABLE858_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2032:29: ( IF NOT_SYM EXISTS )?
			int alt268=2;
			int LA268_0 = input.LA(1);
			if ( (LA268_0==IF) ) {
				alt268=1;
			}
			switch (alt268) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2032:30: IF NOT_SYM EXISTS
					{
					IF859=(Token)match(input,IF,FOLLOW_IF_in_create_table_statement327188); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IF859_tree = (CommonTree)adaptor.create(IF859);
					adaptor.addChild(root_0, IF859_tree);
					}

					NOT_SYM860=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_create_table_statement327190); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NOT_SYM860_tree = (CommonTree)adaptor.create(NOT_SYM860);
					adaptor.addChild(root_0, NOT_SYM860_tree);
					}

					EXISTS861=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_create_table_statement327192); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXISTS861_tree = (CommonTree)adaptor.create(EXISTS861);
					adaptor.addChild(root_0, EXISTS861_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_table_name_in_create_table_statement327196);
			table_name862=table_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name862.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2033:3: ( ( LIKE_SYM table_name ) | ( LPAREN LIKE_SYM table_name RPAREN ) )
			int alt269=2;
			int LA269_0 = input.LA(1);
			if ( (LA269_0==LIKE_SYM) ) {
				alt269=1;
			}
			else if ( (LA269_0==LPAREN) ) {
				alt269=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 269, 0, input);
				throw nvae;
			}

			switch (alt269) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2033:5: ( LIKE_SYM table_name )
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2033:5: ( LIKE_SYM table_name )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2033:6: LIKE_SYM table_name
					{
					LIKE_SYM863=(Token)match(input,LIKE_SYM,FOLLOW_LIKE_SYM_in_create_table_statement327203); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LIKE_SYM863_tree = (CommonTree)adaptor.create(LIKE_SYM863);
					adaptor.addChild(root_0, LIKE_SYM863_tree);
					}

					pushFollow(FOLLOW_table_name_in_create_table_statement327205);
					table_name864=table_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name864.getTree());

					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2033:29: ( LPAREN LIKE_SYM table_name RPAREN )
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2033:29: ( LPAREN LIKE_SYM table_name RPAREN )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2033:30: LPAREN LIKE_SYM table_name RPAREN
					{
					LPAREN865=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_create_table_statement327211); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN865_tree = (CommonTree)adaptor.create(LPAREN865);
					adaptor.addChild(root_0, LPAREN865_tree);
					}

					LIKE_SYM866=(Token)match(input,LIKE_SYM,FOLLOW_LIKE_SYM_in_create_table_statement327213); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LIKE_SYM866_tree = (CommonTree)adaptor.create(LIKE_SYM866);
					adaptor.addChild(root_0, LIKE_SYM866_tree);
					}

					pushFollow(FOLLOW_table_name_in_create_table_statement327215);
					table_name867=table_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name867.getTree());

					RPAREN868=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_create_table_statement327217); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN868_tree = (CommonTree)adaptor.create(RPAREN868);
					adaptor.addChild(root_0, RPAREN868_tree);
					}

					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_table_statement3"


	public static class create_definition_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "create_definition"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2036:1: create_definition : ( ( column_name column_definition ) | ( ( CONSTRAINT ( constraint_symbol_name )? )? PRIMARY_SYM KEY_SYM ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* ) | ( ( INDEX_SYM | KEY_SYM ) ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* ) | ( ( CONSTRAINT ( constraint_symbol_name )? )? UNIQUE_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* ) | ( ( FULLTEXT_SYM | SPATIAL_SYM ) ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* ) | ( ( CONSTRAINT ( constraint_symbol_name )? )? FOREIGN KEY_SYM ( index_name )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN reference_definition ) | ( CHECK_SYM LPAREN expression RPAREN ) );
	public final SQLParser.create_definition_return create_definition() throws RecognitionException {
		SQLParser.create_definition_return retval = new SQLParser.create_definition_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token CONSTRAINT871=null;
		Token PRIMARY_SYM873=null;
		Token KEY_SYM874=null;
		Token LPAREN876=null;
		Token COMMA878=null;
		Token RPAREN880=null;
		Token set882=null;
		Token LPAREN885=null;
		Token COMMA887=null;
		Token RPAREN889=null;
		Token CONSTRAINT891=null;
		Token UNIQUE_SYM893=null;
		Token set894=null;
		Token LPAREN897=null;
		Token COMMA899=null;
		Token RPAREN901=null;
		Token set903=null;
		Token set904=null;
		Token LPAREN906=null;
		Token COMMA908=null;
		Token RPAREN910=null;
		Token CONSTRAINT912=null;
		Token FOREIGN914=null;
		Token KEY_SYM915=null;
		Token LPAREN917=null;
		Token COMMA919=null;
		Token RPAREN921=null;
		Token CHECK_SYM923=null;
		Token LPAREN924=null;
		Token RPAREN926=null;
		ParserRuleReturnScope column_name869 =null;
		ParserRuleReturnScope column_definition870 =null;
		ParserRuleReturnScope constraint_symbol_name872 =null;
		ParserRuleReturnScope index_type875 =null;
		ParserRuleReturnScope index_column_name877 =null;
		ParserRuleReturnScope index_column_name879 =null;
		ParserRuleReturnScope index_option881 =null;
		ParserRuleReturnScope index_name883 =null;
		ParserRuleReturnScope index_type884 =null;
		ParserRuleReturnScope index_column_name886 =null;
		ParserRuleReturnScope index_column_name888 =null;
		ParserRuleReturnScope index_option890 =null;
		ParserRuleReturnScope constraint_symbol_name892 =null;
		ParserRuleReturnScope index_name895 =null;
		ParserRuleReturnScope index_type896 =null;
		ParserRuleReturnScope index_column_name898 =null;
		ParserRuleReturnScope index_column_name900 =null;
		ParserRuleReturnScope index_option902 =null;
		ParserRuleReturnScope index_name905 =null;
		ParserRuleReturnScope index_column_name907 =null;
		ParserRuleReturnScope index_column_name909 =null;
		ParserRuleReturnScope index_option911 =null;
		ParserRuleReturnScope constraint_symbol_name913 =null;
		ParserRuleReturnScope index_name916 =null;
		ParserRuleReturnScope index_column_name918 =null;
		ParserRuleReturnScope index_column_name920 =null;
		ParserRuleReturnScope reference_definition922 =null;
		ParserRuleReturnScope expression925 =null;

		CommonTree CONSTRAINT871_tree=null;
		CommonTree PRIMARY_SYM873_tree=null;
		CommonTree KEY_SYM874_tree=null;
		CommonTree LPAREN876_tree=null;
		CommonTree COMMA878_tree=null;
		CommonTree RPAREN880_tree=null;
		CommonTree set882_tree=null;
		CommonTree LPAREN885_tree=null;
		CommonTree COMMA887_tree=null;
		CommonTree RPAREN889_tree=null;
		CommonTree CONSTRAINT891_tree=null;
		CommonTree UNIQUE_SYM893_tree=null;
		CommonTree set894_tree=null;
		CommonTree LPAREN897_tree=null;
		CommonTree COMMA899_tree=null;
		CommonTree RPAREN901_tree=null;
		CommonTree set903_tree=null;
		CommonTree set904_tree=null;
		CommonTree LPAREN906_tree=null;
		CommonTree COMMA908_tree=null;
		CommonTree RPAREN910_tree=null;
		CommonTree CONSTRAINT912_tree=null;
		CommonTree FOREIGN914_tree=null;
		CommonTree KEY_SYM915_tree=null;
		CommonTree LPAREN917_tree=null;
		CommonTree COMMA919_tree=null;
		CommonTree RPAREN921_tree=null;
		CommonTree CHECK_SYM923_tree=null;
		CommonTree LPAREN924_tree=null;
		CommonTree RPAREN926_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2036:18: ( ( column_name column_definition ) | ( ( CONSTRAINT ( constraint_symbol_name )? )? PRIMARY_SYM KEY_SYM ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* ) | ( ( INDEX_SYM | KEY_SYM ) ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* ) | ( ( CONSTRAINT ( constraint_symbol_name )? )? UNIQUE_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* ) | ( ( FULLTEXT_SYM | SPATIAL_SYM ) ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* ) | ( ( CONSTRAINT ( constraint_symbol_name )? )? FOREIGN KEY_SYM ( index_name )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN reference_definition ) | ( CHECK_SYM LPAREN expression RPAREN ) )
			int alt294=7;
			switch ( input.LA(1) ) {
			case ID:
				{
				alt294=1;
				}
				break;
			case CONSTRAINT:
				{
				switch ( input.LA(2) ) {
				case ID:
					{
					switch ( input.LA(3) ) {
					case PRIMARY_SYM:
						{
						alt294=2;
						}
						break;
					case UNIQUE_SYM:
						{
						alt294=4;
						}
						break;
					case FOREIGN:
						{
						alt294=6;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 294, 9, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}
					}
					break;
				case PRIMARY_SYM:
					{
					alt294=2;
					}
					break;
				case UNIQUE_SYM:
					{
					alt294=4;
					}
					break;
				case FOREIGN:
					{
					alt294=6;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 294, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case PRIMARY_SYM:
				{
				alt294=2;
				}
				break;
			case INDEX_SYM:
			case KEY_SYM:
				{
				alt294=3;
				}
				break;
			case UNIQUE_SYM:
				{
				alt294=4;
				}
				break;
			case FULLTEXT_SYM:
			case SPATIAL_SYM:
				{
				alt294=5;
				}
				break;
			case FOREIGN:
				{
				alt294=6;
				}
				break;
			case CHECK_SYM:
				{
				alt294=7;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 294, 0, input);
				throw nvae;
			}
			switch (alt294) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2037:5: ( column_name column_definition )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2037:5: ( column_name column_definition )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2037:8: column_name column_definition
					{
					pushFollow(FOLLOW_column_name_in_create_definition27235);
					column_name869=column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name869.getTree());

					pushFollow(FOLLOW_column_definition_in_create_definition27237);
					column_definition870=column_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_definition870.getTree());

					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2038:5: ( ( CONSTRAINT ( constraint_symbol_name )? )? PRIMARY_SYM KEY_SYM ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2038:5: ( ( CONSTRAINT ( constraint_symbol_name )? )? PRIMARY_SYM KEY_SYM ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2038:8: ( CONSTRAINT ( constraint_symbol_name )? )? PRIMARY_SYM KEY_SYM ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )*
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2038:8: ( CONSTRAINT ( constraint_symbol_name )? )?
					int alt271=2;
					int LA271_0 = input.LA(1);
					if ( (LA271_0==CONSTRAINT) ) {
						alt271=1;
					}
					switch (alt271) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2038:9: CONSTRAINT ( constraint_symbol_name )?
							{
							CONSTRAINT871=(Token)match(input,CONSTRAINT,FOLLOW_CONSTRAINT_in_create_definition27250); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CONSTRAINT871_tree = (CommonTree)adaptor.create(CONSTRAINT871);
							adaptor.addChild(root_0, CONSTRAINT871_tree);
							}

							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2038:20: ( constraint_symbol_name )?
							int alt270=2;
							int LA270_0 = input.LA(1);
							if ( (LA270_0==ID) ) {
								alt270=1;
							}
							switch (alt270) {
								case 1 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2038:21: constraint_symbol_name
									{
									pushFollow(FOLLOW_constraint_symbol_name_in_create_definition27253);
									constraint_symbol_name872=constraint_symbol_name();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint_symbol_name872.getTree());

									}
									break;

							}

							}
							break;

					}

					PRIMARY_SYM873=(Token)match(input,PRIMARY_SYM,FOLLOW_PRIMARY_SYM_in_create_definition27259); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PRIMARY_SYM873_tree = (CommonTree)adaptor.create(PRIMARY_SYM873);
					adaptor.addChild(root_0, PRIMARY_SYM873_tree);
					}

					KEY_SYM874=(Token)match(input,KEY_SYM,FOLLOW_KEY_SYM_in_create_definition27261); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KEY_SYM874_tree = (CommonTree)adaptor.create(KEY_SYM874);
					adaptor.addChild(root_0, KEY_SYM874_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2038:68: ( index_type )?
					int alt272=2;
					int LA272_0 = input.LA(1);
					if ( (LA272_0==USING_SYM) ) {
						alt272=1;
					}
					switch (alt272) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2038:69: index_type
							{
							pushFollow(FOLLOW_index_type_in_create_definition27264);
							index_type875=index_type();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_type875.getTree());

							}
							break;

					}

					LPAREN876=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_create_definition27268); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN876_tree = (CommonTree)adaptor.create(LPAREN876);
					adaptor.addChild(root_0, LPAREN876_tree);
					}

					pushFollow(FOLLOW_index_column_name_in_create_definition27270);
					index_column_name877=index_column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name877.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2038:107: ( COMMA index_column_name )*
					loop273:
					while (true) {
						int alt273=2;
						int LA273_0 = input.LA(1);
						if ( (LA273_0==COMMA) ) {
							alt273=1;
						}

						switch (alt273) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2038:108: COMMA index_column_name
							{
							COMMA878=(Token)match(input,COMMA,FOLLOW_COMMA_in_create_definition27273); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA878_tree = (CommonTree)adaptor.create(COMMA878);
							adaptor.addChild(root_0, COMMA878_tree);
							}

							pushFollow(FOLLOW_index_column_name_in_create_definition27275);
							index_column_name879=index_column_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name879.getTree());

							}
							break;

						default :
							break loop273;
						}
					}

					RPAREN880=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_create_definition27279); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN880_tree = (CommonTree)adaptor.create(RPAREN880);
					adaptor.addChild(root_0, RPAREN880_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2038:141: ( index_option )*
					loop274:
					while (true) {
						int alt274=2;
						int LA274_0 = input.LA(1);
						if ( (LA274_0==COMMENT_SYM||LA274_0==KEY_BLOCK_SIZE||LA274_0==USING_SYM||LA274_0==WITH) ) {
							alt274=1;
						}

						switch (alt274) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2038:142: index_option
							{
							pushFollow(FOLLOW_index_option_in_create_definition27282);
							index_option881=index_option();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_option881.getTree());

							}
							break;

						default :
							break loop274;
						}
					}

					}

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2039:5: ( ( INDEX_SYM | KEY_SYM ) ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2039:5: ( ( INDEX_SYM | KEY_SYM ) ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2039:8: ( INDEX_SYM | KEY_SYM ) ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )*
					{
					set882=input.LT(1);
					if ( input.LA(1)==INDEX_SYM||input.LA(1)==KEY_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set882));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2039:28: ( index_name )?
					int alt275=2;
					int LA275_0 = input.LA(1);
					if ( (LA275_0==ID) ) {
						alt275=1;
					}
					switch (alt275) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2039:29: index_name
							{
							pushFollow(FOLLOW_index_name_in_create_definition27303);
							index_name883=index_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name883.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2039:42: ( index_type )?
					int alt276=2;
					int LA276_0 = input.LA(1);
					if ( (LA276_0==USING_SYM) ) {
						alt276=1;
					}
					switch (alt276) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2039:43: index_type
							{
							pushFollow(FOLLOW_index_type_in_create_definition27308);
							index_type884=index_type();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_type884.getTree());

							}
							break;

					}

					LPAREN885=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_create_definition27312); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN885_tree = (CommonTree)adaptor.create(LPAREN885);
					adaptor.addChild(root_0, LPAREN885_tree);
					}

					pushFollow(FOLLOW_index_column_name_in_create_definition27314);
					index_column_name886=index_column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name886.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2039:81: ( COMMA index_column_name )*
					loop277:
					while (true) {
						int alt277=2;
						int LA277_0 = input.LA(1);
						if ( (LA277_0==COMMA) ) {
							alt277=1;
						}

						switch (alt277) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2039:82: COMMA index_column_name
							{
							COMMA887=(Token)match(input,COMMA,FOLLOW_COMMA_in_create_definition27317); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA887_tree = (CommonTree)adaptor.create(COMMA887);
							adaptor.addChild(root_0, COMMA887_tree);
							}

							pushFollow(FOLLOW_index_column_name_in_create_definition27319);
							index_column_name888=index_column_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name888.getTree());

							}
							break;

						default :
							break loop277;
						}
					}

					RPAREN889=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_create_definition27323); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN889_tree = (CommonTree)adaptor.create(RPAREN889);
					adaptor.addChild(root_0, RPAREN889_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2039:115: ( index_option )*
					loop278:
					while (true) {
						int alt278=2;
						int LA278_0 = input.LA(1);
						if ( (LA278_0==COMMENT_SYM||LA278_0==KEY_BLOCK_SIZE||LA278_0==USING_SYM||LA278_0==WITH) ) {
							alt278=1;
						}

						switch (alt278) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2039:116: index_option
							{
							pushFollow(FOLLOW_index_option_in_create_definition27326);
							index_option890=index_option();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_option890.getTree());

							}
							break;

						default :
							break loop278;
						}
					}

					}

					}
					break;
				case 4 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2040:5: ( ( CONSTRAINT ( constraint_symbol_name )? )? UNIQUE_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2040:5: ( ( CONSTRAINT ( constraint_symbol_name )? )? UNIQUE_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2040:8: ( CONSTRAINT ( constraint_symbol_name )? )? UNIQUE_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )*
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2040:8: ( CONSTRAINT ( constraint_symbol_name )? )?
					int alt280=2;
					int LA280_0 = input.LA(1);
					if ( (LA280_0==CONSTRAINT) ) {
						alt280=1;
					}
					switch (alt280) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2040:9: CONSTRAINT ( constraint_symbol_name )?
							{
							CONSTRAINT891=(Token)match(input,CONSTRAINT,FOLLOW_CONSTRAINT_in_create_definition27341); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CONSTRAINT891_tree = (CommonTree)adaptor.create(CONSTRAINT891);
							adaptor.addChild(root_0, CONSTRAINT891_tree);
							}

							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2040:20: ( constraint_symbol_name )?
							int alt279=2;
							int LA279_0 = input.LA(1);
							if ( (LA279_0==ID) ) {
								alt279=1;
							}
							switch (alt279) {
								case 1 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2040:21: constraint_symbol_name
									{
									pushFollow(FOLLOW_constraint_symbol_name_in_create_definition27344);
									constraint_symbol_name892=constraint_symbol_name();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint_symbol_name892.getTree());

									}
									break;

							}

							}
							break;

					}

					UNIQUE_SYM893=(Token)match(input,UNIQUE_SYM,FOLLOW_UNIQUE_SYM_in_create_definition27350); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					UNIQUE_SYM893_tree = (CommonTree)adaptor.create(UNIQUE_SYM893);
					adaptor.addChild(root_0, UNIQUE_SYM893_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2040:59: ( INDEX_SYM | KEY_SYM )?
					int alt281=2;
					int LA281_0 = input.LA(1);
					if ( (LA281_0==INDEX_SYM||LA281_0==KEY_SYM) ) {
						alt281=1;
					}
					switch (alt281) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
							{
							set894=input.LT(1);
							if ( input.LA(1)==INDEX_SYM||input.LA(1)==KEY_SYM ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set894));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2040:80: ( index_name )?
					int alt282=2;
					int LA282_0 = input.LA(1);
					if ( (LA282_0==ID) ) {
						alt282=1;
					}
					switch (alt282) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2040:81: index_name
							{
							pushFollow(FOLLOW_index_name_in_create_definition27360);
							index_name895=index_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name895.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2040:94: ( index_type )?
					int alt283=2;
					int LA283_0 = input.LA(1);
					if ( (LA283_0==USING_SYM) ) {
						alt283=1;
					}
					switch (alt283) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2040:95: index_type
							{
							pushFollow(FOLLOW_index_type_in_create_definition27365);
							index_type896=index_type();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_type896.getTree());

							}
							break;

					}

					LPAREN897=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_create_definition27369); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN897_tree = (CommonTree)adaptor.create(LPAREN897);
					adaptor.addChild(root_0, LPAREN897_tree);
					}

					pushFollow(FOLLOW_index_column_name_in_create_definition27371);
					index_column_name898=index_column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name898.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2040:133: ( COMMA index_column_name )*
					loop284:
					while (true) {
						int alt284=2;
						int LA284_0 = input.LA(1);
						if ( (LA284_0==COMMA) ) {
							alt284=1;
						}

						switch (alt284) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2040:134: COMMA index_column_name
							{
							COMMA899=(Token)match(input,COMMA,FOLLOW_COMMA_in_create_definition27374); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA899_tree = (CommonTree)adaptor.create(COMMA899);
							adaptor.addChild(root_0, COMMA899_tree);
							}

							pushFollow(FOLLOW_index_column_name_in_create_definition27376);
							index_column_name900=index_column_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name900.getTree());

							}
							break;

						default :
							break loop284;
						}
					}

					RPAREN901=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_create_definition27380); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN901_tree = (CommonTree)adaptor.create(RPAREN901);
					adaptor.addChild(root_0, RPAREN901_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2040:167: ( index_option )*
					loop285:
					while (true) {
						int alt285=2;
						int LA285_0 = input.LA(1);
						if ( (LA285_0==COMMENT_SYM||LA285_0==KEY_BLOCK_SIZE||LA285_0==USING_SYM||LA285_0==WITH) ) {
							alt285=1;
						}

						switch (alt285) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2040:168: index_option
							{
							pushFollow(FOLLOW_index_option_in_create_definition27383);
							index_option902=index_option();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_option902.getTree());

							}
							break;

						default :
							break loop285;
						}
					}

					}

					}
					break;
				case 5 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2041:5: ( ( FULLTEXT_SYM | SPATIAL_SYM ) ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2041:5: ( ( FULLTEXT_SYM | SPATIAL_SYM ) ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2041:8: ( FULLTEXT_SYM | SPATIAL_SYM ) ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )*
					{
					set903=input.LT(1);
					if ( input.LA(1)==FULLTEXT_SYM||input.LA(1)==SPATIAL_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set903));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2041:35: ( INDEX_SYM | KEY_SYM )?
					int alt286=2;
					int LA286_0 = input.LA(1);
					if ( (LA286_0==INDEX_SYM||LA286_0==KEY_SYM) ) {
						alt286=1;
					}
					switch (alt286) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
							{
							set904=input.LT(1);
							if ( input.LA(1)==INDEX_SYM||input.LA(1)==KEY_SYM ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set904));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2041:56: ( index_name )?
					int alt287=2;
					int LA287_0 = input.LA(1);
					if ( (LA287_0==ID) ) {
						alt287=1;
					}
					switch (alt287) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2041:57: index_name
							{
							pushFollow(FOLLOW_index_name_in_create_definition27411);
							index_name905=index_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name905.getTree());

							}
							break;

					}

					LPAREN906=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_create_definition27415); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN906_tree = (CommonTree)adaptor.create(LPAREN906);
					adaptor.addChild(root_0, LPAREN906_tree);
					}

					pushFollow(FOLLOW_index_column_name_in_create_definition27417);
					index_column_name907=index_column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name907.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2041:95: ( COMMA index_column_name )*
					loop288:
					while (true) {
						int alt288=2;
						int LA288_0 = input.LA(1);
						if ( (LA288_0==COMMA) ) {
							alt288=1;
						}

						switch (alt288) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2041:96: COMMA index_column_name
							{
							COMMA908=(Token)match(input,COMMA,FOLLOW_COMMA_in_create_definition27420); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA908_tree = (CommonTree)adaptor.create(COMMA908);
							adaptor.addChild(root_0, COMMA908_tree);
							}

							pushFollow(FOLLOW_index_column_name_in_create_definition27422);
							index_column_name909=index_column_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name909.getTree());

							}
							break;

						default :
							break loop288;
						}
					}

					RPAREN910=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_create_definition27426); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN910_tree = (CommonTree)adaptor.create(RPAREN910);
					adaptor.addChild(root_0, RPAREN910_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2041:129: ( index_option )*
					loop289:
					while (true) {
						int alt289=2;
						int LA289_0 = input.LA(1);
						if ( (LA289_0==COMMENT_SYM||LA289_0==KEY_BLOCK_SIZE||LA289_0==USING_SYM||LA289_0==WITH) ) {
							alt289=1;
						}

						switch (alt289) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2041:130: index_option
							{
							pushFollow(FOLLOW_index_option_in_create_definition27429);
							index_option911=index_option();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_option911.getTree());

							}
							break;

						default :
							break loop289;
						}
					}

					}

					}
					break;
				case 6 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2042:5: ( ( CONSTRAINT ( constraint_symbol_name )? )? FOREIGN KEY_SYM ( index_name )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN reference_definition )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2042:5: ( ( CONSTRAINT ( constraint_symbol_name )? )? FOREIGN KEY_SYM ( index_name )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN reference_definition )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2042:8: ( CONSTRAINT ( constraint_symbol_name )? )? FOREIGN KEY_SYM ( index_name )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN reference_definition
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2042:8: ( CONSTRAINT ( constraint_symbol_name )? )?
					int alt291=2;
					int LA291_0 = input.LA(1);
					if ( (LA291_0==CONSTRAINT) ) {
						alt291=1;
					}
					switch (alt291) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2042:9: CONSTRAINT ( constraint_symbol_name )?
							{
							CONSTRAINT912=(Token)match(input,CONSTRAINT,FOLLOW_CONSTRAINT_in_create_definition27444); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CONSTRAINT912_tree = (CommonTree)adaptor.create(CONSTRAINT912);
							adaptor.addChild(root_0, CONSTRAINT912_tree);
							}

							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2042:20: ( constraint_symbol_name )?
							int alt290=2;
							int LA290_0 = input.LA(1);
							if ( (LA290_0==ID) ) {
								alt290=1;
							}
							switch (alt290) {
								case 1 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2042:21: constraint_symbol_name
									{
									pushFollow(FOLLOW_constraint_symbol_name_in_create_definition27447);
									constraint_symbol_name913=constraint_symbol_name();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint_symbol_name913.getTree());

									}
									break;

							}

							}
							break;

					}

					FOREIGN914=(Token)match(input,FOREIGN,FOLLOW_FOREIGN_in_create_definition27453); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					FOREIGN914_tree = (CommonTree)adaptor.create(FOREIGN914);
					adaptor.addChild(root_0, FOREIGN914_tree);
					}

					KEY_SYM915=(Token)match(input,KEY_SYM,FOLLOW_KEY_SYM_in_create_definition27455); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KEY_SYM915_tree = (CommonTree)adaptor.create(KEY_SYM915);
					adaptor.addChild(root_0, KEY_SYM915_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2042:64: ( index_name )?
					int alt292=2;
					int LA292_0 = input.LA(1);
					if ( (LA292_0==ID) ) {
						alt292=1;
					}
					switch (alt292) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2042:65: index_name
							{
							pushFollow(FOLLOW_index_name_in_create_definition27458);
							index_name916=index_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name916.getTree());

							}
							break;

					}

					LPAREN917=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_create_definition27462); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN917_tree = (CommonTree)adaptor.create(LPAREN917);
					adaptor.addChild(root_0, LPAREN917_tree);
					}

					pushFollow(FOLLOW_index_column_name_in_create_definition27464);
					index_column_name918=index_column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name918.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2042:103: ( COMMA index_column_name )*
					loop293:
					while (true) {
						int alt293=2;
						int LA293_0 = input.LA(1);
						if ( (LA293_0==COMMA) ) {
							alt293=1;
						}

						switch (alt293) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2042:104: COMMA index_column_name
							{
							COMMA919=(Token)match(input,COMMA,FOLLOW_COMMA_in_create_definition27467); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA919_tree = (CommonTree)adaptor.create(COMMA919);
							adaptor.addChild(root_0, COMMA919_tree);
							}

							pushFollow(FOLLOW_index_column_name_in_create_definition27469);
							index_column_name920=index_column_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name920.getTree());

							}
							break;

						default :
							break loop293;
						}
					}

					RPAREN921=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_create_definition27473); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN921_tree = (CommonTree)adaptor.create(RPAREN921);
					adaptor.addChild(root_0, RPAREN921_tree);
					}

					pushFollow(FOLLOW_reference_definition_in_create_definition27475);
					reference_definition922=reference_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, reference_definition922.getTree());

					}

					}
					break;
				case 7 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2043:5: ( CHECK_SYM LPAREN expression RPAREN )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2043:5: ( CHECK_SYM LPAREN expression RPAREN )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2043:8: CHECK_SYM LPAREN expression RPAREN
					{
					CHECK_SYM923=(Token)match(input,CHECK_SYM,FOLLOW_CHECK_SYM_in_create_definition27487); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CHECK_SYM923_tree = (CommonTree)adaptor.create(CHECK_SYM923);
					adaptor.addChild(root_0, CHECK_SYM923_tree);
					}

					LPAREN924=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_create_definition27489); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN924_tree = (CommonTree)adaptor.create(LPAREN924);
					adaptor.addChild(root_0, LPAREN924_tree);
					}

					pushFollow(FOLLOW_expression_in_create_definition27491);
					expression925=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression925.getTree());

					RPAREN926=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_create_definition27493); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN926_tree = (CommonTree)adaptor.create(RPAREN926);
					adaptor.addChild(root_0, RPAREN926_tree);
					}

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_definition"


	public static class column_definition_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "column_definition"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2046:1: column_definition : column_data_type_header ( AUTO_INCREMENT )? ( ( UNIQUE_SYM ( KEY_SYM )? ) | ( PRIMARY_SYM ( KEY_SYM )? ) )? ( COMMENT_SYM TEXT_STRING )? ( COLUMN_FORMAT ( FIXED_SYM | DYNAMIC_SYM | DEFAULT ) )? ( reference_definition )? ;
	public final SQLParser.column_definition_return column_definition() throws RecognitionException {
		SQLParser.column_definition_return retval = new SQLParser.column_definition_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token AUTO_INCREMENT928=null;
		Token UNIQUE_SYM929=null;
		Token KEY_SYM930=null;
		Token PRIMARY_SYM931=null;
		Token KEY_SYM932=null;
		Token COMMENT_SYM933=null;
		Token TEXT_STRING934=null;
		Token COLUMN_FORMAT935=null;
		Token set936=null;
		ParserRuleReturnScope column_data_type_header927 =null;
		ParserRuleReturnScope reference_definition937 =null;

		CommonTree AUTO_INCREMENT928_tree=null;
		CommonTree UNIQUE_SYM929_tree=null;
		CommonTree KEY_SYM930_tree=null;
		CommonTree PRIMARY_SYM931_tree=null;
		CommonTree KEY_SYM932_tree=null;
		CommonTree COMMENT_SYM933_tree=null;
		CommonTree TEXT_STRING934_tree=null;
		CommonTree COLUMN_FORMAT935_tree=null;
		CommonTree set936_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2046:18: ( column_data_type_header ( AUTO_INCREMENT )? ( ( UNIQUE_SYM ( KEY_SYM )? ) | ( PRIMARY_SYM ( KEY_SYM )? ) )? ( COMMENT_SYM TEXT_STRING )? ( COLUMN_FORMAT ( FIXED_SYM | DYNAMIC_SYM | DEFAULT ) )? ( reference_definition )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2047:3: column_data_type_header ( AUTO_INCREMENT )? ( ( UNIQUE_SYM ( KEY_SYM )? ) | ( PRIMARY_SYM ( KEY_SYM )? ) )? ( COMMENT_SYM TEXT_STRING )? ( COLUMN_FORMAT ( FIXED_SYM | DYNAMIC_SYM | DEFAULT ) )? ( reference_definition )?
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_column_data_type_header_in_column_definition27506);
			column_data_type_header927=column_data_type_header();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, column_data_type_header927.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2048:3: ( AUTO_INCREMENT )?
			int alt295=2;
			int LA295_0 = input.LA(1);
			if ( (LA295_0==AUTO_INCREMENT) ) {
				alt295=1;
			}
			switch (alt295) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2048:4: AUTO_INCREMENT
					{
					AUTO_INCREMENT928=(Token)match(input,AUTO_INCREMENT,FOLLOW_AUTO_INCREMENT_in_column_definition27511); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					AUTO_INCREMENT928_tree = (CommonTree)adaptor.create(AUTO_INCREMENT928);
					adaptor.addChild(root_0, AUTO_INCREMENT928_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2048:21: ( ( UNIQUE_SYM ( KEY_SYM )? ) | ( PRIMARY_SYM ( KEY_SYM )? ) )?
			int alt298=3;
			int LA298_0 = input.LA(1);
			if ( (LA298_0==UNIQUE_SYM) ) {
				alt298=1;
			}
			else if ( (LA298_0==PRIMARY_SYM) ) {
				alt298=2;
			}
			switch (alt298) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2048:23: ( UNIQUE_SYM ( KEY_SYM )? )
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2048:23: ( UNIQUE_SYM ( KEY_SYM )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2048:24: UNIQUE_SYM ( KEY_SYM )?
					{
					UNIQUE_SYM929=(Token)match(input,UNIQUE_SYM,FOLLOW_UNIQUE_SYM_in_column_definition27518); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					UNIQUE_SYM929_tree = (CommonTree)adaptor.create(UNIQUE_SYM929);
					adaptor.addChild(root_0, UNIQUE_SYM929_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2048:35: ( KEY_SYM )?
					int alt296=2;
					int LA296_0 = input.LA(1);
					if ( (LA296_0==KEY_SYM) ) {
						alt296=1;
					}
					switch (alt296) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2048:36: KEY_SYM
							{
							KEY_SYM930=(Token)match(input,KEY_SYM,FOLLOW_KEY_SYM_in_column_definition27521); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							KEY_SYM930_tree = (CommonTree)adaptor.create(KEY_SYM930);
							adaptor.addChild(root_0, KEY_SYM930_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2048:49: ( PRIMARY_SYM ( KEY_SYM )? )
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2048:49: ( PRIMARY_SYM ( KEY_SYM )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2048:50: PRIMARY_SYM ( KEY_SYM )?
					{
					PRIMARY_SYM931=(Token)match(input,PRIMARY_SYM,FOLLOW_PRIMARY_SYM_in_column_definition27529); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PRIMARY_SYM931_tree = (CommonTree)adaptor.create(PRIMARY_SYM931);
					adaptor.addChild(root_0, PRIMARY_SYM931_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2048:62: ( KEY_SYM )?
					int alt297=2;
					int LA297_0 = input.LA(1);
					if ( (LA297_0==KEY_SYM) ) {
						alt297=1;
					}
					switch (alt297) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2048:63: KEY_SYM
							{
							KEY_SYM932=(Token)match(input,KEY_SYM,FOLLOW_KEY_SYM_in_column_definition27532); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							KEY_SYM932_tree = (CommonTree)adaptor.create(KEY_SYM932);
							adaptor.addChild(root_0, KEY_SYM932_tree);
							}

							}
							break;

					}

					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2049:3: ( COMMENT_SYM TEXT_STRING )?
			int alt299=2;
			int LA299_0 = input.LA(1);
			if ( (LA299_0==COMMENT_SYM) ) {
				alt299=1;
			}
			switch (alt299) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2049:4: COMMENT_SYM TEXT_STRING
					{
					COMMENT_SYM933=(Token)match(input,COMMENT_SYM,FOLLOW_COMMENT_SYM_in_column_definition27543); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMENT_SYM933_tree = (CommonTree)adaptor.create(COMMENT_SYM933);
					adaptor.addChild(root_0, COMMENT_SYM933_tree);
					}

					TEXT_STRING934=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_column_definition27545); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING934_tree = (CommonTree)adaptor.create(TEXT_STRING934);
					adaptor.addChild(root_0, TEXT_STRING934_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2050:3: ( COLUMN_FORMAT ( FIXED_SYM | DYNAMIC_SYM | DEFAULT ) )?
			int alt300=2;
			int LA300_0 = input.LA(1);
			if ( (LA300_0==COLUMN_FORMAT) ) {
				alt300=1;
			}
			switch (alt300) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2050:4: COLUMN_FORMAT ( FIXED_SYM | DYNAMIC_SYM | DEFAULT )
					{
					COLUMN_FORMAT935=(Token)match(input,COLUMN_FORMAT,FOLLOW_COLUMN_FORMAT_in_column_definition27552); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COLUMN_FORMAT935_tree = (CommonTree)adaptor.create(COLUMN_FORMAT935);
					adaptor.addChild(root_0, COLUMN_FORMAT935_tree);
					}

					set936=input.LT(1);
					if ( input.LA(1)==DEFAULT||input.LA(1)==DYNAMIC_SYM||input.LA(1)==FIXED_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set936));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2051:3: ( reference_definition )?
			int alt301=2;
			int LA301_0 = input.LA(1);
			if ( (LA301_0==REFERENCES) ) {
				alt301=1;
			}
			switch (alt301) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2051:4: reference_definition
					{
					pushFollow(FOLLOW_reference_definition_in_column_definition27567);
					reference_definition937=reference_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, reference_definition937.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "column_definition"


	public static class null_or_notnull_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "null_or_notnull"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2054:1: null_or_notnull : ( ( NOT_SYM NULL_SYM ) | NULL_SYM );
	public final SQLParser.null_or_notnull_return null_or_notnull() throws RecognitionException {
		SQLParser.null_or_notnull_return retval = new SQLParser.null_or_notnull_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token NOT_SYM938=null;
		Token NULL_SYM939=null;
		Token NULL_SYM940=null;

		CommonTree NOT_SYM938_tree=null;
		CommonTree NULL_SYM939_tree=null;
		CommonTree NULL_SYM940_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2054:16: ( ( NOT_SYM NULL_SYM ) | NULL_SYM )
			int alt302=2;
			int LA302_0 = input.LA(1);
			if ( (LA302_0==NOT_SYM) ) {
				alt302=1;
			}
			else if ( (LA302_0==NULL_SYM) ) {
				alt302=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 302, 0, input);
				throw nvae;
			}

			switch (alt302) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2055:3: ( NOT_SYM NULL_SYM )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2055:3: ( NOT_SYM NULL_SYM )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2055:4: NOT_SYM NULL_SYM
					{
					NOT_SYM938=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_null_or_notnull27580); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NOT_SYM938_tree = (CommonTree)adaptor.create(NOT_SYM938);
					adaptor.addChild(root_0, NOT_SYM938_tree);
					}

					NULL_SYM939=(Token)match(input,NULL_SYM,FOLLOW_NULL_SYM_in_null_or_notnull27582); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NULL_SYM939_tree = (CommonTree)adaptor.create(NULL_SYM939);
					adaptor.addChild(root_0, NULL_SYM939_tree);
					}

					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2055:24: NULL_SYM
					{
					root_0 = (CommonTree)adaptor.nil();


					NULL_SYM940=(Token)match(input,NULL_SYM,FOLLOW_NULL_SYM_in_null_or_notnull27587); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NULL_SYM940_tree = (CommonTree)adaptor.create(NULL_SYM940);
					adaptor.addChild(root_0, NULL_SYM940_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "null_or_notnull"


	public static class column_data_type_header_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "column_data_type_header"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2058:1: column_data_type_header : ( ( BIT_SYM ( LPAREN length RPAREN )? ( null_or_notnull )? ( DEFAULT bit_literal )? ) | ( TINYINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( SMALLINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( MEDIUMINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( INT_SYM ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( INTEGER_SYM ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( BIGINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( REAL ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( DOUBLE_SYM ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( FLOAT_SYM ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( DECIMAL_SYM ( LPAREN length ( COMMA number_literal )? RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( NUMERIC_SYM ( LPAREN length ( COMMA number_literal )? RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( DATE_SYM ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) | ( TIME_SYM ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) | ( TIMESTAMP ( null_or_notnull )? ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING ) )? ) | ( DATETIME ( null_or_notnull )? ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING ) )? ) | ( YEAR ( null_or_notnull )? ( DEFAULT INTEGER_NUM )? ) | ( CHAR ( LPAREN length RPAREN )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) | ( VARCHAR LPAREN length RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) | ( BINARY ( LPAREN length RPAREN )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) | ( VARBINARY LPAREN length RPAREN ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) | ( TINYBLOB ( null_or_notnull )? ) | ( BLOB_SYM ( null_or_notnull )? ) | ( MEDIUMBLOB ( null_or_notnull )? ) | ( LONGBLOB ( null_or_notnull )? ) | ( TINYTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ) | ( TEXT_SYM ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ) | ( MEDIUMTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ) | ( LONGTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ) | ( ENUM LPAREN TEXT_STRING ( COMMA TEXT_STRING )* RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) | ( SET_SYM LPAREN TEXT_STRING ( COMMA TEXT_STRING )* RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) );
	public final SQLParser.column_data_type_header_return column_data_type_header() throws RecognitionException {
		SQLParser.column_data_type_header_return retval = new SQLParser.column_data_type_header_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token BIT_SYM941=null;
		Token LPAREN942=null;
		Token RPAREN944=null;
		Token DEFAULT946=null;
		Token TINYINT948=null;
		Token LPAREN949=null;
		Token RPAREN951=null;
		Token UNSIGNED_SYM952=null;
		Token ZEROFILL953=null;
		Token DEFAULT955=null;
		Token SMALLINT957=null;
		Token LPAREN958=null;
		Token RPAREN960=null;
		Token UNSIGNED_SYM961=null;
		Token ZEROFILL962=null;
		Token DEFAULT964=null;
		Token MEDIUMINT966=null;
		Token LPAREN967=null;
		Token RPAREN969=null;
		Token UNSIGNED_SYM970=null;
		Token ZEROFILL971=null;
		Token DEFAULT973=null;
		Token INT_SYM975=null;
		Token LPAREN976=null;
		Token RPAREN978=null;
		Token UNSIGNED_SYM979=null;
		Token ZEROFILL980=null;
		Token DEFAULT982=null;
		Token INTEGER_SYM984=null;
		Token LPAREN985=null;
		Token RPAREN987=null;
		Token UNSIGNED_SYM988=null;
		Token ZEROFILL989=null;
		Token DEFAULT991=null;
		Token BIGINT993=null;
		Token LPAREN994=null;
		Token RPAREN996=null;
		Token UNSIGNED_SYM997=null;
		Token ZEROFILL998=null;
		Token DEFAULT1000=null;
		Token REAL1002=null;
		Token LPAREN1003=null;
		Token COMMA1005=null;
		Token RPAREN1007=null;
		Token UNSIGNED_SYM1008=null;
		Token ZEROFILL1009=null;
		Token DEFAULT1011=null;
		Token DOUBLE_SYM1013=null;
		Token LPAREN1014=null;
		Token COMMA1016=null;
		Token RPAREN1018=null;
		Token UNSIGNED_SYM1019=null;
		Token ZEROFILL1020=null;
		Token DEFAULT1022=null;
		Token FLOAT_SYM1024=null;
		Token LPAREN1025=null;
		Token COMMA1027=null;
		Token RPAREN1029=null;
		Token UNSIGNED_SYM1030=null;
		Token ZEROFILL1031=null;
		Token DEFAULT1033=null;
		Token DECIMAL_SYM1035=null;
		Token LPAREN1036=null;
		Token COMMA1038=null;
		Token RPAREN1040=null;
		Token UNSIGNED_SYM1041=null;
		Token ZEROFILL1042=null;
		Token DEFAULT1044=null;
		Token NUMERIC_SYM1046=null;
		Token LPAREN1047=null;
		Token COMMA1049=null;
		Token RPAREN1051=null;
		Token UNSIGNED_SYM1052=null;
		Token ZEROFILL1053=null;
		Token DEFAULT1055=null;
		Token DATE_SYM1057=null;
		Token DEFAULT1059=null;
		Token TEXT_STRING1060=null;
		Token TIME_SYM1061=null;
		Token DEFAULT1063=null;
		Token TEXT_STRING1064=null;
		Token TIMESTAMP1065=null;
		Token DEFAULT1067=null;
		Token set1068=null;
		Token DATETIME1069=null;
		Token DEFAULT1071=null;
		Token set1072=null;
		Token YEAR1073=null;
		Token DEFAULT1075=null;
		Token INTEGER_NUM1076=null;
		Token CHAR1077=null;
		Token LPAREN1078=null;
		Token RPAREN1080=null;
		Token CHARACTER_SYM1081=null;
		Token SET_SYM1082=null;
		Token COLLATE_SYM1084=null;
		Token DEFAULT1087=null;
		Token TEXT_STRING1088=null;
		Token VARCHAR1089=null;
		Token LPAREN1090=null;
		Token RPAREN1092=null;
		Token CHARACTER_SYM1093=null;
		Token SET_SYM1094=null;
		Token COLLATE_SYM1096=null;
		Token DEFAULT1099=null;
		Token TEXT_STRING1100=null;
		Token BINARY1101=null;
		Token LPAREN1102=null;
		Token RPAREN1104=null;
		Token DEFAULT1106=null;
		Token TEXT_STRING1107=null;
		Token VARBINARY1108=null;
		Token LPAREN1109=null;
		Token RPAREN1111=null;
		Token DEFAULT1113=null;
		Token TEXT_STRING1114=null;
		Token TINYBLOB1115=null;
		Token BLOB_SYM1117=null;
		Token MEDIUMBLOB1119=null;
		Token LONGBLOB1121=null;
		Token TINYTEXT1123=null;
		Token BINARY1124=null;
		Token CHARACTER_SYM1125=null;
		Token SET_SYM1126=null;
		Token COLLATE_SYM1128=null;
		Token TEXT_SYM1131=null;
		Token BINARY1132=null;
		Token CHARACTER_SYM1133=null;
		Token SET_SYM1134=null;
		Token COLLATE_SYM1136=null;
		Token MEDIUMTEXT1139=null;
		Token BINARY1140=null;
		Token CHARACTER_SYM1141=null;
		Token SET_SYM1142=null;
		Token COLLATE_SYM1144=null;
		Token LONGTEXT1147=null;
		Token BINARY1148=null;
		Token CHARACTER_SYM1149=null;
		Token SET_SYM1150=null;
		Token COLLATE_SYM1152=null;
		Token ENUM1155=null;
		Token LPAREN1156=null;
		Token TEXT_STRING1157=null;
		Token COMMA1158=null;
		Token TEXT_STRING1159=null;
		Token RPAREN1160=null;
		Token CHARACTER_SYM1161=null;
		Token SET_SYM1162=null;
		Token COLLATE_SYM1164=null;
		Token DEFAULT1167=null;
		Token TEXT_STRING1168=null;
		Token SET_SYM1169=null;
		Token LPAREN1170=null;
		Token TEXT_STRING1171=null;
		Token COMMA1172=null;
		Token TEXT_STRING1173=null;
		Token RPAREN1174=null;
		Token CHARACTER_SYM1175=null;
		Token SET_SYM1176=null;
		Token COLLATE_SYM1178=null;
		Token DEFAULT1181=null;
		Token TEXT_STRING1182=null;
		ParserRuleReturnScope length943 =null;
		ParserRuleReturnScope null_or_notnull945 =null;
		ParserRuleReturnScope bit_literal947 =null;
		ParserRuleReturnScope length950 =null;
		ParserRuleReturnScope null_or_notnull954 =null;
		ParserRuleReturnScope number_literal956 =null;
		ParserRuleReturnScope length959 =null;
		ParserRuleReturnScope null_or_notnull963 =null;
		ParserRuleReturnScope number_literal965 =null;
		ParserRuleReturnScope length968 =null;
		ParserRuleReturnScope null_or_notnull972 =null;
		ParserRuleReturnScope number_literal974 =null;
		ParserRuleReturnScope length977 =null;
		ParserRuleReturnScope null_or_notnull981 =null;
		ParserRuleReturnScope number_literal983 =null;
		ParserRuleReturnScope length986 =null;
		ParserRuleReturnScope null_or_notnull990 =null;
		ParserRuleReturnScope number_literal992 =null;
		ParserRuleReturnScope length995 =null;
		ParserRuleReturnScope null_or_notnull999 =null;
		ParserRuleReturnScope number_literal1001 =null;
		ParserRuleReturnScope length1004 =null;
		ParserRuleReturnScope number_literal1006 =null;
		ParserRuleReturnScope null_or_notnull1010 =null;
		ParserRuleReturnScope number_literal1012 =null;
		ParserRuleReturnScope length1015 =null;
		ParserRuleReturnScope number_literal1017 =null;
		ParserRuleReturnScope null_or_notnull1021 =null;
		ParserRuleReturnScope number_literal1023 =null;
		ParserRuleReturnScope length1026 =null;
		ParserRuleReturnScope number_literal1028 =null;
		ParserRuleReturnScope null_or_notnull1032 =null;
		ParserRuleReturnScope number_literal1034 =null;
		ParserRuleReturnScope length1037 =null;
		ParserRuleReturnScope number_literal1039 =null;
		ParserRuleReturnScope null_or_notnull1043 =null;
		ParserRuleReturnScope number_literal1045 =null;
		ParserRuleReturnScope length1048 =null;
		ParserRuleReturnScope number_literal1050 =null;
		ParserRuleReturnScope null_or_notnull1054 =null;
		ParserRuleReturnScope number_literal1056 =null;
		ParserRuleReturnScope null_or_notnull1058 =null;
		ParserRuleReturnScope null_or_notnull1062 =null;
		ParserRuleReturnScope null_or_notnull1066 =null;
		ParserRuleReturnScope null_or_notnull1070 =null;
		ParserRuleReturnScope null_or_notnull1074 =null;
		ParserRuleReturnScope length1079 =null;
		ParserRuleReturnScope charset_name1083 =null;
		ParserRuleReturnScope collation_name1085 =null;
		ParserRuleReturnScope null_or_notnull1086 =null;
		ParserRuleReturnScope length1091 =null;
		ParserRuleReturnScope charset_name1095 =null;
		ParserRuleReturnScope collation_name1097 =null;
		ParserRuleReturnScope null_or_notnull1098 =null;
		ParserRuleReturnScope length1103 =null;
		ParserRuleReturnScope null_or_notnull1105 =null;
		ParserRuleReturnScope length1110 =null;
		ParserRuleReturnScope null_or_notnull1112 =null;
		ParserRuleReturnScope null_or_notnull1116 =null;
		ParserRuleReturnScope null_or_notnull1118 =null;
		ParserRuleReturnScope null_or_notnull1120 =null;
		ParserRuleReturnScope null_or_notnull1122 =null;
		ParserRuleReturnScope charset_name1127 =null;
		ParserRuleReturnScope collation_name1129 =null;
		ParserRuleReturnScope null_or_notnull1130 =null;
		ParserRuleReturnScope charset_name1135 =null;
		ParserRuleReturnScope collation_name1137 =null;
		ParserRuleReturnScope null_or_notnull1138 =null;
		ParserRuleReturnScope charset_name1143 =null;
		ParserRuleReturnScope collation_name1145 =null;
		ParserRuleReturnScope null_or_notnull1146 =null;
		ParserRuleReturnScope charset_name1151 =null;
		ParserRuleReturnScope collation_name1153 =null;
		ParserRuleReturnScope null_or_notnull1154 =null;
		ParserRuleReturnScope charset_name1163 =null;
		ParserRuleReturnScope collation_name1165 =null;
		ParserRuleReturnScope null_or_notnull1166 =null;
		ParserRuleReturnScope charset_name1177 =null;
		ParserRuleReturnScope collation_name1179 =null;
		ParserRuleReturnScope null_or_notnull1180 =null;

		CommonTree BIT_SYM941_tree=null;
		CommonTree LPAREN942_tree=null;
		CommonTree RPAREN944_tree=null;
		CommonTree DEFAULT946_tree=null;
		CommonTree TINYINT948_tree=null;
		CommonTree LPAREN949_tree=null;
		CommonTree RPAREN951_tree=null;
		CommonTree UNSIGNED_SYM952_tree=null;
		CommonTree ZEROFILL953_tree=null;
		CommonTree DEFAULT955_tree=null;
		CommonTree SMALLINT957_tree=null;
		CommonTree LPAREN958_tree=null;
		CommonTree RPAREN960_tree=null;
		CommonTree UNSIGNED_SYM961_tree=null;
		CommonTree ZEROFILL962_tree=null;
		CommonTree DEFAULT964_tree=null;
		CommonTree MEDIUMINT966_tree=null;
		CommonTree LPAREN967_tree=null;
		CommonTree RPAREN969_tree=null;
		CommonTree UNSIGNED_SYM970_tree=null;
		CommonTree ZEROFILL971_tree=null;
		CommonTree DEFAULT973_tree=null;
		CommonTree INT_SYM975_tree=null;
		CommonTree LPAREN976_tree=null;
		CommonTree RPAREN978_tree=null;
		CommonTree UNSIGNED_SYM979_tree=null;
		CommonTree ZEROFILL980_tree=null;
		CommonTree DEFAULT982_tree=null;
		CommonTree INTEGER_SYM984_tree=null;
		CommonTree LPAREN985_tree=null;
		CommonTree RPAREN987_tree=null;
		CommonTree UNSIGNED_SYM988_tree=null;
		CommonTree ZEROFILL989_tree=null;
		CommonTree DEFAULT991_tree=null;
		CommonTree BIGINT993_tree=null;
		CommonTree LPAREN994_tree=null;
		CommonTree RPAREN996_tree=null;
		CommonTree UNSIGNED_SYM997_tree=null;
		CommonTree ZEROFILL998_tree=null;
		CommonTree DEFAULT1000_tree=null;
		CommonTree REAL1002_tree=null;
		CommonTree LPAREN1003_tree=null;
		CommonTree COMMA1005_tree=null;
		CommonTree RPAREN1007_tree=null;
		CommonTree UNSIGNED_SYM1008_tree=null;
		CommonTree ZEROFILL1009_tree=null;
		CommonTree DEFAULT1011_tree=null;
		CommonTree DOUBLE_SYM1013_tree=null;
		CommonTree LPAREN1014_tree=null;
		CommonTree COMMA1016_tree=null;
		CommonTree RPAREN1018_tree=null;
		CommonTree UNSIGNED_SYM1019_tree=null;
		CommonTree ZEROFILL1020_tree=null;
		CommonTree DEFAULT1022_tree=null;
		CommonTree FLOAT_SYM1024_tree=null;
		CommonTree LPAREN1025_tree=null;
		CommonTree COMMA1027_tree=null;
		CommonTree RPAREN1029_tree=null;
		CommonTree UNSIGNED_SYM1030_tree=null;
		CommonTree ZEROFILL1031_tree=null;
		CommonTree DEFAULT1033_tree=null;
		CommonTree DECIMAL_SYM1035_tree=null;
		CommonTree LPAREN1036_tree=null;
		CommonTree COMMA1038_tree=null;
		CommonTree RPAREN1040_tree=null;
		CommonTree UNSIGNED_SYM1041_tree=null;
		CommonTree ZEROFILL1042_tree=null;
		CommonTree DEFAULT1044_tree=null;
		CommonTree NUMERIC_SYM1046_tree=null;
		CommonTree LPAREN1047_tree=null;
		CommonTree COMMA1049_tree=null;
		CommonTree RPAREN1051_tree=null;
		CommonTree UNSIGNED_SYM1052_tree=null;
		CommonTree ZEROFILL1053_tree=null;
		CommonTree DEFAULT1055_tree=null;
		CommonTree DATE_SYM1057_tree=null;
		CommonTree DEFAULT1059_tree=null;
		CommonTree TEXT_STRING1060_tree=null;
		CommonTree TIME_SYM1061_tree=null;
		CommonTree DEFAULT1063_tree=null;
		CommonTree TEXT_STRING1064_tree=null;
		CommonTree TIMESTAMP1065_tree=null;
		CommonTree DEFAULT1067_tree=null;
		CommonTree set1068_tree=null;
		CommonTree DATETIME1069_tree=null;
		CommonTree DEFAULT1071_tree=null;
		CommonTree set1072_tree=null;
		CommonTree YEAR1073_tree=null;
		CommonTree DEFAULT1075_tree=null;
		CommonTree INTEGER_NUM1076_tree=null;
		CommonTree CHAR1077_tree=null;
		CommonTree LPAREN1078_tree=null;
		CommonTree RPAREN1080_tree=null;
		CommonTree CHARACTER_SYM1081_tree=null;
		CommonTree SET_SYM1082_tree=null;
		CommonTree COLLATE_SYM1084_tree=null;
		CommonTree DEFAULT1087_tree=null;
		CommonTree TEXT_STRING1088_tree=null;
		CommonTree VARCHAR1089_tree=null;
		CommonTree LPAREN1090_tree=null;
		CommonTree RPAREN1092_tree=null;
		CommonTree CHARACTER_SYM1093_tree=null;
		CommonTree SET_SYM1094_tree=null;
		CommonTree COLLATE_SYM1096_tree=null;
		CommonTree DEFAULT1099_tree=null;
		CommonTree TEXT_STRING1100_tree=null;
		CommonTree BINARY1101_tree=null;
		CommonTree LPAREN1102_tree=null;
		CommonTree RPAREN1104_tree=null;
		CommonTree DEFAULT1106_tree=null;
		CommonTree TEXT_STRING1107_tree=null;
		CommonTree VARBINARY1108_tree=null;
		CommonTree LPAREN1109_tree=null;
		CommonTree RPAREN1111_tree=null;
		CommonTree DEFAULT1113_tree=null;
		CommonTree TEXT_STRING1114_tree=null;
		CommonTree TINYBLOB1115_tree=null;
		CommonTree BLOB_SYM1117_tree=null;
		CommonTree MEDIUMBLOB1119_tree=null;
		CommonTree LONGBLOB1121_tree=null;
		CommonTree TINYTEXT1123_tree=null;
		CommonTree BINARY1124_tree=null;
		CommonTree CHARACTER_SYM1125_tree=null;
		CommonTree SET_SYM1126_tree=null;
		CommonTree COLLATE_SYM1128_tree=null;
		CommonTree TEXT_SYM1131_tree=null;
		CommonTree BINARY1132_tree=null;
		CommonTree CHARACTER_SYM1133_tree=null;
		CommonTree SET_SYM1134_tree=null;
		CommonTree COLLATE_SYM1136_tree=null;
		CommonTree MEDIUMTEXT1139_tree=null;
		CommonTree BINARY1140_tree=null;
		CommonTree CHARACTER_SYM1141_tree=null;
		CommonTree SET_SYM1142_tree=null;
		CommonTree COLLATE_SYM1144_tree=null;
		CommonTree LONGTEXT1147_tree=null;
		CommonTree BINARY1148_tree=null;
		CommonTree CHARACTER_SYM1149_tree=null;
		CommonTree SET_SYM1150_tree=null;
		CommonTree COLLATE_SYM1152_tree=null;
		CommonTree ENUM1155_tree=null;
		CommonTree LPAREN1156_tree=null;
		CommonTree TEXT_STRING1157_tree=null;
		CommonTree COMMA1158_tree=null;
		CommonTree TEXT_STRING1159_tree=null;
		CommonTree RPAREN1160_tree=null;
		CommonTree CHARACTER_SYM1161_tree=null;
		CommonTree SET_SYM1162_tree=null;
		CommonTree COLLATE_SYM1164_tree=null;
		CommonTree DEFAULT1167_tree=null;
		CommonTree TEXT_STRING1168_tree=null;
		CommonTree SET_SYM1169_tree=null;
		CommonTree LPAREN1170_tree=null;
		CommonTree TEXT_STRING1171_tree=null;
		CommonTree COMMA1172_tree=null;
		CommonTree TEXT_STRING1173_tree=null;
		CommonTree RPAREN1174_tree=null;
		CommonTree CHARACTER_SYM1175_tree=null;
		CommonTree SET_SYM1176_tree=null;
		CommonTree COLLATE_SYM1178_tree=null;
		CommonTree DEFAULT1181_tree=null;
		CommonTree TEXT_STRING1182_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2058:24: ( ( BIT_SYM ( LPAREN length RPAREN )? ( null_or_notnull )? ( DEFAULT bit_literal )? ) | ( TINYINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( SMALLINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( MEDIUMINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( INT_SYM ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( INTEGER_SYM ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( BIGINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( REAL ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( DOUBLE_SYM ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( FLOAT_SYM ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( DECIMAL_SYM ( LPAREN length ( COMMA number_literal )? RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( NUMERIC_SYM ( LPAREN length ( COMMA number_literal )? RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( DATE_SYM ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) | ( TIME_SYM ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) | ( TIMESTAMP ( null_or_notnull )? ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING ) )? ) | ( DATETIME ( null_or_notnull )? ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING ) )? ) | ( YEAR ( null_or_notnull )? ( DEFAULT INTEGER_NUM )? ) | ( CHAR ( LPAREN length RPAREN )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) | ( VARCHAR LPAREN length RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) | ( BINARY ( LPAREN length RPAREN )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) | ( VARBINARY LPAREN length RPAREN ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) | ( TINYBLOB ( null_or_notnull )? ) | ( BLOB_SYM ( null_or_notnull )? ) | ( MEDIUMBLOB ( null_or_notnull )? ) | ( LONGBLOB ( null_or_notnull )? ) | ( TINYTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ) | ( TEXT_SYM ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ) | ( MEDIUMTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ) | ( LONGTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ) | ( ENUM LPAREN TEXT_STRING ( COMMA TEXT_STRING )* RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) | ( SET_SYM LPAREN TEXT_STRING ( COMMA TEXT_STRING )* RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) )
			int alt417=31;
			switch ( input.LA(1) ) {
			case BIT_SYM:
				{
				alt417=1;
				}
				break;
			case TINYINT:
				{
				alt417=2;
				}
				break;
			case SMALLINT:
				{
				alt417=3;
				}
				break;
			case MEDIUMINT:
				{
				alt417=4;
				}
				break;
			case INT_SYM:
				{
				alt417=5;
				}
				break;
			case INTEGER_SYM:
				{
				alt417=6;
				}
				break;
			case BIGINT:
				{
				alt417=7;
				}
				break;
			case REAL:
				{
				alt417=8;
				}
				break;
			case DOUBLE_SYM:
				{
				alt417=9;
				}
				break;
			case FLOAT_SYM:
				{
				alt417=10;
				}
				break;
			case DECIMAL_SYM:
				{
				alt417=11;
				}
				break;
			case NUMERIC_SYM:
				{
				alt417=12;
				}
				break;
			case DATE_SYM:
				{
				alt417=13;
				}
				break;
			case TIME_SYM:
				{
				alt417=14;
				}
				break;
			case TIMESTAMP:
				{
				alt417=15;
				}
				break;
			case DATETIME:
				{
				alt417=16;
				}
				break;
			case YEAR:
				{
				alt417=17;
				}
				break;
			case CHAR:
				{
				alt417=18;
				}
				break;
			case VARCHAR:
				{
				alt417=19;
				}
				break;
			case BINARY:
				{
				alt417=20;
				}
				break;
			case VARBINARY:
				{
				alt417=21;
				}
				break;
			case TINYBLOB:
				{
				alt417=22;
				}
				break;
			case BLOB_SYM:
				{
				alt417=23;
				}
				break;
			case MEDIUMBLOB:
				{
				alt417=24;
				}
				break;
			case LONGBLOB:
				{
				alt417=25;
				}
				break;
			case TINYTEXT:
				{
				alt417=26;
				}
				break;
			case TEXT_SYM:
				{
				alt417=27;
				}
				break;
			case MEDIUMTEXT:
				{
				alt417=28;
				}
				break;
			case LONGTEXT:
				{
				alt417=29;
				}
				break;
			case ENUM:
				{
				alt417=30;
				}
				break;
			case SET_SYM:
				{
				alt417=31;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 417, 0, input);
				throw nvae;
			}
			switch (alt417) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2059:5: ( BIT_SYM ( LPAREN length RPAREN )? ( null_or_notnull )? ( DEFAULT bit_literal )? )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2059:5: ( BIT_SYM ( LPAREN length RPAREN )? ( null_or_notnull )? ( DEFAULT bit_literal )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2059:8: BIT_SYM ( LPAREN length RPAREN )? ( null_or_notnull )? ( DEFAULT bit_literal )?
					{
					BIT_SYM941=(Token)match(input,BIT_SYM,FOLLOW_BIT_SYM_in_column_data_type_header27602); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BIT_SYM941_tree = (CommonTree)adaptor.create(BIT_SYM941);
					adaptor.addChild(root_0, BIT_SYM941_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2059:15: ( LPAREN length RPAREN )?
					int alt303=2;
					int LA303_0 = input.LA(1);
					if ( (LA303_0==LPAREN) ) {
						alt303=1;
					}
					switch (alt303) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2059:16: LPAREN length RPAREN
							{
							LPAREN942=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header27604); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN942_tree = (CommonTree)adaptor.create(LPAREN942);
							adaptor.addChild(root_0, LPAREN942_tree);
							}

							pushFollow(FOLLOW_length_in_column_data_type_header27606);
							length943=length();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, length943.getTree());

							RPAREN944=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header27608); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN944_tree = (CommonTree)adaptor.create(RPAREN944);
							adaptor.addChild(root_0, RPAREN944_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2059:39: ( null_or_notnull )?
					int alt304=2;
					int LA304_0 = input.LA(1);
					if ( (LA304_0==NOT_SYM||LA304_0==NULL_SYM) ) {
						alt304=1;
					}
					switch (alt304) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2059:40: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header27613);
							null_or_notnull945=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull945.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2059:58: ( DEFAULT bit_literal )?
					int alt305=2;
					int LA305_0 = input.LA(1);
					if ( (LA305_0==DEFAULT) ) {
						alt305=1;
					}
					switch (alt305) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2059:59: DEFAULT bit_literal
							{
							DEFAULT946=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header27618); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT946_tree = (CommonTree)adaptor.create(DEFAULT946);
							adaptor.addChild(root_0, DEFAULT946_tree);
							}

							pushFollow(FOLLOW_bit_literal_in_column_data_type_header27620);
							bit_literal947=bit_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_literal947.getTree());

							}
							break;

					}

					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2060:5: ( TINYINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2060:5: ( TINYINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2060:8: TINYINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )?
					{
					TINYINT948=(Token)match(input,TINYINT,FOLLOW_TINYINT_in_column_data_type_header27634); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TINYINT948_tree = (CommonTree)adaptor.create(TINYINT948);
					adaptor.addChild(root_0, TINYINT948_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2060:15: ( LPAREN length RPAREN )?
					int alt306=2;
					int LA306_0 = input.LA(1);
					if ( (LA306_0==LPAREN) ) {
						alt306=1;
					}
					switch (alt306) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2060:16: LPAREN length RPAREN
							{
							LPAREN949=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header27636); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN949_tree = (CommonTree)adaptor.create(LPAREN949);
							adaptor.addChild(root_0, LPAREN949_tree);
							}

							pushFollow(FOLLOW_length_in_column_data_type_header27638);
							length950=length();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, length950.getTree());

							RPAREN951=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header27640); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN951_tree = (CommonTree)adaptor.create(RPAREN951);
							adaptor.addChild(root_0, RPAREN951_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2060:39: ( UNSIGNED_SYM )?
					int alt307=2;
					int LA307_0 = input.LA(1);
					if ( (LA307_0==UNSIGNED_SYM) ) {
						alt307=1;
					}
					switch (alt307) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2060:40: UNSIGNED_SYM
							{
							UNSIGNED_SYM952=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_column_data_type_header27645); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							UNSIGNED_SYM952_tree = (CommonTree)adaptor.create(UNSIGNED_SYM952);
							adaptor.addChild(root_0, UNSIGNED_SYM952_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2060:55: ( ZEROFILL )?
					int alt308=2;
					int LA308_0 = input.LA(1);
					if ( (LA308_0==ZEROFILL) ) {
						alt308=1;
					}
					switch (alt308) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2060:56: ZEROFILL
							{
							ZEROFILL953=(Token)match(input,ZEROFILL,FOLLOW_ZEROFILL_in_column_data_type_header27650); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ZEROFILL953_tree = (CommonTree)adaptor.create(ZEROFILL953);
							adaptor.addChild(root_0, ZEROFILL953_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2060:67: ( null_or_notnull )?
					int alt309=2;
					int LA309_0 = input.LA(1);
					if ( (LA309_0==NOT_SYM||LA309_0==NULL_SYM) ) {
						alt309=1;
					}
					switch (alt309) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2060:68: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header27655);
							null_or_notnull954=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull954.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2060:86: ( DEFAULT number_literal )?
					int alt310=2;
					int LA310_0 = input.LA(1);
					if ( (LA310_0==DEFAULT) ) {
						alt310=1;
					}
					switch (alt310) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2060:87: DEFAULT number_literal
							{
							DEFAULT955=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header27660); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT955_tree = (CommonTree)adaptor.create(DEFAULT955);
							adaptor.addChild(root_0, DEFAULT955_tree);
							}

							pushFollow(FOLLOW_number_literal_in_column_data_type_header27662);
							number_literal956=number_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal956.getTree());

							}
							break;

					}

					}

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2061:5: ( SMALLINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2061:5: ( SMALLINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2061:8: SMALLINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )?
					{
					SMALLINT957=(Token)match(input,SMALLINT,FOLLOW_SMALLINT_in_column_data_type_header27676); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SMALLINT957_tree = (CommonTree)adaptor.create(SMALLINT957);
					adaptor.addChild(root_0, SMALLINT957_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2061:16: ( LPAREN length RPAREN )?
					int alt311=2;
					int LA311_0 = input.LA(1);
					if ( (LA311_0==LPAREN) ) {
						alt311=1;
					}
					switch (alt311) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2061:17: LPAREN length RPAREN
							{
							LPAREN958=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header27678); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN958_tree = (CommonTree)adaptor.create(LPAREN958);
							adaptor.addChild(root_0, LPAREN958_tree);
							}

							pushFollow(FOLLOW_length_in_column_data_type_header27680);
							length959=length();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, length959.getTree());

							RPAREN960=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header27682); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN960_tree = (CommonTree)adaptor.create(RPAREN960);
							adaptor.addChild(root_0, RPAREN960_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2061:40: ( UNSIGNED_SYM )?
					int alt312=2;
					int LA312_0 = input.LA(1);
					if ( (LA312_0==UNSIGNED_SYM) ) {
						alt312=1;
					}
					switch (alt312) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2061:41: UNSIGNED_SYM
							{
							UNSIGNED_SYM961=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_column_data_type_header27687); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							UNSIGNED_SYM961_tree = (CommonTree)adaptor.create(UNSIGNED_SYM961);
							adaptor.addChild(root_0, UNSIGNED_SYM961_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2061:56: ( ZEROFILL )?
					int alt313=2;
					int LA313_0 = input.LA(1);
					if ( (LA313_0==ZEROFILL) ) {
						alt313=1;
					}
					switch (alt313) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2061:57: ZEROFILL
							{
							ZEROFILL962=(Token)match(input,ZEROFILL,FOLLOW_ZEROFILL_in_column_data_type_header27692); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ZEROFILL962_tree = (CommonTree)adaptor.create(ZEROFILL962);
							adaptor.addChild(root_0, ZEROFILL962_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2061:68: ( null_or_notnull )?
					int alt314=2;
					int LA314_0 = input.LA(1);
					if ( (LA314_0==NOT_SYM||LA314_0==NULL_SYM) ) {
						alt314=1;
					}
					switch (alt314) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2061:69: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header27697);
							null_or_notnull963=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull963.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2061:87: ( DEFAULT number_literal )?
					int alt315=2;
					int LA315_0 = input.LA(1);
					if ( (LA315_0==DEFAULT) ) {
						alt315=1;
					}
					switch (alt315) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2061:88: DEFAULT number_literal
							{
							DEFAULT964=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header27702); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT964_tree = (CommonTree)adaptor.create(DEFAULT964);
							adaptor.addChild(root_0, DEFAULT964_tree);
							}

							pushFollow(FOLLOW_number_literal_in_column_data_type_header27704);
							number_literal965=number_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal965.getTree());

							}
							break;

					}

					}

					}
					break;
				case 4 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2062:5: ( MEDIUMINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2062:5: ( MEDIUMINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2062:8: MEDIUMINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )?
					{
					MEDIUMINT966=(Token)match(input,MEDIUMINT,FOLLOW_MEDIUMINT_in_column_data_type_header27718); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MEDIUMINT966_tree = (CommonTree)adaptor.create(MEDIUMINT966);
					adaptor.addChild(root_0, MEDIUMINT966_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2062:17: ( LPAREN length RPAREN )?
					int alt316=2;
					int LA316_0 = input.LA(1);
					if ( (LA316_0==LPAREN) ) {
						alt316=1;
					}
					switch (alt316) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2062:18: LPAREN length RPAREN
							{
							LPAREN967=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header27720); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN967_tree = (CommonTree)adaptor.create(LPAREN967);
							adaptor.addChild(root_0, LPAREN967_tree);
							}

							pushFollow(FOLLOW_length_in_column_data_type_header27722);
							length968=length();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, length968.getTree());

							RPAREN969=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header27724); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN969_tree = (CommonTree)adaptor.create(RPAREN969);
							adaptor.addChild(root_0, RPAREN969_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2062:41: ( UNSIGNED_SYM )?
					int alt317=2;
					int LA317_0 = input.LA(1);
					if ( (LA317_0==UNSIGNED_SYM) ) {
						alt317=1;
					}
					switch (alt317) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2062:42: UNSIGNED_SYM
							{
							UNSIGNED_SYM970=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_column_data_type_header27729); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							UNSIGNED_SYM970_tree = (CommonTree)adaptor.create(UNSIGNED_SYM970);
							adaptor.addChild(root_0, UNSIGNED_SYM970_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2062:57: ( ZEROFILL )?
					int alt318=2;
					int LA318_0 = input.LA(1);
					if ( (LA318_0==ZEROFILL) ) {
						alt318=1;
					}
					switch (alt318) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2062:58: ZEROFILL
							{
							ZEROFILL971=(Token)match(input,ZEROFILL,FOLLOW_ZEROFILL_in_column_data_type_header27734); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ZEROFILL971_tree = (CommonTree)adaptor.create(ZEROFILL971);
							adaptor.addChild(root_0, ZEROFILL971_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2062:69: ( null_or_notnull )?
					int alt319=2;
					int LA319_0 = input.LA(1);
					if ( (LA319_0==NOT_SYM||LA319_0==NULL_SYM) ) {
						alt319=1;
					}
					switch (alt319) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2062:70: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header27739);
							null_or_notnull972=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull972.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2062:88: ( DEFAULT number_literal )?
					int alt320=2;
					int LA320_0 = input.LA(1);
					if ( (LA320_0==DEFAULT) ) {
						alt320=1;
					}
					switch (alt320) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2062:89: DEFAULT number_literal
							{
							DEFAULT973=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header27744); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT973_tree = (CommonTree)adaptor.create(DEFAULT973);
							adaptor.addChild(root_0, DEFAULT973_tree);
							}

							pushFollow(FOLLOW_number_literal_in_column_data_type_header27746);
							number_literal974=number_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal974.getTree());

							}
							break;

					}

					}

					}
					break;
				case 5 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2063:5: ( INT_SYM ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2063:5: ( INT_SYM ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2063:8: INT_SYM ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )?
					{
					INT_SYM975=(Token)match(input,INT_SYM,FOLLOW_INT_SYM_in_column_data_type_header27760); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INT_SYM975_tree = (CommonTree)adaptor.create(INT_SYM975);
					adaptor.addChild(root_0, INT_SYM975_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2063:15: ( LPAREN length RPAREN )?
					int alt321=2;
					int LA321_0 = input.LA(1);
					if ( (LA321_0==LPAREN) ) {
						alt321=1;
					}
					switch (alt321) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2063:16: LPAREN length RPAREN
							{
							LPAREN976=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header27762); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN976_tree = (CommonTree)adaptor.create(LPAREN976);
							adaptor.addChild(root_0, LPAREN976_tree);
							}

							pushFollow(FOLLOW_length_in_column_data_type_header27764);
							length977=length();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, length977.getTree());

							RPAREN978=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header27766); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN978_tree = (CommonTree)adaptor.create(RPAREN978);
							adaptor.addChild(root_0, RPAREN978_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2063:39: ( UNSIGNED_SYM )?
					int alt322=2;
					int LA322_0 = input.LA(1);
					if ( (LA322_0==UNSIGNED_SYM) ) {
						alt322=1;
					}
					switch (alt322) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2063:40: UNSIGNED_SYM
							{
							UNSIGNED_SYM979=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_column_data_type_header27771); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							UNSIGNED_SYM979_tree = (CommonTree)adaptor.create(UNSIGNED_SYM979);
							adaptor.addChild(root_0, UNSIGNED_SYM979_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2063:55: ( ZEROFILL )?
					int alt323=2;
					int LA323_0 = input.LA(1);
					if ( (LA323_0==ZEROFILL) ) {
						alt323=1;
					}
					switch (alt323) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2063:56: ZEROFILL
							{
							ZEROFILL980=(Token)match(input,ZEROFILL,FOLLOW_ZEROFILL_in_column_data_type_header27776); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ZEROFILL980_tree = (CommonTree)adaptor.create(ZEROFILL980);
							adaptor.addChild(root_0, ZEROFILL980_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2063:67: ( null_or_notnull )?
					int alt324=2;
					int LA324_0 = input.LA(1);
					if ( (LA324_0==NOT_SYM||LA324_0==NULL_SYM) ) {
						alt324=1;
					}
					switch (alt324) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2063:68: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header27781);
							null_or_notnull981=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull981.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2063:86: ( DEFAULT number_literal )?
					int alt325=2;
					int LA325_0 = input.LA(1);
					if ( (LA325_0==DEFAULT) ) {
						alt325=1;
					}
					switch (alt325) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2063:87: DEFAULT number_literal
							{
							DEFAULT982=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header27786); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT982_tree = (CommonTree)adaptor.create(DEFAULT982);
							adaptor.addChild(root_0, DEFAULT982_tree);
							}

							pushFollow(FOLLOW_number_literal_in_column_data_type_header27788);
							number_literal983=number_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal983.getTree());

							}
							break;

					}

					}

					}
					break;
				case 6 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2064:5: ( INTEGER_SYM ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2064:5: ( INTEGER_SYM ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2064:8: INTEGER_SYM ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )?
					{
					INTEGER_SYM984=(Token)match(input,INTEGER_SYM,FOLLOW_INTEGER_SYM_in_column_data_type_header27802); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_SYM984_tree = (CommonTree)adaptor.create(INTEGER_SYM984);
					adaptor.addChild(root_0, INTEGER_SYM984_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2064:19: ( LPAREN length RPAREN )?
					int alt326=2;
					int LA326_0 = input.LA(1);
					if ( (LA326_0==LPAREN) ) {
						alt326=1;
					}
					switch (alt326) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2064:20: LPAREN length RPAREN
							{
							LPAREN985=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header27804); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN985_tree = (CommonTree)adaptor.create(LPAREN985);
							adaptor.addChild(root_0, LPAREN985_tree);
							}

							pushFollow(FOLLOW_length_in_column_data_type_header27806);
							length986=length();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, length986.getTree());

							RPAREN987=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header27808); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN987_tree = (CommonTree)adaptor.create(RPAREN987);
							adaptor.addChild(root_0, RPAREN987_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2064:43: ( UNSIGNED_SYM )?
					int alt327=2;
					int LA327_0 = input.LA(1);
					if ( (LA327_0==UNSIGNED_SYM) ) {
						alt327=1;
					}
					switch (alt327) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2064:44: UNSIGNED_SYM
							{
							UNSIGNED_SYM988=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_column_data_type_header27813); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							UNSIGNED_SYM988_tree = (CommonTree)adaptor.create(UNSIGNED_SYM988);
							adaptor.addChild(root_0, UNSIGNED_SYM988_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2064:59: ( ZEROFILL )?
					int alt328=2;
					int LA328_0 = input.LA(1);
					if ( (LA328_0==ZEROFILL) ) {
						alt328=1;
					}
					switch (alt328) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2064:60: ZEROFILL
							{
							ZEROFILL989=(Token)match(input,ZEROFILL,FOLLOW_ZEROFILL_in_column_data_type_header27818); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ZEROFILL989_tree = (CommonTree)adaptor.create(ZEROFILL989);
							adaptor.addChild(root_0, ZEROFILL989_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2064:71: ( null_or_notnull )?
					int alt329=2;
					int LA329_0 = input.LA(1);
					if ( (LA329_0==NOT_SYM||LA329_0==NULL_SYM) ) {
						alt329=1;
					}
					switch (alt329) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2064:72: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header27823);
							null_or_notnull990=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull990.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2064:90: ( DEFAULT number_literal )?
					int alt330=2;
					int LA330_0 = input.LA(1);
					if ( (LA330_0==DEFAULT) ) {
						alt330=1;
					}
					switch (alt330) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2064:91: DEFAULT number_literal
							{
							DEFAULT991=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header27828); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT991_tree = (CommonTree)adaptor.create(DEFAULT991);
							adaptor.addChild(root_0, DEFAULT991_tree);
							}

							pushFollow(FOLLOW_number_literal_in_column_data_type_header27830);
							number_literal992=number_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal992.getTree());

							}
							break;

					}

					}

					}
					break;
				case 7 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2065:5: ( BIGINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2065:5: ( BIGINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2065:8: BIGINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )?
					{
					BIGINT993=(Token)match(input,BIGINT,FOLLOW_BIGINT_in_column_data_type_header27844); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BIGINT993_tree = (CommonTree)adaptor.create(BIGINT993);
					adaptor.addChild(root_0, BIGINT993_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2065:14: ( LPAREN length RPAREN )?
					int alt331=2;
					int LA331_0 = input.LA(1);
					if ( (LA331_0==LPAREN) ) {
						alt331=1;
					}
					switch (alt331) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2065:15: LPAREN length RPAREN
							{
							LPAREN994=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header27846); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN994_tree = (CommonTree)adaptor.create(LPAREN994);
							adaptor.addChild(root_0, LPAREN994_tree);
							}

							pushFollow(FOLLOW_length_in_column_data_type_header27848);
							length995=length();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, length995.getTree());

							RPAREN996=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header27850); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN996_tree = (CommonTree)adaptor.create(RPAREN996);
							adaptor.addChild(root_0, RPAREN996_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2065:38: ( UNSIGNED_SYM )?
					int alt332=2;
					int LA332_0 = input.LA(1);
					if ( (LA332_0==UNSIGNED_SYM) ) {
						alt332=1;
					}
					switch (alt332) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2065:39: UNSIGNED_SYM
							{
							UNSIGNED_SYM997=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_column_data_type_header27855); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							UNSIGNED_SYM997_tree = (CommonTree)adaptor.create(UNSIGNED_SYM997);
							adaptor.addChild(root_0, UNSIGNED_SYM997_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2065:54: ( ZEROFILL )?
					int alt333=2;
					int LA333_0 = input.LA(1);
					if ( (LA333_0==ZEROFILL) ) {
						alt333=1;
					}
					switch (alt333) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2065:55: ZEROFILL
							{
							ZEROFILL998=(Token)match(input,ZEROFILL,FOLLOW_ZEROFILL_in_column_data_type_header27860); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ZEROFILL998_tree = (CommonTree)adaptor.create(ZEROFILL998);
							adaptor.addChild(root_0, ZEROFILL998_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2065:66: ( null_or_notnull )?
					int alt334=2;
					int LA334_0 = input.LA(1);
					if ( (LA334_0==NOT_SYM||LA334_0==NULL_SYM) ) {
						alt334=1;
					}
					switch (alt334) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2065:67: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header27865);
							null_or_notnull999=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull999.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2065:85: ( DEFAULT number_literal )?
					int alt335=2;
					int LA335_0 = input.LA(1);
					if ( (LA335_0==DEFAULT) ) {
						alt335=1;
					}
					switch (alt335) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2065:86: DEFAULT number_literal
							{
							DEFAULT1000=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header27870); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1000_tree = (CommonTree)adaptor.create(DEFAULT1000);
							adaptor.addChild(root_0, DEFAULT1000_tree);
							}

							pushFollow(FOLLOW_number_literal_in_column_data_type_header27872);
							number_literal1001=number_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal1001.getTree());

							}
							break;

					}

					}

					}
					break;
				case 8 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2066:5: ( REAL ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2066:5: ( REAL ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2066:8: REAL ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )?
					{
					REAL1002=(Token)match(input,REAL,FOLLOW_REAL_in_column_data_type_header27886); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					REAL1002_tree = (CommonTree)adaptor.create(REAL1002);
					adaptor.addChild(root_0, REAL1002_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2066:12: ( LPAREN length COMMA number_literal RPAREN )?
					int alt336=2;
					int LA336_0 = input.LA(1);
					if ( (LA336_0==LPAREN) ) {
						alt336=1;
					}
					switch (alt336) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2066:13: LPAREN length COMMA number_literal RPAREN
							{
							LPAREN1003=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header27888); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN1003_tree = (CommonTree)adaptor.create(LPAREN1003);
							adaptor.addChild(root_0, LPAREN1003_tree);
							}

							pushFollow(FOLLOW_length_in_column_data_type_header27890);
							length1004=length();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, length1004.getTree());

							COMMA1005=(Token)match(input,COMMA,FOLLOW_COMMA_in_column_data_type_header27892); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA1005_tree = (CommonTree)adaptor.create(COMMA1005);
							adaptor.addChild(root_0, COMMA1005_tree);
							}

							pushFollow(FOLLOW_number_literal_in_column_data_type_header27894);
							number_literal1006=number_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal1006.getTree());

							RPAREN1007=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header27896); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN1007_tree = (CommonTree)adaptor.create(RPAREN1007);
							adaptor.addChild(root_0, RPAREN1007_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2066:57: ( UNSIGNED_SYM )?
					int alt337=2;
					int LA337_0 = input.LA(1);
					if ( (LA337_0==UNSIGNED_SYM) ) {
						alt337=1;
					}
					switch (alt337) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2066:58: UNSIGNED_SYM
							{
							UNSIGNED_SYM1008=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_column_data_type_header27901); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							UNSIGNED_SYM1008_tree = (CommonTree)adaptor.create(UNSIGNED_SYM1008);
							adaptor.addChild(root_0, UNSIGNED_SYM1008_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2066:73: ( ZEROFILL )?
					int alt338=2;
					int LA338_0 = input.LA(1);
					if ( (LA338_0==ZEROFILL) ) {
						alt338=1;
					}
					switch (alt338) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2066:74: ZEROFILL
							{
							ZEROFILL1009=(Token)match(input,ZEROFILL,FOLLOW_ZEROFILL_in_column_data_type_header27906); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ZEROFILL1009_tree = (CommonTree)adaptor.create(ZEROFILL1009);
							adaptor.addChild(root_0, ZEROFILL1009_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2066:85: ( null_or_notnull )?
					int alt339=2;
					int LA339_0 = input.LA(1);
					if ( (LA339_0==NOT_SYM||LA339_0==NULL_SYM) ) {
						alt339=1;
					}
					switch (alt339) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2066:86: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header27911);
							null_or_notnull1010=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1010.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2066:104: ( DEFAULT number_literal )?
					int alt340=2;
					int LA340_0 = input.LA(1);
					if ( (LA340_0==DEFAULT) ) {
						alt340=1;
					}
					switch (alt340) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2066:105: DEFAULT number_literal
							{
							DEFAULT1011=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header27916); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1011_tree = (CommonTree)adaptor.create(DEFAULT1011);
							adaptor.addChild(root_0, DEFAULT1011_tree);
							}

							pushFollow(FOLLOW_number_literal_in_column_data_type_header27918);
							number_literal1012=number_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal1012.getTree());

							}
							break;

					}

					}

					}
					break;
				case 9 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2067:5: ( DOUBLE_SYM ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2067:5: ( DOUBLE_SYM ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2067:8: DOUBLE_SYM ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )?
					{
					DOUBLE_SYM1013=(Token)match(input,DOUBLE_SYM,FOLLOW_DOUBLE_SYM_in_column_data_type_header27932); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DOUBLE_SYM1013_tree = (CommonTree)adaptor.create(DOUBLE_SYM1013);
					adaptor.addChild(root_0, DOUBLE_SYM1013_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2067:18: ( LPAREN length COMMA number_literal RPAREN )?
					int alt341=2;
					int LA341_0 = input.LA(1);
					if ( (LA341_0==LPAREN) ) {
						alt341=1;
					}
					switch (alt341) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2067:19: LPAREN length COMMA number_literal RPAREN
							{
							LPAREN1014=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header27934); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN1014_tree = (CommonTree)adaptor.create(LPAREN1014);
							adaptor.addChild(root_0, LPAREN1014_tree);
							}

							pushFollow(FOLLOW_length_in_column_data_type_header27936);
							length1015=length();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, length1015.getTree());

							COMMA1016=(Token)match(input,COMMA,FOLLOW_COMMA_in_column_data_type_header27938); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA1016_tree = (CommonTree)adaptor.create(COMMA1016);
							adaptor.addChild(root_0, COMMA1016_tree);
							}

							pushFollow(FOLLOW_number_literal_in_column_data_type_header27940);
							number_literal1017=number_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal1017.getTree());

							RPAREN1018=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header27942); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN1018_tree = (CommonTree)adaptor.create(RPAREN1018);
							adaptor.addChild(root_0, RPAREN1018_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2067:63: ( UNSIGNED_SYM )?
					int alt342=2;
					int LA342_0 = input.LA(1);
					if ( (LA342_0==UNSIGNED_SYM) ) {
						alt342=1;
					}
					switch (alt342) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2067:64: UNSIGNED_SYM
							{
							UNSIGNED_SYM1019=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_column_data_type_header27947); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							UNSIGNED_SYM1019_tree = (CommonTree)adaptor.create(UNSIGNED_SYM1019);
							adaptor.addChild(root_0, UNSIGNED_SYM1019_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2067:79: ( ZEROFILL )?
					int alt343=2;
					int LA343_0 = input.LA(1);
					if ( (LA343_0==ZEROFILL) ) {
						alt343=1;
					}
					switch (alt343) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2067:80: ZEROFILL
							{
							ZEROFILL1020=(Token)match(input,ZEROFILL,FOLLOW_ZEROFILL_in_column_data_type_header27952); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ZEROFILL1020_tree = (CommonTree)adaptor.create(ZEROFILL1020);
							adaptor.addChild(root_0, ZEROFILL1020_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2067:91: ( null_or_notnull )?
					int alt344=2;
					int LA344_0 = input.LA(1);
					if ( (LA344_0==NOT_SYM||LA344_0==NULL_SYM) ) {
						alt344=1;
					}
					switch (alt344) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2067:92: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header27957);
							null_or_notnull1021=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1021.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2067:110: ( DEFAULT number_literal )?
					int alt345=2;
					int LA345_0 = input.LA(1);
					if ( (LA345_0==DEFAULT) ) {
						alt345=1;
					}
					switch (alt345) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2067:111: DEFAULT number_literal
							{
							DEFAULT1022=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header27962); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1022_tree = (CommonTree)adaptor.create(DEFAULT1022);
							adaptor.addChild(root_0, DEFAULT1022_tree);
							}

							pushFollow(FOLLOW_number_literal_in_column_data_type_header27964);
							number_literal1023=number_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal1023.getTree());

							}
							break;

					}

					}

					}
					break;
				case 10 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2068:5: ( FLOAT_SYM ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2068:5: ( FLOAT_SYM ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2068:8: FLOAT_SYM ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )?
					{
					FLOAT_SYM1024=(Token)match(input,FLOAT_SYM,FOLLOW_FLOAT_SYM_in_column_data_type_header27978); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					FLOAT_SYM1024_tree = (CommonTree)adaptor.create(FLOAT_SYM1024);
					adaptor.addChild(root_0, FLOAT_SYM1024_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2068:17: ( LPAREN length COMMA number_literal RPAREN )?
					int alt346=2;
					int LA346_0 = input.LA(1);
					if ( (LA346_0==LPAREN) ) {
						alt346=1;
					}
					switch (alt346) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2068:18: LPAREN length COMMA number_literal RPAREN
							{
							LPAREN1025=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header27980); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN1025_tree = (CommonTree)adaptor.create(LPAREN1025);
							adaptor.addChild(root_0, LPAREN1025_tree);
							}

							pushFollow(FOLLOW_length_in_column_data_type_header27982);
							length1026=length();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, length1026.getTree());

							COMMA1027=(Token)match(input,COMMA,FOLLOW_COMMA_in_column_data_type_header27984); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA1027_tree = (CommonTree)adaptor.create(COMMA1027);
							adaptor.addChild(root_0, COMMA1027_tree);
							}

							pushFollow(FOLLOW_number_literal_in_column_data_type_header27986);
							number_literal1028=number_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal1028.getTree());

							RPAREN1029=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header27988); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN1029_tree = (CommonTree)adaptor.create(RPAREN1029);
							adaptor.addChild(root_0, RPAREN1029_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2068:62: ( UNSIGNED_SYM )?
					int alt347=2;
					int LA347_0 = input.LA(1);
					if ( (LA347_0==UNSIGNED_SYM) ) {
						alt347=1;
					}
					switch (alt347) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2068:63: UNSIGNED_SYM
							{
							UNSIGNED_SYM1030=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_column_data_type_header27993); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							UNSIGNED_SYM1030_tree = (CommonTree)adaptor.create(UNSIGNED_SYM1030);
							adaptor.addChild(root_0, UNSIGNED_SYM1030_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2068:78: ( ZEROFILL )?
					int alt348=2;
					int LA348_0 = input.LA(1);
					if ( (LA348_0==ZEROFILL) ) {
						alt348=1;
					}
					switch (alt348) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2068:79: ZEROFILL
							{
							ZEROFILL1031=(Token)match(input,ZEROFILL,FOLLOW_ZEROFILL_in_column_data_type_header27998); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ZEROFILL1031_tree = (CommonTree)adaptor.create(ZEROFILL1031);
							adaptor.addChild(root_0, ZEROFILL1031_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2068:90: ( null_or_notnull )?
					int alt349=2;
					int LA349_0 = input.LA(1);
					if ( (LA349_0==NOT_SYM||LA349_0==NULL_SYM) ) {
						alt349=1;
					}
					switch (alt349) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2068:91: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header28003);
							null_or_notnull1032=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1032.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2068:109: ( DEFAULT number_literal )?
					int alt350=2;
					int LA350_0 = input.LA(1);
					if ( (LA350_0==DEFAULT) ) {
						alt350=1;
					}
					switch (alt350) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2068:110: DEFAULT number_literal
							{
							DEFAULT1033=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header28008); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1033_tree = (CommonTree)adaptor.create(DEFAULT1033);
							adaptor.addChild(root_0, DEFAULT1033_tree);
							}

							pushFollow(FOLLOW_number_literal_in_column_data_type_header28010);
							number_literal1034=number_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal1034.getTree());

							}
							break;

					}

					}

					}
					break;
				case 11 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2069:5: ( DECIMAL_SYM ( LPAREN length ( COMMA number_literal )? RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2069:5: ( DECIMAL_SYM ( LPAREN length ( COMMA number_literal )? RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2069:8: DECIMAL_SYM ( LPAREN length ( COMMA number_literal )? RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )?
					{
					DECIMAL_SYM1035=(Token)match(input,DECIMAL_SYM,FOLLOW_DECIMAL_SYM_in_column_data_type_header28024); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DECIMAL_SYM1035_tree = (CommonTree)adaptor.create(DECIMAL_SYM1035);
					adaptor.addChild(root_0, DECIMAL_SYM1035_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2069:19: ( LPAREN length ( COMMA number_literal )? RPAREN )?
					int alt352=2;
					int LA352_0 = input.LA(1);
					if ( (LA352_0==LPAREN) ) {
						alt352=1;
					}
					switch (alt352) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2069:20: LPAREN length ( COMMA number_literal )? RPAREN
							{
							LPAREN1036=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header28026); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN1036_tree = (CommonTree)adaptor.create(LPAREN1036);
							adaptor.addChild(root_0, LPAREN1036_tree);
							}

							pushFollow(FOLLOW_length_in_column_data_type_header28028);
							length1037=length();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, length1037.getTree());

							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2069:33: ( COMMA number_literal )?
							int alt351=2;
							int LA351_0 = input.LA(1);
							if ( (LA351_0==COMMA) ) {
								alt351=1;
							}
							switch (alt351) {
								case 1 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2069:35: COMMA number_literal
									{
									COMMA1038=(Token)match(input,COMMA,FOLLOW_COMMA_in_column_data_type_header28031); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									COMMA1038_tree = (CommonTree)adaptor.create(COMMA1038);
									adaptor.addChild(root_0, COMMA1038_tree);
									}

									pushFollow(FOLLOW_number_literal_in_column_data_type_header28033);
									number_literal1039=number_literal();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal1039.getTree());

									}
									break;

							}

							RPAREN1040=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header28037); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN1040_tree = (CommonTree)adaptor.create(RPAREN1040);
							adaptor.addChild(root_0, RPAREN1040_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2069:67: ( UNSIGNED_SYM )?
					int alt353=2;
					int LA353_0 = input.LA(1);
					if ( (LA353_0==UNSIGNED_SYM) ) {
						alt353=1;
					}
					switch (alt353) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2069:68: UNSIGNED_SYM
							{
							UNSIGNED_SYM1041=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_column_data_type_header28042); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							UNSIGNED_SYM1041_tree = (CommonTree)adaptor.create(UNSIGNED_SYM1041);
							adaptor.addChild(root_0, UNSIGNED_SYM1041_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2069:83: ( ZEROFILL )?
					int alt354=2;
					int LA354_0 = input.LA(1);
					if ( (LA354_0==ZEROFILL) ) {
						alt354=1;
					}
					switch (alt354) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2069:84: ZEROFILL
							{
							ZEROFILL1042=(Token)match(input,ZEROFILL,FOLLOW_ZEROFILL_in_column_data_type_header28047); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ZEROFILL1042_tree = (CommonTree)adaptor.create(ZEROFILL1042);
							adaptor.addChild(root_0, ZEROFILL1042_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2069:95: ( null_or_notnull )?
					int alt355=2;
					int LA355_0 = input.LA(1);
					if ( (LA355_0==NOT_SYM||LA355_0==NULL_SYM) ) {
						alt355=1;
					}
					switch (alt355) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2069:96: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header28052);
							null_or_notnull1043=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1043.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2069:114: ( DEFAULT number_literal )?
					int alt356=2;
					int LA356_0 = input.LA(1);
					if ( (LA356_0==DEFAULT) ) {
						alt356=1;
					}
					switch (alt356) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2069:115: DEFAULT number_literal
							{
							DEFAULT1044=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header28057); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1044_tree = (CommonTree)adaptor.create(DEFAULT1044);
							adaptor.addChild(root_0, DEFAULT1044_tree);
							}

							pushFollow(FOLLOW_number_literal_in_column_data_type_header28059);
							number_literal1045=number_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal1045.getTree());

							}
							break;

					}

					}

					}
					break;
				case 12 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2070:5: ( NUMERIC_SYM ( LPAREN length ( COMMA number_literal )? RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2070:5: ( NUMERIC_SYM ( LPAREN length ( COMMA number_literal )? RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2070:8: NUMERIC_SYM ( LPAREN length ( COMMA number_literal )? RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )?
					{
					NUMERIC_SYM1046=(Token)match(input,NUMERIC_SYM,FOLLOW_NUMERIC_SYM_in_column_data_type_header28073); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NUMERIC_SYM1046_tree = (CommonTree)adaptor.create(NUMERIC_SYM1046);
					adaptor.addChild(root_0, NUMERIC_SYM1046_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2070:19: ( LPAREN length ( COMMA number_literal )? RPAREN )?
					int alt358=2;
					int LA358_0 = input.LA(1);
					if ( (LA358_0==LPAREN) ) {
						alt358=1;
					}
					switch (alt358) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2070:20: LPAREN length ( COMMA number_literal )? RPAREN
							{
							LPAREN1047=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header28075); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN1047_tree = (CommonTree)adaptor.create(LPAREN1047);
							adaptor.addChild(root_0, LPAREN1047_tree);
							}

							pushFollow(FOLLOW_length_in_column_data_type_header28077);
							length1048=length();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, length1048.getTree());

							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2070:33: ( COMMA number_literal )?
							int alt357=2;
							int LA357_0 = input.LA(1);
							if ( (LA357_0==COMMA) ) {
								alt357=1;
							}
							switch (alt357) {
								case 1 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2070:35: COMMA number_literal
									{
									COMMA1049=(Token)match(input,COMMA,FOLLOW_COMMA_in_column_data_type_header28080); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									COMMA1049_tree = (CommonTree)adaptor.create(COMMA1049);
									adaptor.addChild(root_0, COMMA1049_tree);
									}

									pushFollow(FOLLOW_number_literal_in_column_data_type_header28082);
									number_literal1050=number_literal();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal1050.getTree());

									}
									break;

							}

							RPAREN1051=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header28086); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN1051_tree = (CommonTree)adaptor.create(RPAREN1051);
							adaptor.addChild(root_0, RPAREN1051_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2070:67: ( UNSIGNED_SYM )?
					int alt359=2;
					int LA359_0 = input.LA(1);
					if ( (LA359_0==UNSIGNED_SYM) ) {
						alt359=1;
					}
					switch (alt359) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2070:68: UNSIGNED_SYM
							{
							UNSIGNED_SYM1052=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_column_data_type_header28091); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							UNSIGNED_SYM1052_tree = (CommonTree)adaptor.create(UNSIGNED_SYM1052);
							adaptor.addChild(root_0, UNSIGNED_SYM1052_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2070:83: ( ZEROFILL )?
					int alt360=2;
					int LA360_0 = input.LA(1);
					if ( (LA360_0==ZEROFILL) ) {
						alt360=1;
					}
					switch (alt360) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2070:84: ZEROFILL
							{
							ZEROFILL1053=(Token)match(input,ZEROFILL,FOLLOW_ZEROFILL_in_column_data_type_header28096); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ZEROFILL1053_tree = (CommonTree)adaptor.create(ZEROFILL1053);
							adaptor.addChild(root_0, ZEROFILL1053_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2070:95: ( null_or_notnull )?
					int alt361=2;
					int LA361_0 = input.LA(1);
					if ( (LA361_0==NOT_SYM||LA361_0==NULL_SYM) ) {
						alt361=1;
					}
					switch (alt361) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2070:96: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header28101);
							null_or_notnull1054=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1054.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2070:114: ( DEFAULT number_literal )?
					int alt362=2;
					int LA362_0 = input.LA(1);
					if ( (LA362_0==DEFAULT) ) {
						alt362=1;
					}
					switch (alt362) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2070:115: DEFAULT number_literal
							{
							DEFAULT1055=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header28106); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1055_tree = (CommonTree)adaptor.create(DEFAULT1055);
							adaptor.addChild(root_0, DEFAULT1055_tree);
							}

							pushFollow(FOLLOW_number_literal_in_column_data_type_header28108);
							number_literal1056=number_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal1056.getTree());

							}
							break;

					}

					}

					}
					break;
				case 13 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2071:5: ( DATE_SYM ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2071:5: ( DATE_SYM ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2071:8: DATE_SYM ( null_or_notnull )? ( DEFAULT TEXT_STRING )?
					{
					DATE_SYM1057=(Token)match(input,DATE_SYM,FOLLOW_DATE_SYM_in_column_data_type_header28122); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DATE_SYM1057_tree = (CommonTree)adaptor.create(DATE_SYM1057);
					adaptor.addChild(root_0, DATE_SYM1057_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2071:17: ( null_or_notnull )?
					int alt363=2;
					int LA363_0 = input.LA(1);
					if ( (LA363_0==NOT_SYM||LA363_0==NULL_SYM) ) {
						alt363=1;
					}
					switch (alt363) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2071:18: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header28125);
							null_or_notnull1058=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1058.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2071:36: ( DEFAULT TEXT_STRING )?
					int alt364=2;
					int LA364_0 = input.LA(1);
					if ( (LA364_0==DEFAULT) ) {
						alt364=1;
					}
					switch (alt364) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2071:37: DEFAULT TEXT_STRING
							{
							DEFAULT1059=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header28130); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1059_tree = (CommonTree)adaptor.create(DEFAULT1059);
							adaptor.addChild(root_0, DEFAULT1059_tree);
							}

							TEXT_STRING1060=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_column_data_type_header28132); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TEXT_STRING1060_tree = (CommonTree)adaptor.create(TEXT_STRING1060);
							adaptor.addChild(root_0, TEXT_STRING1060_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 14 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2072:5: ( TIME_SYM ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2072:5: ( TIME_SYM ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2072:8: TIME_SYM ( null_or_notnull )? ( DEFAULT TEXT_STRING )?
					{
					TIME_SYM1061=(Token)match(input,TIME_SYM,FOLLOW_TIME_SYM_in_column_data_type_header28146); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TIME_SYM1061_tree = (CommonTree)adaptor.create(TIME_SYM1061);
					adaptor.addChild(root_0, TIME_SYM1061_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2072:17: ( null_or_notnull )?
					int alt365=2;
					int LA365_0 = input.LA(1);
					if ( (LA365_0==NOT_SYM||LA365_0==NULL_SYM) ) {
						alt365=1;
					}
					switch (alt365) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2072:18: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header28149);
							null_or_notnull1062=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1062.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2072:36: ( DEFAULT TEXT_STRING )?
					int alt366=2;
					int LA366_0 = input.LA(1);
					if ( (LA366_0==DEFAULT) ) {
						alt366=1;
					}
					switch (alt366) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2072:37: DEFAULT TEXT_STRING
							{
							DEFAULT1063=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header28154); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1063_tree = (CommonTree)adaptor.create(DEFAULT1063);
							adaptor.addChild(root_0, DEFAULT1063_tree);
							}

							TEXT_STRING1064=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_column_data_type_header28156); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TEXT_STRING1064_tree = (CommonTree)adaptor.create(TEXT_STRING1064);
							adaptor.addChild(root_0, TEXT_STRING1064_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 15 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2073:5: ( TIMESTAMP ( null_or_notnull )? ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING ) )? )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2073:5: ( TIMESTAMP ( null_or_notnull )? ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING ) )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2073:8: TIMESTAMP ( null_or_notnull )? ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING ) )?
					{
					TIMESTAMP1065=(Token)match(input,TIMESTAMP,FOLLOW_TIMESTAMP_in_column_data_type_header28170); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TIMESTAMP1065_tree = (CommonTree)adaptor.create(TIMESTAMP1065);
					adaptor.addChild(root_0, TIMESTAMP1065_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2073:18: ( null_or_notnull )?
					int alt367=2;
					int LA367_0 = input.LA(1);
					if ( (LA367_0==NOT_SYM||LA367_0==NULL_SYM) ) {
						alt367=1;
					}
					switch (alt367) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2073:19: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header28173);
							null_or_notnull1066=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1066.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2073:37: ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING ) )?
					int alt368=2;
					int LA368_0 = input.LA(1);
					if ( (LA368_0==DEFAULT) ) {
						alt368=1;
					}
					switch (alt368) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2073:38: DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING )
							{
							DEFAULT1067=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header28178); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1067_tree = (CommonTree)adaptor.create(DEFAULT1067);
							adaptor.addChild(root_0, DEFAULT1067_tree);
							}

							set1068=input.LT(1);
							if ( input.LA(1)==CURRENT_TIMESTAMP||input.LA(1)==TEXT_STRING ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set1068));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					}

					}
					break;
				case 16 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2074:5: ( DATETIME ( null_or_notnull )? ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING ) )? )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2074:5: ( DATETIME ( null_or_notnull )? ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING ) )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2074:8: DATETIME ( null_or_notnull )? ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING ) )?
					{
					DATETIME1069=(Token)match(input,DATETIME,FOLLOW_DATETIME_in_column_data_type_header28198); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DATETIME1069_tree = (CommonTree)adaptor.create(DATETIME1069);
					adaptor.addChild(root_0, DATETIME1069_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2074:17: ( null_or_notnull )?
					int alt369=2;
					int LA369_0 = input.LA(1);
					if ( (LA369_0==NOT_SYM||LA369_0==NULL_SYM) ) {
						alt369=1;
					}
					switch (alt369) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2074:18: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header28201);
							null_or_notnull1070=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1070.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2074:36: ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING ) )?
					int alt370=2;
					int LA370_0 = input.LA(1);
					if ( (LA370_0==DEFAULT) ) {
						alt370=1;
					}
					switch (alt370) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2074:37: DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING )
							{
							DEFAULT1071=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header28206); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1071_tree = (CommonTree)adaptor.create(DEFAULT1071);
							adaptor.addChild(root_0, DEFAULT1071_tree);
							}

							set1072=input.LT(1);
							if ( input.LA(1)==CURRENT_TIMESTAMP||input.LA(1)==TEXT_STRING ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set1072));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					}

					}
					break;
				case 17 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2075:5: ( YEAR ( null_or_notnull )? ( DEFAULT INTEGER_NUM )? )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2075:5: ( YEAR ( null_or_notnull )? ( DEFAULT INTEGER_NUM )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2075:8: YEAR ( null_or_notnull )? ( DEFAULT INTEGER_NUM )?
					{
					YEAR1073=(Token)match(input,YEAR,FOLLOW_YEAR_in_column_data_type_header28226); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					YEAR1073_tree = (CommonTree)adaptor.create(YEAR1073);
					adaptor.addChild(root_0, YEAR1073_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2075:13: ( null_or_notnull )?
					int alt371=2;
					int LA371_0 = input.LA(1);
					if ( (LA371_0==NOT_SYM||LA371_0==NULL_SYM) ) {
						alt371=1;
					}
					switch (alt371) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2075:14: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header28229);
							null_or_notnull1074=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1074.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2075:32: ( DEFAULT INTEGER_NUM )?
					int alt372=2;
					int LA372_0 = input.LA(1);
					if ( (LA372_0==DEFAULT) ) {
						alt372=1;
					}
					switch (alt372) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2075:33: DEFAULT INTEGER_NUM
							{
							DEFAULT1075=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header28234); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1075_tree = (CommonTree)adaptor.create(DEFAULT1075);
							adaptor.addChild(root_0, DEFAULT1075_tree);
							}

							INTEGER_NUM1076=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_column_data_type_header28236); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							INTEGER_NUM1076_tree = (CommonTree)adaptor.create(INTEGER_NUM1076);
							adaptor.addChild(root_0, INTEGER_NUM1076_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 18 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2076:5: ( CHAR ( LPAREN length RPAREN )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2076:5: ( CHAR ( LPAREN length RPAREN )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2076:8: CHAR ( LPAREN length RPAREN )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )?
					{
					CHAR1077=(Token)match(input,CHAR,FOLLOW_CHAR_in_column_data_type_header28250); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CHAR1077_tree = (CommonTree)adaptor.create(CHAR1077);
					adaptor.addChild(root_0, CHAR1077_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2076:15: ( LPAREN length RPAREN )?
					int alt373=2;
					int LA373_0 = input.LA(1);
					if ( (LA373_0==LPAREN) ) {
						alt373=1;
					}
					switch (alt373) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2076:16: LPAREN length RPAREN
							{
							LPAREN1078=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header28255); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN1078_tree = (CommonTree)adaptor.create(LPAREN1078);
							adaptor.addChild(root_0, LPAREN1078_tree);
							}

							pushFollow(FOLLOW_length_in_column_data_type_header28257);
							length1079=length();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, length1079.getTree());

							RPAREN1080=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header28259); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN1080_tree = (CommonTree)adaptor.create(RPAREN1080);
							adaptor.addChild(root_0, RPAREN1080_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2076:39: ( CHARACTER_SYM SET_SYM charset_name )?
					int alt374=2;
					int LA374_0 = input.LA(1);
					if ( (LA374_0==CHARACTER_SYM) ) {
						alt374=1;
					}
					switch (alt374) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2076:40: CHARACTER_SYM SET_SYM charset_name
							{
							CHARACTER_SYM1081=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_column_data_type_header28264); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CHARACTER_SYM1081_tree = (CommonTree)adaptor.create(CHARACTER_SYM1081);
							adaptor.addChild(root_0, CHARACTER_SYM1081_tree);
							}

							SET_SYM1082=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_column_data_type_header28266); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							SET_SYM1082_tree = (CommonTree)adaptor.create(SET_SYM1082);
							adaptor.addChild(root_0, SET_SYM1082_tree);
							}

							pushFollow(FOLLOW_charset_name_in_column_data_type_header28268);
							charset_name1083=charset_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name1083.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2076:77: ( COLLATE_SYM collation_name )?
					int alt375=2;
					int LA375_0 = input.LA(1);
					if ( (LA375_0==COLLATE_SYM) ) {
						alt375=1;
					}
					switch (alt375) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2076:78: COLLATE_SYM collation_name
							{
							COLLATE_SYM1084=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_column_data_type_header28273); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLLATE_SYM1084_tree = (CommonTree)adaptor.create(COLLATE_SYM1084);
							adaptor.addChild(root_0, COLLATE_SYM1084_tree);
							}

							pushFollow(FOLLOW_collation_name_in_column_data_type_header28275);
							collation_name1085=collation_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name1085.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2076:107: ( null_or_notnull )?
					int alt376=2;
					int LA376_0 = input.LA(1);
					if ( (LA376_0==NOT_SYM||LA376_0==NULL_SYM) ) {
						alt376=1;
					}
					switch (alt376) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2076:108: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header28280);
							null_or_notnull1086=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1086.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2076:126: ( DEFAULT TEXT_STRING )?
					int alt377=2;
					int LA377_0 = input.LA(1);
					if ( (LA377_0==DEFAULT) ) {
						alt377=1;
					}
					switch (alt377) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2076:127: DEFAULT TEXT_STRING
							{
							DEFAULT1087=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header28285); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1087_tree = (CommonTree)adaptor.create(DEFAULT1087);
							adaptor.addChild(root_0, DEFAULT1087_tree);
							}

							TEXT_STRING1088=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_column_data_type_header28287); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TEXT_STRING1088_tree = (CommonTree)adaptor.create(TEXT_STRING1088);
							adaptor.addChild(root_0, TEXT_STRING1088_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 19 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2077:5: ( VARCHAR LPAREN length RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2077:5: ( VARCHAR LPAREN length RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2077:8: VARCHAR LPAREN length RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )?
					{
					VARCHAR1089=(Token)match(input,VARCHAR,FOLLOW_VARCHAR_in_column_data_type_header28301); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					VARCHAR1089_tree = (CommonTree)adaptor.create(VARCHAR1089);
					adaptor.addChild(root_0, VARCHAR1089_tree);
					}

					LPAREN1090=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header28303); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1090_tree = (CommonTree)adaptor.create(LPAREN1090);
					adaptor.addChild(root_0, LPAREN1090_tree);
					}

					pushFollow(FOLLOW_length_in_column_data_type_header28305);
					length1091=length();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, length1091.getTree());

					RPAREN1092=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header28307); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1092_tree = (CommonTree)adaptor.create(RPAREN1092);
					adaptor.addChild(root_0, RPAREN1092_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2077:39: ( CHARACTER_SYM SET_SYM charset_name )?
					int alt378=2;
					int LA378_0 = input.LA(1);
					if ( (LA378_0==CHARACTER_SYM) ) {
						alt378=1;
					}
					switch (alt378) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2077:40: CHARACTER_SYM SET_SYM charset_name
							{
							CHARACTER_SYM1093=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_column_data_type_header28312); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CHARACTER_SYM1093_tree = (CommonTree)adaptor.create(CHARACTER_SYM1093);
							adaptor.addChild(root_0, CHARACTER_SYM1093_tree);
							}

							SET_SYM1094=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_column_data_type_header28314); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							SET_SYM1094_tree = (CommonTree)adaptor.create(SET_SYM1094);
							adaptor.addChild(root_0, SET_SYM1094_tree);
							}

							pushFollow(FOLLOW_charset_name_in_column_data_type_header28316);
							charset_name1095=charset_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name1095.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2077:77: ( COLLATE_SYM collation_name )?
					int alt379=2;
					int LA379_0 = input.LA(1);
					if ( (LA379_0==COLLATE_SYM) ) {
						alt379=1;
					}
					switch (alt379) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2077:78: COLLATE_SYM collation_name
							{
							COLLATE_SYM1096=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_column_data_type_header28321); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLLATE_SYM1096_tree = (CommonTree)adaptor.create(COLLATE_SYM1096);
							adaptor.addChild(root_0, COLLATE_SYM1096_tree);
							}

							pushFollow(FOLLOW_collation_name_in_column_data_type_header28323);
							collation_name1097=collation_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name1097.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2077:107: ( null_or_notnull )?
					int alt380=2;
					int LA380_0 = input.LA(1);
					if ( (LA380_0==NOT_SYM||LA380_0==NULL_SYM) ) {
						alt380=1;
					}
					switch (alt380) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2077:108: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header28328);
							null_or_notnull1098=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1098.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2077:126: ( DEFAULT TEXT_STRING )?
					int alt381=2;
					int LA381_0 = input.LA(1);
					if ( (LA381_0==DEFAULT) ) {
						alt381=1;
					}
					switch (alt381) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2077:127: DEFAULT TEXT_STRING
							{
							DEFAULT1099=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header28333); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1099_tree = (CommonTree)adaptor.create(DEFAULT1099);
							adaptor.addChild(root_0, DEFAULT1099_tree);
							}

							TEXT_STRING1100=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_column_data_type_header28335); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TEXT_STRING1100_tree = (CommonTree)adaptor.create(TEXT_STRING1100);
							adaptor.addChild(root_0, TEXT_STRING1100_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 20 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2078:5: ( BINARY ( LPAREN length RPAREN )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2078:5: ( BINARY ( LPAREN length RPAREN )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2078:8: BINARY ( LPAREN length RPAREN )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )?
					{
					BINARY1101=(Token)match(input,BINARY,FOLLOW_BINARY_in_column_data_type_header28349); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BINARY1101_tree = (CommonTree)adaptor.create(BINARY1101);
					adaptor.addChild(root_0, BINARY1101_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2078:17: ( LPAREN length RPAREN )?
					int alt382=2;
					int LA382_0 = input.LA(1);
					if ( (LA382_0==LPAREN) ) {
						alt382=1;
					}
					switch (alt382) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2078:18: LPAREN length RPAREN
							{
							LPAREN1102=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header28354); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN1102_tree = (CommonTree)adaptor.create(LPAREN1102);
							adaptor.addChild(root_0, LPAREN1102_tree);
							}

							pushFollow(FOLLOW_length_in_column_data_type_header28356);
							length1103=length();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, length1103.getTree());

							RPAREN1104=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header28358); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN1104_tree = (CommonTree)adaptor.create(RPAREN1104);
							adaptor.addChild(root_0, RPAREN1104_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2078:41: ( null_or_notnull )?
					int alt383=2;
					int LA383_0 = input.LA(1);
					if ( (LA383_0==NOT_SYM||LA383_0==NULL_SYM) ) {
						alt383=1;
					}
					switch (alt383) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2078:42: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header28363);
							null_or_notnull1105=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1105.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2078:60: ( DEFAULT TEXT_STRING )?
					int alt384=2;
					int LA384_0 = input.LA(1);
					if ( (LA384_0==DEFAULT) ) {
						alt384=1;
					}
					switch (alt384) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2078:61: DEFAULT TEXT_STRING
							{
							DEFAULT1106=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header28368); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1106_tree = (CommonTree)adaptor.create(DEFAULT1106);
							adaptor.addChild(root_0, DEFAULT1106_tree);
							}

							TEXT_STRING1107=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_column_data_type_header28370); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TEXT_STRING1107_tree = (CommonTree)adaptor.create(TEXT_STRING1107);
							adaptor.addChild(root_0, TEXT_STRING1107_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 21 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2079:5: ( VARBINARY LPAREN length RPAREN ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2079:5: ( VARBINARY LPAREN length RPAREN ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2079:8: VARBINARY LPAREN length RPAREN ( null_or_notnull )? ( DEFAULT TEXT_STRING )?
					{
					VARBINARY1108=(Token)match(input,VARBINARY,FOLLOW_VARBINARY_in_column_data_type_header28384); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					VARBINARY1108_tree = (CommonTree)adaptor.create(VARBINARY1108);
					adaptor.addChild(root_0, VARBINARY1108_tree);
					}

					LPAREN1109=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header28386); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1109_tree = (CommonTree)adaptor.create(LPAREN1109);
					adaptor.addChild(root_0, LPAREN1109_tree);
					}

					pushFollow(FOLLOW_length_in_column_data_type_header28388);
					length1110=length();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, length1110.getTree());

					RPAREN1111=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header28390); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1111_tree = (CommonTree)adaptor.create(RPAREN1111);
					adaptor.addChild(root_0, RPAREN1111_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2079:39: ( null_or_notnull )?
					int alt385=2;
					int LA385_0 = input.LA(1);
					if ( (LA385_0==NOT_SYM||LA385_0==NULL_SYM) ) {
						alt385=1;
					}
					switch (alt385) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2079:40: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header28393);
							null_or_notnull1112=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1112.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2079:58: ( DEFAULT TEXT_STRING )?
					int alt386=2;
					int LA386_0 = input.LA(1);
					if ( (LA386_0==DEFAULT) ) {
						alt386=1;
					}
					switch (alt386) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2079:59: DEFAULT TEXT_STRING
							{
							DEFAULT1113=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header28398); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1113_tree = (CommonTree)adaptor.create(DEFAULT1113);
							adaptor.addChild(root_0, DEFAULT1113_tree);
							}

							TEXT_STRING1114=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_column_data_type_header28400); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TEXT_STRING1114_tree = (CommonTree)adaptor.create(TEXT_STRING1114);
							adaptor.addChild(root_0, TEXT_STRING1114_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 22 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2080:5: ( TINYBLOB ( null_or_notnull )? )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2080:5: ( TINYBLOB ( null_or_notnull )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2080:8: TINYBLOB ( null_or_notnull )?
					{
					TINYBLOB1115=(Token)match(input,TINYBLOB,FOLLOW_TINYBLOB_in_column_data_type_header28414); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TINYBLOB1115_tree = (CommonTree)adaptor.create(TINYBLOB1115);
					adaptor.addChild(root_0, TINYBLOB1115_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2080:17: ( null_or_notnull )?
					int alt387=2;
					int LA387_0 = input.LA(1);
					if ( (LA387_0==NOT_SYM||LA387_0==NULL_SYM) ) {
						alt387=1;
					}
					switch (alt387) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2080:18: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header28417);
							null_or_notnull1116=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1116.getTree());

							}
							break;

					}

					}

					}
					break;
				case 23 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2081:5: ( BLOB_SYM ( null_or_notnull )? )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2081:5: ( BLOB_SYM ( null_or_notnull )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2081:8: BLOB_SYM ( null_or_notnull )?
					{
					BLOB_SYM1117=(Token)match(input,BLOB_SYM,FOLLOW_BLOB_SYM_in_column_data_type_header28431); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BLOB_SYM1117_tree = (CommonTree)adaptor.create(BLOB_SYM1117);
					adaptor.addChild(root_0, BLOB_SYM1117_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2081:17: ( null_or_notnull )?
					int alt388=2;
					int LA388_0 = input.LA(1);
					if ( (LA388_0==NOT_SYM||LA388_0==NULL_SYM) ) {
						alt388=1;
					}
					switch (alt388) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2081:18: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header28434);
							null_or_notnull1118=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1118.getTree());

							}
							break;

					}

					}

					}
					break;
				case 24 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2082:5: ( MEDIUMBLOB ( null_or_notnull )? )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2082:5: ( MEDIUMBLOB ( null_or_notnull )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2082:8: MEDIUMBLOB ( null_or_notnull )?
					{
					MEDIUMBLOB1119=(Token)match(input,MEDIUMBLOB,FOLLOW_MEDIUMBLOB_in_column_data_type_header28448); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MEDIUMBLOB1119_tree = (CommonTree)adaptor.create(MEDIUMBLOB1119);
					adaptor.addChild(root_0, MEDIUMBLOB1119_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2082:19: ( null_or_notnull )?
					int alt389=2;
					int LA389_0 = input.LA(1);
					if ( (LA389_0==NOT_SYM||LA389_0==NULL_SYM) ) {
						alt389=1;
					}
					switch (alt389) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2082:20: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header28451);
							null_or_notnull1120=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1120.getTree());

							}
							break;

					}

					}

					}
					break;
				case 25 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2083:5: ( LONGBLOB ( null_or_notnull )? )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2083:5: ( LONGBLOB ( null_or_notnull )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2083:8: LONGBLOB ( null_or_notnull )?
					{
					LONGBLOB1121=(Token)match(input,LONGBLOB,FOLLOW_LONGBLOB_in_column_data_type_header28465); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LONGBLOB1121_tree = (CommonTree)adaptor.create(LONGBLOB1121);
					adaptor.addChild(root_0, LONGBLOB1121_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2083:17: ( null_or_notnull )?
					int alt390=2;
					int LA390_0 = input.LA(1);
					if ( (LA390_0==NOT_SYM||LA390_0==NULL_SYM) ) {
						alt390=1;
					}
					switch (alt390) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2083:18: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header28468);
							null_or_notnull1122=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1122.getTree());

							}
							break;

					}

					}

					}
					break;
				case 26 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2084:5: ( TINYTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2084:5: ( TINYTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2084:8: TINYTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )?
					{
					TINYTEXT1123=(Token)match(input,TINYTEXT,FOLLOW_TINYTEXT_in_column_data_type_header28482); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TINYTEXT1123_tree = (CommonTree)adaptor.create(TINYTEXT1123);
					adaptor.addChild(root_0, TINYTEXT1123_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2084:19: ( BINARY )?
					int alt391=2;
					int LA391_0 = input.LA(1);
					if ( (LA391_0==BINARY) ) {
						alt391=1;
					}
					switch (alt391) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2084:20: BINARY
							{
							BINARY1124=(Token)match(input,BINARY,FOLLOW_BINARY_in_column_data_type_header28487); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							BINARY1124_tree = (CommonTree)adaptor.create(BINARY1124);
							adaptor.addChild(root_0, BINARY1124_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2084:29: ( CHARACTER_SYM SET_SYM charset_name )?
					int alt392=2;
					int LA392_0 = input.LA(1);
					if ( (LA392_0==CHARACTER_SYM) ) {
						alt392=1;
					}
					switch (alt392) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2084:30: CHARACTER_SYM SET_SYM charset_name
							{
							CHARACTER_SYM1125=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_column_data_type_header28492); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CHARACTER_SYM1125_tree = (CommonTree)adaptor.create(CHARACTER_SYM1125);
							adaptor.addChild(root_0, CHARACTER_SYM1125_tree);
							}

							SET_SYM1126=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_column_data_type_header28494); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							SET_SYM1126_tree = (CommonTree)adaptor.create(SET_SYM1126);
							adaptor.addChild(root_0, SET_SYM1126_tree);
							}

							pushFollow(FOLLOW_charset_name_in_column_data_type_header28496);
							charset_name1127=charset_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name1127.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2084:67: ( COLLATE_SYM collation_name )?
					int alt393=2;
					int LA393_0 = input.LA(1);
					if ( (LA393_0==COLLATE_SYM) ) {
						alt393=1;
					}
					switch (alt393) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2084:68: COLLATE_SYM collation_name
							{
							COLLATE_SYM1128=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_column_data_type_header28501); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLLATE_SYM1128_tree = (CommonTree)adaptor.create(COLLATE_SYM1128);
							adaptor.addChild(root_0, COLLATE_SYM1128_tree);
							}

							pushFollow(FOLLOW_collation_name_in_column_data_type_header28503);
							collation_name1129=collation_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name1129.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2084:97: ( null_or_notnull )?
					int alt394=2;
					int LA394_0 = input.LA(1);
					if ( (LA394_0==NOT_SYM||LA394_0==NULL_SYM) ) {
						alt394=1;
					}
					switch (alt394) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2084:98: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header28508);
							null_or_notnull1130=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1130.getTree());

							}
							break;

					}

					}

					}
					break;
				case 27 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2085:5: ( TEXT_SYM ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2085:5: ( TEXT_SYM ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2085:8: TEXT_SYM ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )?
					{
					TEXT_SYM1131=(Token)match(input,TEXT_SYM,FOLLOW_TEXT_SYM_in_column_data_type_header28522); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_SYM1131_tree = (CommonTree)adaptor.create(TEXT_SYM1131);
					adaptor.addChild(root_0, TEXT_SYM1131_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2085:19: ( BINARY )?
					int alt395=2;
					int LA395_0 = input.LA(1);
					if ( (LA395_0==BINARY) ) {
						alt395=1;
					}
					switch (alt395) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2085:20: BINARY
							{
							BINARY1132=(Token)match(input,BINARY,FOLLOW_BINARY_in_column_data_type_header28527); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							BINARY1132_tree = (CommonTree)adaptor.create(BINARY1132);
							adaptor.addChild(root_0, BINARY1132_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2085:29: ( CHARACTER_SYM SET_SYM charset_name )?
					int alt396=2;
					int LA396_0 = input.LA(1);
					if ( (LA396_0==CHARACTER_SYM) ) {
						alt396=1;
					}
					switch (alt396) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2085:30: CHARACTER_SYM SET_SYM charset_name
							{
							CHARACTER_SYM1133=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_column_data_type_header28532); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CHARACTER_SYM1133_tree = (CommonTree)adaptor.create(CHARACTER_SYM1133);
							adaptor.addChild(root_0, CHARACTER_SYM1133_tree);
							}

							SET_SYM1134=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_column_data_type_header28534); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							SET_SYM1134_tree = (CommonTree)adaptor.create(SET_SYM1134);
							adaptor.addChild(root_0, SET_SYM1134_tree);
							}

							pushFollow(FOLLOW_charset_name_in_column_data_type_header28536);
							charset_name1135=charset_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name1135.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2085:67: ( COLLATE_SYM collation_name )?
					int alt397=2;
					int LA397_0 = input.LA(1);
					if ( (LA397_0==COLLATE_SYM) ) {
						alt397=1;
					}
					switch (alt397) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2085:68: COLLATE_SYM collation_name
							{
							COLLATE_SYM1136=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_column_data_type_header28541); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLLATE_SYM1136_tree = (CommonTree)adaptor.create(COLLATE_SYM1136);
							adaptor.addChild(root_0, COLLATE_SYM1136_tree);
							}

							pushFollow(FOLLOW_collation_name_in_column_data_type_header28543);
							collation_name1137=collation_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name1137.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2085:97: ( null_or_notnull )?
					int alt398=2;
					int LA398_0 = input.LA(1);
					if ( (LA398_0==NOT_SYM||LA398_0==NULL_SYM) ) {
						alt398=1;
					}
					switch (alt398) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2085:98: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header28548);
							null_or_notnull1138=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1138.getTree());

							}
							break;

					}

					}

					}
					break;
				case 28 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2086:5: ( MEDIUMTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2086:5: ( MEDIUMTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2086:8: MEDIUMTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )?
					{
					MEDIUMTEXT1139=(Token)match(input,MEDIUMTEXT,FOLLOW_MEDIUMTEXT_in_column_data_type_header28562); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MEDIUMTEXT1139_tree = (CommonTree)adaptor.create(MEDIUMTEXT1139);
					adaptor.addChild(root_0, MEDIUMTEXT1139_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2086:19: ( BINARY )?
					int alt399=2;
					int LA399_0 = input.LA(1);
					if ( (LA399_0==BINARY) ) {
						alt399=1;
					}
					switch (alt399) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2086:20: BINARY
							{
							BINARY1140=(Token)match(input,BINARY,FOLLOW_BINARY_in_column_data_type_header28565); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							BINARY1140_tree = (CommonTree)adaptor.create(BINARY1140);
							adaptor.addChild(root_0, BINARY1140_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2086:29: ( CHARACTER_SYM SET_SYM charset_name )?
					int alt400=2;
					int LA400_0 = input.LA(1);
					if ( (LA400_0==CHARACTER_SYM) ) {
						alt400=1;
					}
					switch (alt400) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2086:30: CHARACTER_SYM SET_SYM charset_name
							{
							CHARACTER_SYM1141=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_column_data_type_header28570); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CHARACTER_SYM1141_tree = (CommonTree)adaptor.create(CHARACTER_SYM1141);
							adaptor.addChild(root_0, CHARACTER_SYM1141_tree);
							}

							SET_SYM1142=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_column_data_type_header28572); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							SET_SYM1142_tree = (CommonTree)adaptor.create(SET_SYM1142);
							adaptor.addChild(root_0, SET_SYM1142_tree);
							}

							pushFollow(FOLLOW_charset_name_in_column_data_type_header28574);
							charset_name1143=charset_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name1143.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2086:67: ( COLLATE_SYM collation_name )?
					int alt401=2;
					int LA401_0 = input.LA(1);
					if ( (LA401_0==COLLATE_SYM) ) {
						alt401=1;
					}
					switch (alt401) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2086:68: COLLATE_SYM collation_name
							{
							COLLATE_SYM1144=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_column_data_type_header28579); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLLATE_SYM1144_tree = (CommonTree)adaptor.create(COLLATE_SYM1144);
							adaptor.addChild(root_0, COLLATE_SYM1144_tree);
							}

							pushFollow(FOLLOW_collation_name_in_column_data_type_header28581);
							collation_name1145=collation_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name1145.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2086:97: ( null_or_notnull )?
					int alt402=2;
					int LA402_0 = input.LA(1);
					if ( (LA402_0==NOT_SYM||LA402_0==NULL_SYM) ) {
						alt402=1;
					}
					switch (alt402) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2086:98: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header28586);
							null_or_notnull1146=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1146.getTree());

							}
							break;

					}

					}

					}
					break;
				case 29 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2087:5: ( LONGTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2087:5: ( LONGTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2087:8: LONGTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )?
					{
					LONGTEXT1147=(Token)match(input,LONGTEXT,FOLLOW_LONGTEXT_in_column_data_type_header28600); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LONGTEXT1147_tree = (CommonTree)adaptor.create(LONGTEXT1147);
					adaptor.addChild(root_0, LONGTEXT1147_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2087:19: ( BINARY )?
					int alt403=2;
					int LA403_0 = input.LA(1);
					if ( (LA403_0==BINARY) ) {
						alt403=1;
					}
					switch (alt403) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2087:20: BINARY
							{
							BINARY1148=(Token)match(input,BINARY,FOLLOW_BINARY_in_column_data_type_header28605); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							BINARY1148_tree = (CommonTree)adaptor.create(BINARY1148);
							adaptor.addChild(root_0, BINARY1148_tree);
							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2087:29: ( CHARACTER_SYM SET_SYM charset_name )?
					int alt404=2;
					int LA404_0 = input.LA(1);
					if ( (LA404_0==CHARACTER_SYM) ) {
						alt404=1;
					}
					switch (alt404) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2087:30: CHARACTER_SYM SET_SYM charset_name
							{
							CHARACTER_SYM1149=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_column_data_type_header28610); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CHARACTER_SYM1149_tree = (CommonTree)adaptor.create(CHARACTER_SYM1149);
							adaptor.addChild(root_0, CHARACTER_SYM1149_tree);
							}

							SET_SYM1150=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_column_data_type_header28612); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							SET_SYM1150_tree = (CommonTree)adaptor.create(SET_SYM1150);
							adaptor.addChild(root_0, SET_SYM1150_tree);
							}

							pushFollow(FOLLOW_charset_name_in_column_data_type_header28614);
							charset_name1151=charset_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name1151.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2087:67: ( COLLATE_SYM collation_name )?
					int alt405=2;
					int LA405_0 = input.LA(1);
					if ( (LA405_0==COLLATE_SYM) ) {
						alt405=1;
					}
					switch (alt405) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2087:68: COLLATE_SYM collation_name
							{
							COLLATE_SYM1152=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_column_data_type_header28619); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLLATE_SYM1152_tree = (CommonTree)adaptor.create(COLLATE_SYM1152);
							adaptor.addChild(root_0, COLLATE_SYM1152_tree);
							}

							pushFollow(FOLLOW_collation_name_in_column_data_type_header28621);
							collation_name1153=collation_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name1153.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2087:97: ( null_or_notnull )?
					int alt406=2;
					int LA406_0 = input.LA(1);
					if ( (LA406_0==NOT_SYM||LA406_0==NULL_SYM) ) {
						alt406=1;
					}
					switch (alt406) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2087:98: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header28626);
							null_or_notnull1154=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1154.getTree());

							}
							break;

					}

					}

					}
					break;
				case 30 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2088:5: ( ENUM LPAREN TEXT_STRING ( COMMA TEXT_STRING )* RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2088:5: ( ENUM LPAREN TEXT_STRING ( COMMA TEXT_STRING )* RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2088:8: ENUM LPAREN TEXT_STRING ( COMMA TEXT_STRING )* RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )?
					{
					ENUM1155=(Token)match(input,ENUM,FOLLOW_ENUM_in_column_data_type_header28640); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ENUM1155_tree = (CommonTree)adaptor.create(ENUM1155);
					adaptor.addChild(root_0, ENUM1155_tree);
					}

					LPAREN1156=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header28645); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1156_tree = (CommonTree)adaptor.create(LPAREN1156);
					adaptor.addChild(root_0, LPAREN1156_tree);
					}

					TEXT_STRING1157=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_column_data_type_header28647); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING1157_tree = (CommonTree)adaptor.create(TEXT_STRING1157);
					adaptor.addChild(root_0, TEXT_STRING1157_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2088:35: ( COMMA TEXT_STRING )*
					loop407:
					while (true) {
						int alt407=2;
						int LA407_0 = input.LA(1);
						if ( (LA407_0==COMMA) ) {
							alt407=1;
						}

						switch (alt407) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2088:36: COMMA TEXT_STRING
							{
							COMMA1158=(Token)match(input,COMMA,FOLLOW_COMMA_in_column_data_type_header28650); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA1158_tree = (CommonTree)adaptor.create(COMMA1158);
							adaptor.addChild(root_0, COMMA1158_tree);
							}

							TEXT_STRING1159=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_column_data_type_header28652); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TEXT_STRING1159_tree = (CommonTree)adaptor.create(TEXT_STRING1159);
							adaptor.addChild(root_0, TEXT_STRING1159_tree);
							}

							}
							break;

						default :
							break loop407;
						}
					}

					RPAREN1160=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header28656); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1160_tree = (CommonTree)adaptor.create(RPAREN1160);
					adaptor.addChild(root_0, RPAREN1160_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2088:63: ( CHARACTER_SYM SET_SYM charset_name )?
					int alt408=2;
					int LA408_0 = input.LA(1);
					if ( (LA408_0==CHARACTER_SYM) ) {
						alt408=1;
					}
					switch (alt408) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2088:64: CHARACTER_SYM SET_SYM charset_name
							{
							CHARACTER_SYM1161=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_column_data_type_header28659); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CHARACTER_SYM1161_tree = (CommonTree)adaptor.create(CHARACTER_SYM1161);
							adaptor.addChild(root_0, CHARACTER_SYM1161_tree);
							}

							SET_SYM1162=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_column_data_type_header28661); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							SET_SYM1162_tree = (CommonTree)adaptor.create(SET_SYM1162);
							adaptor.addChild(root_0, SET_SYM1162_tree);
							}

							pushFollow(FOLLOW_charset_name_in_column_data_type_header28663);
							charset_name1163=charset_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name1163.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2088:101: ( COLLATE_SYM collation_name )?
					int alt409=2;
					int LA409_0 = input.LA(1);
					if ( (LA409_0==COLLATE_SYM) ) {
						alt409=1;
					}
					switch (alt409) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2088:102: COLLATE_SYM collation_name
							{
							COLLATE_SYM1164=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_column_data_type_header28668); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLLATE_SYM1164_tree = (CommonTree)adaptor.create(COLLATE_SYM1164);
							adaptor.addChild(root_0, COLLATE_SYM1164_tree);
							}

							pushFollow(FOLLOW_collation_name_in_column_data_type_header28670);
							collation_name1165=collation_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name1165.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2088:131: ( null_or_notnull )?
					int alt410=2;
					int LA410_0 = input.LA(1);
					if ( (LA410_0==NOT_SYM||LA410_0==NULL_SYM) ) {
						alt410=1;
					}
					switch (alt410) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2088:132: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header28675);
							null_or_notnull1166=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1166.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2088:150: ( DEFAULT TEXT_STRING )?
					int alt411=2;
					int LA411_0 = input.LA(1);
					if ( (LA411_0==DEFAULT) ) {
						alt411=1;
					}
					switch (alt411) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2088:151: DEFAULT TEXT_STRING
							{
							DEFAULT1167=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header28680); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1167_tree = (CommonTree)adaptor.create(DEFAULT1167);
							adaptor.addChild(root_0, DEFAULT1167_tree);
							}

							TEXT_STRING1168=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_column_data_type_header28682); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TEXT_STRING1168_tree = (CommonTree)adaptor.create(TEXT_STRING1168);
							adaptor.addChild(root_0, TEXT_STRING1168_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 31 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2089:5: ( SET_SYM LPAREN TEXT_STRING ( COMMA TEXT_STRING )* RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2089:5: ( SET_SYM LPAREN TEXT_STRING ( COMMA TEXT_STRING )* RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2089:8: SET_SYM LPAREN TEXT_STRING ( COMMA TEXT_STRING )* RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )?
					{
					SET_SYM1169=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_column_data_type_header28696); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SET_SYM1169_tree = (CommonTree)adaptor.create(SET_SYM1169);
					adaptor.addChild(root_0, SET_SYM1169_tree);
					}

					LPAREN1170=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header28698); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1170_tree = (CommonTree)adaptor.create(LPAREN1170);
					adaptor.addChild(root_0, LPAREN1170_tree);
					}

					TEXT_STRING1171=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_column_data_type_header28700); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING1171_tree = (CommonTree)adaptor.create(TEXT_STRING1171);
					adaptor.addChild(root_0, TEXT_STRING1171_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2089:35: ( COMMA TEXT_STRING )*
					loop412:
					while (true) {
						int alt412=2;
						int LA412_0 = input.LA(1);
						if ( (LA412_0==COMMA) ) {
							alt412=1;
						}

						switch (alt412) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2089:36: COMMA TEXT_STRING
							{
							COMMA1172=(Token)match(input,COMMA,FOLLOW_COMMA_in_column_data_type_header28703); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA1172_tree = (CommonTree)adaptor.create(COMMA1172);
							adaptor.addChild(root_0, COMMA1172_tree);
							}

							TEXT_STRING1173=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_column_data_type_header28705); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TEXT_STRING1173_tree = (CommonTree)adaptor.create(TEXT_STRING1173);
							adaptor.addChild(root_0, TEXT_STRING1173_tree);
							}

							}
							break;

						default :
							break loop412;
						}
					}

					RPAREN1174=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header28709); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1174_tree = (CommonTree)adaptor.create(RPAREN1174);
					adaptor.addChild(root_0, RPAREN1174_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2089:63: ( CHARACTER_SYM SET_SYM charset_name )?
					int alt413=2;
					int LA413_0 = input.LA(1);
					if ( (LA413_0==CHARACTER_SYM) ) {
						alt413=1;
					}
					switch (alt413) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2089:64: CHARACTER_SYM SET_SYM charset_name
							{
							CHARACTER_SYM1175=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_column_data_type_header28712); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CHARACTER_SYM1175_tree = (CommonTree)adaptor.create(CHARACTER_SYM1175);
							adaptor.addChild(root_0, CHARACTER_SYM1175_tree);
							}

							SET_SYM1176=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_column_data_type_header28714); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							SET_SYM1176_tree = (CommonTree)adaptor.create(SET_SYM1176);
							adaptor.addChild(root_0, SET_SYM1176_tree);
							}

							pushFollow(FOLLOW_charset_name_in_column_data_type_header28716);
							charset_name1177=charset_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name1177.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2089:101: ( COLLATE_SYM collation_name )?
					int alt414=2;
					int LA414_0 = input.LA(1);
					if ( (LA414_0==COLLATE_SYM) ) {
						alt414=1;
					}
					switch (alt414) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2089:102: COLLATE_SYM collation_name
							{
							COLLATE_SYM1178=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_column_data_type_header28721); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLLATE_SYM1178_tree = (CommonTree)adaptor.create(COLLATE_SYM1178);
							adaptor.addChild(root_0, COLLATE_SYM1178_tree);
							}

							pushFollow(FOLLOW_collation_name_in_column_data_type_header28723);
							collation_name1179=collation_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name1179.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2089:131: ( null_or_notnull )?
					int alt415=2;
					int LA415_0 = input.LA(1);
					if ( (LA415_0==NOT_SYM||LA415_0==NULL_SYM) ) {
						alt415=1;
					}
					switch (alt415) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2089:132: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header28728);
							null_or_notnull1180=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1180.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2089:150: ( DEFAULT TEXT_STRING )?
					int alt416=2;
					int LA416_0 = input.LA(1);
					if ( (LA416_0==DEFAULT) ) {
						alt416=1;
					}
					switch (alt416) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2089:151: DEFAULT TEXT_STRING
							{
							DEFAULT1181=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header28733); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1181_tree = (CommonTree)adaptor.create(DEFAULT1181);
							adaptor.addChild(root_0, DEFAULT1181_tree);
							}

							TEXT_STRING1182=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_column_data_type_header28735); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TEXT_STRING1182_tree = (CommonTree)adaptor.create(TEXT_STRING1182);
							adaptor.addChild(root_0, TEXT_STRING1182_tree);
							}

							}
							break;

					}

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "column_data_type_header"


	public static class index_column_name_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "index_column_name"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2093:1: index_column_name : column_name ( LPAREN INTEGER_NUM RPAREN )? ( ASC | DESC )? ;
	public final SQLParser.index_column_name_return index_column_name() throws RecognitionException {
		SQLParser.index_column_name_return retval = new SQLParser.index_column_name_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LPAREN1184=null;
		Token INTEGER_NUM1185=null;
		Token RPAREN1186=null;
		Token set1187=null;
		ParserRuleReturnScope column_name1183 =null;

		CommonTree LPAREN1184_tree=null;
		CommonTree INTEGER_NUM1185_tree=null;
		CommonTree RPAREN1186_tree=null;
		CommonTree set1187_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2093:18: ( column_name ( LPAREN INTEGER_NUM RPAREN )? ( ASC | DESC )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2094:3: column_name ( LPAREN INTEGER_NUM RPAREN )? ( ASC | DESC )?
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_column_name_in_index_column_name28753);
			column_name1183=column_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1183.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2094:15: ( LPAREN INTEGER_NUM RPAREN )?
			int alt418=2;
			int LA418_0 = input.LA(1);
			if ( (LA418_0==LPAREN) ) {
				alt418=1;
			}
			switch (alt418) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2094:16: LPAREN INTEGER_NUM RPAREN
					{
					LPAREN1184=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_index_column_name28756); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1184_tree = (CommonTree)adaptor.create(LPAREN1184);
					adaptor.addChild(root_0, LPAREN1184_tree);
					}

					INTEGER_NUM1185=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_index_column_name28758); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM1185_tree = (CommonTree)adaptor.create(INTEGER_NUM1185);
					adaptor.addChild(root_0, INTEGER_NUM1185_tree);
					}

					RPAREN1186=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_index_column_name28760); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1186_tree = (CommonTree)adaptor.create(RPAREN1186);
					adaptor.addChild(root_0, RPAREN1186_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2094:44: ( ASC | DESC )?
			int alt419=2;
			int LA419_0 = input.LA(1);
			if ( (LA419_0==ASC||LA419_0==DESC) ) {
				alt419=1;
			}
			switch (alt419) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
					{
					set1187=input.LT(1);
					if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set1187));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "index_column_name"


	public static class reference_definition_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "reference_definition"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2097:1: reference_definition : REFERENCES table_name LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( ( MATCH FULL ) | ( MATCH PARTIAL ) | ( MATCH SIMPLE_SYM ) )? ( ON DELETE_SYM reference_option )? ( ON UPDATE reference_option )? ;
	public final SQLParser.reference_definition_return reference_definition() throws RecognitionException {
		SQLParser.reference_definition_return retval = new SQLParser.reference_definition_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token REFERENCES1188=null;
		Token LPAREN1190=null;
		Token COMMA1192=null;
		Token RPAREN1194=null;
		Token MATCH1195=null;
		Token FULL1196=null;
		Token MATCH1197=null;
		Token PARTIAL1198=null;
		Token MATCH1199=null;
		Token SIMPLE_SYM1200=null;
		Token ON1201=null;
		Token DELETE_SYM1202=null;
		Token ON1204=null;
		Token UPDATE1205=null;
		ParserRuleReturnScope table_name1189 =null;
		ParserRuleReturnScope index_column_name1191 =null;
		ParserRuleReturnScope index_column_name1193 =null;
		ParserRuleReturnScope reference_option1203 =null;
		ParserRuleReturnScope reference_option1206 =null;

		CommonTree REFERENCES1188_tree=null;
		CommonTree LPAREN1190_tree=null;
		CommonTree COMMA1192_tree=null;
		CommonTree RPAREN1194_tree=null;
		CommonTree MATCH1195_tree=null;
		CommonTree FULL1196_tree=null;
		CommonTree MATCH1197_tree=null;
		CommonTree PARTIAL1198_tree=null;
		CommonTree MATCH1199_tree=null;
		CommonTree SIMPLE_SYM1200_tree=null;
		CommonTree ON1201_tree=null;
		CommonTree DELETE_SYM1202_tree=null;
		CommonTree ON1204_tree=null;
		CommonTree UPDATE1205_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2097:21: ( REFERENCES table_name LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( ( MATCH FULL ) | ( MATCH PARTIAL ) | ( MATCH SIMPLE_SYM ) )? ( ON DELETE_SYM reference_option )? ( ON UPDATE reference_option )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2098:3: REFERENCES table_name LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( ( MATCH FULL ) | ( MATCH PARTIAL ) | ( MATCH SIMPLE_SYM ) )? ( ON DELETE_SYM reference_option )? ( ON UPDATE reference_option )?
			{
			root_0 = (CommonTree)adaptor.nil();


			REFERENCES1188=(Token)match(input,REFERENCES,FOLLOW_REFERENCES_in_reference_definition28781); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			REFERENCES1188_tree = (CommonTree)adaptor.create(REFERENCES1188);
			adaptor.addChild(root_0, REFERENCES1188_tree);
			}

			pushFollow(FOLLOW_table_name_in_reference_definition28783);
			table_name1189=table_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1189.getTree());

			LPAREN1190=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_reference_definition28785); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN1190_tree = (CommonTree)adaptor.create(LPAREN1190);
			adaptor.addChild(root_0, LPAREN1190_tree);
			}

			pushFollow(FOLLOW_index_column_name_in_reference_definition28787);
			index_column_name1191=index_column_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name1191.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2098:50: ( COMMA index_column_name )*
			loop420:
			while (true) {
				int alt420=2;
				int LA420_0 = input.LA(1);
				if ( (LA420_0==COMMA) ) {
					alt420=1;
				}

				switch (alt420) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2098:51: COMMA index_column_name
					{
					COMMA1192=(Token)match(input,COMMA,FOLLOW_COMMA_in_reference_definition28790); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA1192_tree = (CommonTree)adaptor.create(COMMA1192);
					adaptor.addChild(root_0, COMMA1192_tree);
					}

					pushFollow(FOLLOW_index_column_name_in_reference_definition28792);
					index_column_name1193=index_column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name1193.getTree());

					}
					break;

				default :
					break loop420;
				}
			}

			RPAREN1194=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_reference_definition28796); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN1194_tree = (CommonTree)adaptor.create(RPAREN1194);
			adaptor.addChild(root_0, RPAREN1194_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2099:3: ( ( MATCH FULL ) | ( MATCH PARTIAL ) | ( MATCH SIMPLE_SYM ) )?
			int alt421=4;
			int LA421_0 = input.LA(1);
			if ( (LA421_0==MATCH) ) {
				switch ( input.LA(2) ) {
					case FULL:
						{
						alt421=1;
						}
						break;
					case PARTIAL:
						{
						alt421=2;
						}
						break;
					case SIMPLE_SYM:
						{
						alt421=3;
						}
						break;
				}
			}
			switch (alt421) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2099:5: ( MATCH FULL )
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2099:5: ( MATCH FULL )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2099:6: MATCH FULL
					{
					MATCH1195=(Token)match(input,MATCH,FOLLOW_MATCH_in_reference_definition28803); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MATCH1195_tree = (CommonTree)adaptor.create(MATCH1195);
					adaptor.addChild(root_0, MATCH1195_tree);
					}

					FULL1196=(Token)match(input,FULL,FOLLOW_FULL_in_reference_definition28805); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					FULL1196_tree = (CommonTree)adaptor.create(FULL1196);
					adaptor.addChild(root_0, FULL1196_tree);
					}

					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2099:20: ( MATCH PARTIAL )
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2099:20: ( MATCH PARTIAL )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2099:21: MATCH PARTIAL
					{
					MATCH1197=(Token)match(input,MATCH,FOLLOW_MATCH_in_reference_definition28811); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MATCH1197_tree = (CommonTree)adaptor.create(MATCH1197);
					adaptor.addChild(root_0, MATCH1197_tree);
					}

					PARTIAL1198=(Token)match(input,PARTIAL,FOLLOW_PARTIAL_in_reference_definition28813); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PARTIAL1198_tree = (CommonTree)adaptor.create(PARTIAL1198);
					adaptor.addChild(root_0, PARTIAL1198_tree);
					}

					}

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2099:38: ( MATCH SIMPLE_SYM )
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2099:38: ( MATCH SIMPLE_SYM )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2099:39: MATCH SIMPLE_SYM
					{
					MATCH1199=(Token)match(input,MATCH,FOLLOW_MATCH_in_reference_definition28819); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MATCH1199_tree = (CommonTree)adaptor.create(MATCH1199);
					adaptor.addChild(root_0, MATCH1199_tree);
					}

					SIMPLE_SYM1200=(Token)match(input,SIMPLE_SYM,FOLLOW_SIMPLE_SYM_in_reference_definition28821); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SIMPLE_SYM1200_tree = (CommonTree)adaptor.create(SIMPLE_SYM1200);
					adaptor.addChild(root_0, SIMPLE_SYM1200_tree);
					}

					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2100:3: ( ON DELETE_SYM reference_option )?
			int alt422=2;
			int LA422_0 = input.LA(1);
			if ( (LA422_0==ON) ) {
				int LA422_1 = input.LA(2);
				if ( (LA422_1==DELETE_SYM) ) {
					alt422=1;
				}
			}
			switch (alt422) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2100:4: ON DELETE_SYM reference_option
					{
					ON1201=(Token)match(input,ON,FOLLOW_ON_in_reference_definition28830); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ON1201_tree = (CommonTree)adaptor.create(ON1201);
					adaptor.addChild(root_0, ON1201_tree);
					}

					DELETE_SYM1202=(Token)match(input,DELETE_SYM,FOLLOW_DELETE_SYM_in_reference_definition28832); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DELETE_SYM1202_tree = (CommonTree)adaptor.create(DELETE_SYM1202);
					adaptor.addChild(root_0, DELETE_SYM1202_tree);
					}

					pushFollow(FOLLOW_reference_option_in_reference_definition28834);
					reference_option1203=reference_option();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, reference_option1203.getTree());

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2101:3: ( ON UPDATE reference_option )?
			int alt423=2;
			int LA423_0 = input.LA(1);
			if ( (LA423_0==ON) ) {
				alt423=1;
			}
			switch (alt423) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2101:4: ON UPDATE reference_option
					{
					ON1204=(Token)match(input,ON,FOLLOW_ON_in_reference_definition28841); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ON1204_tree = (CommonTree)adaptor.create(ON1204);
					adaptor.addChild(root_0, ON1204_tree);
					}

					UPDATE1205=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_reference_definition28843); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					UPDATE1205_tree = (CommonTree)adaptor.create(UPDATE1205);
					adaptor.addChild(root_0, UPDATE1205_tree);
					}

					pushFollow(FOLLOW_reference_option_in_reference_definition28845);
					reference_option1206=reference_option();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, reference_option1206.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "reference_definition"


	public static class reference_option_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "reference_option"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2103:1: reference_option : ( ( RESTRICT ) | ( CASCADE ) | ( SET_SYM NULL_SYM ) | ( NO_SYM ACTION ) );
	public final SQLParser.reference_option_return reference_option() throws RecognitionException {
		SQLParser.reference_option_return retval = new SQLParser.reference_option_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token RESTRICT1207=null;
		Token CASCADE1208=null;
		Token SET_SYM1209=null;
		Token NULL_SYM1210=null;
		Token NO_SYM1211=null;
		Token ACTION1212=null;

		CommonTree RESTRICT1207_tree=null;
		CommonTree CASCADE1208_tree=null;
		CommonTree SET_SYM1209_tree=null;
		CommonTree NULL_SYM1210_tree=null;
		CommonTree NO_SYM1211_tree=null;
		CommonTree ACTION1212_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2103:17: ( ( RESTRICT ) | ( CASCADE ) | ( SET_SYM NULL_SYM ) | ( NO_SYM ACTION ) )
			int alt424=4;
			switch ( input.LA(1) ) {
			case RESTRICT:
				{
				alt424=1;
				}
				break;
			case CASCADE:
				{
				alt424=2;
				}
				break;
			case SET_SYM:
				{
				alt424=3;
				}
				break;
			case NO_SYM:
				{
				alt424=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 424, 0, input);
				throw nvae;
			}
			switch (alt424) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2104:3: ( RESTRICT )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2104:3: ( RESTRICT )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2104:4: RESTRICT
					{
					RESTRICT1207=(Token)match(input,RESTRICT,FOLLOW_RESTRICT_in_reference_option28857); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RESTRICT1207_tree = (CommonTree)adaptor.create(RESTRICT1207);
					adaptor.addChild(root_0, RESTRICT1207_tree);
					}

					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2104:16: ( CASCADE )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2104:16: ( CASCADE )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2104:17: CASCADE
					{
					CASCADE1208=(Token)match(input,CASCADE,FOLLOW_CASCADE_in_reference_option28863); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CASCADE1208_tree = (CommonTree)adaptor.create(CASCADE1208);
					adaptor.addChild(root_0, CASCADE1208_tree);
					}

					}

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2104:28: ( SET_SYM NULL_SYM )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2104:28: ( SET_SYM NULL_SYM )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2104:29: SET_SYM NULL_SYM
					{
					SET_SYM1209=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_reference_option28869); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SET_SYM1209_tree = (CommonTree)adaptor.create(SET_SYM1209);
					adaptor.addChild(root_0, SET_SYM1209_tree);
					}

					NULL_SYM1210=(Token)match(input,NULL_SYM,FOLLOW_NULL_SYM_in_reference_option28871); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NULL_SYM1210_tree = (CommonTree)adaptor.create(NULL_SYM1210);
					adaptor.addChild(root_0, NULL_SYM1210_tree);
					}

					}

					}
					break;
				case 4 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2104:49: ( NO_SYM ACTION )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2104:49: ( NO_SYM ACTION )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2104:50: NO_SYM ACTION
					{
					NO_SYM1211=(Token)match(input,NO_SYM,FOLLOW_NO_SYM_in_reference_option28877); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NO_SYM1211_tree = (CommonTree)adaptor.create(NO_SYM1211);
					adaptor.addChild(root_0, NO_SYM1211_tree);
					}

					ACTION1212=(Token)match(input,ACTION,FOLLOW_ACTION_in_reference_option28879); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ACTION1212_tree = (CommonTree)adaptor.create(ACTION1212);
					adaptor.addChild(root_0, ACTION1212_tree);
					}

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "reference_option"


	public static class table_options_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "table_options"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2107:1: table_options : table_option ( ( COMMA )? table_option )* ;
	public final SQLParser.table_options_return table_options() throws RecognitionException {
		SQLParser.table_options_return retval = new SQLParser.table_options_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA1214=null;
		ParserRuleReturnScope table_option1213 =null;
		ParserRuleReturnScope table_option1215 =null;

		CommonTree COMMA1214_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2107:14: ( table_option ( ( COMMA )? table_option )* )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2108:3: table_option ( ( COMMA )? table_option )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_table_option_in_table_options28890);
			table_option1213=table_option();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_option1213.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2108:16: ( ( COMMA )? table_option )*
			loop426:
			while (true) {
				int alt426=2;
				alt426 = dfa426.predict(input);
				switch (alt426) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2108:17: ( COMMA )? table_option
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2108:17: ( COMMA )?
					int alt425=2;
					int LA425_0 = input.LA(1);
					if ( (LA425_0==COMMA) ) {
						alt425=1;
					}
					switch (alt425) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2108:19: COMMA
							{
							COMMA1214=(Token)match(input,COMMA,FOLLOW_COMMA_in_table_options28895); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA1214_tree = (CommonTree)adaptor.create(COMMA1214);
							adaptor.addChild(root_0, COMMA1214_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_table_option_in_table_options28900);
					table_option1215=table_option();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_option1215.getTree());

					}
					break;

				default :
					break loop426;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_options"


	public static class table_option_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "table_option"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2110:1: table_option : ( ( ENGINE_SYM ( EQ_SYM )? engine_name ) | ( AUTO_INCREMENT ( EQ_SYM )? INTEGER_NUM ) | ( AVG_ROW_LENGTH ( EQ_SYM )? INTEGER_NUM ) | ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ) | ( CHECKSUM_SYM ( EQ_SYM )? INTEGER_NUM ) | ( ( DEFAULT )? COLLATE_SYM ( EQ_SYM )? collation_name ) | ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING ) | ( CONNECTION_SYM ( EQ_SYM )? TEXT_STRING ) | ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING ) | ( DELAY_KEY_WRITE_SYM ( EQ_SYM )? INTEGER_NUM ) | ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING ) | ( INSERT_METHOD ( EQ_SYM )? ( NO_SYM | FIRST_SYM | LAST_SYM ) ) | ( KEY_BLOCK_SIZE ( EQ_SYM )? INTEGER_NUM ) | ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM ) | ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM ) | ( PACK_KEYS_SYM ( EQ_SYM )? ( INTEGER_NUM | DEFAULT ) ) | ( PASSWORD ( EQ_SYM )? TEXT_STRING ) | ( ROW_FORMAT_SYM ( EQ_SYM )? ( DEFAULT | DYNAMIC_SYM | FIXED_SYM | COMPRESSED_SYM | REDUNDANT_SYM | COMPACT_SYM ) ) | ( STATS_AUTO_RECALC ( EQ_SYM )? ( DEFAULT | INTEGER_NUM ) ) | ( STATS_PERSISTENT ( EQ_SYM )? ( DEFAULT | INTEGER_NUM ) ) | ( UNION_SYM ( EQ_SYM )? LPAREN table_name ( COMMA table_name )* RPAREN ) );
	public final SQLParser.table_option_return table_option() throws RecognitionException {
		SQLParser.table_option_return retval = new SQLParser.table_option_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token ENGINE_SYM1216=null;
		Token EQ_SYM1217=null;
		Token AUTO_INCREMENT1219=null;
		Token EQ_SYM1220=null;
		Token INTEGER_NUM1221=null;
		Token AVG_ROW_LENGTH1222=null;
		Token EQ_SYM1223=null;
		Token INTEGER_NUM1224=null;
		Token DEFAULT1225=null;
		Token CHARACTER_SYM1226=null;
		Token SET_SYM1227=null;
		Token EQ_SYM1228=null;
		Token CHECKSUM_SYM1230=null;
		Token EQ_SYM1231=null;
		Token INTEGER_NUM1232=null;
		Token DEFAULT1233=null;
		Token COLLATE_SYM1234=null;
		Token EQ_SYM1235=null;
		Token COMMENT_SYM1237=null;
		Token EQ_SYM1238=null;
		Token TEXT_STRING1239=null;
		Token CONNECTION_SYM1240=null;
		Token EQ_SYM1241=null;
		Token TEXT_STRING1242=null;
		Token DATA_SYM1243=null;
		Token DIRECTORY_SYM1244=null;
		Token EQ_SYM1245=null;
		Token TEXT_STRING1246=null;
		Token DELAY_KEY_WRITE_SYM1247=null;
		Token EQ_SYM1248=null;
		Token INTEGER_NUM1249=null;
		Token INDEX_SYM1250=null;
		Token DIRECTORY_SYM1251=null;
		Token EQ_SYM1252=null;
		Token TEXT_STRING1253=null;
		Token INSERT_METHOD1254=null;
		Token EQ_SYM1255=null;
		Token set1256=null;
		Token KEY_BLOCK_SIZE1257=null;
		Token EQ_SYM1258=null;
		Token INTEGER_NUM1259=null;
		Token MAX_ROWS1260=null;
		Token EQ_SYM1261=null;
		Token INTEGER_NUM1262=null;
		Token MIN_ROWS1263=null;
		Token EQ_SYM1264=null;
		Token INTEGER_NUM1265=null;
		Token PACK_KEYS_SYM1266=null;
		Token EQ_SYM1267=null;
		Token set1268=null;
		Token PASSWORD1269=null;
		Token EQ_SYM1270=null;
		Token TEXT_STRING1271=null;
		Token ROW_FORMAT_SYM1272=null;
		Token EQ_SYM1273=null;
		Token set1274=null;
		Token STATS_AUTO_RECALC1275=null;
		Token EQ_SYM1276=null;
		Token set1277=null;
		Token STATS_PERSISTENT1278=null;
		Token EQ_SYM1279=null;
		Token set1280=null;
		Token UNION_SYM1281=null;
		Token EQ_SYM1282=null;
		Token LPAREN1283=null;
		Token COMMA1285=null;
		Token RPAREN1287=null;
		ParserRuleReturnScope engine_name1218 =null;
		ParserRuleReturnScope charset_name1229 =null;
		ParserRuleReturnScope collation_name1236 =null;
		ParserRuleReturnScope table_name1284 =null;
		ParserRuleReturnScope table_name1286 =null;

		CommonTree ENGINE_SYM1216_tree=null;
		CommonTree EQ_SYM1217_tree=null;
		CommonTree AUTO_INCREMENT1219_tree=null;
		CommonTree EQ_SYM1220_tree=null;
		CommonTree INTEGER_NUM1221_tree=null;
		CommonTree AVG_ROW_LENGTH1222_tree=null;
		CommonTree EQ_SYM1223_tree=null;
		CommonTree INTEGER_NUM1224_tree=null;
		CommonTree DEFAULT1225_tree=null;
		CommonTree CHARACTER_SYM1226_tree=null;
		CommonTree SET_SYM1227_tree=null;
		CommonTree EQ_SYM1228_tree=null;
		CommonTree CHECKSUM_SYM1230_tree=null;
		CommonTree EQ_SYM1231_tree=null;
		CommonTree INTEGER_NUM1232_tree=null;
		CommonTree DEFAULT1233_tree=null;
		CommonTree COLLATE_SYM1234_tree=null;
		CommonTree EQ_SYM1235_tree=null;
		CommonTree COMMENT_SYM1237_tree=null;
		CommonTree EQ_SYM1238_tree=null;
		CommonTree TEXT_STRING1239_tree=null;
		CommonTree CONNECTION_SYM1240_tree=null;
		CommonTree EQ_SYM1241_tree=null;
		CommonTree TEXT_STRING1242_tree=null;
		CommonTree DATA_SYM1243_tree=null;
		CommonTree DIRECTORY_SYM1244_tree=null;
		CommonTree EQ_SYM1245_tree=null;
		CommonTree TEXT_STRING1246_tree=null;
		CommonTree DELAY_KEY_WRITE_SYM1247_tree=null;
		CommonTree EQ_SYM1248_tree=null;
		CommonTree INTEGER_NUM1249_tree=null;
		CommonTree INDEX_SYM1250_tree=null;
		CommonTree DIRECTORY_SYM1251_tree=null;
		CommonTree EQ_SYM1252_tree=null;
		CommonTree TEXT_STRING1253_tree=null;
		CommonTree INSERT_METHOD1254_tree=null;
		CommonTree EQ_SYM1255_tree=null;
		CommonTree set1256_tree=null;
		CommonTree KEY_BLOCK_SIZE1257_tree=null;
		CommonTree EQ_SYM1258_tree=null;
		CommonTree INTEGER_NUM1259_tree=null;
		CommonTree MAX_ROWS1260_tree=null;
		CommonTree EQ_SYM1261_tree=null;
		CommonTree INTEGER_NUM1262_tree=null;
		CommonTree MIN_ROWS1263_tree=null;
		CommonTree EQ_SYM1264_tree=null;
		CommonTree INTEGER_NUM1265_tree=null;
		CommonTree PACK_KEYS_SYM1266_tree=null;
		CommonTree EQ_SYM1267_tree=null;
		CommonTree set1268_tree=null;
		CommonTree PASSWORD1269_tree=null;
		CommonTree EQ_SYM1270_tree=null;
		CommonTree TEXT_STRING1271_tree=null;
		CommonTree ROW_FORMAT_SYM1272_tree=null;
		CommonTree EQ_SYM1273_tree=null;
		CommonTree set1274_tree=null;
		CommonTree STATS_AUTO_RECALC1275_tree=null;
		CommonTree EQ_SYM1276_tree=null;
		CommonTree set1277_tree=null;
		CommonTree STATS_PERSISTENT1278_tree=null;
		CommonTree EQ_SYM1279_tree=null;
		CommonTree set1280_tree=null;
		CommonTree UNION_SYM1281_tree=null;
		CommonTree EQ_SYM1282_tree=null;
		CommonTree LPAREN1283_tree=null;
		CommonTree COMMA1285_tree=null;
		CommonTree RPAREN1287_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2110:13: ( ( ENGINE_SYM ( EQ_SYM )? engine_name ) | ( AUTO_INCREMENT ( EQ_SYM )? INTEGER_NUM ) | ( AVG_ROW_LENGTH ( EQ_SYM )? INTEGER_NUM ) | ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ) | ( CHECKSUM_SYM ( EQ_SYM )? INTEGER_NUM ) | ( ( DEFAULT )? COLLATE_SYM ( EQ_SYM )? collation_name ) | ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING ) | ( CONNECTION_SYM ( EQ_SYM )? TEXT_STRING ) | ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING ) | ( DELAY_KEY_WRITE_SYM ( EQ_SYM )? INTEGER_NUM ) | ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING ) | ( INSERT_METHOD ( EQ_SYM )? ( NO_SYM | FIRST_SYM | LAST_SYM ) ) | ( KEY_BLOCK_SIZE ( EQ_SYM )? INTEGER_NUM ) | ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM ) | ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM ) | ( PACK_KEYS_SYM ( EQ_SYM )? ( INTEGER_NUM | DEFAULT ) ) | ( PASSWORD ( EQ_SYM )? TEXT_STRING ) | ( ROW_FORMAT_SYM ( EQ_SYM )? ( DEFAULT | DYNAMIC_SYM | FIXED_SYM | COMPRESSED_SYM | REDUNDANT_SYM | COMPACT_SYM ) ) | ( STATS_AUTO_RECALC ( EQ_SYM )? ( DEFAULT | INTEGER_NUM ) ) | ( STATS_PERSISTENT ( EQ_SYM )? ( DEFAULT | INTEGER_NUM ) ) | ( UNION_SYM ( EQ_SYM )? LPAREN table_name ( COMMA table_name )* RPAREN ) )
			int alt451=21;
			switch ( input.LA(1) ) {
			case ENGINE_SYM:
				{
				alt451=1;
				}
				break;
			case AUTO_INCREMENT:
				{
				alt451=2;
				}
				break;
			case AVG_ROW_LENGTH:
				{
				alt451=3;
				}
				break;
			case DEFAULT:
				{
				int LA451_4 = input.LA(2);
				if ( (LA451_4==CHARACTER_SYM) ) {
					alt451=4;
				}
				else if ( (LA451_4==COLLATE_SYM) ) {
					alt451=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 451, 4, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CHARACTER_SYM:
				{
				alt451=4;
				}
				break;
			case CHECKSUM_SYM:
				{
				alt451=5;
				}
				break;
			case COLLATE_SYM:
				{
				alt451=6;
				}
				break;
			case COMMENT_SYM:
				{
				alt451=7;
				}
				break;
			case CONNECTION_SYM:
				{
				alt451=8;
				}
				break;
			case DATA_SYM:
				{
				alt451=9;
				}
				break;
			case DELAY_KEY_WRITE_SYM:
				{
				alt451=10;
				}
				break;
			case INDEX_SYM:
				{
				alt451=11;
				}
				break;
			case INSERT_METHOD:
				{
				alt451=12;
				}
				break;
			case KEY_BLOCK_SIZE:
				{
				alt451=13;
				}
				break;
			case MAX_ROWS:
				{
				alt451=14;
				}
				break;
			case MIN_ROWS:
				{
				alt451=15;
				}
				break;
			case PACK_KEYS_SYM:
				{
				alt451=16;
				}
				break;
			case PASSWORD:
				{
				alt451=17;
				}
				break;
			case ROW_FORMAT_SYM:
				{
				alt451=18;
				}
				break;
			case STATS_AUTO_RECALC:
				{
				alt451=19;
				}
				break;
			case STATS_PERSISTENT:
				{
				alt451=20;
				}
				break;
			case UNION_SYM:
				{
				alt451=21;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 451, 0, input);
				throw nvae;
			}
			switch (alt451) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2111:5: ( ENGINE_SYM ( EQ_SYM )? engine_name )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2111:5: ( ENGINE_SYM ( EQ_SYM )? engine_name )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2111:8: ENGINE_SYM ( EQ_SYM )? engine_name
					{
					ENGINE_SYM1216=(Token)match(input,ENGINE_SYM,FOLLOW_ENGINE_SYM_in_table_option28916); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ENGINE_SYM1216_tree = (CommonTree)adaptor.create(ENGINE_SYM1216);
					adaptor.addChild(root_0, ENGINE_SYM1216_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2111:19: ( EQ_SYM )?
					int alt427=2;
					int LA427_0 = input.LA(1);
					if ( (LA427_0==EQ_SYM) ) {
						alt427=1;
					}
					switch (alt427) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2111:20: EQ_SYM
							{
							EQ_SYM1217=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option28919); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1217_tree = (CommonTree)adaptor.create(EQ_SYM1217);
							adaptor.addChild(root_0, EQ_SYM1217_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_engine_name_in_table_option28923);
					engine_name1218=engine_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, engine_name1218.getTree());

					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2112:5: ( AUTO_INCREMENT ( EQ_SYM )? INTEGER_NUM )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2112:5: ( AUTO_INCREMENT ( EQ_SYM )? INTEGER_NUM )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2112:8: AUTO_INCREMENT ( EQ_SYM )? INTEGER_NUM
					{
					AUTO_INCREMENT1219=(Token)match(input,AUTO_INCREMENT,FOLLOW_AUTO_INCREMENT_in_table_option28935); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					AUTO_INCREMENT1219_tree = (CommonTree)adaptor.create(AUTO_INCREMENT1219);
					adaptor.addChild(root_0, AUTO_INCREMENT1219_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2112:23: ( EQ_SYM )?
					int alt428=2;
					int LA428_0 = input.LA(1);
					if ( (LA428_0==EQ_SYM) ) {
						alt428=1;
					}
					switch (alt428) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2112:24: EQ_SYM
							{
							EQ_SYM1220=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option28938); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1220_tree = (CommonTree)adaptor.create(EQ_SYM1220);
							adaptor.addChild(root_0, EQ_SYM1220_tree);
							}

							}
							break;

					}

					INTEGER_NUM1221=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_table_option28942); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM1221_tree = (CommonTree)adaptor.create(INTEGER_NUM1221);
					adaptor.addChild(root_0, INTEGER_NUM1221_tree);
					}

					}

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2113:5: ( AVG_ROW_LENGTH ( EQ_SYM )? INTEGER_NUM )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2113:5: ( AVG_ROW_LENGTH ( EQ_SYM )? INTEGER_NUM )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2113:8: AVG_ROW_LENGTH ( EQ_SYM )? INTEGER_NUM
					{
					AVG_ROW_LENGTH1222=(Token)match(input,AVG_ROW_LENGTH,FOLLOW_AVG_ROW_LENGTH_in_table_option28954); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					AVG_ROW_LENGTH1222_tree = (CommonTree)adaptor.create(AVG_ROW_LENGTH1222);
					adaptor.addChild(root_0, AVG_ROW_LENGTH1222_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2113:23: ( EQ_SYM )?
					int alt429=2;
					int LA429_0 = input.LA(1);
					if ( (LA429_0==EQ_SYM) ) {
						alt429=1;
					}
					switch (alt429) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2113:24: EQ_SYM
							{
							EQ_SYM1223=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option28957); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1223_tree = (CommonTree)adaptor.create(EQ_SYM1223);
							adaptor.addChild(root_0, EQ_SYM1223_tree);
							}

							}
							break;

					}

					INTEGER_NUM1224=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_table_option28961); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM1224_tree = (CommonTree)adaptor.create(INTEGER_NUM1224);
					adaptor.addChild(root_0, INTEGER_NUM1224_tree);
					}

					}

					}
					break;
				case 4 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2114:5: ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2114:5: ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2114:8: ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2114:8: ( DEFAULT )?
					int alt430=2;
					int LA430_0 = input.LA(1);
					if ( (LA430_0==DEFAULT) ) {
						alt430=1;
					}
					switch (alt430) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2114:9: DEFAULT
							{
							DEFAULT1225=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_table_option28974); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1225_tree = (CommonTree)adaptor.create(DEFAULT1225);
							adaptor.addChild(root_0, DEFAULT1225_tree);
							}

							}
							break;

					}

					CHARACTER_SYM1226=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_table_option28978); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CHARACTER_SYM1226_tree = (CommonTree)adaptor.create(CHARACTER_SYM1226);
					adaptor.addChild(root_0, CHARACTER_SYM1226_tree);
					}

					SET_SYM1227=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_table_option28980); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SET_SYM1227_tree = (CommonTree)adaptor.create(SET_SYM1227);
					adaptor.addChild(root_0, SET_SYM1227_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2114:41: ( EQ_SYM )?
					int alt431=2;
					int LA431_0 = input.LA(1);
					if ( (LA431_0==EQ_SYM) ) {
						alt431=1;
					}
					switch (alt431) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2114:42: EQ_SYM
							{
							EQ_SYM1228=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option28983); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1228_tree = (CommonTree)adaptor.create(EQ_SYM1228);
							adaptor.addChild(root_0, EQ_SYM1228_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_charset_name_in_table_option28987);
					charset_name1229=charset_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name1229.getTree());

					}

					}
					break;
				case 5 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2115:5: ( CHECKSUM_SYM ( EQ_SYM )? INTEGER_NUM )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2115:5: ( CHECKSUM_SYM ( EQ_SYM )? INTEGER_NUM )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2115:8: CHECKSUM_SYM ( EQ_SYM )? INTEGER_NUM
					{
					CHECKSUM_SYM1230=(Token)match(input,CHECKSUM_SYM,FOLLOW_CHECKSUM_SYM_in_table_option28999); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CHECKSUM_SYM1230_tree = (CommonTree)adaptor.create(CHECKSUM_SYM1230);
					adaptor.addChild(root_0, CHECKSUM_SYM1230_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2115:21: ( EQ_SYM )?
					int alt432=2;
					int LA432_0 = input.LA(1);
					if ( (LA432_0==EQ_SYM) ) {
						alt432=1;
					}
					switch (alt432) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2115:22: EQ_SYM
							{
							EQ_SYM1231=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option29002); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1231_tree = (CommonTree)adaptor.create(EQ_SYM1231);
							adaptor.addChild(root_0, EQ_SYM1231_tree);
							}

							}
							break;

					}

					INTEGER_NUM1232=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_table_option29006); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM1232_tree = (CommonTree)adaptor.create(INTEGER_NUM1232);
					adaptor.addChild(root_0, INTEGER_NUM1232_tree);
					}

					}

					}
					break;
				case 6 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2116:5: ( ( DEFAULT )? COLLATE_SYM ( EQ_SYM )? collation_name )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2116:5: ( ( DEFAULT )? COLLATE_SYM ( EQ_SYM )? collation_name )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2116:8: ( DEFAULT )? COLLATE_SYM ( EQ_SYM )? collation_name
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2116:8: ( DEFAULT )?
					int alt433=2;
					int LA433_0 = input.LA(1);
					if ( (LA433_0==DEFAULT) ) {
						alt433=1;
					}
					switch (alt433) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2116:9: DEFAULT
							{
							DEFAULT1233=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_table_option29019); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1233_tree = (CommonTree)adaptor.create(DEFAULT1233);
							adaptor.addChild(root_0, DEFAULT1233_tree);
							}

							}
							break;

					}

					COLLATE_SYM1234=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_table_option29023); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COLLATE_SYM1234_tree = (CommonTree)adaptor.create(COLLATE_SYM1234);
					adaptor.addChild(root_0, COLLATE_SYM1234_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2116:31: ( EQ_SYM )?
					int alt434=2;
					int LA434_0 = input.LA(1);
					if ( (LA434_0==EQ_SYM) ) {
						alt434=1;
					}
					switch (alt434) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2116:32: EQ_SYM
							{
							EQ_SYM1235=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option29026); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1235_tree = (CommonTree)adaptor.create(EQ_SYM1235);
							adaptor.addChild(root_0, EQ_SYM1235_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_collation_name_in_table_option29030);
					collation_name1236=collation_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name1236.getTree());

					}

					}
					break;
				case 7 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2117:5: ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2117:5: ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2117:8: COMMENT_SYM ( EQ_SYM )? TEXT_STRING
					{
					COMMENT_SYM1237=(Token)match(input,COMMENT_SYM,FOLLOW_COMMENT_SYM_in_table_option29042); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMENT_SYM1237_tree = (CommonTree)adaptor.create(COMMENT_SYM1237);
					adaptor.addChild(root_0, COMMENT_SYM1237_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2117:20: ( EQ_SYM )?
					int alt435=2;
					int LA435_0 = input.LA(1);
					if ( (LA435_0==EQ_SYM) ) {
						alt435=1;
					}
					switch (alt435) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2117:21: EQ_SYM
							{
							EQ_SYM1238=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option29045); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1238_tree = (CommonTree)adaptor.create(EQ_SYM1238);
							adaptor.addChild(root_0, EQ_SYM1238_tree);
							}

							}
							break;

					}

					TEXT_STRING1239=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_table_option29049); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING1239_tree = (CommonTree)adaptor.create(TEXT_STRING1239);
					adaptor.addChild(root_0, TEXT_STRING1239_tree);
					}

					}

					}
					break;
				case 8 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2118:5: ( CONNECTION_SYM ( EQ_SYM )? TEXT_STRING )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2118:5: ( CONNECTION_SYM ( EQ_SYM )? TEXT_STRING )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2118:8: CONNECTION_SYM ( EQ_SYM )? TEXT_STRING
					{
					CONNECTION_SYM1240=(Token)match(input,CONNECTION_SYM,FOLLOW_CONNECTION_SYM_in_table_option29061); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CONNECTION_SYM1240_tree = (CommonTree)adaptor.create(CONNECTION_SYM1240);
					adaptor.addChild(root_0, CONNECTION_SYM1240_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2118:23: ( EQ_SYM )?
					int alt436=2;
					int LA436_0 = input.LA(1);
					if ( (LA436_0==EQ_SYM) ) {
						alt436=1;
					}
					switch (alt436) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2118:24: EQ_SYM
							{
							EQ_SYM1241=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option29064); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1241_tree = (CommonTree)adaptor.create(EQ_SYM1241);
							adaptor.addChild(root_0, EQ_SYM1241_tree);
							}

							}
							break;

					}

					TEXT_STRING1242=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_table_option29068); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING1242_tree = (CommonTree)adaptor.create(TEXT_STRING1242);
					adaptor.addChild(root_0, TEXT_STRING1242_tree);
					}

					}

					}
					break;
				case 9 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2119:5: ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2119:5: ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2119:8: DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING
					{
					DATA_SYM1243=(Token)match(input,DATA_SYM,FOLLOW_DATA_SYM_in_table_option29080); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DATA_SYM1243_tree = (CommonTree)adaptor.create(DATA_SYM1243);
					adaptor.addChild(root_0, DATA_SYM1243_tree);
					}

					DIRECTORY_SYM1244=(Token)match(input,DIRECTORY_SYM,FOLLOW_DIRECTORY_SYM_in_table_option29082); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DIRECTORY_SYM1244_tree = (CommonTree)adaptor.create(DIRECTORY_SYM1244);
					adaptor.addChild(root_0, DIRECTORY_SYM1244_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2119:31: ( EQ_SYM )?
					int alt437=2;
					int LA437_0 = input.LA(1);
					if ( (LA437_0==EQ_SYM) ) {
						alt437=1;
					}
					switch (alt437) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2119:32: EQ_SYM
							{
							EQ_SYM1245=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option29085); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1245_tree = (CommonTree)adaptor.create(EQ_SYM1245);
							adaptor.addChild(root_0, EQ_SYM1245_tree);
							}

							}
							break;

					}

					TEXT_STRING1246=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_table_option29089); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING1246_tree = (CommonTree)adaptor.create(TEXT_STRING1246);
					adaptor.addChild(root_0, TEXT_STRING1246_tree);
					}

					}

					}
					break;
				case 10 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2120:5: ( DELAY_KEY_WRITE_SYM ( EQ_SYM )? INTEGER_NUM )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2120:5: ( DELAY_KEY_WRITE_SYM ( EQ_SYM )? INTEGER_NUM )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2120:8: DELAY_KEY_WRITE_SYM ( EQ_SYM )? INTEGER_NUM
					{
					DELAY_KEY_WRITE_SYM1247=(Token)match(input,DELAY_KEY_WRITE_SYM,FOLLOW_DELAY_KEY_WRITE_SYM_in_table_option29101); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DELAY_KEY_WRITE_SYM1247_tree = (CommonTree)adaptor.create(DELAY_KEY_WRITE_SYM1247);
					adaptor.addChild(root_0, DELAY_KEY_WRITE_SYM1247_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2120:28: ( EQ_SYM )?
					int alt438=2;
					int LA438_0 = input.LA(1);
					if ( (LA438_0==EQ_SYM) ) {
						alt438=1;
					}
					switch (alt438) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2120:29: EQ_SYM
							{
							EQ_SYM1248=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option29104); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1248_tree = (CommonTree)adaptor.create(EQ_SYM1248);
							adaptor.addChild(root_0, EQ_SYM1248_tree);
							}

							}
							break;

					}

					INTEGER_NUM1249=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_table_option29108); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM1249_tree = (CommonTree)adaptor.create(INTEGER_NUM1249);
					adaptor.addChild(root_0, INTEGER_NUM1249_tree);
					}

					}

					}
					break;
				case 11 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2121:5: ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2121:5: ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2121:8: INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING
					{
					INDEX_SYM1250=(Token)match(input,INDEX_SYM,FOLLOW_INDEX_SYM_in_table_option29120); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INDEX_SYM1250_tree = (CommonTree)adaptor.create(INDEX_SYM1250);
					adaptor.addChild(root_0, INDEX_SYM1250_tree);
					}

					DIRECTORY_SYM1251=(Token)match(input,DIRECTORY_SYM,FOLLOW_DIRECTORY_SYM_in_table_option29122); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DIRECTORY_SYM1251_tree = (CommonTree)adaptor.create(DIRECTORY_SYM1251);
					adaptor.addChild(root_0, DIRECTORY_SYM1251_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2121:32: ( EQ_SYM )?
					int alt439=2;
					int LA439_0 = input.LA(1);
					if ( (LA439_0==EQ_SYM) ) {
						alt439=1;
					}
					switch (alt439) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2121:33: EQ_SYM
							{
							EQ_SYM1252=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option29125); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1252_tree = (CommonTree)adaptor.create(EQ_SYM1252);
							adaptor.addChild(root_0, EQ_SYM1252_tree);
							}

							}
							break;

					}

					TEXT_STRING1253=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_table_option29129); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING1253_tree = (CommonTree)adaptor.create(TEXT_STRING1253);
					adaptor.addChild(root_0, TEXT_STRING1253_tree);
					}

					}

					}
					break;
				case 12 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2122:5: ( INSERT_METHOD ( EQ_SYM )? ( NO_SYM | FIRST_SYM | LAST_SYM ) )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2122:5: ( INSERT_METHOD ( EQ_SYM )? ( NO_SYM | FIRST_SYM | LAST_SYM ) )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2122:8: INSERT_METHOD ( EQ_SYM )? ( NO_SYM | FIRST_SYM | LAST_SYM )
					{
					INSERT_METHOD1254=(Token)match(input,INSERT_METHOD,FOLLOW_INSERT_METHOD_in_table_option29141); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INSERT_METHOD1254_tree = (CommonTree)adaptor.create(INSERT_METHOD1254);
					adaptor.addChild(root_0, INSERT_METHOD1254_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2122:22: ( EQ_SYM )?
					int alt440=2;
					int LA440_0 = input.LA(1);
					if ( (LA440_0==EQ_SYM) ) {
						alt440=1;
					}
					switch (alt440) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2122:23: EQ_SYM
							{
							EQ_SYM1255=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option29144); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1255_tree = (CommonTree)adaptor.create(EQ_SYM1255);
							adaptor.addChild(root_0, EQ_SYM1255_tree);
							}

							}
							break;

					}

					set1256=input.LT(1);
					if ( input.LA(1)==FIRST_SYM||input.LA(1)==LAST_SYM||input.LA(1)==NO_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set1256));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}

					}
					break;
				case 13 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2123:5: ( KEY_BLOCK_SIZE ( EQ_SYM )? INTEGER_NUM )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2123:5: ( KEY_BLOCK_SIZE ( EQ_SYM )? INTEGER_NUM )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2123:8: KEY_BLOCK_SIZE ( EQ_SYM )? INTEGER_NUM
					{
					KEY_BLOCK_SIZE1257=(Token)match(input,KEY_BLOCK_SIZE,FOLLOW_KEY_BLOCK_SIZE_in_table_option29172); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KEY_BLOCK_SIZE1257_tree = (CommonTree)adaptor.create(KEY_BLOCK_SIZE1257);
					adaptor.addChild(root_0, KEY_BLOCK_SIZE1257_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2123:23: ( EQ_SYM )?
					int alt441=2;
					int LA441_0 = input.LA(1);
					if ( (LA441_0==EQ_SYM) ) {
						alt441=1;
					}
					switch (alt441) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2123:24: EQ_SYM
							{
							EQ_SYM1258=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option29175); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1258_tree = (CommonTree)adaptor.create(EQ_SYM1258);
							adaptor.addChild(root_0, EQ_SYM1258_tree);
							}

							}
							break;

					}

					INTEGER_NUM1259=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_table_option29179); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM1259_tree = (CommonTree)adaptor.create(INTEGER_NUM1259);
					adaptor.addChild(root_0, INTEGER_NUM1259_tree);
					}

					}

					}
					break;
				case 14 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2124:5: ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2124:5: ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2124:8: MAX_ROWS ( EQ_SYM )? INTEGER_NUM
					{
					MAX_ROWS1260=(Token)match(input,MAX_ROWS,FOLLOW_MAX_ROWS_in_table_option29191); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MAX_ROWS1260_tree = (CommonTree)adaptor.create(MAX_ROWS1260);
					adaptor.addChild(root_0, MAX_ROWS1260_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2124:17: ( EQ_SYM )?
					int alt442=2;
					int LA442_0 = input.LA(1);
					if ( (LA442_0==EQ_SYM) ) {
						alt442=1;
					}
					switch (alt442) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2124:18: EQ_SYM
							{
							EQ_SYM1261=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option29194); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1261_tree = (CommonTree)adaptor.create(EQ_SYM1261);
							adaptor.addChild(root_0, EQ_SYM1261_tree);
							}

							}
							break;

					}

					INTEGER_NUM1262=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_table_option29198); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM1262_tree = (CommonTree)adaptor.create(INTEGER_NUM1262);
					adaptor.addChild(root_0, INTEGER_NUM1262_tree);
					}

					}

					}
					break;
				case 15 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2125:5: ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2125:5: ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2125:8: MIN_ROWS ( EQ_SYM )? INTEGER_NUM
					{
					MIN_ROWS1263=(Token)match(input,MIN_ROWS,FOLLOW_MIN_ROWS_in_table_option29210); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MIN_ROWS1263_tree = (CommonTree)adaptor.create(MIN_ROWS1263);
					adaptor.addChild(root_0, MIN_ROWS1263_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2125:17: ( EQ_SYM )?
					int alt443=2;
					int LA443_0 = input.LA(1);
					if ( (LA443_0==EQ_SYM) ) {
						alt443=1;
					}
					switch (alt443) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2125:18: EQ_SYM
							{
							EQ_SYM1264=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option29213); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1264_tree = (CommonTree)adaptor.create(EQ_SYM1264);
							adaptor.addChild(root_0, EQ_SYM1264_tree);
							}

							}
							break;

					}

					INTEGER_NUM1265=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_table_option29217); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM1265_tree = (CommonTree)adaptor.create(INTEGER_NUM1265);
					adaptor.addChild(root_0, INTEGER_NUM1265_tree);
					}

					}

					}
					break;
				case 16 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2126:5: ( PACK_KEYS_SYM ( EQ_SYM )? ( INTEGER_NUM | DEFAULT ) )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2126:5: ( PACK_KEYS_SYM ( EQ_SYM )? ( INTEGER_NUM | DEFAULT ) )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2126:8: PACK_KEYS_SYM ( EQ_SYM )? ( INTEGER_NUM | DEFAULT )
					{
					PACK_KEYS_SYM1266=(Token)match(input,PACK_KEYS_SYM,FOLLOW_PACK_KEYS_SYM_in_table_option29229); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PACK_KEYS_SYM1266_tree = (CommonTree)adaptor.create(PACK_KEYS_SYM1266);
					adaptor.addChild(root_0, PACK_KEYS_SYM1266_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2126:22: ( EQ_SYM )?
					int alt444=2;
					int LA444_0 = input.LA(1);
					if ( (LA444_0==EQ_SYM) ) {
						alt444=1;
					}
					switch (alt444) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2126:23: EQ_SYM
							{
							EQ_SYM1267=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option29232); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1267_tree = (CommonTree)adaptor.create(EQ_SYM1267);
							adaptor.addChild(root_0, EQ_SYM1267_tree);
							}

							}
							break;

					}

					set1268=input.LT(1);
					if ( input.LA(1)==DEFAULT||input.LA(1)==INTEGER_NUM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set1268));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}

					}
					break;
				case 17 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2127:5: ( PASSWORD ( EQ_SYM )? TEXT_STRING )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2127:5: ( PASSWORD ( EQ_SYM )? TEXT_STRING )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2127:8: PASSWORD ( EQ_SYM )? TEXT_STRING
					{
					PASSWORD1269=(Token)match(input,PASSWORD,FOLLOW_PASSWORD_in_table_option29254); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PASSWORD1269_tree = (CommonTree)adaptor.create(PASSWORD1269);
					adaptor.addChild(root_0, PASSWORD1269_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2127:17: ( EQ_SYM )?
					int alt445=2;
					int LA445_0 = input.LA(1);
					if ( (LA445_0==EQ_SYM) ) {
						alt445=1;
					}
					switch (alt445) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2127:18: EQ_SYM
							{
							EQ_SYM1270=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option29257); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1270_tree = (CommonTree)adaptor.create(EQ_SYM1270);
							adaptor.addChild(root_0, EQ_SYM1270_tree);
							}

							}
							break;

					}

					TEXT_STRING1271=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_table_option29261); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING1271_tree = (CommonTree)adaptor.create(TEXT_STRING1271);
					adaptor.addChild(root_0, TEXT_STRING1271_tree);
					}

					}

					}
					break;
				case 18 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2128:5: ( ROW_FORMAT_SYM ( EQ_SYM )? ( DEFAULT | DYNAMIC_SYM | FIXED_SYM | COMPRESSED_SYM | REDUNDANT_SYM | COMPACT_SYM ) )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2128:5: ( ROW_FORMAT_SYM ( EQ_SYM )? ( DEFAULT | DYNAMIC_SYM | FIXED_SYM | COMPRESSED_SYM | REDUNDANT_SYM | COMPACT_SYM ) )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2128:8: ROW_FORMAT_SYM ( EQ_SYM )? ( DEFAULT | DYNAMIC_SYM | FIXED_SYM | COMPRESSED_SYM | REDUNDANT_SYM | COMPACT_SYM )
					{
					ROW_FORMAT_SYM1272=(Token)match(input,ROW_FORMAT_SYM,FOLLOW_ROW_FORMAT_SYM_in_table_option29273); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ROW_FORMAT_SYM1272_tree = (CommonTree)adaptor.create(ROW_FORMAT_SYM1272);
					adaptor.addChild(root_0, ROW_FORMAT_SYM1272_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2128:23: ( EQ_SYM )?
					int alt446=2;
					int LA446_0 = input.LA(1);
					if ( (LA446_0==EQ_SYM) ) {
						alt446=1;
					}
					switch (alt446) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2128:24: EQ_SYM
							{
							EQ_SYM1273=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option29276); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1273_tree = (CommonTree)adaptor.create(EQ_SYM1273);
							adaptor.addChild(root_0, EQ_SYM1273_tree);
							}

							}
							break;

					}

					set1274=input.LT(1);
					if ( input.LA(1)==COMPACT_SYM||input.LA(1)==COMPRESSED_SYM||input.LA(1)==DEFAULT||input.LA(1)==DYNAMIC_SYM||input.LA(1)==FIXED_SYM||input.LA(1)==REDUNDANT_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set1274));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}

					}
					break;
				case 19 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2129:5: ( STATS_AUTO_RECALC ( EQ_SYM )? ( DEFAULT | INTEGER_NUM ) )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2129:5: ( STATS_AUTO_RECALC ( EQ_SYM )? ( DEFAULT | INTEGER_NUM ) )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2129:8: STATS_AUTO_RECALC ( EQ_SYM )? ( DEFAULT | INTEGER_NUM )
					{
					STATS_AUTO_RECALC1275=(Token)match(input,STATS_AUTO_RECALC,FOLLOW_STATS_AUTO_RECALC_in_table_option29304); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					STATS_AUTO_RECALC1275_tree = (CommonTree)adaptor.create(STATS_AUTO_RECALC1275);
					adaptor.addChild(root_0, STATS_AUTO_RECALC1275_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2129:26: ( EQ_SYM )?
					int alt447=2;
					int LA447_0 = input.LA(1);
					if ( (LA447_0==EQ_SYM) ) {
						alt447=1;
					}
					switch (alt447) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2129:27: EQ_SYM
							{
							EQ_SYM1276=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option29307); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1276_tree = (CommonTree)adaptor.create(EQ_SYM1276);
							adaptor.addChild(root_0, EQ_SYM1276_tree);
							}

							}
							break;

					}

					set1277=input.LT(1);
					if ( input.LA(1)==DEFAULT||input.LA(1)==INTEGER_NUM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set1277));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}

					}
					break;
				case 20 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2130:5: ( STATS_PERSISTENT ( EQ_SYM )? ( DEFAULT | INTEGER_NUM ) )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2130:5: ( STATS_PERSISTENT ( EQ_SYM )? ( DEFAULT | INTEGER_NUM ) )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2130:8: STATS_PERSISTENT ( EQ_SYM )? ( DEFAULT | INTEGER_NUM )
					{
					STATS_PERSISTENT1278=(Token)match(input,STATS_PERSISTENT,FOLLOW_STATS_PERSISTENT_in_table_option29329); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					STATS_PERSISTENT1278_tree = (CommonTree)adaptor.create(STATS_PERSISTENT1278);
					adaptor.addChild(root_0, STATS_PERSISTENT1278_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2130:25: ( EQ_SYM )?
					int alt448=2;
					int LA448_0 = input.LA(1);
					if ( (LA448_0==EQ_SYM) ) {
						alt448=1;
					}
					switch (alt448) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2130:26: EQ_SYM
							{
							EQ_SYM1279=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option29332); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1279_tree = (CommonTree)adaptor.create(EQ_SYM1279);
							adaptor.addChild(root_0, EQ_SYM1279_tree);
							}

							}
							break;

					}

					set1280=input.LT(1);
					if ( input.LA(1)==DEFAULT||input.LA(1)==INTEGER_NUM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set1280));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}

					}
					break;
				case 21 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2131:5: ( UNION_SYM ( EQ_SYM )? LPAREN table_name ( COMMA table_name )* RPAREN )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2131:5: ( UNION_SYM ( EQ_SYM )? LPAREN table_name ( COMMA table_name )* RPAREN )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2131:8: UNION_SYM ( EQ_SYM )? LPAREN table_name ( COMMA table_name )* RPAREN
					{
					UNION_SYM1281=(Token)match(input,UNION_SYM,FOLLOW_UNION_SYM_in_table_option29354); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					UNION_SYM1281_tree = (CommonTree)adaptor.create(UNION_SYM1281);
					adaptor.addChild(root_0, UNION_SYM1281_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2131:18: ( EQ_SYM )?
					int alt449=2;
					int LA449_0 = input.LA(1);
					if ( (LA449_0==EQ_SYM) ) {
						alt449=1;
					}
					switch (alt449) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2131:19: EQ_SYM
							{
							EQ_SYM1282=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option29357); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1282_tree = (CommonTree)adaptor.create(EQ_SYM1282);
							adaptor.addChild(root_0, EQ_SYM1282_tree);
							}

							}
							break;

					}

					LPAREN1283=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_table_option29361); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1283_tree = (CommonTree)adaptor.create(LPAREN1283);
					adaptor.addChild(root_0, LPAREN1283_tree);
					}

					pushFollow(FOLLOW_table_name_in_table_option29363);
					table_name1284=table_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1284.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2131:45: ( COMMA table_name )*
					loop450:
					while (true) {
						int alt450=2;
						int LA450_0 = input.LA(1);
						if ( (LA450_0==COMMA) ) {
							alt450=1;
						}

						switch (alt450) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2131:47: COMMA table_name
							{
							COMMA1285=(Token)match(input,COMMA,FOLLOW_COMMA_in_table_option29366); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA1285_tree = (CommonTree)adaptor.create(COMMA1285);
							adaptor.addChild(root_0, COMMA1285_tree);
							}

							pushFollow(FOLLOW_table_name_in_table_option29368);
							table_name1286=table_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1286.getTree());

							}
							break;

						default :
							break loop450;
						}
					}

					RPAREN1287=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_table_option29372); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1287_tree = (CommonTree)adaptor.create(RPAREN1287);
					adaptor.addChild(root_0, RPAREN1287_tree);
					}

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_option"


	public static class partition_options_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "partition_options"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2134:1: partition_options : PARTITION_SYM BY_SYM ( ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN ) | ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN ) | ( RANGE_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) ) | ( LIST_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) ) ) ( PARTITIONS_SYM INTEGER_NUM )? ( SUBPARTITION_SYM BY_SYM ( ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN ) | ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN ) ) ( SUBPARTITIONS_SYM INTEGER_NUM )? )? ( LPAREN partition_definition ( COMMA partition_definition )* RPAREN )? ;
	public final SQLParser.partition_options_return partition_options() throws RecognitionException {
		SQLParser.partition_options_return retval = new SQLParser.partition_options_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token PARTITION_SYM1288=null;
		Token BY_SYM1289=null;
		Token LINEAR_SYM1290=null;
		Token HASH_SYM1291=null;
		Token LPAREN1292=null;
		Token RPAREN1294=null;
		Token LINEAR_SYM1295=null;
		Token KEY_SYM1296=null;
		Token LPAREN1297=null;
		Token RPAREN1299=null;
		Token RANGE_SYM1300=null;
		Token LPAREN1301=null;
		Token RPAREN1303=null;
		Token COLUMNS_SYM1304=null;
		Token LPAREN1305=null;
		Token RPAREN1307=null;
		Token LIST_SYM1308=null;
		Token LPAREN1309=null;
		Token RPAREN1311=null;
		Token COLUMNS_SYM1312=null;
		Token LPAREN1313=null;
		Token RPAREN1315=null;
		Token PARTITIONS_SYM1316=null;
		Token INTEGER_NUM1317=null;
		Token SUBPARTITION_SYM1318=null;
		Token BY_SYM1319=null;
		Token LINEAR_SYM1320=null;
		Token HASH_SYM1321=null;
		Token LPAREN1322=null;
		Token RPAREN1324=null;
		Token LINEAR_SYM1325=null;
		Token KEY_SYM1326=null;
		Token LPAREN1327=null;
		Token RPAREN1329=null;
		Token SUBPARTITIONS_SYM1330=null;
		Token INTEGER_NUM1331=null;
		Token LPAREN1332=null;
		Token COMMA1334=null;
		Token RPAREN1336=null;
		ParserRuleReturnScope expression1293 =null;
		ParserRuleReturnScope column_list1298 =null;
		ParserRuleReturnScope expression1302 =null;
		ParserRuleReturnScope column_list1306 =null;
		ParserRuleReturnScope expression1310 =null;
		ParserRuleReturnScope column_list1314 =null;
		ParserRuleReturnScope expression1323 =null;
		ParserRuleReturnScope column_list1328 =null;
		ParserRuleReturnScope partition_definition1333 =null;
		ParserRuleReturnScope partition_definition1335 =null;

		CommonTree PARTITION_SYM1288_tree=null;
		CommonTree BY_SYM1289_tree=null;
		CommonTree LINEAR_SYM1290_tree=null;
		CommonTree HASH_SYM1291_tree=null;
		CommonTree LPAREN1292_tree=null;
		CommonTree RPAREN1294_tree=null;
		CommonTree LINEAR_SYM1295_tree=null;
		CommonTree KEY_SYM1296_tree=null;
		CommonTree LPAREN1297_tree=null;
		CommonTree RPAREN1299_tree=null;
		CommonTree RANGE_SYM1300_tree=null;
		CommonTree LPAREN1301_tree=null;
		CommonTree RPAREN1303_tree=null;
		CommonTree COLUMNS_SYM1304_tree=null;
		CommonTree LPAREN1305_tree=null;
		CommonTree RPAREN1307_tree=null;
		CommonTree LIST_SYM1308_tree=null;
		CommonTree LPAREN1309_tree=null;
		CommonTree RPAREN1311_tree=null;
		CommonTree COLUMNS_SYM1312_tree=null;
		CommonTree LPAREN1313_tree=null;
		CommonTree RPAREN1315_tree=null;
		CommonTree PARTITIONS_SYM1316_tree=null;
		CommonTree INTEGER_NUM1317_tree=null;
		CommonTree SUBPARTITION_SYM1318_tree=null;
		CommonTree BY_SYM1319_tree=null;
		CommonTree LINEAR_SYM1320_tree=null;
		CommonTree HASH_SYM1321_tree=null;
		CommonTree LPAREN1322_tree=null;
		CommonTree RPAREN1324_tree=null;
		CommonTree LINEAR_SYM1325_tree=null;
		CommonTree KEY_SYM1326_tree=null;
		CommonTree LPAREN1327_tree=null;
		CommonTree RPAREN1329_tree=null;
		CommonTree SUBPARTITIONS_SYM1330_tree=null;
		CommonTree INTEGER_NUM1331_tree=null;
		CommonTree LPAREN1332_tree=null;
		CommonTree COMMA1334_tree=null;
		CommonTree RPAREN1336_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2134:18: ( PARTITION_SYM BY_SYM ( ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN ) | ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN ) | ( RANGE_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) ) | ( LIST_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) ) ) ( PARTITIONS_SYM INTEGER_NUM )? ( SUBPARTITION_SYM BY_SYM ( ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN ) | ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN ) ) ( SUBPARTITIONS_SYM INTEGER_NUM )? )? ( LPAREN partition_definition ( COMMA partition_definition )* RPAREN )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2135:3: PARTITION_SYM BY_SYM ( ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN ) | ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN ) | ( RANGE_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) ) | ( LIST_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) ) ) ( PARTITIONS_SYM INTEGER_NUM )? ( SUBPARTITION_SYM BY_SYM ( ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN ) | ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN ) ) ( SUBPARTITIONS_SYM INTEGER_NUM )? )? ( LPAREN partition_definition ( COMMA partition_definition )* RPAREN )?
			{
			root_0 = (CommonTree)adaptor.nil();


			PARTITION_SYM1288=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_partition_options29385); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			PARTITION_SYM1288_tree = (CommonTree)adaptor.create(PARTITION_SYM1288);
			adaptor.addChild(root_0, PARTITION_SYM1288_tree);
			}

			BY_SYM1289=(Token)match(input,BY_SYM,FOLLOW_BY_SYM_in_partition_options29387); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			BY_SYM1289_tree = (CommonTree)adaptor.create(BY_SYM1289);
			adaptor.addChild(root_0, BY_SYM1289_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2136:3: ( ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN ) | ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN ) | ( RANGE_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) ) | ( LIST_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) ) )
			int alt456=4;
			switch ( input.LA(1) ) {
			case LINEAR_SYM:
				{
				int LA456_1 = input.LA(2);
				if ( (LA456_1==HASH_SYM) ) {
					alt456=1;
				}
				else if ( (LA456_1==KEY_SYM) ) {
					alt456=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 456, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case HASH_SYM:
				{
				alt456=1;
				}
				break;
			case KEY_SYM:
				{
				alt456=2;
				}
				break;
			case RANGE_SYM:
				{
				alt456=3;
				}
				break;
			case LIST_SYM:
				{
				alt456=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 456, 0, input);
				throw nvae;
			}
			switch (alt456) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2137:7: ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN )
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2137:7: ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2137:9: ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2137:9: ( LINEAR_SYM )?
					int alt452=2;
					int LA452_0 = input.LA(1);
					if ( (LA452_0==LINEAR_SYM) ) {
						alt452=1;
					}
					switch (alt452) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2137:10: LINEAR_SYM
							{
							LINEAR_SYM1290=(Token)match(input,LINEAR_SYM,FOLLOW_LINEAR_SYM_in_partition_options29403); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LINEAR_SYM1290_tree = (CommonTree)adaptor.create(LINEAR_SYM1290);
							adaptor.addChild(root_0, LINEAR_SYM1290_tree);
							}

							}
							break;

					}

					HASH_SYM1291=(Token)match(input,HASH_SYM,FOLLOW_HASH_SYM_in_partition_options29407); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					HASH_SYM1291_tree = (CommonTree)adaptor.create(HASH_SYM1291);
					adaptor.addChild(root_0, HASH_SYM1291_tree);
					}

					LPAREN1292=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_options29409); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1292_tree = (CommonTree)adaptor.create(LPAREN1292);
					adaptor.addChild(root_0, LPAREN1292_tree);
					}

					pushFollow(FOLLOW_expression_in_partition_options29411);
					expression1293=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression1293.getTree());

					RPAREN1294=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_options29413); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1294_tree = (CommonTree)adaptor.create(RPAREN1294);
					adaptor.addChild(root_0, RPAREN1294_tree);
					}

					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2138:7: ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN )
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2138:7: ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2138:9: ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2138:9: ( LINEAR_SYM )?
					int alt453=2;
					int LA453_0 = input.LA(1);
					if ( (LA453_0==LINEAR_SYM) ) {
						alt453=1;
					}
					switch (alt453) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2138:10: LINEAR_SYM
							{
							LINEAR_SYM1295=(Token)match(input,LINEAR_SYM,FOLLOW_LINEAR_SYM_in_partition_options29426); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LINEAR_SYM1295_tree = (CommonTree)adaptor.create(LINEAR_SYM1295);
							adaptor.addChild(root_0, LINEAR_SYM1295_tree);
							}

							}
							break;

					}

					KEY_SYM1296=(Token)match(input,KEY_SYM,FOLLOW_KEY_SYM_in_partition_options29430); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KEY_SYM1296_tree = (CommonTree)adaptor.create(KEY_SYM1296);
					adaptor.addChild(root_0, KEY_SYM1296_tree);
					}

					LPAREN1297=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_options29432); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1297_tree = (CommonTree)adaptor.create(LPAREN1297);
					adaptor.addChild(root_0, LPAREN1297_tree);
					}

					pushFollow(FOLLOW_column_list_in_partition_options29434);
					column_list1298=column_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_list1298.getTree());

					RPAREN1299=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_options29436); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1299_tree = (CommonTree)adaptor.create(RPAREN1299);
					adaptor.addChild(root_0, RPAREN1299_tree);
					}

					}

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2139:7: ( RANGE_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) )
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2139:7: ( RANGE_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2139:9: RANGE_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN )
					{
					RANGE_SYM1300=(Token)match(input,RANGE_SYM,FOLLOW_RANGE_SYM_in_partition_options29448); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RANGE_SYM1300_tree = (CommonTree)adaptor.create(RANGE_SYM1300);
					adaptor.addChild(root_0, RANGE_SYM1300_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2139:18: ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN )
					int alt454=2;
					int LA454_0 = input.LA(1);
					if ( (LA454_0==LPAREN) ) {
						alt454=1;
					}
					else if ( (LA454_0==COLUMNS_SYM) ) {
						alt454=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 454, 0, input);
						throw nvae;
					}

					switch (alt454) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2139:19: LPAREN expression RPAREN
							{
							LPAREN1301=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_options29450); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN1301_tree = (CommonTree)adaptor.create(LPAREN1301);
							adaptor.addChild(root_0, LPAREN1301_tree);
							}

							pushFollow(FOLLOW_expression_in_partition_options29452);
							expression1302=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression1302.getTree());

							RPAREN1303=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_options29454); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN1303_tree = (CommonTree)adaptor.create(RPAREN1303);
							adaptor.addChild(root_0, RPAREN1303_tree);
							}

							}
							break;
						case 2 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2139:46: COLUMNS_SYM LPAREN column_list RPAREN
							{
							COLUMNS_SYM1304=(Token)match(input,COLUMNS_SYM,FOLLOW_COLUMNS_SYM_in_partition_options29458); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLUMNS_SYM1304_tree = (CommonTree)adaptor.create(COLUMNS_SYM1304);
							adaptor.addChild(root_0, COLUMNS_SYM1304_tree);
							}

							LPAREN1305=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_options29460); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN1305_tree = (CommonTree)adaptor.create(LPAREN1305);
							adaptor.addChild(root_0, LPAREN1305_tree);
							}

							pushFollow(FOLLOW_column_list_in_partition_options29462);
							column_list1306=column_list();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, column_list1306.getTree());

							RPAREN1307=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_options29464); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN1307_tree = (CommonTree)adaptor.create(RPAREN1307);
							adaptor.addChild(root_0, RPAREN1307_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 4 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2140:7: ( LIST_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) )
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2140:7: ( LIST_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2140:9: LIST_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN )
					{
					LIST_SYM1308=(Token)match(input,LIST_SYM,FOLLOW_LIST_SYM_in_partition_options29477); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LIST_SYM1308_tree = (CommonTree)adaptor.create(LIST_SYM1308);
					adaptor.addChild(root_0, LIST_SYM1308_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2140:17: ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN )
					int alt455=2;
					int LA455_0 = input.LA(1);
					if ( (LA455_0==LPAREN) ) {
						alt455=1;
					}
					else if ( (LA455_0==COLUMNS_SYM) ) {
						alt455=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 455, 0, input);
						throw nvae;
					}

					switch (alt455) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2140:18: LPAREN expression RPAREN
							{
							LPAREN1309=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_options29479); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN1309_tree = (CommonTree)adaptor.create(LPAREN1309);
							adaptor.addChild(root_0, LPAREN1309_tree);
							}

							pushFollow(FOLLOW_expression_in_partition_options29481);
							expression1310=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression1310.getTree());

							RPAREN1311=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_options29483); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN1311_tree = (CommonTree)adaptor.create(RPAREN1311);
							adaptor.addChild(root_0, RPAREN1311_tree);
							}

							}
							break;
						case 2 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2140:45: COLUMNS_SYM LPAREN column_list RPAREN
							{
							COLUMNS_SYM1312=(Token)match(input,COLUMNS_SYM,FOLLOW_COLUMNS_SYM_in_partition_options29487); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLUMNS_SYM1312_tree = (CommonTree)adaptor.create(COLUMNS_SYM1312);
							adaptor.addChild(root_0, COLUMNS_SYM1312_tree);
							}

							LPAREN1313=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_options29489); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN1313_tree = (CommonTree)adaptor.create(LPAREN1313);
							adaptor.addChild(root_0, LPAREN1313_tree);
							}

							pushFollow(FOLLOW_column_list_in_partition_options29491);
							column_list1314=column_list();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, column_list1314.getTree());

							RPAREN1315=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_options29493); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN1315_tree = (CommonTree)adaptor.create(RPAREN1315);
							adaptor.addChild(root_0, RPAREN1315_tree);
							}

							}
							break;

					}

					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2143:3: ( PARTITIONS_SYM INTEGER_NUM )?
			int alt457=2;
			int LA457_0 = input.LA(1);
			if ( (LA457_0==PARTITIONS_SYM) ) {
				alt457=1;
			}
			switch (alt457) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2143:4: PARTITIONS_SYM INTEGER_NUM
					{
					PARTITIONS_SYM1316=(Token)match(input,PARTITIONS_SYM,FOLLOW_PARTITIONS_SYM_in_partition_options29508); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PARTITIONS_SYM1316_tree = (CommonTree)adaptor.create(PARTITIONS_SYM1316);
					adaptor.addChild(root_0, PARTITIONS_SYM1316_tree);
					}

					INTEGER_NUM1317=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_partition_options29510); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM1317_tree = (CommonTree)adaptor.create(INTEGER_NUM1317);
					adaptor.addChild(root_0, INTEGER_NUM1317_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2145:3: ( SUBPARTITION_SYM BY_SYM ( ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN ) | ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN ) ) ( SUBPARTITIONS_SYM INTEGER_NUM )? )?
			int alt462=2;
			int LA462_0 = input.LA(1);
			if ( (LA462_0==SUBPARTITION_SYM) ) {
				alt462=1;
			}
			switch (alt462) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2146:5: SUBPARTITION_SYM BY_SYM ( ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN ) | ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN ) ) ( SUBPARTITIONS_SYM INTEGER_NUM )?
					{
					SUBPARTITION_SYM1318=(Token)match(input,SUBPARTITION_SYM,FOLLOW_SUBPARTITION_SYM_in_partition_options29525); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SUBPARTITION_SYM1318_tree = (CommonTree)adaptor.create(SUBPARTITION_SYM1318);
					adaptor.addChild(root_0, SUBPARTITION_SYM1318_tree);
					}

					BY_SYM1319=(Token)match(input,BY_SYM,FOLLOW_BY_SYM_in_partition_options29527); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BY_SYM1319_tree = (CommonTree)adaptor.create(BY_SYM1319);
					adaptor.addChild(root_0, BY_SYM1319_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2147:5: ( ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN ) | ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN ) )
					int alt460=2;
					switch ( input.LA(1) ) {
					case LINEAR_SYM:
						{
						int LA460_1 = input.LA(2);
						if ( (LA460_1==HASH_SYM) ) {
							alt460=1;
						}
						else if ( (LA460_1==KEY_SYM) ) {
							alt460=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 460, 1, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case HASH_SYM:
						{
						alt460=1;
						}
						break;
					case KEY_SYM:
						{
						alt460=2;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 460, 0, input);
						throw nvae;
					}
					switch (alt460) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2147:7: ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN )
							{
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2147:7: ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN )
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2147:9: ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN
							{
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2147:9: ( LINEAR_SYM )?
							int alt458=2;
							int LA458_0 = input.LA(1);
							if ( (LA458_0==LINEAR_SYM) ) {
								alt458=1;
							}
							switch (alt458) {
								case 1 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2147:10: LINEAR_SYM
									{
									LINEAR_SYM1320=(Token)match(input,LINEAR_SYM,FOLLOW_LINEAR_SYM_in_partition_options29538); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									LINEAR_SYM1320_tree = (CommonTree)adaptor.create(LINEAR_SYM1320);
									adaptor.addChild(root_0, LINEAR_SYM1320_tree);
									}

									}
									break;

							}

							HASH_SYM1321=(Token)match(input,HASH_SYM,FOLLOW_HASH_SYM_in_partition_options29542); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							HASH_SYM1321_tree = (CommonTree)adaptor.create(HASH_SYM1321);
							adaptor.addChild(root_0, HASH_SYM1321_tree);
							}

							LPAREN1322=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_options29544); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN1322_tree = (CommonTree)adaptor.create(LPAREN1322);
							adaptor.addChild(root_0, LPAREN1322_tree);
							}

							pushFollow(FOLLOW_expression_in_partition_options29546);
							expression1323=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression1323.getTree());

							RPAREN1324=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_options29548); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN1324_tree = (CommonTree)adaptor.create(RPAREN1324);
							adaptor.addChild(root_0, RPAREN1324_tree);
							}

							}

							}
							break;
						case 2 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2147:61: ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN )
							{
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2147:61: ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN )
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2147:63: ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN
							{
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2147:63: ( LINEAR_SYM )?
							int alt459=2;
							int LA459_0 = input.LA(1);
							if ( (LA459_0==LINEAR_SYM) ) {
								alt459=1;
							}
							switch (alt459) {
								case 1 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2147:64: LINEAR_SYM
									{
									LINEAR_SYM1325=(Token)match(input,LINEAR_SYM,FOLLOW_LINEAR_SYM_in_partition_options29557); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									LINEAR_SYM1325_tree = (CommonTree)adaptor.create(LINEAR_SYM1325);
									adaptor.addChild(root_0, LINEAR_SYM1325_tree);
									}

									}
									break;

							}

							KEY_SYM1326=(Token)match(input,KEY_SYM,FOLLOW_KEY_SYM_in_partition_options29561); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							KEY_SYM1326_tree = (CommonTree)adaptor.create(KEY_SYM1326);
							adaptor.addChild(root_0, KEY_SYM1326_tree);
							}

							LPAREN1327=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_options29563); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN1327_tree = (CommonTree)adaptor.create(LPAREN1327);
							adaptor.addChild(root_0, LPAREN1327_tree);
							}

							pushFollow(FOLLOW_column_list_in_partition_options29565);
							column_list1328=column_list();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, column_list1328.getTree());

							RPAREN1329=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_options29567); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN1329_tree = (CommonTree)adaptor.create(RPAREN1329);
							adaptor.addChild(root_0, RPAREN1329_tree);
							}

							}

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2148:5: ( SUBPARTITIONS_SYM INTEGER_NUM )?
					int alt461=2;
					int LA461_0 = input.LA(1);
					if ( (LA461_0==SUBPARTITIONS_SYM) ) {
						alt461=1;
					}
					switch (alt461) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2148:6: SUBPARTITIONS_SYM INTEGER_NUM
							{
							SUBPARTITIONS_SYM1330=(Token)match(input,SUBPARTITIONS_SYM,FOLLOW_SUBPARTITIONS_SYM_in_partition_options29578); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							SUBPARTITIONS_SYM1330_tree = (CommonTree)adaptor.create(SUBPARTITIONS_SYM1330);
							adaptor.addChild(root_0, SUBPARTITIONS_SYM1330_tree);
							}

							INTEGER_NUM1331=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_partition_options29580); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							INTEGER_NUM1331_tree = (CommonTree)adaptor.create(INTEGER_NUM1331);
							adaptor.addChild(root_0, INTEGER_NUM1331_tree);
							}

							}
							break;

					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2151:3: ( LPAREN partition_definition ( COMMA partition_definition )* RPAREN )?
			int alt464=2;
			int LA464_0 = input.LA(1);
			if ( (LA464_0==LPAREN) ) {
				alt464=1;
			}
			switch (alt464) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2151:4: LPAREN partition_definition ( COMMA partition_definition )* RPAREN
					{
					LPAREN1332=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_options29595); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1332_tree = (CommonTree)adaptor.create(LPAREN1332);
					adaptor.addChild(root_0, LPAREN1332_tree);
					}

					pushFollow(FOLLOW_partition_definition_in_partition_options29597);
					partition_definition1333=partition_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_definition1333.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2151:32: ( COMMA partition_definition )*
					loop463:
					while (true) {
						int alt463=2;
						int LA463_0 = input.LA(1);
						if ( (LA463_0==COMMA) ) {
							alt463=1;
						}

						switch (alt463) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2151:34: COMMA partition_definition
							{
							COMMA1334=(Token)match(input,COMMA,FOLLOW_COMMA_in_partition_options29601); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA1334_tree = (CommonTree)adaptor.create(COMMA1334);
							adaptor.addChild(root_0, COMMA1334_tree);
							}

							pushFollow(FOLLOW_partition_definition_in_partition_options29604);
							partition_definition1335=partition_definition();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_definition1335.getTree());

							}
							break;

						default :
							break loop463;
						}
					}

					RPAREN1336=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_options29608); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1336_tree = (CommonTree)adaptor.create(RPAREN1336);
					adaptor.addChild(root_0, RPAREN1336_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "partition_options"


	public static class partition_definition_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "partition_definition"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2154:1: partition_definition : PARTITION_SYM partition_name ( VALUES ( ( LESS_SYM THAN_SYM ( ( LPAREN expression_list RPAREN ) | MAXVALUE_SYM ) ) | ( IN_SYM LPAREN expression_list RPAREN ) ) )? ( ( STORAGE_SYM )? ENGINE_SYM ( EQ_SYM )? engine_name )? ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING )? ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM )? ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM )? ( LPAREN subpartition_definition ( COMMA subpartition_definition )* RPAREN )? ;
	public final SQLParser.partition_definition_return partition_definition() throws RecognitionException {
		SQLParser.partition_definition_return retval = new SQLParser.partition_definition_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token PARTITION_SYM1337=null;
		Token VALUES1339=null;
		Token LESS_SYM1340=null;
		Token THAN_SYM1341=null;
		Token LPAREN1342=null;
		Token RPAREN1344=null;
		Token MAXVALUE_SYM1345=null;
		Token IN_SYM1346=null;
		Token LPAREN1347=null;
		Token RPAREN1349=null;
		Token STORAGE_SYM1350=null;
		Token ENGINE_SYM1351=null;
		Token EQ_SYM1352=null;
		Token COMMENT_SYM1354=null;
		Token EQ_SYM1355=null;
		Token TEXT_STRING1356=null;
		Token DATA_SYM1357=null;
		Token DIRECTORY_SYM1358=null;
		Token EQ_SYM1359=null;
		Token TEXT_STRING1360=null;
		Token INDEX_SYM1361=null;
		Token DIRECTORY_SYM1362=null;
		Token EQ_SYM1363=null;
		Token TEXT_STRING1364=null;
		Token MAX_ROWS1365=null;
		Token EQ_SYM1366=null;
		Token INTEGER_NUM1367=null;
		Token MIN_ROWS1368=null;
		Token EQ_SYM1369=null;
		Token INTEGER_NUM1370=null;
		Token LPAREN1371=null;
		Token COMMA1373=null;
		Token RPAREN1375=null;
		ParserRuleReturnScope partition_name1338 =null;
		ParserRuleReturnScope expression_list1343 =null;
		ParserRuleReturnScope expression_list1348 =null;
		ParserRuleReturnScope engine_name1353 =null;
		ParserRuleReturnScope subpartition_definition1372 =null;
		ParserRuleReturnScope subpartition_definition1374 =null;

		CommonTree PARTITION_SYM1337_tree=null;
		CommonTree VALUES1339_tree=null;
		CommonTree LESS_SYM1340_tree=null;
		CommonTree THAN_SYM1341_tree=null;
		CommonTree LPAREN1342_tree=null;
		CommonTree RPAREN1344_tree=null;
		CommonTree MAXVALUE_SYM1345_tree=null;
		CommonTree IN_SYM1346_tree=null;
		CommonTree LPAREN1347_tree=null;
		CommonTree RPAREN1349_tree=null;
		CommonTree STORAGE_SYM1350_tree=null;
		CommonTree ENGINE_SYM1351_tree=null;
		CommonTree EQ_SYM1352_tree=null;
		CommonTree COMMENT_SYM1354_tree=null;
		CommonTree EQ_SYM1355_tree=null;
		CommonTree TEXT_STRING1356_tree=null;
		CommonTree DATA_SYM1357_tree=null;
		CommonTree DIRECTORY_SYM1358_tree=null;
		CommonTree EQ_SYM1359_tree=null;
		CommonTree TEXT_STRING1360_tree=null;
		CommonTree INDEX_SYM1361_tree=null;
		CommonTree DIRECTORY_SYM1362_tree=null;
		CommonTree EQ_SYM1363_tree=null;
		CommonTree TEXT_STRING1364_tree=null;
		CommonTree MAX_ROWS1365_tree=null;
		CommonTree EQ_SYM1366_tree=null;
		CommonTree INTEGER_NUM1367_tree=null;
		CommonTree MIN_ROWS1368_tree=null;
		CommonTree EQ_SYM1369_tree=null;
		CommonTree INTEGER_NUM1370_tree=null;
		CommonTree LPAREN1371_tree=null;
		CommonTree COMMA1373_tree=null;
		CommonTree RPAREN1375_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2154:21: ( PARTITION_SYM partition_name ( VALUES ( ( LESS_SYM THAN_SYM ( ( LPAREN expression_list RPAREN ) | MAXVALUE_SYM ) ) | ( IN_SYM LPAREN expression_list RPAREN ) ) )? ( ( STORAGE_SYM )? ENGINE_SYM ( EQ_SYM )? engine_name )? ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING )? ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM )? ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM )? ( LPAREN subpartition_definition ( COMMA subpartition_definition )* RPAREN )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2155:3: PARTITION_SYM partition_name ( VALUES ( ( LESS_SYM THAN_SYM ( ( LPAREN expression_list RPAREN ) | MAXVALUE_SYM ) ) | ( IN_SYM LPAREN expression_list RPAREN ) ) )? ( ( STORAGE_SYM )? ENGINE_SYM ( EQ_SYM )? engine_name )? ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING )? ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM )? ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM )? ( LPAREN subpartition_definition ( COMMA subpartition_definition )* RPAREN )?
			{
			root_0 = (CommonTree)adaptor.nil();


			PARTITION_SYM1337=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_partition_definition29620); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			PARTITION_SYM1337_tree = (CommonTree)adaptor.create(PARTITION_SYM1337);
			adaptor.addChild(root_0, PARTITION_SYM1337_tree);
			}

			pushFollow(FOLLOW_partition_name_in_partition_definition29622);
			partition_name1338=partition_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_name1338.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2157:3: ( VALUES ( ( LESS_SYM THAN_SYM ( ( LPAREN expression_list RPAREN ) | MAXVALUE_SYM ) ) | ( IN_SYM LPAREN expression_list RPAREN ) ) )?
			int alt467=2;
			int LA467_0 = input.LA(1);
			if ( (LA467_0==VALUES) ) {
				alt467=1;
			}
			switch (alt467) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2158:5: VALUES ( ( LESS_SYM THAN_SYM ( ( LPAREN expression_list RPAREN ) | MAXVALUE_SYM ) ) | ( IN_SYM LPAREN expression_list RPAREN ) )
					{
					VALUES1339=(Token)match(input,VALUES,FOLLOW_VALUES_in_partition_definition29635); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					VALUES1339_tree = (CommonTree)adaptor.create(VALUES1339);
					adaptor.addChild(root_0, VALUES1339_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2159:5: ( ( LESS_SYM THAN_SYM ( ( LPAREN expression_list RPAREN ) | MAXVALUE_SYM ) ) | ( IN_SYM LPAREN expression_list RPAREN ) )
					int alt466=2;
					int LA466_0 = input.LA(1);
					if ( (LA466_0==LESS_SYM) ) {
						alt466=1;
					}
					else if ( (LA466_0==IN_SYM) ) {
						alt466=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 466, 0, input);
						throw nvae;
					}

					switch (alt466) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2160:7: ( LESS_SYM THAN_SYM ( ( LPAREN expression_list RPAREN ) | MAXVALUE_SYM ) )
							{
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2160:7: ( LESS_SYM THAN_SYM ( ( LPAREN expression_list RPAREN ) | MAXVALUE_SYM ) )
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2160:8: LESS_SYM THAN_SYM ( ( LPAREN expression_list RPAREN ) | MAXVALUE_SYM )
							{
							LESS_SYM1340=(Token)match(input,LESS_SYM,FOLLOW_LESS_SYM_in_partition_definition29651); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LESS_SYM1340_tree = (CommonTree)adaptor.create(LESS_SYM1340);
							adaptor.addChild(root_0, LESS_SYM1340_tree);
							}

							THAN_SYM1341=(Token)match(input,THAN_SYM,FOLLOW_THAN_SYM_in_partition_definition29653); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							THAN_SYM1341_tree = (CommonTree)adaptor.create(THAN_SYM1341);
							adaptor.addChild(root_0, THAN_SYM1341_tree);
							}

							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2160:26: ( ( LPAREN expression_list RPAREN ) | MAXVALUE_SYM )
							int alt465=2;
							int LA465_0 = input.LA(1);
							if ( (LA465_0==LPAREN) ) {
								alt465=1;
							}
							else if ( (LA465_0==MAXVALUE_SYM) ) {
								alt465=2;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae =
									new NoViableAltException("", 465, 0, input);
								throw nvae;
							}

							switch (alt465) {
								case 1 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2160:28: ( LPAREN expression_list RPAREN )
									{
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2160:28: ( LPAREN expression_list RPAREN )
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2160:29: LPAREN expression_list RPAREN
									{
									LPAREN1342=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_definition29658); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									LPAREN1342_tree = (CommonTree)adaptor.create(LPAREN1342);
									adaptor.addChild(root_0, LPAREN1342_tree);
									}

									pushFollow(FOLLOW_expression_list_in_partition_definition29660);
									expression_list1343=expression_list();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list1343.getTree());

									RPAREN1344=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_definition29662); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									RPAREN1344_tree = (CommonTree)adaptor.create(RPAREN1344);
									adaptor.addChild(root_0, RPAREN1344_tree);
									}

									}

									}
									break;
								case 2 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2160:62: MAXVALUE_SYM
									{
									MAXVALUE_SYM1345=(Token)match(input,MAXVALUE_SYM,FOLLOW_MAXVALUE_SYM_in_partition_definition29667); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									MAXVALUE_SYM1345_tree = (CommonTree)adaptor.create(MAXVALUE_SYM1345);
									adaptor.addChild(root_0, MAXVALUE_SYM1345_tree);
									}

									}
									break;

							}

							}

							}
							break;
						case 2 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2162:7: ( IN_SYM LPAREN expression_list RPAREN )
							{
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2162:7: ( IN_SYM LPAREN expression_list RPAREN )
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2162:8: IN_SYM LPAREN expression_list RPAREN
							{
							IN_SYM1346=(Token)match(input,IN_SYM,FOLLOW_IN_SYM_in_partition_definition29688); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							IN_SYM1346_tree = (CommonTree)adaptor.create(IN_SYM1346);
							adaptor.addChild(root_0, IN_SYM1346_tree);
							}

							LPAREN1347=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_definition29690); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN1347_tree = (CommonTree)adaptor.create(LPAREN1347);
							adaptor.addChild(root_0, LPAREN1347_tree);
							}

							pushFollow(FOLLOW_expression_list_in_partition_definition29692);
							expression_list1348=expression_list();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list1348.getTree());

							RPAREN1349=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_definition29694); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN1349_tree = (CommonTree)adaptor.create(RPAREN1349);
							adaptor.addChild(root_0, RPAREN1349_tree);
							}

							}

							}
							break;

					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2166:3: ( ( STORAGE_SYM )? ENGINE_SYM ( EQ_SYM )? engine_name )?
			int alt470=2;
			int LA470_0 = input.LA(1);
			if ( (LA470_0==ENGINE_SYM||LA470_0==STORAGE_SYM) ) {
				alt470=1;
			}
			switch (alt470) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2166:4: ( STORAGE_SYM )? ENGINE_SYM ( EQ_SYM )? engine_name
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2166:4: ( STORAGE_SYM )?
					int alt468=2;
					int LA468_0 = input.LA(1);
					if ( (LA468_0==STORAGE_SYM) ) {
						alt468=1;
					}
					switch (alt468) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2166:5: STORAGE_SYM
							{
							STORAGE_SYM1350=(Token)match(input,STORAGE_SYM,FOLLOW_STORAGE_SYM_in_partition_definition29715); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							STORAGE_SYM1350_tree = (CommonTree)adaptor.create(STORAGE_SYM1350);
							adaptor.addChild(root_0, STORAGE_SYM1350_tree);
							}

							}
							break;

					}

					ENGINE_SYM1351=(Token)match(input,ENGINE_SYM,FOLLOW_ENGINE_SYM_in_partition_definition29719); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ENGINE_SYM1351_tree = (CommonTree)adaptor.create(ENGINE_SYM1351);
					adaptor.addChild(root_0, ENGINE_SYM1351_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2166:30: ( EQ_SYM )?
					int alt469=2;
					int LA469_0 = input.LA(1);
					if ( (LA469_0==EQ_SYM) ) {
						alt469=1;
					}
					switch (alt469) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2166:31: EQ_SYM
							{
							EQ_SYM1352=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_partition_definition29722); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1352_tree = (CommonTree)adaptor.create(EQ_SYM1352);
							adaptor.addChild(root_0, EQ_SYM1352_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_engine_name_in_partition_definition29726);
					engine_name1353=engine_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, engine_name1353.getTree());

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2167:3: ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING )?
			int alt472=2;
			int LA472_0 = input.LA(1);
			if ( (LA472_0==COMMENT_SYM) ) {
				alt472=1;
			}
			switch (alt472) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2167:4: COMMENT_SYM ( EQ_SYM )? TEXT_STRING
					{
					COMMENT_SYM1354=(Token)match(input,COMMENT_SYM,FOLLOW_COMMENT_SYM_in_partition_definition29733); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMENT_SYM1354_tree = (CommonTree)adaptor.create(COMMENT_SYM1354);
					adaptor.addChild(root_0, COMMENT_SYM1354_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2167:16: ( EQ_SYM )?
					int alt471=2;
					int LA471_0 = input.LA(1);
					if ( (LA471_0==EQ_SYM) ) {
						alt471=1;
					}
					switch (alt471) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2167:17: EQ_SYM
							{
							EQ_SYM1355=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_partition_definition29736); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1355_tree = (CommonTree)adaptor.create(EQ_SYM1355);
							adaptor.addChild(root_0, EQ_SYM1355_tree);
							}

							}
							break;

					}

					TEXT_STRING1356=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_partition_definition29740); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING1356_tree = (CommonTree)adaptor.create(TEXT_STRING1356);
					adaptor.addChild(root_0, TEXT_STRING1356_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2168:3: ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )?
			int alt474=2;
			int LA474_0 = input.LA(1);
			if ( (LA474_0==DATA_SYM) ) {
				alt474=1;
			}
			switch (alt474) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2168:4: DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING
					{
					DATA_SYM1357=(Token)match(input,DATA_SYM,FOLLOW_DATA_SYM_in_partition_definition29748); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DATA_SYM1357_tree = (CommonTree)adaptor.create(DATA_SYM1357);
					adaptor.addChild(root_0, DATA_SYM1357_tree);
					}

					DIRECTORY_SYM1358=(Token)match(input,DIRECTORY_SYM,FOLLOW_DIRECTORY_SYM_in_partition_definition29750); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DIRECTORY_SYM1358_tree = (CommonTree)adaptor.create(DIRECTORY_SYM1358);
					adaptor.addChild(root_0, DIRECTORY_SYM1358_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2168:27: ( EQ_SYM )?
					int alt473=2;
					int LA473_0 = input.LA(1);
					if ( (LA473_0==EQ_SYM) ) {
						alt473=1;
					}
					switch (alt473) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2168:28: EQ_SYM
							{
							EQ_SYM1359=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_partition_definition29753); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1359_tree = (CommonTree)adaptor.create(EQ_SYM1359);
							adaptor.addChild(root_0, EQ_SYM1359_tree);
							}

							}
							break;

					}

					TEXT_STRING1360=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_partition_definition29757); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING1360_tree = (CommonTree)adaptor.create(TEXT_STRING1360);
					adaptor.addChild(root_0, TEXT_STRING1360_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2169:3: ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )?
			int alt476=2;
			int LA476_0 = input.LA(1);
			if ( (LA476_0==INDEX_SYM) ) {
				alt476=1;
			}
			switch (alt476) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2169:4: INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING
					{
					INDEX_SYM1361=(Token)match(input,INDEX_SYM,FOLLOW_INDEX_SYM_in_partition_definition29764); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INDEX_SYM1361_tree = (CommonTree)adaptor.create(INDEX_SYM1361);
					adaptor.addChild(root_0, INDEX_SYM1361_tree);
					}

					DIRECTORY_SYM1362=(Token)match(input,DIRECTORY_SYM,FOLLOW_DIRECTORY_SYM_in_partition_definition29766); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DIRECTORY_SYM1362_tree = (CommonTree)adaptor.create(DIRECTORY_SYM1362);
					adaptor.addChild(root_0, DIRECTORY_SYM1362_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2169:28: ( EQ_SYM )?
					int alt475=2;
					int LA475_0 = input.LA(1);
					if ( (LA475_0==EQ_SYM) ) {
						alt475=1;
					}
					switch (alt475) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2169:29: EQ_SYM
							{
							EQ_SYM1363=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_partition_definition29769); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1363_tree = (CommonTree)adaptor.create(EQ_SYM1363);
							adaptor.addChild(root_0, EQ_SYM1363_tree);
							}

							}
							break;

					}

					TEXT_STRING1364=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_partition_definition29773); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING1364_tree = (CommonTree)adaptor.create(TEXT_STRING1364);
					adaptor.addChild(root_0, TEXT_STRING1364_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2170:3: ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM )?
			int alt478=2;
			int LA478_0 = input.LA(1);
			if ( (LA478_0==MAX_ROWS) ) {
				alt478=1;
			}
			switch (alt478) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2170:4: MAX_ROWS ( EQ_SYM )? INTEGER_NUM
					{
					MAX_ROWS1365=(Token)match(input,MAX_ROWS,FOLLOW_MAX_ROWS_in_partition_definition29780); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MAX_ROWS1365_tree = (CommonTree)adaptor.create(MAX_ROWS1365);
					adaptor.addChild(root_0, MAX_ROWS1365_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2170:13: ( EQ_SYM )?
					int alt477=2;
					int LA477_0 = input.LA(1);
					if ( (LA477_0==EQ_SYM) ) {
						alt477=1;
					}
					switch (alt477) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2170:14: EQ_SYM
							{
							EQ_SYM1366=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_partition_definition29783); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1366_tree = (CommonTree)adaptor.create(EQ_SYM1366);
							adaptor.addChild(root_0, EQ_SYM1366_tree);
							}

							}
							break;

					}

					INTEGER_NUM1367=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_partition_definition29787); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM1367_tree = (CommonTree)adaptor.create(INTEGER_NUM1367);
					adaptor.addChild(root_0, INTEGER_NUM1367_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2171:3: ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM )?
			int alt480=2;
			int LA480_0 = input.LA(1);
			if ( (LA480_0==MIN_ROWS) ) {
				alt480=1;
			}
			switch (alt480) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2171:4: MIN_ROWS ( EQ_SYM )? INTEGER_NUM
					{
					MIN_ROWS1368=(Token)match(input,MIN_ROWS,FOLLOW_MIN_ROWS_in_partition_definition29794); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MIN_ROWS1368_tree = (CommonTree)adaptor.create(MIN_ROWS1368);
					adaptor.addChild(root_0, MIN_ROWS1368_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2171:13: ( EQ_SYM )?
					int alt479=2;
					int LA479_0 = input.LA(1);
					if ( (LA479_0==EQ_SYM) ) {
						alt479=1;
					}
					switch (alt479) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2171:14: EQ_SYM
							{
							EQ_SYM1369=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_partition_definition29797); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1369_tree = (CommonTree)adaptor.create(EQ_SYM1369);
							adaptor.addChild(root_0, EQ_SYM1369_tree);
							}

							}
							break;

					}

					INTEGER_NUM1370=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_partition_definition29801); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM1370_tree = (CommonTree)adaptor.create(INTEGER_NUM1370);
					adaptor.addChild(root_0, INTEGER_NUM1370_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2172:3: ( LPAREN subpartition_definition ( COMMA subpartition_definition )* RPAREN )?
			int alt482=2;
			int LA482_0 = input.LA(1);
			if ( (LA482_0==LPAREN) ) {
				alt482=1;
			}
			switch (alt482) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2172:4: LPAREN subpartition_definition ( COMMA subpartition_definition )* RPAREN
					{
					LPAREN1371=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_definition29808); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1371_tree = (CommonTree)adaptor.create(LPAREN1371);
					adaptor.addChild(root_0, LPAREN1371_tree);
					}

					pushFollow(FOLLOW_subpartition_definition_in_partition_definition29810);
					subpartition_definition1372=subpartition_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, subpartition_definition1372.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2172:35: ( COMMA subpartition_definition )*
					loop481:
					while (true) {
						int alt481=2;
						int LA481_0 = input.LA(1);
						if ( (LA481_0==COMMA) ) {
							alt481=1;
						}

						switch (alt481) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2172:36: COMMA subpartition_definition
							{
							COMMA1373=(Token)match(input,COMMA,FOLLOW_COMMA_in_partition_definition29813); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA1373_tree = (CommonTree)adaptor.create(COMMA1373);
							adaptor.addChild(root_0, COMMA1373_tree);
							}

							pushFollow(FOLLOW_subpartition_definition_in_partition_definition29816);
							subpartition_definition1374=subpartition_definition();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, subpartition_definition1374.getTree());

							}
							break;

						default :
							break loop481;
						}
					}

					RPAREN1375=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_definition29820); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1375_tree = (CommonTree)adaptor.create(RPAREN1375);
					adaptor.addChild(root_0, RPAREN1375_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "partition_definition"


	public static class subpartition_definition_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "subpartition_definition"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2175:1: subpartition_definition : SUBPARTITION_SYM partition_logical_name ( ( STORAGE_SYM )? ENGINE_SYM ( EQ_SYM )? engine_name )? ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING )? ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM )? ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM )? ;
	public final SQLParser.subpartition_definition_return subpartition_definition() throws RecognitionException {
		SQLParser.subpartition_definition_return retval = new SQLParser.subpartition_definition_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token SUBPARTITION_SYM1376=null;
		Token STORAGE_SYM1378=null;
		Token ENGINE_SYM1379=null;
		Token EQ_SYM1380=null;
		Token COMMENT_SYM1382=null;
		Token EQ_SYM1383=null;
		Token TEXT_STRING1384=null;
		Token DATA_SYM1385=null;
		Token DIRECTORY_SYM1386=null;
		Token EQ_SYM1387=null;
		Token TEXT_STRING1388=null;
		Token INDEX_SYM1389=null;
		Token DIRECTORY_SYM1390=null;
		Token EQ_SYM1391=null;
		Token TEXT_STRING1392=null;
		Token MAX_ROWS1393=null;
		Token EQ_SYM1394=null;
		Token INTEGER_NUM1395=null;
		Token MIN_ROWS1396=null;
		Token EQ_SYM1397=null;
		Token INTEGER_NUM1398=null;
		ParserRuleReturnScope partition_logical_name1377 =null;
		ParserRuleReturnScope engine_name1381 =null;

		CommonTree SUBPARTITION_SYM1376_tree=null;
		CommonTree STORAGE_SYM1378_tree=null;
		CommonTree ENGINE_SYM1379_tree=null;
		CommonTree EQ_SYM1380_tree=null;
		CommonTree COMMENT_SYM1382_tree=null;
		CommonTree EQ_SYM1383_tree=null;
		CommonTree TEXT_STRING1384_tree=null;
		CommonTree DATA_SYM1385_tree=null;
		CommonTree DIRECTORY_SYM1386_tree=null;
		CommonTree EQ_SYM1387_tree=null;
		CommonTree TEXT_STRING1388_tree=null;
		CommonTree INDEX_SYM1389_tree=null;
		CommonTree DIRECTORY_SYM1390_tree=null;
		CommonTree EQ_SYM1391_tree=null;
		CommonTree TEXT_STRING1392_tree=null;
		CommonTree MAX_ROWS1393_tree=null;
		CommonTree EQ_SYM1394_tree=null;
		CommonTree INTEGER_NUM1395_tree=null;
		CommonTree MIN_ROWS1396_tree=null;
		CommonTree EQ_SYM1397_tree=null;
		CommonTree INTEGER_NUM1398_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2175:24: ( SUBPARTITION_SYM partition_logical_name ( ( STORAGE_SYM )? ENGINE_SYM ( EQ_SYM )? engine_name )? ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING )? ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM )? ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2176:3: SUBPARTITION_SYM partition_logical_name ( ( STORAGE_SYM )? ENGINE_SYM ( EQ_SYM )? engine_name )? ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING )? ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM )? ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM )?
			{
			root_0 = (CommonTree)adaptor.nil();


			SUBPARTITION_SYM1376=(Token)match(input,SUBPARTITION_SYM,FOLLOW_SUBPARTITION_SYM_in_subpartition_definition29832); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			SUBPARTITION_SYM1376_tree = (CommonTree)adaptor.create(SUBPARTITION_SYM1376);
			adaptor.addChild(root_0, SUBPARTITION_SYM1376_tree);
			}

			pushFollow(FOLLOW_partition_logical_name_in_subpartition_definition29834);
			partition_logical_name1377=partition_logical_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_logical_name1377.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2177:3: ( ( STORAGE_SYM )? ENGINE_SYM ( EQ_SYM )? engine_name )?
			int alt485=2;
			int LA485_0 = input.LA(1);
			if ( (LA485_0==ENGINE_SYM||LA485_0==STORAGE_SYM) ) {
				alt485=1;
			}
			switch (alt485) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2177:4: ( STORAGE_SYM )? ENGINE_SYM ( EQ_SYM )? engine_name
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2177:4: ( STORAGE_SYM )?
					int alt483=2;
					int LA483_0 = input.LA(1);
					if ( (LA483_0==STORAGE_SYM) ) {
						alt483=1;
					}
					switch (alt483) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2177:5: STORAGE_SYM
							{
							STORAGE_SYM1378=(Token)match(input,STORAGE_SYM,FOLLOW_STORAGE_SYM_in_subpartition_definition29840); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							STORAGE_SYM1378_tree = (CommonTree)adaptor.create(STORAGE_SYM1378);
							adaptor.addChild(root_0, STORAGE_SYM1378_tree);
							}

							}
							break;

					}

					ENGINE_SYM1379=(Token)match(input,ENGINE_SYM,FOLLOW_ENGINE_SYM_in_subpartition_definition29844); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ENGINE_SYM1379_tree = (CommonTree)adaptor.create(ENGINE_SYM1379);
					adaptor.addChild(root_0, ENGINE_SYM1379_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2177:30: ( EQ_SYM )?
					int alt484=2;
					int LA484_0 = input.LA(1);
					if ( (LA484_0==EQ_SYM) ) {
						alt484=1;
					}
					switch (alt484) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2177:31: EQ_SYM
							{
							EQ_SYM1380=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_subpartition_definition29847); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1380_tree = (CommonTree)adaptor.create(EQ_SYM1380);
							adaptor.addChild(root_0, EQ_SYM1380_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_engine_name_in_subpartition_definition29851);
					engine_name1381=engine_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, engine_name1381.getTree());

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2178:3: ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING )?
			int alt487=2;
			int LA487_0 = input.LA(1);
			if ( (LA487_0==COMMENT_SYM) ) {
				alt487=1;
			}
			switch (alt487) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2178:4: COMMENT_SYM ( EQ_SYM )? TEXT_STRING
					{
					COMMENT_SYM1382=(Token)match(input,COMMENT_SYM,FOLLOW_COMMENT_SYM_in_subpartition_definition29858); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMENT_SYM1382_tree = (CommonTree)adaptor.create(COMMENT_SYM1382);
					adaptor.addChild(root_0, COMMENT_SYM1382_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2178:16: ( EQ_SYM )?
					int alt486=2;
					int LA486_0 = input.LA(1);
					if ( (LA486_0==EQ_SYM) ) {
						alt486=1;
					}
					switch (alt486) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2178:17: EQ_SYM
							{
							EQ_SYM1383=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_subpartition_definition29861); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1383_tree = (CommonTree)adaptor.create(EQ_SYM1383);
							adaptor.addChild(root_0, EQ_SYM1383_tree);
							}

							}
							break;

					}

					TEXT_STRING1384=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_subpartition_definition29865); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING1384_tree = (CommonTree)adaptor.create(TEXT_STRING1384);
					adaptor.addChild(root_0, TEXT_STRING1384_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2179:3: ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )?
			int alt489=2;
			int LA489_0 = input.LA(1);
			if ( (LA489_0==DATA_SYM) ) {
				alt489=1;
			}
			switch (alt489) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2179:4: DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING
					{
					DATA_SYM1385=(Token)match(input,DATA_SYM,FOLLOW_DATA_SYM_in_subpartition_definition29873); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DATA_SYM1385_tree = (CommonTree)adaptor.create(DATA_SYM1385);
					adaptor.addChild(root_0, DATA_SYM1385_tree);
					}

					DIRECTORY_SYM1386=(Token)match(input,DIRECTORY_SYM,FOLLOW_DIRECTORY_SYM_in_subpartition_definition29875); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DIRECTORY_SYM1386_tree = (CommonTree)adaptor.create(DIRECTORY_SYM1386);
					adaptor.addChild(root_0, DIRECTORY_SYM1386_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2179:27: ( EQ_SYM )?
					int alt488=2;
					int LA488_0 = input.LA(1);
					if ( (LA488_0==EQ_SYM) ) {
						alt488=1;
					}
					switch (alt488) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2179:28: EQ_SYM
							{
							EQ_SYM1387=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_subpartition_definition29878); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1387_tree = (CommonTree)adaptor.create(EQ_SYM1387);
							adaptor.addChild(root_0, EQ_SYM1387_tree);
							}

							}
							break;

					}

					TEXT_STRING1388=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_subpartition_definition29882); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING1388_tree = (CommonTree)adaptor.create(TEXT_STRING1388);
					adaptor.addChild(root_0, TEXT_STRING1388_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2180:3: ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )?
			int alt491=2;
			int LA491_0 = input.LA(1);
			if ( (LA491_0==INDEX_SYM) ) {
				alt491=1;
			}
			switch (alt491) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2180:4: INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING
					{
					INDEX_SYM1389=(Token)match(input,INDEX_SYM,FOLLOW_INDEX_SYM_in_subpartition_definition29889); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INDEX_SYM1389_tree = (CommonTree)adaptor.create(INDEX_SYM1389);
					adaptor.addChild(root_0, INDEX_SYM1389_tree);
					}

					DIRECTORY_SYM1390=(Token)match(input,DIRECTORY_SYM,FOLLOW_DIRECTORY_SYM_in_subpartition_definition29891); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DIRECTORY_SYM1390_tree = (CommonTree)adaptor.create(DIRECTORY_SYM1390);
					adaptor.addChild(root_0, DIRECTORY_SYM1390_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2180:28: ( EQ_SYM )?
					int alt490=2;
					int LA490_0 = input.LA(1);
					if ( (LA490_0==EQ_SYM) ) {
						alt490=1;
					}
					switch (alt490) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2180:29: EQ_SYM
							{
							EQ_SYM1391=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_subpartition_definition29894); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1391_tree = (CommonTree)adaptor.create(EQ_SYM1391);
							adaptor.addChild(root_0, EQ_SYM1391_tree);
							}

							}
							break;

					}

					TEXT_STRING1392=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_subpartition_definition29898); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING1392_tree = (CommonTree)adaptor.create(TEXT_STRING1392);
					adaptor.addChild(root_0, TEXT_STRING1392_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2181:3: ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM )?
			int alt493=2;
			int LA493_0 = input.LA(1);
			if ( (LA493_0==MAX_ROWS) ) {
				alt493=1;
			}
			switch (alt493) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2181:4: MAX_ROWS ( EQ_SYM )? INTEGER_NUM
					{
					MAX_ROWS1393=(Token)match(input,MAX_ROWS,FOLLOW_MAX_ROWS_in_subpartition_definition29905); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MAX_ROWS1393_tree = (CommonTree)adaptor.create(MAX_ROWS1393);
					adaptor.addChild(root_0, MAX_ROWS1393_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2181:13: ( EQ_SYM )?
					int alt492=2;
					int LA492_0 = input.LA(1);
					if ( (LA492_0==EQ_SYM) ) {
						alt492=1;
					}
					switch (alt492) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2181:14: EQ_SYM
							{
							EQ_SYM1394=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_subpartition_definition29908); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1394_tree = (CommonTree)adaptor.create(EQ_SYM1394);
							adaptor.addChild(root_0, EQ_SYM1394_tree);
							}

							}
							break;

					}

					INTEGER_NUM1395=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_subpartition_definition29912); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM1395_tree = (CommonTree)adaptor.create(INTEGER_NUM1395);
					adaptor.addChild(root_0, INTEGER_NUM1395_tree);
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2182:3: ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM )?
			int alt495=2;
			int LA495_0 = input.LA(1);
			if ( (LA495_0==MIN_ROWS) ) {
				alt495=1;
			}
			switch (alt495) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2182:4: MIN_ROWS ( EQ_SYM )? INTEGER_NUM
					{
					MIN_ROWS1396=(Token)match(input,MIN_ROWS,FOLLOW_MIN_ROWS_in_subpartition_definition29919); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MIN_ROWS1396_tree = (CommonTree)adaptor.create(MIN_ROWS1396);
					adaptor.addChild(root_0, MIN_ROWS1396_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2182:13: ( EQ_SYM )?
					int alt494=2;
					int LA494_0 = input.LA(1);
					if ( (LA494_0==EQ_SYM) ) {
						alt494=1;
					}
					switch (alt494) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2182:14: EQ_SYM
							{
							EQ_SYM1397=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_subpartition_definition29922); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1397_tree = (CommonTree)adaptor.create(EQ_SYM1397);
							adaptor.addChild(root_0, EQ_SYM1397_tree);
							}

							}
							break;

					}

					INTEGER_NUM1398=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_subpartition_definition29926); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM1398_tree = (CommonTree)adaptor.create(INTEGER_NUM1398);
					adaptor.addChild(root_0, INTEGER_NUM1398_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subpartition_definition"


	public static class length_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "length"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2185:1: length : INTEGER_NUM ;
	public final SQLParser.length_return length() throws RecognitionException {
		SQLParser.length_return retval = new SQLParser.length_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token INTEGER_NUM1399=null;

		CommonTree INTEGER_NUM1399_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2185:9: ( INTEGER_NUM )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2185:11: INTEGER_NUM
			{
			root_0 = (CommonTree)adaptor.nil();


			INTEGER_NUM1399=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_length29938); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			INTEGER_NUM1399_tree = (CommonTree)adaptor.create(INTEGER_NUM1399);
			adaptor.addChild(root_0, INTEGER_NUM1399_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "length"


	public static class alter_table_statement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alter_table_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2189:1: alter_table_statement : ALTER ( IGNORE_SYM )? TABLE table_name ( alter_table_specification ( COMMA alter_table_specification )* )? ( partition_options )? ;
	public final SQLParser.alter_table_statement_return alter_table_statement() throws RecognitionException {
		SQLParser.alter_table_statement_return retval = new SQLParser.alter_table_statement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token ALTER1400=null;
		Token IGNORE_SYM1401=null;
		Token TABLE1402=null;
		Token COMMA1405=null;
		ParserRuleReturnScope table_name1403 =null;
		ParserRuleReturnScope alter_table_specification1404 =null;
		ParserRuleReturnScope alter_table_specification1406 =null;
		ParserRuleReturnScope partition_options1407 =null;

		CommonTree ALTER1400_tree=null;
		CommonTree IGNORE_SYM1401_tree=null;
		CommonTree TABLE1402_tree=null;
		CommonTree COMMA1405_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2189:22: ( ALTER ( IGNORE_SYM )? TABLE table_name ( alter_table_specification ( COMMA alter_table_specification )* )? ( partition_options )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2190:3: ALTER ( IGNORE_SYM )? TABLE table_name ( alter_table_specification ( COMMA alter_table_specification )* )? ( partition_options )?
			{
			root_0 = (CommonTree)adaptor.nil();


			ALTER1400=(Token)match(input,ALTER,FOLLOW_ALTER_in_alter_table_statement29949); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			ALTER1400_tree = (CommonTree)adaptor.create(ALTER1400);
			adaptor.addChild(root_0, ALTER1400_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2190:9: ( IGNORE_SYM )?
			int alt496=2;
			int LA496_0 = input.LA(1);
			if ( (LA496_0==IGNORE_SYM) ) {
				alt496=1;
			}
			switch (alt496) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2190:10: IGNORE_SYM
					{
					IGNORE_SYM1401=(Token)match(input,IGNORE_SYM,FOLLOW_IGNORE_SYM_in_alter_table_statement29952); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IGNORE_SYM1401_tree = (CommonTree)adaptor.create(IGNORE_SYM1401);
					adaptor.addChild(root_0, IGNORE_SYM1401_tree);
					}

					}
					break;

			}

			TABLE1402=(Token)match(input,TABLE,FOLLOW_TABLE_in_alter_table_statement29956); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			TABLE1402_tree = (CommonTree)adaptor.create(TABLE1402);
			adaptor.addChild(root_0, TABLE1402_tree);
			}

			pushFollow(FOLLOW_table_name_in_alter_table_statement29958);
			table_name1403=table_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1403.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2191:3: ( alter_table_specification ( COMMA alter_table_specification )* )?
			int alt498=2;
			int LA498_0 = input.LA(1);
			if ( (LA498_0==ADD_SYM||LA498_0==ALGORITHM_SYM||(LA498_0 >= ALTER && LA498_0 <= ANALYZE_SYM)||LA498_0==AUTO_INCREMENT||LA498_0==AVG_ROW_LENGTH||LA498_0==CHANGE||LA498_0==CHARACTER_SYM||(LA498_0 >= CHECKSUM_SYM && LA498_0 <= CHECK_SYM)||LA498_0==COALESCE||LA498_0==COLLATE_SYM||LA498_0==COMMENT_SYM||LA498_0==CONNECTION_SYM||LA498_0==CONVERT_SYM||LA498_0==DATA_SYM||LA498_0==DEFAULT||LA498_0==DELAY_KEY_WRITE_SYM||(LA498_0 >= DISABLE_SYM && LA498_0 <= DISCARD)||LA498_0==DROP||LA498_0==ENABLE_SYM||LA498_0==ENGINE_SYM||LA498_0==EXCHANGE_SYM||LA498_0==FORCE_SYM||LA498_0==IMPORT||LA498_0==INDEX_SYM||LA498_0==INSERT_METHOD||LA498_0==KEY_BLOCK_SIZE||LA498_0==LOCK||LA498_0==MAX_ROWS||LA498_0==MIN_ROWS||LA498_0==MODIFY_SYM||LA498_0==OPTIMIZE||LA498_0==ORDER_SYM||LA498_0==PACK_KEYS_SYM||LA498_0==PASSWORD||LA498_0==REBUILD_SYM||(LA498_0 >= REMOVE_SYM && LA498_0 <= REPAIR)||LA498_0==ROW_FORMAT_SYM||(LA498_0 >= STATS_AUTO_RECALC && LA498_0 <= STATS_PERSISTENT)||LA498_0==TRUNCATE||LA498_0==UNION_SYM) ) {
				alt498=1;
			}
			switch (alt498) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2191:5: alter_table_specification ( COMMA alter_table_specification )*
					{
					pushFollow(FOLLOW_alter_table_specification_in_alter_table_statement29964);
					alter_table_specification1404=alter_table_specification();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_table_specification1404.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2191:31: ( COMMA alter_table_specification )*
					loop497:
					while (true) {
						int alt497=2;
						int LA497_0 = input.LA(1);
						if ( (LA497_0==COMMA) ) {
							switch ( input.LA(2) ) {
							case ALTER:
								{
								int LA497_3 = input.LA(3);
								if ( (LA497_3==COLUMN_SYM||LA497_3==ID) ) {
									alt497=1;
								}

								}
								break;
							case DROP:
								{
								int LA497_4 = input.LA(3);
								if ( (LA497_4==INDEX_SYM) ) {
									int LA497_8 = input.LA(4);
									if ( (LA497_8==ID) ) {
										int LA497_9 = input.LA(5);
										if ( (LA497_9==EOF||LA497_9==COMMA||LA497_9==PARTITION_SYM||LA497_9==SEMI) ) {
											alt497=1;
										}

									}

								}
								else if ( (LA497_4==COLUMN_SYM||LA497_4==FOREIGN||LA497_4==ID||LA497_4==KEY_SYM||LA497_4==PARTITION_SYM||LA497_4==PRIMARY_SYM) ) {
									alt497=1;
								}

								}
								break;
							case RENAME:
								{
								int LA497_5 = input.LA(3);
								if ( (LA497_5==AS_SYM||LA497_5==ID||LA497_5==TO_SYM) ) {
									alt497=1;
								}

								}
								break;
							case TRUNCATE:
								{
								int LA497_6 = input.LA(3);
								if ( (LA497_6==PARTITION_SYM) ) {
									alt497=1;
								}

								}
								break;
							case ADD_SYM:
							case ALGORITHM_SYM:
							case ANALYZE_SYM:
							case AUTO_INCREMENT:
							case AVG_ROW_LENGTH:
							case CHANGE:
							case CHARACTER_SYM:
							case CHECKSUM_SYM:
							case CHECK_SYM:
							case COALESCE:
							case COLLATE_SYM:
							case COMMENT_SYM:
							case CONNECTION_SYM:
							case CONVERT_SYM:
							case DATA_SYM:
							case DEFAULT:
							case DELAY_KEY_WRITE_SYM:
							case DISABLE_SYM:
							case DISCARD:
							case ENABLE_SYM:
							case ENGINE_SYM:
							case EXCHANGE_SYM:
							case FORCE_SYM:
							case IMPORT:
							case INDEX_SYM:
							case INSERT_METHOD:
							case KEY_BLOCK_SIZE:
							case LOCK:
							case MAX_ROWS:
							case MIN_ROWS:
							case MODIFY_SYM:
							case OPTIMIZE:
							case ORDER_SYM:
							case PACK_KEYS_SYM:
							case PASSWORD:
							case REBUILD_SYM:
							case REMOVE_SYM:
							case REORGANIZE_SYM:
							case REPAIR:
							case ROW_FORMAT_SYM:
							case STATS_AUTO_RECALC:
							case STATS_PERSISTENT:
							case UNION_SYM:
								{
								alt497=1;
								}
								break;
							}
						}

						switch (alt497) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2191:32: COMMA alter_table_specification
							{
							COMMA1405=(Token)match(input,COMMA,FOLLOW_COMMA_in_alter_table_statement29967); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA1405_tree = (CommonTree)adaptor.create(COMMA1405);
							adaptor.addChild(root_0, COMMA1405_tree);
							}

							pushFollow(FOLLOW_alter_table_specification_in_alter_table_statement29969);
							alter_table_specification1406=alter_table_specification();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_table_specification1406.getTree());

							}
							break;

						default :
							break loop497;
						}
					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2192:3: ( partition_options )?
			int alt499=2;
			int LA499_0 = input.LA(1);
			if ( (LA499_0==PARTITION_SYM) ) {
				alt499=1;
			}
			switch (alt499) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2192:5: partition_options
					{
					pushFollow(FOLLOW_partition_options_in_alter_table_statement29980);
					partition_options1407=partition_options();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_options1407.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_table_statement"


	public static class alter_table_specification_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alter_table_specification"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2194:1: alter_table_specification : ( table_options | ( ADD_SYM ( COLUMN_SYM )? column_name column_definition ( ( FIRST_SYM | AFTER_SYM ) column_name )? ) | ( ADD_SYM ( COLUMN_SYM )? LPAREN column_definitions RPAREN ) | ( ADD_SYM ( INDEX_SYM | KEY_SYM ) ( index_name )? ( index_type )? LPAREN index_column_names RPAREN ( index_option )* ) | ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? PRIMARY_SYM KEY_SYM ( index_type )? LPAREN index_column_names RPAREN ( index_option )* ) | ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? UNIQUE_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* ) | ( ADD_SYM FULLTEXT_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_names RPAREN ( index_option )* ) | ( ADD_SYM SPATIAL_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_names RPAREN ( index_option )* ) | ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? FOREIGN KEY_SYM ( index_name )? LPAREN index_column_names RPAREN reference_definition ) | ( ALGORITHM_SYM ( EQ_SYM )? ( DEFAULT | INPLACE_SYM | COPY_SYM ) ) | ( ALTER ( COLUMN_SYM )? column_name ( ( SET_SYM DEFAULT literal_value ) | ( DROP DEFAULT ) ) ) | ( CHANGE ( COLUMN_SYM )? column_name column_name column_definition ( FIRST_SYM | AFTER_SYM column_name )? ) | ( LOCK ( EQ_SYM )? ( DEFAULT | NONE_SYM | SHARED_SYM | EXCLUSIVE_SYM ) ) | ( MODIFY_SYM ( COLUMN_SYM )? column_name column_definition ( FIRST_SYM | AFTER_SYM column_name )? ) | ( DROP ( COLUMN_SYM )? column_name ) | ( DROP PRIMARY_SYM KEY_SYM ) | ( DROP ( INDEX_SYM | KEY_SYM ) index_name ) | ( DROP FOREIGN KEY_SYM foreign_key_symbol_name ) | ( DISABLE_SYM KEYS ) | ( ENABLE_SYM KEYS ) | ( RENAME ( TO_SYM | AS_SYM )? table_name ) | ( ORDER_SYM BY_SYM column_name ( COMMA column_name )* ) | ( CONVERT_SYM TO_SYM CHARACTER_SYM SET_SYM charset_name ( COLLATE_SYM collation_name )? ) | ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ( COLLATE_SYM ( EQ_SYM )? collation_name )? ) | ( DISCARD TABLESPACE ) | ( IMPORT TABLESPACE ) | ( FORCE_SYM ) | ( ADD_SYM PARTITION_SYM LPAREN partition_definition RPAREN ) | ( DROP PARTITION_SYM partition_names ) | ( TRUNCATE PARTITION_SYM ( partition_names | ALL ) ) | ( COALESCE PARTITION_SYM INTEGER_NUM ) | ( REORGANIZE_SYM PARTITION_SYM partition_names INTO LPAREN partition_definition ( COMMA partition_definition )* RPAREN ) | ( EXCHANGE_SYM PARTITION_SYM partition_name WITH TABLE table_name ) | ( ANALYZE_SYM PARTITION_SYM ( partition_names | ALL ) ) | ( CHECK_SYM PARTITION_SYM ( partition_names | ALL ) ) | ( OPTIMIZE PARTITION_SYM ( partition_names | ALL ) ) | ( REBUILD_SYM PARTITION_SYM ( partition_names | ALL ) ) | ( REPAIR PARTITION_SYM ( partition_names | ALL ) ) | ( REMOVE_SYM PARTITIONING_SYM ) );
	public final SQLParser.alter_table_specification_return alter_table_specification() throws RecognitionException {
		SQLParser.alter_table_specification_return retval = new SQLParser.alter_table_specification_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token ADD_SYM1409=null;
		Token COLUMN_SYM1410=null;
		Token set1413=null;
		Token ADD_SYM1415=null;
		Token COLUMN_SYM1416=null;
		Token LPAREN1417=null;
		Token RPAREN1419=null;
		Token ADD_SYM1420=null;
		Token set1421=null;
		Token LPAREN1424=null;
		Token RPAREN1426=null;
		Token ADD_SYM1428=null;
		Token CONSTRAINT1429=null;
		Token PRIMARY_SYM1431=null;
		Token KEY_SYM1432=null;
		Token LPAREN1434=null;
		Token RPAREN1436=null;
		Token ADD_SYM1438=null;
		Token CONSTRAINT1439=null;
		Token UNIQUE_SYM1441=null;
		Token set1442=null;
		Token LPAREN1445=null;
		Token COMMA1447=null;
		Token RPAREN1449=null;
		Token ADD_SYM1451=null;
		Token FULLTEXT_SYM1452=null;
		Token set1453=null;
		Token LPAREN1455=null;
		Token RPAREN1457=null;
		Token ADD_SYM1459=null;
		Token SPATIAL_SYM1460=null;
		Token set1461=null;
		Token LPAREN1463=null;
		Token RPAREN1465=null;
		Token ADD_SYM1467=null;
		Token CONSTRAINT1468=null;
		Token FOREIGN1470=null;
		Token KEY_SYM1471=null;
		Token LPAREN1473=null;
		Token RPAREN1475=null;
		Token ALGORITHM_SYM1477=null;
		Token EQ_SYM1478=null;
		Token set1479=null;
		Token ALTER1480=null;
		Token COLUMN_SYM1481=null;
		Token SET_SYM1483=null;
		Token DEFAULT1484=null;
		Token DROP1486=null;
		Token DEFAULT1487=null;
		Token CHANGE1488=null;
		Token COLUMN_SYM1489=null;
		Token FIRST_SYM1493=null;
		Token AFTER_SYM1494=null;
		Token LOCK1496=null;
		Token EQ_SYM1497=null;
		Token set1498=null;
		Token MODIFY_SYM1499=null;
		Token COLUMN_SYM1500=null;
		Token FIRST_SYM1503=null;
		Token AFTER_SYM1504=null;
		Token DROP1506=null;
		Token COLUMN_SYM1507=null;
		Token DROP1509=null;
		Token PRIMARY_SYM1510=null;
		Token KEY_SYM1511=null;
		Token DROP1512=null;
		Token set1513=null;
		Token DROP1515=null;
		Token FOREIGN1516=null;
		Token KEY_SYM1517=null;
		Token DISABLE_SYM1519=null;
		Token KEYS1520=null;
		Token ENABLE_SYM1521=null;
		Token KEYS1522=null;
		Token RENAME1523=null;
		Token set1524=null;
		Token ORDER_SYM1526=null;
		Token BY_SYM1527=null;
		Token COMMA1529=null;
		Token CONVERT_SYM1531=null;
		Token TO_SYM1532=null;
		Token CHARACTER_SYM1533=null;
		Token SET_SYM1534=null;
		Token COLLATE_SYM1536=null;
		Token DEFAULT1538=null;
		Token CHARACTER_SYM1539=null;
		Token SET_SYM1540=null;
		Token EQ_SYM1541=null;
		Token COLLATE_SYM1543=null;
		Token EQ_SYM1544=null;
		Token DISCARD1546=null;
		Token TABLESPACE1547=null;
		Token IMPORT1548=null;
		Token TABLESPACE1549=null;
		Token FORCE_SYM1550=null;
		Token ADD_SYM1551=null;
		Token PARTITION_SYM1552=null;
		Token LPAREN1553=null;
		Token RPAREN1555=null;
		Token DROP1556=null;
		Token PARTITION_SYM1557=null;
		Token TRUNCATE1559=null;
		Token PARTITION_SYM1560=null;
		Token ALL1562=null;
		Token COALESCE1563=null;
		Token PARTITION_SYM1564=null;
		Token INTEGER_NUM1565=null;
		Token REORGANIZE_SYM1566=null;
		Token PARTITION_SYM1567=null;
		Token INTO1569=null;
		Token LPAREN1570=null;
		Token COMMA1572=null;
		Token RPAREN1574=null;
		Token EXCHANGE_SYM1575=null;
		Token PARTITION_SYM1576=null;
		Token WITH1578=null;
		Token TABLE1579=null;
		Token ANALYZE_SYM1581=null;
		Token PARTITION_SYM1582=null;
		Token ALL1584=null;
		Token CHECK_SYM1585=null;
		Token PARTITION_SYM1586=null;
		Token ALL1588=null;
		Token OPTIMIZE1589=null;
		Token PARTITION_SYM1590=null;
		Token ALL1592=null;
		Token REBUILD_SYM1593=null;
		Token PARTITION_SYM1594=null;
		Token ALL1596=null;
		Token REPAIR1597=null;
		Token PARTITION_SYM1598=null;
		Token ALL1600=null;
		Token REMOVE_SYM1601=null;
		Token PARTITIONING_SYM1602=null;
		ParserRuleReturnScope table_options1408 =null;
		ParserRuleReturnScope column_name1411 =null;
		ParserRuleReturnScope column_definition1412 =null;
		ParserRuleReturnScope column_name1414 =null;
		ParserRuleReturnScope column_definitions1418 =null;
		ParserRuleReturnScope index_name1422 =null;
		ParserRuleReturnScope index_type1423 =null;
		ParserRuleReturnScope index_column_names1425 =null;
		ParserRuleReturnScope index_option1427 =null;
		ParserRuleReturnScope constraint_symbol_name1430 =null;
		ParserRuleReturnScope index_type1433 =null;
		ParserRuleReturnScope index_column_names1435 =null;
		ParserRuleReturnScope index_option1437 =null;
		ParserRuleReturnScope constraint_symbol_name1440 =null;
		ParserRuleReturnScope index_name1443 =null;
		ParserRuleReturnScope index_type1444 =null;
		ParserRuleReturnScope index_column_name1446 =null;
		ParserRuleReturnScope index_column_name1448 =null;
		ParserRuleReturnScope index_option1450 =null;
		ParserRuleReturnScope index_name1454 =null;
		ParserRuleReturnScope index_column_names1456 =null;
		ParserRuleReturnScope index_option1458 =null;
		ParserRuleReturnScope index_name1462 =null;
		ParserRuleReturnScope index_column_names1464 =null;
		ParserRuleReturnScope index_option1466 =null;
		ParserRuleReturnScope constraint_symbol_name1469 =null;
		ParserRuleReturnScope index_name1472 =null;
		ParserRuleReturnScope index_column_names1474 =null;
		ParserRuleReturnScope reference_definition1476 =null;
		ParserRuleReturnScope column_name1482 =null;
		ParserRuleReturnScope literal_value1485 =null;
		ParserRuleReturnScope column_name1490 =null;
		ParserRuleReturnScope column_name1491 =null;
		ParserRuleReturnScope column_definition1492 =null;
		ParserRuleReturnScope column_name1495 =null;
		ParserRuleReturnScope column_name1501 =null;
		ParserRuleReturnScope column_definition1502 =null;
		ParserRuleReturnScope column_name1505 =null;
		ParserRuleReturnScope column_name1508 =null;
		ParserRuleReturnScope index_name1514 =null;
		ParserRuleReturnScope foreign_key_symbol_name1518 =null;
		ParserRuleReturnScope table_name1525 =null;
		ParserRuleReturnScope column_name1528 =null;
		ParserRuleReturnScope column_name1530 =null;
		ParserRuleReturnScope charset_name1535 =null;
		ParserRuleReturnScope collation_name1537 =null;
		ParserRuleReturnScope charset_name1542 =null;
		ParserRuleReturnScope collation_name1545 =null;
		ParserRuleReturnScope partition_definition1554 =null;
		ParserRuleReturnScope partition_names1558 =null;
		ParserRuleReturnScope partition_names1561 =null;
		ParserRuleReturnScope partition_names1568 =null;
		ParserRuleReturnScope partition_definition1571 =null;
		ParserRuleReturnScope partition_definition1573 =null;
		ParserRuleReturnScope partition_name1577 =null;
		ParserRuleReturnScope table_name1580 =null;
		ParserRuleReturnScope partition_names1583 =null;
		ParserRuleReturnScope partition_names1587 =null;
		ParserRuleReturnScope partition_names1591 =null;
		ParserRuleReturnScope partition_names1595 =null;
		ParserRuleReturnScope partition_names1599 =null;

		CommonTree ADD_SYM1409_tree=null;
		CommonTree COLUMN_SYM1410_tree=null;
		CommonTree set1413_tree=null;
		CommonTree ADD_SYM1415_tree=null;
		CommonTree COLUMN_SYM1416_tree=null;
		CommonTree LPAREN1417_tree=null;
		CommonTree RPAREN1419_tree=null;
		CommonTree ADD_SYM1420_tree=null;
		CommonTree set1421_tree=null;
		CommonTree LPAREN1424_tree=null;
		CommonTree RPAREN1426_tree=null;
		CommonTree ADD_SYM1428_tree=null;
		CommonTree CONSTRAINT1429_tree=null;
		CommonTree PRIMARY_SYM1431_tree=null;
		CommonTree KEY_SYM1432_tree=null;
		CommonTree LPAREN1434_tree=null;
		CommonTree RPAREN1436_tree=null;
		CommonTree ADD_SYM1438_tree=null;
		CommonTree CONSTRAINT1439_tree=null;
		CommonTree UNIQUE_SYM1441_tree=null;
		CommonTree set1442_tree=null;
		CommonTree LPAREN1445_tree=null;
		CommonTree COMMA1447_tree=null;
		CommonTree RPAREN1449_tree=null;
		CommonTree ADD_SYM1451_tree=null;
		CommonTree FULLTEXT_SYM1452_tree=null;
		CommonTree set1453_tree=null;
		CommonTree LPAREN1455_tree=null;
		CommonTree RPAREN1457_tree=null;
		CommonTree ADD_SYM1459_tree=null;
		CommonTree SPATIAL_SYM1460_tree=null;
		CommonTree set1461_tree=null;
		CommonTree LPAREN1463_tree=null;
		CommonTree RPAREN1465_tree=null;
		CommonTree ADD_SYM1467_tree=null;
		CommonTree CONSTRAINT1468_tree=null;
		CommonTree FOREIGN1470_tree=null;
		CommonTree KEY_SYM1471_tree=null;
		CommonTree LPAREN1473_tree=null;
		CommonTree RPAREN1475_tree=null;
		CommonTree ALGORITHM_SYM1477_tree=null;
		CommonTree EQ_SYM1478_tree=null;
		CommonTree set1479_tree=null;
		CommonTree ALTER1480_tree=null;
		CommonTree COLUMN_SYM1481_tree=null;
		CommonTree SET_SYM1483_tree=null;
		CommonTree DEFAULT1484_tree=null;
		CommonTree DROP1486_tree=null;
		CommonTree DEFAULT1487_tree=null;
		CommonTree CHANGE1488_tree=null;
		CommonTree COLUMN_SYM1489_tree=null;
		CommonTree FIRST_SYM1493_tree=null;
		CommonTree AFTER_SYM1494_tree=null;
		CommonTree LOCK1496_tree=null;
		CommonTree EQ_SYM1497_tree=null;
		CommonTree set1498_tree=null;
		CommonTree MODIFY_SYM1499_tree=null;
		CommonTree COLUMN_SYM1500_tree=null;
		CommonTree FIRST_SYM1503_tree=null;
		CommonTree AFTER_SYM1504_tree=null;
		CommonTree DROP1506_tree=null;
		CommonTree COLUMN_SYM1507_tree=null;
		CommonTree DROP1509_tree=null;
		CommonTree PRIMARY_SYM1510_tree=null;
		CommonTree KEY_SYM1511_tree=null;
		CommonTree DROP1512_tree=null;
		CommonTree set1513_tree=null;
		CommonTree DROP1515_tree=null;
		CommonTree FOREIGN1516_tree=null;
		CommonTree KEY_SYM1517_tree=null;
		CommonTree DISABLE_SYM1519_tree=null;
		CommonTree KEYS1520_tree=null;
		CommonTree ENABLE_SYM1521_tree=null;
		CommonTree KEYS1522_tree=null;
		CommonTree RENAME1523_tree=null;
		CommonTree set1524_tree=null;
		CommonTree ORDER_SYM1526_tree=null;
		CommonTree BY_SYM1527_tree=null;
		CommonTree COMMA1529_tree=null;
		CommonTree CONVERT_SYM1531_tree=null;
		CommonTree TO_SYM1532_tree=null;
		CommonTree CHARACTER_SYM1533_tree=null;
		CommonTree SET_SYM1534_tree=null;
		CommonTree COLLATE_SYM1536_tree=null;
		CommonTree DEFAULT1538_tree=null;
		CommonTree CHARACTER_SYM1539_tree=null;
		CommonTree SET_SYM1540_tree=null;
		CommonTree EQ_SYM1541_tree=null;
		CommonTree COLLATE_SYM1543_tree=null;
		CommonTree EQ_SYM1544_tree=null;
		CommonTree DISCARD1546_tree=null;
		CommonTree TABLESPACE1547_tree=null;
		CommonTree IMPORT1548_tree=null;
		CommonTree TABLESPACE1549_tree=null;
		CommonTree FORCE_SYM1550_tree=null;
		CommonTree ADD_SYM1551_tree=null;
		CommonTree PARTITION_SYM1552_tree=null;
		CommonTree LPAREN1553_tree=null;
		CommonTree RPAREN1555_tree=null;
		CommonTree DROP1556_tree=null;
		CommonTree PARTITION_SYM1557_tree=null;
		CommonTree TRUNCATE1559_tree=null;
		CommonTree PARTITION_SYM1560_tree=null;
		CommonTree ALL1562_tree=null;
		CommonTree COALESCE1563_tree=null;
		CommonTree PARTITION_SYM1564_tree=null;
		CommonTree INTEGER_NUM1565_tree=null;
		CommonTree REORGANIZE_SYM1566_tree=null;
		CommonTree PARTITION_SYM1567_tree=null;
		CommonTree INTO1569_tree=null;
		CommonTree LPAREN1570_tree=null;
		CommonTree COMMA1572_tree=null;
		CommonTree RPAREN1574_tree=null;
		CommonTree EXCHANGE_SYM1575_tree=null;
		CommonTree PARTITION_SYM1576_tree=null;
		CommonTree WITH1578_tree=null;
		CommonTree TABLE1579_tree=null;
		CommonTree ANALYZE_SYM1581_tree=null;
		CommonTree PARTITION_SYM1582_tree=null;
		CommonTree ALL1584_tree=null;
		CommonTree CHECK_SYM1585_tree=null;
		CommonTree PARTITION_SYM1586_tree=null;
		CommonTree ALL1588_tree=null;
		CommonTree OPTIMIZE1589_tree=null;
		CommonTree PARTITION_SYM1590_tree=null;
		CommonTree ALL1592_tree=null;
		CommonTree REBUILD_SYM1593_tree=null;
		CommonTree PARTITION_SYM1594_tree=null;
		CommonTree ALL1596_tree=null;
		CommonTree REPAIR1597_tree=null;
		CommonTree PARTITION_SYM1598_tree=null;
		CommonTree ALL1600_tree=null;
		CommonTree REMOVE_SYM1601_tree=null;
		CommonTree PARTITIONING_SYM1602_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2194:26: ( table_options | ( ADD_SYM ( COLUMN_SYM )? column_name column_definition ( ( FIRST_SYM | AFTER_SYM ) column_name )? ) | ( ADD_SYM ( COLUMN_SYM )? LPAREN column_definitions RPAREN ) | ( ADD_SYM ( INDEX_SYM | KEY_SYM ) ( index_name )? ( index_type )? LPAREN index_column_names RPAREN ( index_option )* ) | ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? PRIMARY_SYM KEY_SYM ( index_type )? LPAREN index_column_names RPAREN ( index_option )* ) | ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? UNIQUE_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* ) | ( ADD_SYM FULLTEXT_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_names RPAREN ( index_option )* ) | ( ADD_SYM SPATIAL_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_names RPAREN ( index_option )* ) | ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? FOREIGN KEY_SYM ( index_name )? LPAREN index_column_names RPAREN reference_definition ) | ( ALGORITHM_SYM ( EQ_SYM )? ( DEFAULT | INPLACE_SYM | COPY_SYM ) ) | ( ALTER ( COLUMN_SYM )? column_name ( ( SET_SYM DEFAULT literal_value ) | ( DROP DEFAULT ) ) ) | ( CHANGE ( COLUMN_SYM )? column_name column_name column_definition ( FIRST_SYM | AFTER_SYM column_name )? ) | ( LOCK ( EQ_SYM )? ( DEFAULT | NONE_SYM | SHARED_SYM | EXCLUSIVE_SYM ) ) | ( MODIFY_SYM ( COLUMN_SYM )? column_name column_definition ( FIRST_SYM | AFTER_SYM column_name )? ) | ( DROP ( COLUMN_SYM )? column_name ) | ( DROP PRIMARY_SYM KEY_SYM ) | ( DROP ( INDEX_SYM | KEY_SYM ) index_name ) | ( DROP FOREIGN KEY_SYM foreign_key_symbol_name ) | ( DISABLE_SYM KEYS ) | ( ENABLE_SYM KEYS ) | ( RENAME ( TO_SYM | AS_SYM )? table_name ) | ( ORDER_SYM BY_SYM column_name ( COMMA column_name )* ) | ( CONVERT_SYM TO_SYM CHARACTER_SYM SET_SYM charset_name ( COLLATE_SYM collation_name )? ) | ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ( COLLATE_SYM ( EQ_SYM )? collation_name )? ) | ( DISCARD TABLESPACE ) | ( IMPORT TABLESPACE ) | ( FORCE_SYM ) | ( ADD_SYM PARTITION_SYM LPAREN partition_definition RPAREN ) | ( DROP PARTITION_SYM partition_names ) | ( TRUNCATE PARTITION_SYM ( partition_names | ALL ) ) | ( COALESCE PARTITION_SYM INTEGER_NUM ) | ( REORGANIZE_SYM PARTITION_SYM partition_names INTO LPAREN partition_definition ( COMMA partition_definition )* RPAREN ) | ( EXCHANGE_SYM PARTITION_SYM partition_name WITH TABLE table_name ) | ( ANALYZE_SYM PARTITION_SYM ( partition_names | ALL ) ) | ( CHECK_SYM PARTITION_SYM ( partition_names | ALL ) ) | ( OPTIMIZE PARTITION_SYM ( partition_names | ALL ) ) | ( REBUILD_SYM PARTITION_SYM ( partition_names | ALL ) ) | ( REPAIR PARTITION_SYM ( partition_names | ALL ) ) | ( REMOVE_SYM PARTITIONING_SYM ) )
			int alt549=39;
			switch ( input.LA(1) ) {
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case CHECKSUM_SYM:
			case COLLATE_SYM:
			case COMMENT_SYM:
			case CONNECTION_SYM:
			case DATA_SYM:
			case DELAY_KEY_WRITE_SYM:
			case ENGINE_SYM:
			case INDEX_SYM:
			case INSERT_METHOD:
			case KEY_BLOCK_SIZE:
			case MAX_ROWS:
			case MIN_ROWS:
			case PACK_KEYS_SYM:
			case PASSWORD:
			case ROW_FORMAT_SYM:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case UNION_SYM:
				{
				alt549=1;
				}
				break;
			case DEFAULT:
				{
				int LA549_2 = input.LA(2);
				if ( (LA549_2==CHARACTER_SYM) ) {
					int LA549_3 = input.LA(3);
					if ( (LA549_3==SET_SYM) ) {
						int LA549_29 = input.LA(4);
						if ( (LA549_29==EQ_SYM) ) {
							int LA549_46 = input.LA(5);
							if ( (LA549_46==ARMSCII8||LA549_46==ASCII_SYM||LA549_46==BIG5||LA549_46==BINARY||(LA549_46 >= CP1250 && LA549_46 <= CP932)||LA549_46==DEC8||(LA549_46 >= EUCJPMS && LA549_46 <= EUCKR)||(LA549_46 >= GB2312 && LA549_46 <= GBK)||LA549_46==GEOSTD8||LA549_46==GREEK||LA549_46==HEBREW||LA549_46==HP8||LA549_46==KEYBCS2||(LA549_46 >= KOI8R && LA549_46 <= KOI8U)||LA549_46==LATIN1||(LA549_46 >= LATIN2 && LA549_46 <= LATIN7)||(LA549_46 >= MACCE && LA549_46 <= MACROMAN)||LA549_46==SJIS||LA549_46==SWE7||LA549_46==TIS620||(LA549_46 >= UCS2 && LA549_46 <= UJIS)||LA549_46==UTF8) ) {
								int LA549_47 = input.LA(6);
								if ( (synpred963_SQL()) ) {
									alt549=1;
								}
								else if ( (synpred1042_SQL()) ) {
									alt549=24;
								}

								else {
									if (state.backtracking>0) {state.failed=true; return retval;}
									int nvaeMark = input.mark();
									try {
										for (int nvaeConsume = 0; nvaeConsume < 6 - 1; nvaeConsume++) {
											input.consume();
										}
										NoViableAltException nvae =
											new NoViableAltException("", 549, 47, input);
										throw nvae;
									} finally {
										input.rewind(nvaeMark);
									}
								}

							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 549, 46, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}

						}
						else if ( (LA549_29==ARMSCII8||LA549_29==ASCII_SYM||LA549_29==BIG5||LA549_29==BINARY||(LA549_29 >= CP1250 && LA549_29 <= CP932)||LA549_29==DEC8||(LA549_29 >= EUCJPMS && LA549_29 <= EUCKR)||(LA549_29 >= GB2312 && LA549_29 <= GBK)||LA549_29==GEOSTD8||LA549_29==GREEK||LA549_29==HEBREW||LA549_29==HP8||LA549_29==KEYBCS2||(LA549_29 >= KOI8R && LA549_29 <= KOI8U)||LA549_29==LATIN1||(LA549_29 >= LATIN2 && LA549_29 <= LATIN7)||(LA549_29 >= MACCE && LA549_29 <= MACROMAN)||LA549_29==SJIS||LA549_29==SWE7||LA549_29==TIS620||(LA549_29 >= UCS2 && LA549_29 <= UJIS)||LA549_29==UTF8) ) {
							int LA549_47 = input.LA(5);
							if ( (synpred963_SQL()) ) {
								alt549=1;
							}
							else if ( (synpred1042_SQL()) ) {
								alt549=24;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 549, 47, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}

						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 549, 29, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 549, 3, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}
				else if ( (LA549_2==COLLATE_SYM) ) {
					alt549=1;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 549, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CHARACTER_SYM:
				{
				int LA549_3 = input.LA(2);
				if ( (LA549_3==SET_SYM) ) {
					int LA549_29 = input.LA(3);
					if ( (LA549_29==EQ_SYM) ) {
						int LA549_46 = input.LA(4);
						if ( (LA549_46==ARMSCII8||LA549_46==ASCII_SYM||LA549_46==BIG5||LA549_46==BINARY||(LA549_46 >= CP1250 && LA549_46 <= CP932)||LA549_46==DEC8||(LA549_46 >= EUCJPMS && LA549_46 <= EUCKR)||(LA549_46 >= GB2312 && LA549_46 <= GBK)||LA549_46==GEOSTD8||LA549_46==GREEK||LA549_46==HEBREW||LA549_46==HP8||LA549_46==KEYBCS2||(LA549_46 >= KOI8R && LA549_46 <= KOI8U)||LA549_46==LATIN1||(LA549_46 >= LATIN2 && LA549_46 <= LATIN7)||(LA549_46 >= MACCE && LA549_46 <= MACROMAN)||LA549_46==SJIS||LA549_46==SWE7||LA549_46==TIS620||(LA549_46 >= UCS2 && LA549_46 <= UJIS)||LA549_46==UTF8) ) {
							int LA549_47 = input.LA(5);
							if ( (synpred963_SQL()) ) {
								alt549=1;
							}
							else if ( (synpred1042_SQL()) ) {
								alt549=24;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 549, 47, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}

						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 549, 46, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}
					else if ( (LA549_29==ARMSCII8||LA549_29==ASCII_SYM||LA549_29==BIG5||LA549_29==BINARY||(LA549_29 >= CP1250 && LA549_29 <= CP932)||LA549_29==DEC8||(LA549_29 >= EUCJPMS && LA549_29 <= EUCKR)||(LA549_29 >= GB2312 && LA549_29 <= GBK)||LA549_29==GEOSTD8||LA549_29==GREEK||LA549_29==HEBREW||LA549_29==HP8||LA549_29==KEYBCS2||(LA549_29 >= KOI8R && LA549_29 <= KOI8U)||LA549_29==LATIN1||(LA549_29 >= LATIN2 && LA549_29 <= LATIN7)||(LA549_29 >= MACCE && LA549_29 <= MACROMAN)||LA549_29==SJIS||LA549_29==SWE7||LA549_29==TIS620||(LA549_29 >= UCS2 && LA549_29 <= UJIS)||LA549_29==UTF8) ) {
						int LA549_47 = input.LA(4);
						if ( (synpred963_SQL()) ) {
							alt549=1;
						}
						else if ( (synpred1042_SQL()) ) {
							alt549=24;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 549, 47, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 549, 29, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 549, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ADD_SYM:
				{
				switch ( input.LA(2) ) {
				case INDEX_SYM:
				case KEY_SYM:
					{
					alt549=4;
					}
					break;
				case FULLTEXT_SYM:
					{
					alt549=7;
					}
					break;
				case SPATIAL_SYM:
					{
					alt549=8;
					}
					break;
				case PARTITION_SYM:
					{
					alt549=28;
					}
					break;
				case COLUMN_SYM:
					{
					int LA549_34 = input.LA(3);
					if ( (LA549_34==ID) ) {
						alt549=2;
					}
					else if ( (LA549_34==LPAREN) ) {
						alt549=3;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 549, 34, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case ID:
					{
					alt549=2;
					}
					break;
				case LPAREN:
					{
					alt549=3;
					}
					break;
				case CONSTRAINT:
					{
					switch ( input.LA(3) ) {
					case ID:
						{
						switch ( input.LA(4) ) {
						case PRIMARY_SYM:
							{
							alt549=5;
							}
							break;
						case UNIQUE_SYM:
							{
							alt549=6;
							}
							break;
						case FOREIGN:
							{
							alt549=9;
							}
							break;
						default:
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 549, 48, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}
						}
						break;
					case PRIMARY_SYM:
						{
						alt549=5;
						}
						break;
					case UNIQUE_SYM:
						{
						alt549=6;
						}
						break;
					case FOREIGN:
						{
						alt549=9;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 549, 37, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}
					}
					break;
				case PRIMARY_SYM:
					{
					alt549=5;
					}
					break;
				case UNIQUE_SYM:
					{
					alt549=6;
					}
					break;
				case FOREIGN:
					{
					alt549=9;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 549, 4, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case ALGORITHM_SYM:
				{
				alt549=10;
				}
				break;
			case ALTER:
				{
				alt549=11;
				}
				break;
			case CHANGE:
				{
				alt549=12;
				}
				break;
			case LOCK:
				{
				alt549=13;
				}
				break;
			case MODIFY_SYM:
				{
				alt549=14;
				}
				break;
			case DROP:
				{
				switch ( input.LA(2) ) {
				case PRIMARY_SYM:
					{
					alt549=16;
					}
					break;
				case INDEX_SYM:
				case KEY_SYM:
					{
					alt549=17;
					}
					break;
				case FOREIGN:
					{
					alt549=18;
					}
					break;
				case PARTITION_SYM:
					{
					alt549=29;
					}
					break;
				case COLUMN_SYM:
				case ID:
					{
					alt549=15;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 549, 10, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case DISABLE_SYM:
				{
				alt549=19;
				}
				break;
			case ENABLE_SYM:
				{
				alt549=20;
				}
				break;
			case RENAME:
				{
				alt549=21;
				}
				break;
			case ORDER_SYM:
				{
				alt549=22;
				}
				break;
			case CONVERT_SYM:
				{
				alt549=23;
				}
				break;
			case DISCARD:
				{
				alt549=25;
				}
				break;
			case IMPORT:
				{
				alt549=26;
				}
				break;
			case FORCE_SYM:
				{
				alt549=27;
				}
				break;
			case TRUNCATE:
				{
				alt549=30;
				}
				break;
			case COALESCE:
				{
				alt549=31;
				}
				break;
			case REORGANIZE_SYM:
				{
				alt549=32;
				}
				break;
			case EXCHANGE_SYM:
				{
				alt549=33;
				}
				break;
			case ANALYZE_SYM:
				{
				alt549=34;
				}
				break;
			case CHECK_SYM:
				{
				alt549=35;
				}
				break;
			case OPTIMIZE:
				{
				alt549=36;
				}
				break;
			case REBUILD_SYM:
				{
				alt549=37;
				}
				break;
			case REPAIR:
				{
				alt549=38;
				}
				break;
			case REMOVE_SYM:
				{
				alt549=39;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 549, 0, input);
				throw nvae;
			}
			switch (alt549) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2195:5: table_options
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_table_options_in_alter_table_specification29994);
					table_options1408=table_options();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_options1408.getTree());

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2196:5: ( ADD_SYM ( COLUMN_SYM )? column_name column_definition ( ( FIRST_SYM | AFTER_SYM ) column_name )? )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2196:5: ( ADD_SYM ( COLUMN_SYM )? column_name column_definition ( ( FIRST_SYM | AFTER_SYM ) column_name )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2196:7: ADD_SYM ( COLUMN_SYM )? column_name column_definition ( ( FIRST_SYM | AFTER_SYM ) column_name )?
					{
					ADD_SYM1409=(Token)match(input,ADD_SYM,FOLLOW_ADD_SYM_in_alter_table_specification30002); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ADD_SYM1409_tree = (CommonTree)adaptor.create(ADD_SYM1409);
					adaptor.addChild(root_0, ADD_SYM1409_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2196:15: ( COLUMN_SYM )?
					int alt500=2;
					int LA500_0 = input.LA(1);
					if ( (LA500_0==COLUMN_SYM) ) {
						alt500=1;
					}
					switch (alt500) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2196:16: COLUMN_SYM
							{
							COLUMN_SYM1410=(Token)match(input,COLUMN_SYM,FOLLOW_COLUMN_SYM_in_alter_table_specification30005); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLUMN_SYM1410_tree = (CommonTree)adaptor.create(COLUMN_SYM1410);
							adaptor.addChild(root_0, COLUMN_SYM1410_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_column_name_in_alter_table_specification30009);
					column_name1411=column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1411.getTree());

					pushFollow(FOLLOW_column_definition_in_alter_table_specification30011);
					column_definition1412=column_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_definition1412.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2196:59: ( ( FIRST_SYM | AFTER_SYM ) column_name )?
					int alt501=2;
					int LA501_0 = input.LA(1);
					if ( (LA501_0==AFTER_SYM||LA501_0==FIRST_SYM) ) {
						alt501=1;
					}
					switch (alt501) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2196:61: ( FIRST_SYM | AFTER_SYM ) column_name
							{
							set1413=input.LT(1);
							if ( input.LA(1)==AFTER_SYM||input.LA(1)==FIRST_SYM ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set1413));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							pushFollow(FOLLOW_column_name_in_alter_table_specification30021);
							column_name1414=column_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1414.getTree());

							}
							break;

					}

					}

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2197:5: ( ADD_SYM ( COLUMN_SYM )? LPAREN column_definitions RPAREN )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2197:5: ( ADD_SYM ( COLUMN_SYM )? LPAREN column_definitions RPAREN )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2197:7: ADD_SYM ( COLUMN_SYM )? LPAREN column_definitions RPAREN
					{
					ADD_SYM1415=(Token)match(input,ADD_SYM,FOLLOW_ADD_SYM_in_alter_table_specification30034); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ADD_SYM1415_tree = (CommonTree)adaptor.create(ADD_SYM1415);
					adaptor.addChild(root_0, ADD_SYM1415_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2197:15: ( COLUMN_SYM )?
					int alt502=2;
					int LA502_0 = input.LA(1);
					if ( (LA502_0==COLUMN_SYM) ) {
						alt502=1;
					}
					switch (alt502) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2197:16: COLUMN_SYM
							{
							COLUMN_SYM1416=(Token)match(input,COLUMN_SYM,FOLLOW_COLUMN_SYM_in_alter_table_specification30037); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLUMN_SYM1416_tree = (CommonTree)adaptor.create(COLUMN_SYM1416);
							adaptor.addChild(root_0, COLUMN_SYM1416_tree);
							}

							}
							break;

					}

					LPAREN1417=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alter_table_specification30041); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1417_tree = (CommonTree)adaptor.create(LPAREN1417);
					adaptor.addChild(root_0, LPAREN1417_tree);
					}

					pushFollow(FOLLOW_column_definitions_in_alter_table_specification30043);
					column_definitions1418=column_definitions();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_definitions1418.getTree());

					RPAREN1419=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alter_table_specification30045); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1419_tree = (CommonTree)adaptor.create(RPAREN1419);
					adaptor.addChild(root_0, RPAREN1419_tree);
					}

					}

					}
					break;
				case 4 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2198:5: ( ADD_SYM ( INDEX_SYM | KEY_SYM ) ( index_name )? ( index_type )? LPAREN index_column_names RPAREN ( index_option )* )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2198:5: ( ADD_SYM ( INDEX_SYM | KEY_SYM ) ( index_name )? ( index_type )? LPAREN index_column_names RPAREN ( index_option )* )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2198:7: ADD_SYM ( INDEX_SYM | KEY_SYM ) ( index_name )? ( index_type )? LPAREN index_column_names RPAREN ( index_option )*
					{
					ADD_SYM1420=(Token)match(input,ADD_SYM,FOLLOW_ADD_SYM_in_alter_table_specification30055); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ADD_SYM1420_tree = (CommonTree)adaptor.create(ADD_SYM1420);
					adaptor.addChild(root_0, ADD_SYM1420_tree);
					}

					set1421=input.LT(1);
					if ( input.LA(1)==INDEX_SYM||input.LA(1)==KEY_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set1421));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2198:35: ( index_name )?
					int alt503=2;
					int LA503_0 = input.LA(1);
					if ( (LA503_0==ID) ) {
						alt503=1;
					}
					switch (alt503) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2198:36: index_name
							{
							pushFollow(FOLLOW_index_name_in_alter_table_specification30064);
							index_name1422=index_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name1422.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2198:49: ( index_type )?
					int alt504=2;
					int LA504_0 = input.LA(1);
					if ( (LA504_0==USING_SYM) ) {
						alt504=1;
					}
					switch (alt504) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2198:50: index_type
							{
							pushFollow(FOLLOW_index_type_in_alter_table_specification30069);
							index_type1423=index_type();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_type1423.getTree());

							}
							break;

					}

					LPAREN1424=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alter_table_specification30073); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1424_tree = (CommonTree)adaptor.create(LPAREN1424);
					adaptor.addChild(root_0, LPAREN1424_tree);
					}

					pushFollow(FOLLOW_index_column_names_in_alter_table_specification30075);
					index_column_names1425=index_column_names();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_names1425.getTree());

					RPAREN1426=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alter_table_specification30077); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1426_tree = (CommonTree)adaptor.create(RPAREN1426);
					adaptor.addChild(root_0, RPAREN1426_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2198:96: ( index_option )*
					loop505:
					while (true) {
						int alt505=2;
						int LA505_0 = input.LA(1);
						if ( (LA505_0==COMMENT_SYM||LA505_0==KEY_BLOCK_SIZE||LA505_0==USING_SYM||LA505_0==WITH) ) {
							alt505=1;
						}

						switch (alt505) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2198:97: index_option
							{
							pushFollow(FOLLOW_index_option_in_alter_table_specification30080);
							index_option1427=index_option();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_option1427.getTree());

							}
							break;

						default :
							break loop505;
						}
					}

					}

					}
					break;
				case 5 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2199:5: ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? PRIMARY_SYM KEY_SYM ( index_type )? LPAREN index_column_names RPAREN ( index_option )* )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2199:5: ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? PRIMARY_SYM KEY_SYM ( index_type )? LPAREN index_column_names RPAREN ( index_option )* )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2199:7: ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? PRIMARY_SYM KEY_SYM ( index_type )? LPAREN index_column_names RPAREN ( index_option )*
					{
					ADD_SYM1428=(Token)match(input,ADD_SYM,FOLLOW_ADD_SYM_in_alter_table_specification30092); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ADD_SYM1428_tree = (CommonTree)adaptor.create(ADD_SYM1428);
					adaptor.addChild(root_0, ADD_SYM1428_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2199:15: ( CONSTRAINT ( constraint_symbol_name )? )?
					int alt507=2;
					int LA507_0 = input.LA(1);
					if ( (LA507_0==CONSTRAINT) ) {
						alt507=1;
					}
					switch (alt507) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2199:16: CONSTRAINT ( constraint_symbol_name )?
							{
							CONSTRAINT1429=(Token)match(input,CONSTRAINT,FOLLOW_CONSTRAINT_in_alter_table_specification30095); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CONSTRAINT1429_tree = (CommonTree)adaptor.create(CONSTRAINT1429);
							adaptor.addChild(root_0, CONSTRAINT1429_tree);
							}

							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2199:27: ( constraint_symbol_name )?
							int alt506=2;
							int LA506_0 = input.LA(1);
							if ( (LA506_0==ID) ) {
								alt506=1;
							}
							switch (alt506) {
								case 1 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2199:28: constraint_symbol_name
									{
									pushFollow(FOLLOW_constraint_symbol_name_in_alter_table_specification30098);
									constraint_symbol_name1430=constraint_symbol_name();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint_symbol_name1430.getTree());

									}
									break;

							}

							}
							break;

					}

					PRIMARY_SYM1431=(Token)match(input,PRIMARY_SYM,FOLLOW_PRIMARY_SYM_in_alter_table_specification30104); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PRIMARY_SYM1431_tree = (CommonTree)adaptor.create(PRIMARY_SYM1431);
					adaptor.addChild(root_0, PRIMARY_SYM1431_tree);
					}

					KEY_SYM1432=(Token)match(input,KEY_SYM,FOLLOW_KEY_SYM_in_alter_table_specification30106); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KEY_SYM1432_tree = (CommonTree)adaptor.create(KEY_SYM1432);
					adaptor.addChild(root_0, KEY_SYM1432_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2199:75: ( index_type )?
					int alt508=2;
					int LA508_0 = input.LA(1);
					if ( (LA508_0==USING_SYM) ) {
						alt508=1;
					}
					switch (alt508) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2199:76: index_type
							{
							pushFollow(FOLLOW_index_type_in_alter_table_specification30109);
							index_type1433=index_type();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_type1433.getTree());

							}
							break;

					}

					LPAREN1434=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alter_table_specification30113); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1434_tree = (CommonTree)adaptor.create(LPAREN1434);
					adaptor.addChild(root_0, LPAREN1434_tree);
					}

					pushFollow(FOLLOW_index_column_names_in_alter_table_specification30115);
					index_column_names1435=index_column_names();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_names1435.getTree());

					RPAREN1436=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alter_table_specification30117); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1436_tree = (CommonTree)adaptor.create(RPAREN1436);
					adaptor.addChild(root_0, RPAREN1436_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2199:122: ( index_option )*
					loop509:
					while (true) {
						int alt509=2;
						int LA509_0 = input.LA(1);
						if ( (LA509_0==COMMENT_SYM||LA509_0==KEY_BLOCK_SIZE||LA509_0==USING_SYM||LA509_0==WITH) ) {
							alt509=1;
						}

						switch (alt509) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2199:123: index_option
							{
							pushFollow(FOLLOW_index_option_in_alter_table_specification30120);
							index_option1437=index_option();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_option1437.getTree());

							}
							break;

						default :
							break loop509;
						}
					}

					}

					}
					break;
				case 6 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2201:5: ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? UNIQUE_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2201:5: ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? UNIQUE_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2202:5: ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? UNIQUE_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )*
					{
					ADD_SYM1438=(Token)match(input,ADD_SYM,FOLLOW_ADD_SYM_in_alter_table_specification30142); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ADD_SYM1438_tree = (CommonTree)adaptor.create(ADD_SYM1438);
					adaptor.addChild(root_0, ADD_SYM1438_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2202:13: ( CONSTRAINT ( constraint_symbol_name )? )?
					int alt511=2;
					int LA511_0 = input.LA(1);
					if ( (LA511_0==CONSTRAINT) ) {
						alt511=1;
					}
					switch (alt511) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2202:14: CONSTRAINT ( constraint_symbol_name )?
							{
							CONSTRAINT1439=(Token)match(input,CONSTRAINT,FOLLOW_CONSTRAINT_in_alter_table_specification30145); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CONSTRAINT1439_tree = (CommonTree)adaptor.create(CONSTRAINT1439);
							adaptor.addChild(root_0, CONSTRAINT1439_tree);
							}

							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2202:25: ( constraint_symbol_name )?
							int alt510=2;
							int LA510_0 = input.LA(1);
							if ( (LA510_0==ID) ) {
								alt510=1;
							}
							switch (alt510) {
								case 1 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2202:26: constraint_symbol_name
									{
									pushFollow(FOLLOW_constraint_symbol_name_in_alter_table_specification30148);
									constraint_symbol_name1440=constraint_symbol_name();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint_symbol_name1440.getTree());

									}
									break;

							}

							}
							break;

					}

					UNIQUE_SYM1441=(Token)match(input,UNIQUE_SYM,FOLLOW_UNIQUE_SYM_in_alter_table_specification30154); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					UNIQUE_SYM1441_tree = (CommonTree)adaptor.create(UNIQUE_SYM1441);
					adaptor.addChild(root_0, UNIQUE_SYM1441_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2202:64: ( INDEX_SYM | KEY_SYM )?
					int alt512=2;
					int LA512_0 = input.LA(1);
					if ( (LA512_0==INDEX_SYM||LA512_0==KEY_SYM) ) {
						alt512=1;
					}
					switch (alt512) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
							{
							set1442=input.LT(1);
							if ( input.LA(1)==INDEX_SYM||input.LA(1)==KEY_SYM ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set1442));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2202:85: ( index_name )?
					int alt513=2;
					int LA513_0 = input.LA(1);
					if ( (LA513_0==ID) ) {
						alt513=1;
					}
					switch (alt513) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2202:86: index_name
							{
							pushFollow(FOLLOW_index_name_in_alter_table_specification30164);
							index_name1443=index_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name1443.getTree());

							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2203:5: ( index_type )?
					int alt514=2;
					int LA514_0 = input.LA(1);
					if ( (LA514_0==USING_SYM) ) {
						alt514=1;
					}
					switch (alt514) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2203:6: index_type
							{
							pushFollow(FOLLOW_index_type_in_alter_table_specification30174);
							index_type1444=index_type();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_type1444.getTree());

							}
							break;

					}

					LPAREN1445=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alter_table_specification30178); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1445_tree = (CommonTree)adaptor.create(LPAREN1445);
					adaptor.addChild(root_0, LPAREN1445_tree);
					}

					pushFollow(FOLLOW_index_column_name_in_alter_table_specification30180);
					index_column_name1446=index_column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name1446.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2203:44: ( COMMA index_column_name )*
					loop515:
					while (true) {
						int alt515=2;
						int LA515_0 = input.LA(1);
						if ( (LA515_0==COMMA) ) {
							alt515=1;
						}

						switch (alt515) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2203:45: COMMA index_column_name
							{
							COMMA1447=(Token)match(input,COMMA,FOLLOW_COMMA_in_alter_table_specification30183); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA1447_tree = (CommonTree)adaptor.create(COMMA1447);
							adaptor.addChild(root_0, COMMA1447_tree);
							}

							pushFollow(FOLLOW_index_column_name_in_alter_table_specification30185);
							index_column_name1448=index_column_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name1448.getTree());

							}
							break;

						default :
							break loop515;
						}
					}

					RPAREN1449=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alter_table_specification30189); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1449_tree = (CommonTree)adaptor.create(RPAREN1449);
					adaptor.addChild(root_0, RPAREN1449_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2203:78: ( index_option )*
					loop516:
					while (true) {
						int alt516=2;
						int LA516_0 = input.LA(1);
						if ( (LA516_0==COMMENT_SYM||LA516_0==KEY_BLOCK_SIZE||LA516_0==USING_SYM||LA516_0==WITH) ) {
							alt516=1;
						}

						switch (alt516) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2203:79: index_option
							{
							pushFollow(FOLLOW_index_option_in_alter_table_specification30192);
							index_option1450=index_option();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_option1450.getTree());

							}
							break;

						default :
							break loop516;
						}
					}

					}

					}
					break;
				case 7 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2205:5: ( ADD_SYM FULLTEXT_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_names RPAREN ( index_option )* )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2205:5: ( ADD_SYM FULLTEXT_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_names RPAREN ( index_option )* )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2205:7: ADD_SYM FULLTEXT_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_names RPAREN ( index_option )*
					{
					ADD_SYM1451=(Token)match(input,ADD_SYM,FOLLOW_ADD_SYM_in_alter_table_specification30208); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ADD_SYM1451_tree = (CommonTree)adaptor.create(ADD_SYM1451);
					adaptor.addChild(root_0, ADD_SYM1451_tree);
					}

					FULLTEXT_SYM1452=(Token)match(input,FULLTEXT_SYM,FOLLOW_FULLTEXT_SYM_in_alter_table_specification30210); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					FULLTEXT_SYM1452_tree = (CommonTree)adaptor.create(FULLTEXT_SYM1452);
					adaptor.addChild(root_0, FULLTEXT_SYM1452_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2205:28: ( INDEX_SYM | KEY_SYM )?
					int alt517=2;
					int LA517_0 = input.LA(1);
					if ( (LA517_0==INDEX_SYM||LA517_0==KEY_SYM) ) {
						alt517=1;
					}
					switch (alt517) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
							{
							set1453=input.LT(1);
							if ( input.LA(1)==INDEX_SYM||input.LA(1)==KEY_SYM ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set1453));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2205:49: ( index_name )?
					int alt518=2;
					int LA518_0 = input.LA(1);
					if ( (LA518_0==ID) ) {
						alt518=1;
					}
					switch (alt518) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2205:50: index_name
							{
							pushFollow(FOLLOW_index_name_in_alter_table_specification30220);
							index_name1454=index_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name1454.getTree());

							}
							break;

					}

					LPAREN1455=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alter_table_specification30224); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1455_tree = (CommonTree)adaptor.create(LPAREN1455);
					adaptor.addChild(root_0, LPAREN1455_tree);
					}

					pushFollow(FOLLOW_index_column_names_in_alter_table_specification30226);
					index_column_names1456=index_column_names();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_names1456.getTree());

					RPAREN1457=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alter_table_specification30228); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1457_tree = (CommonTree)adaptor.create(RPAREN1457);
					adaptor.addChild(root_0, RPAREN1457_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2205:96: ( index_option )*
					loop519:
					while (true) {
						int alt519=2;
						int LA519_0 = input.LA(1);
						if ( (LA519_0==COMMENT_SYM||LA519_0==KEY_BLOCK_SIZE||LA519_0==USING_SYM||LA519_0==WITH) ) {
							alt519=1;
						}

						switch (alt519) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2205:97: index_option
							{
							pushFollow(FOLLOW_index_option_in_alter_table_specification30231);
							index_option1458=index_option();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_option1458.getTree());

							}
							break;

						default :
							break loop519;
						}
					}

					}

					}
					break;
				case 8 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2206:5: ( ADD_SYM SPATIAL_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_names RPAREN ( index_option )* )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2206:5: ( ADD_SYM SPATIAL_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_names RPAREN ( index_option )* )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2206:7: ADD_SYM SPATIAL_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_names RPAREN ( index_option )*
					{
					ADD_SYM1459=(Token)match(input,ADD_SYM,FOLLOW_ADD_SYM_in_alter_table_specification30243); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ADD_SYM1459_tree = (CommonTree)adaptor.create(ADD_SYM1459);
					adaptor.addChild(root_0, ADD_SYM1459_tree);
					}

					SPATIAL_SYM1460=(Token)match(input,SPATIAL_SYM,FOLLOW_SPATIAL_SYM_in_alter_table_specification30245); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SPATIAL_SYM1460_tree = (CommonTree)adaptor.create(SPATIAL_SYM1460);
					adaptor.addChild(root_0, SPATIAL_SYM1460_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2206:27: ( INDEX_SYM | KEY_SYM )?
					int alt520=2;
					int LA520_0 = input.LA(1);
					if ( (LA520_0==INDEX_SYM||LA520_0==KEY_SYM) ) {
						alt520=1;
					}
					switch (alt520) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
							{
							set1461=input.LT(1);
							if ( input.LA(1)==INDEX_SYM||input.LA(1)==KEY_SYM ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set1461));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2206:48: ( index_name )?
					int alt521=2;
					int LA521_0 = input.LA(1);
					if ( (LA521_0==ID) ) {
						alt521=1;
					}
					switch (alt521) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2206:49: index_name
							{
							pushFollow(FOLLOW_index_name_in_alter_table_specification30255);
							index_name1462=index_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name1462.getTree());

							}
							break;

					}

					LPAREN1463=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alter_table_specification30259); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1463_tree = (CommonTree)adaptor.create(LPAREN1463);
					adaptor.addChild(root_0, LPAREN1463_tree);
					}

					pushFollow(FOLLOW_index_column_names_in_alter_table_specification30261);
					index_column_names1464=index_column_names();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_names1464.getTree());

					RPAREN1465=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alter_table_specification30263); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1465_tree = (CommonTree)adaptor.create(RPAREN1465);
					adaptor.addChild(root_0, RPAREN1465_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2206:95: ( index_option )*
					loop522:
					while (true) {
						int alt522=2;
						int LA522_0 = input.LA(1);
						if ( (LA522_0==COMMENT_SYM||LA522_0==KEY_BLOCK_SIZE||LA522_0==USING_SYM||LA522_0==WITH) ) {
							alt522=1;
						}

						switch (alt522) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2206:96: index_option
							{
							pushFollow(FOLLOW_index_option_in_alter_table_specification30266);
							index_option1466=index_option();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_option1466.getTree());

							}
							break;

						default :
							break loop522;
						}
					}

					}

					}
					break;
				case 9 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2207:5: ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? FOREIGN KEY_SYM ( index_name )? LPAREN index_column_names RPAREN reference_definition )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2207:5: ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? FOREIGN KEY_SYM ( index_name )? LPAREN index_column_names RPAREN reference_definition )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2207:7: ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? FOREIGN KEY_SYM ( index_name )? LPAREN index_column_names RPAREN reference_definition
					{
					ADD_SYM1467=(Token)match(input,ADD_SYM,FOLLOW_ADD_SYM_in_alter_table_specification30278); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ADD_SYM1467_tree = (CommonTree)adaptor.create(ADD_SYM1467);
					adaptor.addChild(root_0, ADD_SYM1467_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2207:15: ( CONSTRAINT ( constraint_symbol_name )? )?
					int alt524=2;
					int LA524_0 = input.LA(1);
					if ( (LA524_0==CONSTRAINT) ) {
						alt524=1;
					}
					switch (alt524) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2207:16: CONSTRAINT ( constraint_symbol_name )?
							{
							CONSTRAINT1468=(Token)match(input,CONSTRAINT,FOLLOW_CONSTRAINT_in_alter_table_specification30281); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CONSTRAINT1468_tree = (CommonTree)adaptor.create(CONSTRAINT1468);
							adaptor.addChild(root_0, CONSTRAINT1468_tree);
							}

							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2207:27: ( constraint_symbol_name )?
							int alt523=2;
							int LA523_0 = input.LA(1);
							if ( (LA523_0==ID) ) {
								alt523=1;
							}
							switch (alt523) {
								case 1 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2207:28: constraint_symbol_name
									{
									pushFollow(FOLLOW_constraint_symbol_name_in_alter_table_specification30284);
									constraint_symbol_name1469=constraint_symbol_name();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint_symbol_name1469.getTree());

									}
									break;

							}

							}
							break;

					}

					FOREIGN1470=(Token)match(input,FOREIGN,FOLLOW_FOREIGN_in_alter_table_specification30290); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					FOREIGN1470_tree = (CommonTree)adaptor.create(FOREIGN1470);
					adaptor.addChild(root_0, FOREIGN1470_tree);
					}

					KEY_SYM1471=(Token)match(input,KEY_SYM,FOLLOW_KEY_SYM_in_alter_table_specification30292); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KEY_SYM1471_tree = (CommonTree)adaptor.create(KEY_SYM1471);
					adaptor.addChild(root_0, KEY_SYM1471_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2207:71: ( index_name )?
					int alt525=2;
					int LA525_0 = input.LA(1);
					if ( (LA525_0==ID) ) {
						alt525=1;
					}
					switch (alt525) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2207:72: index_name
							{
							pushFollow(FOLLOW_index_name_in_alter_table_specification30295);
							index_name1472=index_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name1472.getTree());

							}
							break;

					}

					LPAREN1473=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alter_table_specification30299); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1473_tree = (CommonTree)adaptor.create(LPAREN1473);
					adaptor.addChild(root_0, LPAREN1473_tree);
					}

					pushFollow(FOLLOW_index_column_names_in_alter_table_specification30301);
					index_column_names1474=index_column_names();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_names1474.getTree());

					RPAREN1475=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alter_table_specification30303); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1475_tree = (CommonTree)adaptor.create(RPAREN1475);
					adaptor.addChild(root_0, RPAREN1475_tree);
					}

					pushFollow(FOLLOW_reference_definition_in_alter_table_specification30305);
					reference_definition1476=reference_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, reference_definition1476.getTree());

					}

					}
					break;
				case 10 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2208:5: ( ALGORITHM_SYM ( EQ_SYM )? ( DEFAULT | INPLACE_SYM | COPY_SYM ) )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2208:5: ( ALGORITHM_SYM ( EQ_SYM )? ( DEFAULT | INPLACE_SYM | COPY_SYM ) )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2208:7: ALGORITHM_SYM ( EQ_SYM )? ( DEFAULT | INPLACE_SYM | COPY_SYM )
					{
					ALGORITHM_SYM1477=(Token)match(input,ALGORITHM_SYM,FOLLOW_ALGORITHM_SYM_in_alter_table_specification30315); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ALGORITHM_SYM1477_tree = (CommonTree)adaptor.create(ALGORITHM_SYM1477);
					adaptor.addChild(root_0, ALGORITHM_SYM1477_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2208:21: ( EQ_SYM )?
					int alt526=2;
					int LA526_0 = input.LA(1);
					if ( (LA526_0==EQ_SYM) ) {
						alt526=1;
					}
					switch (alt526) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2208:22: EQ_SYM
							{
							EQ_SYM1478=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_alter_table_specification30318); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1478_tree = (CommonTree)adaptor.create(EQ_SYM1478);
							adaptor.addChild(root_0, EQ_SYM1478_tree);
							}

							}
							break;

					}

					set1479=input.LT(1);
					if ( input.LA(1)==COPY_SYM||input.LA(1)==DEFAULT||input.LA(1)==INPLACE_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set1479));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}

					}
					break;
				case 11 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2209:5: ( ALTER ( COLUMN_SYM )? column_name ( ( SET_SYM DEFAULT literal_value ) | ( DROP DEFAULT ) ) )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2209:5: ( ALTER ( COLUMN_SYM )? column_name ( ( SET_SYM DEFAULT literal_value ) | ( DROP DEFAULT ) ) )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2209:7: ALTER ( COLUMN_SYM )? column_name ( ( SET_SYM DEFAULT literal_value ) | ( DROP DEFAULT ) )
					{
					ALTER1480=(Token)match(input,ALTER,FOLLOW_ALTER_in_alter_table_specification30338); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ALTER1480_tree = (CommonTree)adaptor.create(ALTER1480);
					adaptor.addChild(root_0, ALTER1480_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2209:13: ( COLUMN_SYM )?
					int alt527=2;
					int LA527_0 = input.LA(1);
					if ( (LA527_0==COLUMN_SYM) ) {
						alt527=1;
					}
					switch (alt527) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2209:14: COLUMN_SYM
							{
							COLUMN_SYM1481=(Token)match(input,COLUMN_SYM,FOLLOW_COLUMN_SYM_in_alter_table_specification30341); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLUMN_SYM1481_tree = (CommonTree)adaptor.create(COLUMN_SYM1481);
							adaptor.addChild(root_0, COLUMN_SYM1481_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_column_name_in_alter_table_specification30345);
					column_name1482=column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1482.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2209:39: ( ( SET_SYM DEFAULT literal_value ) | ( DROP DEFAULT ) )
					int alt528=2;
					int LA528_0 = input.LA(1);
					if ( (LA528_0==SET_SYM) ) {
						alt528=1;
					}
					else if ( (LA528_0==DROP) ) {
						alt528=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 528, 0, input);
						throw nvae;
					}

					switch (alt528) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2209:40: ( SET_SYM DEFAULT literal_value )
							{
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2209:40: ( SET_SYM DEFAULT literal_value )
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2209:41: SET_SYM DEFAULT literal_value
							{
							SET_SYM1483=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_alter_table_specification30349); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							SET_SYM1483_tree = (CommonTree)adaptor.create(SET_SYM1483);
							adaptor.addChild(root_0, SET_SYM1483_tree);
							}

							DEFAULT1484=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_alter_table_specification30351); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1484_tree = (CommonTree)adaptor.create(DEFAULT1484);
							adaptor.addChild(root_0, DEFAULT1484_tree);
							}

							pushFollow(FOLLOW_literal_value_in_alter_table_specification30353);
							literal_value1485=literal_value();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, literal_value1485.getTree());

							}

							}
							break;
						case 2 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2209:74: ( DROP DEFAULT )
							{
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2209:74: ( DROP DEFAULT )
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2209:75: DROP DEFAULT
							{
							DROP1486=(Token)match(input,DROP,FOLLOW_DROP_in_alter_table_specification30359); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DROP1486_tree = (CommonTree)adaptor.create(DROP1486);
							adaptor.addChild(root_0, DROP1486_tree);
							}

							DEFAULT1487=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_alter_table_specification30361); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1487_tree = (CommonTree)adaptor.create(DEFAULT1487);
							adaptor.addChild(root_0, DEFAULT1487_tree);
							}

							}

							}
							break;

					}

					}

					}
					break;
				case 12 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2210:5: ( CHANGE ( COLUMN_SYM )? column_name column_name column_definition ( FIRST_SYM | AFTER_SYM column_name )? )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2210:5: ( CHANGE ( COLUMN_SYM )? column_name column_name column_definition ( FIRST_SYM | AFTER_SYM column_name )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2210:7: CHANGE ( COLUMN_SYM )? column_name column_name column_definition ( FIRST_SYM | AFTER_SYM column_name )?
					{
					CHANGE1488=(Token)match(input,CHANGE,FOLLOW_CHANGE_in_alter_table_specification30373); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CHANGE1488_tree = (CommonTree)adaptor.create(CHANGE1488);
					adaptor.addChild(root_0, CHANGE1488_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2210:14: ( COLUMN_SYM )?
					int alt529=2;
					int LA529_0 = input.LA(1);
					if ( (LA529_0==COLUMN_SYM) ) {
						alt529=1;
					}
					switch (alt529) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2210:15: COLUMN_SYM
							{
							COLUMN_SYM1489=(Token)match(input,COLUMN_SYM,FOLLOW_COLUMN_SYM_in_alter_table_specification30376); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLUMN_SYM1489_tree = (CommonTree)adaptor.create(COLUMN_SYM1489);
							adaptor.addChild(root_0, COLUMN_SYM1489_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_column_name_in_alter_table_specification30380);
					column_name1490=column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1490.getTree());

					pushFollow(FOLLOW_column_name_in_alter_table_specification30382);
					column_name1491=column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1491.getTree());

					pushFollow(FOLLOW_column_definition_in_alter_table_specification30384);
					column_definition1492=column_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_definition1492.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2210:70: ( FIRST_SYM | AFTER_SYM column_name )?
					int alt530=3;
					int LA530_0 = input.LA(1);
					if ( (LA530_0==FIRST_SYM) ) {
						alt530=1;
					}
					else if ( (LA530_0==AFTER_SYM) ) {
						alt530=2;
					}
					switch (alt530) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2210:71: FIRST_SYM
							{
							FIRST_SYM1493=(Token)match(input,FIRST_SYM,FOLLOW_FIRST_SYM_in_alter_table_specification30387); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							FIRST_SYM1493_tree = (CommonTree)adaptor.create(FIRST_SYM1493);
							adaptor.addChild(root_0, FIRST_SYM1493_tree);
							}

							}
							break;
						case 2 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2210:81: AFTER_SYM column_name
							{
							AFTER_SYM1494=(Token)match(input,AFTER_SYM,FOLLOW_AFTER_SYM_in_alter_table_specification30389); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							AFTER_SYM1494_tree = (CommonTree)adaptor.create(AFTER_SYM1494);
							adaptor.addChild(root_0, AFTER_SYM1494_tree);
							}

							pushFollow(FOLLOW_column_name_in_alter_table_specification30391);
							column_name1495=column_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1495.getTree());

							}
							break;

					}

					}

					}
					break;
				case 13 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2211:5: ( LOCK ( EQ_SYM )? ( DEFAULT | NONE_SYM | SHARED_SYM | EXCLUSIVE_SYM ) )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2211:5: ( LOCK ( EQ_SYM )? ( DEFAULT | NONE_SYM | SHARED_SYM | EXCLUSIVE_SYM ) )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2211:7: LOCK ( EQ_SYM )? ( DEFAULT | NONE_SYM | SHARED_SYM | EXCLUSIVE_SYM )
					{
					LOCK1496=(Token)match(input,LOCK,FOLLOW_LOCK_in_alter_table_specification30403); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LOCK1496_tree = (CommonTree)adaptor.create(LOCK1496);
					adaptor.addChild(root_0, LOCK1496_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2211:12: ( EQ_SYM )?
					int alt531=2;
					int LA531_0 = input.LA(1);
					if ( (LA531_0==EQ_SYM) ) {
						alt531=1;
					}
					switch (alt531) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2211:13: EQ_SYM
							{
							EQ_SYM1497=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_alter_table_specification30406); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1497_tree = (CommonTree)adaptor.create(EQ_SYM1497);
							adaptor.addChild(root_0, EQ_SYM1497_tree);
							}

							}
							break;

					}

					set1498=input.LT(1);
					if ( input.LA(1)==DEFAULT||input.LA(1)==EXCLUSIVE_SYM||input.LA(1)==NONE_SYM||input.LA(1)==SHARED_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set1498));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}

					}
					break;
				case 14 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2212:5: ( MODIFY_SYM ( COLUMN_SYM )? column_name column_definition ( FIRST_SYM | AFTER_SYM column_name )? )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2212:5: ( MODIFY_SYM ( COLUMN_SYM )? column_name column_definition ( FIRST_SYM | AFTER_SYM column_name )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2212:7: MODIFY_SYM ( COLUMN_SYM )? column_name column_definition ( FIRST_SYM | AFTER_SYM column_name )?
					{
					MODIFY_SYM1499=(Token)match(input,MODIFY_SYM,FOLLOW_MODIFY_SYM_in_alter_table_specification30428); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MODIFY_SYM1499_tree = (CommonTree)adaptor.create(MODIFY_SYM1499);
					adaptor.addChild(root_0, MODIFY_SYM1499_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2212:18: ( COLUMN_SYM )?
					int alt532=2;
					int LA532_0 = input.LA(1);
					if ( (LA532_0==COLUMN_SYM) ) {
						alt532=1;
					}
					switch (alt532) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2212:19: COLUMN_SYM
							{
							COLUMN_SYM1500=(Token)match(input,COLUMN_SYM,FOLLOW_COLUMN_SYM_in_alter_table_specification30431); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLUMN_SYM1500_tree = (CommonTree)adaptor.create(COLUMN_SYM1500);
							adaptor.addChild(root_0, COLUMN_SYM1500_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_column_name_in_alter_table_specification30435);
					column_name1501=column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1501.getTree());

					pushFollow(FOLLOW_column_definition_in_alter_table_specification30437);
					column_definition1502=column_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_definition1502.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2212:62: ( FIRST_SYM | AFTER_SYM column_name )?
					int alt533=3;
					int LA533_0 = input.LA(1);
					if ( (LA533_0==FIRST_SYM) ) {
						alt533=1;
					}
					else if ( (LA533_0==AFTER_SYM) ) {
						alt533=2;
					}
					switch (alt533) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2212:63: FIRST_SYM
							{
							FIRST_SYM1503=(Token)match(input,FIRST_SYM,FOLLOW_FIRST_SYM_in_alter_table_specification30440); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							FIRST_SYM1503_tree = (CommonTree)adaptor.create(FIRST_SYM1503);
							adaptor.addChild(root_0, FIRST_SYM1503_tree);
							}

							}
							break;
						case 2 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2212:75: AFTER_SYM column_name
							{
							AFTER_SYM1504=(Token)match(input,AFTER_SYM,FOLLOW_AFTER_SYM_in_alter_table_specification30444); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							AFTER_SYM1504_tree = (CommonTree)adaptor.create(AFTER_SYM1504);
							adaptor.addChild(root_0, AFTER_SYM1504_tree);
							}

							pushFollow(FOLLOW_column_name_in_alter_table_specification30446);
							column_name1505=column_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1505.getTree());

							}
							break;

					}

					}

					}
					break;
				case 15 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2213:5: ( DROP ( COLUMN_SYM )? column_name )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2213:5: ( DROP ( COLUMN_SYM )? column_name )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2213:7: DROP ( COLUMN_SYM )? column_name
					{
					DROP1506=(Token)match(input,DROP,FOLLOW_DROP_in_alter_table_specification30458); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DROP1506_tree = (CommonTree)adaptor.create(DROP1506);
					adaptor.addChild(root_0, DROP1506_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2213:12: ( COLUMN_SYM )?
					int alt534=2;
					int LA534_0 = input.LA(1);
					if ( (LA534_0==COLUMN_SYM) ) {
						alt534=1;
					}
					switch (alt534) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2213:13: COLUMN_SYM
							{
							COLUMN_SYM1507=(Token)match(input,COLUMN_SYM,FOLLOW_COLUMN_SYM_in_alter_table_specification30461); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLUMN_SYM1507_tree = (CommonTree)adaptor.create(COLUMN_SYM1507);
							adaptor.addChild(root_0, COLUMN_SYM1507_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_column_name_in_alter_table_specification30465);
					column_name1508=column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1508.getTree());

					}

					}
					break;
				case 16 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2214:5: ( DROP PRIMARY_SYM KEY_SYM )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2214:5: ( DROP PRIMARY_SYM KEY_SYM )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2214:7: DROP PRIMARY_SYM KEY_SYM
					{
					DROP1509=(Token)match(input,DROP,FOLLOW_DROP_in_alter_table_specification30475); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DROP1509_tree = (CommonTree)adaptor.create(DROP1509);
					adaptor.addChild(root_0, DROP1509_tree);
					}

					PRIMARY_SYM1510=(Token)match(input,PRIMARY_SYM,FOLLOW_PRIMARY_SYM_in_alter_table_specification30477); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PRIMARY_SYM1510_tree = (CommonTree)adaptor.create(PRIMARY_SYM1510);
					adaptor.addChild(root_0, PRIMARY_SYM1510_tree);
					}

					KEY_SYM1511=(Token)match(input,KEY_SYM,FOLLOW_KEY_SYM_in_alter_table_specification30479); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KEY_SYM1511_tree = (CommonTree)adaptor.create(KEY_SYM1511);
					adaptor.addChild(root_0, KEY_SYM1511_tree);
					}

					}

					}
					break;
				case 17 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2215:5: ( DROP ( INDEX_SYM | KEY_SYM ) index_name )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2215:5: ( DROP ( INDEX_SYM | KEY_SYM ) index_name )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2215:7: DROP ( INDEX_SYM | KEY_SYM ) index_name
					{
					DROP1512=(Token)match(input,DROP,FOLLOW_DROP_in_alter_table_specification30489); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DROP1512_tree = (CommonTree)adaptor.create(DROP1512);
					adaptor.addChild(root_0, DROP1512_tree);
					}

					set1513=input.LT(1);
					if ( input.LA(1)==INDEX_SYM||input.LA(1)==KEY_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set1513));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					pushFollow(FOLLOW_index_name_in_alter_table_specification30497);
					index_name1514=index_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name1514.getTree());

					}

					}
					break;
				case 18 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2216:5: ( DROP FOREIGN KEY_SYM foreign_key_symbol_name )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2216:5: ( DROP FOREIGN KEY_SYM foreign_key_symbol_name )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2216:7: DROP FOREIGN KEY_SYM foreign_key_symbol_name
					{
					DROP1515=(Token)match(input,DROP,FOLLOW_DROP_in_alter_table_specification30507); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DROP1515_tree = (CommonTree)adaptor.create(DROP1515);
					adaptor.addChild(root_0, DROP1515_tree);
					}

					FOREIGN1516=(Token)match(input,FOREIGN,FOLLOW_FOREIGN_in_alter_table_specification30509); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					FOREIGN1516_tree = (CommonTree)adaptor.create(FOREIGN1516);
					adaptor.addChild(root_0, FOREIGN1516_tree);
					}

					KEY_SYM1517=(Token)match(input,KEY_SYM,FOLLOW_KEY_SYM_in_alter_table_specification30511); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KEY_SYM1517_tree = (CommonTree)adaptor.create(KEY_SYM1517);
					adaptor.addChild(root_0, KEY_SYM1517_tree);
					}

					pushFollow(FOLLOW_foreign_key_symbol_name_in_alter_table_specification30513);
					foreign_key_symbol_name1518=foreign_key_symbol_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, foreign_key_symbol_name1518.getTree());

					}

					}
					break;
				case 19 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2217:5: ( DISABLE_SYM KEYS )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2217:5: ( DISABLE_SYM KEYS )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2217:7: DISABLE_SYM KEYS
					{
					DISABLE_SYM1519=(Token)match(input,DISABLE_SYM,FOLLOW_DISABLE_SYM_in_alter_table_specification30523); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DISABLE_SYM1519_tree = (CommonTree)adaptor.create(DISABLE_SYM1519);
					adaptor.addChild(root_0, DISABLE_SYM1519_tree);
					}

					KEYS1520=(Token)match(input,KEYS,FOLLOW_KEYS_in_alter_table_specification30525); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KEYS1520_tree = (CommonTree)adaptor.create(KEYS1520);
					adaptor.addChild(root_0, KEYS1520_tree);
					}

					}

					}
					break;
				case 20 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2218:5: ( ENABLE_SYM KEYS )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2218:5: ( ENABLE_SYM KEYS )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2218:7: ENABLE_SYM KEYS
					{
					ENABLE_SYM1521=(Token)match(input,ENABLE_SYM,FOLLOW_ENABLE_SYM_in_alter_table_specification30535); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ENABLE_SYM1521_tree = (CommonTree)adaptor.create(ENABLE_SYM1521);
					adaptor.addChild(root_0, ENABLE_SYM1521_tree);
					}

					KEYS1522=(Token)match(input,KEYS,FOLLOW_KEYS_in_alter_table_specification30537); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KEYS1522_tree = (CommonTree)adaptor.create(KEYS1522);
					adaptor.addChild(root_0, KEYS1522_tree);
					}

					}

					}
					break;
				case 21 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2219:5: ( RENAME ( TO_SYM | AS_SYM )? table_name )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2219:5: ( RENAME ( TO_SYM | AS_SYM )? table_name )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2219:7: RENAME ( TO_SYM | AS_SYM )? table_name
					{
					RENAME1523=(Token)match(input,RENAME,FOLLOW_RENAME_in_alter_table_specification30547); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RENAME1523_tree = (CommonTree)adaptor.create(RENAME1523);
					adaptor.addChild(root_0, RENAME1523_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2219:14: ( TO_SYM | AS_SYM )?
					int alt535=2;
					int LA535_0 = input.LA(1);
					if ( (LA535_0==AS_SYM||LA535_0==TO_SYM) ) {
						alt535=1;
					}
					switch (alt535) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
							{
							set1524=input.LT(1);
							if ( input.LA(1)==AS_SYM||input.LA(1)==TO_SYM ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set1524));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					pushFollow(FOLLOW_table_name_in_alter_table_specification30556);
					table_name1525=table_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1525.getTree());

					}

					}
					break;
				case 22 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2220:5: ( ORDER_SYM BY_SYM column_name ( COMMA column_name )* )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2220:5: ( ORDER_SYM BY_SYM column_name ( COMMA column_name )* )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2220:7: ORDER_SYM BY_SYM column_name ( COMMA column_name )*
					{
					ORDER_SYM1526=(Token)match(input,ORDER_SYM,FOLLOW_ORDER_SYM_in_alter_table_specification30566); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ORDER_SYM1526_tree = (CommonTree)adaptor.create(ORDER_SYM1526);
					adaptor.addChild(root_0, ORDER_SYM1526_tree);
					}

					BY_SYM1527=(Token)match(input,BY_SYM,FOLLOW_BY_SYM_in_alter_table_specification30568); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BY_SYM1527_tree = (CommonTree)adaptor.create(BY_SYM1527);
					adaptor.addChild(root_0, BY_SYM1527_tree);
					}

					pushFollow(FOLLOW_column_name_in_alter_table_specification30570);
					column_name1528=column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1528.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2220:36: ( COMMA column_name )*
					loop536:
					while (true) {
						int alt536=2;
						int LA536_0 = input.LA(1);
						if ( (LA536_0==COMMA) ) {
							int LA536_1 = input.LA(2);
							if ( (LA536_1==ID) ) {
								alt536=1;
							}

						}

						switch (alt536) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2220:37: COMMA column_name
							{
							COMMA1529=(Token)match(input,COMMA,FOLLOW_COMMA_in_alter_table_specification30573); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA1529_tree = (CommonTree)adaptor.create(COMMA1529);
							adaptor.addChild(root_0, COMMA1529_tree);
							}

							pushFollow(FOLLOW_column_name_in_alter_table_specification30575);
							column_name1530=column_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1530.getTree());

							}
							break;

						default :
							break loop536;
						}
					}

					}

					}
					break;
				case 23 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2221:5: ( CONVERT_SYM TO_SYM CHARACTER_SYM SET_SYM charset_name ( COLLATE_SYM collation_name )? )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2221:5: ( CONVERT_SYM TO_SYM CHARACTER_SYM SET_SYM charset_name ( COLLATE_SYM collation_name )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2221:7: CONVERT_SYM TO_SYM CHARACTER_SYM SET_SYM charset_name ( COLLATE_SYM collation_name )?
					{
					CONVERT_SYM1531=(Token)match(input,CONVERT_SYM,FOLLOW_CONVERT_SYM_in_alter_table_specification30587); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CONVERT_SYM1531_tree = (CommonTree)adaptor.create(CONVERT_SYM1531);
					adaptor.addChild(root_0, CONVERT_SYM1531_tree);
					}

					TO_SYM1532=(Token)match(input,TO_SYM,FOLLOW_TO_SYM_in_alter_table_specification30589); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TO_SYM1532_tree = (CommonTree)adaptor.create(TO_SYM1532);
					adaptor.addChild(root_0, TO_SYM1532_tree);
					}

					CHARACTER_SYM1533=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_alter_table_specification30591); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CHARACTER_SYM1533_tree = (CommonTree)adaptor.create(CHARACTER_SYM1533);
					adaptor.addChild(root_0, CHARACTER_SYM1533_tree);
					}

					SET_SYM1534=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_alter_table_specification30593); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SET_SYM1534_tree = (CommonTree)adaptor.create(SET_SYM1534);
					adaptor.addChild(root_0, SET_SYM1534_tree);
					}

					pushFollow(FOLLOW_charset_name_in_alter_table_specification30595);
					charset_name1535=charset_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name1535.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2221:61: ( COLLATE_SYM collation_name )?
					int alt537=2;
					int LA537_0 = input.LA(1);
					if ( (LA537_0==COLLATE_SYM) ) {
						alt537=1;
					}
					switch (alt537) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2221:62: COLLATE_SYM collation_name
							{
							COLLATE_SYM1536=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_alter_table_specification30598); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLLATE_SYM1536_tree = (CommonTree)adaptor.create(COLLATE_SYM1536);
							adaptor.addChild(root_0, COLLATE_SYM1536_tree);
							}

							pushFollow(FOLLOW_collation_name_in_alter_table_specification30600);
							collation_name1537=collation_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name1537.getTree());

							}
							break;

					}

					}

					}
					break;
				case 24 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2222:5: ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ( COLLATE_SYM ( EQ_SYM )? collation_name )? )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2222:5: ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ( COLLATE_SYM ( EQ_SYM )? collation_name )? )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2222:7: ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ( COLLATE_SYM ( EQ_SYM )? collation_name )?
					{
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2222:7: ( DEFAULT )?
					int alt538=2;
					int LA538_0 = input.LA(1);
					if ( (LA538_0==DEFAULT) ) {
						alt538=1;
					}
					switch (alt538) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2222:8: DEFAULT
							{
							DEFAULT1538=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_alter_table_specification30613); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1538_tree = (CommonTree)adaptor.create(DEFAULT1538);
							adaptor.addChild(root_0, DEFAULT1538_tree);
							}

							}
							break;

					}

					CHARACTER_SYM1539=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_alter_table_specification30617); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CHARACTER_SYM1539_tree = (CommonTree)adaptor.create(CHARACTER_SYM1539);
					adaptor.addChild(root_0, CHARACTER_SYM1539_tree);
					}

					SET_SYM1540=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_alter_table_specification30619); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SET_SYM1540_tree = (CommonTree)adaptor.create(SET_SYM1540);
					adaptor.addChild(root_0, SET_SYM1540_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2222:40: ( EQ_SYM )?
					int alt539=2;
					int LA539_0 = input.LA(1);
					if ( (LA539_0==EQ_SYM) ) {
						alt539=1;
					}
					switch (alt539) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2222:41: EQ_SYM
							{
							EQ_SYM1541=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_alter_table_specification30622); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1541_tree = (CommonTree)adaptor.create(EQ_SYM1541);
							adaptor.addChild(root_0, EQ_SYM1541_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_charset_name_in_alter_table_specification30626);
					charset_name1542=charset_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name1542.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2222:63: ( COLLATE_SYM ( EQ_SYM )? collation_name )?
					int alt541=2;
					int LA541_0 = input.LA(1);
					if ( (LA541_0==COLLATE_SYM) ) {
						alt541=1;
					}
					switch (alt541) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2222:64: COLLATE_SYM ( EQ_SYM )? collation_name
							{
							COLLATE_SYM1543=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_alter_table_specification30629); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLLATE_SYM1543_tree = (CommonTree)adaptor.create(COLLATE_SYM1543);
							adaptor.addChild(root_0, COLLATE_SYM1543_tree);
							}

							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2222:76: ( EQ_SYM )?
							int alt540=2;
							int LA540_0 = input.LA(1);
							if ( (LA540_0==EQ_SYM) ) {
								alt540=1;
							}
							switch (alt540) {
								case 1 :
									// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2222:77: EQ_SYM
									{
									EQ_SYM1544=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_alter_table_specification30632); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									EQ_SYM1544_tree = (CommonTree)adaptor.create(EQ_SYM1544);
									adaptor.addChild(root_0, EQ_SYM1544_tree);
									}

									}
									break;

							}

							pushFollow(FOLLOW_collation_name_in_alter_table_specification30636);
							collation_name1545=collation_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name1545.getTree());

							}
							break;

					}

					}

					}
					break;
				case 25 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2223:5: ( DISCARD TABLESPACE )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2223:5: ( DISCARD TABLESPACE )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2223:7: DISCARD TABLESPACE
					{
					DISCARD1546=(Token)match(input,DISCARD,FOLLOW_DISCARD_in_alter_table_specification30648); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DISCARD1546_tree = (CommonTree)adaptor.create(DISCARD1546);
					adaptor.addChild(root_0, DISCARD1546_tree);
					}

					TABLESPACE1547=(Token)match(input,TABLESPACE,FOLLOW_TABLESPACE_in_alter_table_specification30650); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TABLESPACE1547_tree = (CommonTree)adaptor.create(TABLESPACE1547);
					adaptor.addChild(root_0, TABLESPACE1547_tree);
					}

					}

					}
					break;
				case 26 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2224:5: ( IMPORT TABLESPACE )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2224:5: ( IMPORT TABLESPACE )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2224:7: IMPORT TABLESPACE
					{
					IMPORT1548=(Token)match(input,IMPORT,FOLLOW_IMPORT_in_alter_table_specification30660); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IMPORT1548_tree = (CommonTree)adaptor.create(IMPORT1548);
					adaptor.addChild(root_0, IMPORT1548_tree);
					}

					TABLESPACE1549=(Token)match(input,TABLESPACE,FOLLOW_TABLESPACE_in_alter_table_specification30662); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TABLESPACE1549_tree = (CommonTree)adaptor.create(TABLESPACE1549);
					adaptor.addChild(root_0, TABLESPACE1549_tree);
					}

					}

					}
					break;
				case 27 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2225:5: ( FORCE_SYM )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2225:5: ( FORCE_SYM )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2225:7: FORCE_SYM
					{
					FORCE_SYM1550=(Token)match(input,FORCE_SYM,FOLLOW_FORCE_SYM_in_alter_table_specification30672); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					FORCE_SYM1550_tree = (CommonTree)adaptor.create(FORCE_SYM1550);
					adaptor.addChild(root_0, FORCE_SYM1550_tree);
					}

					}

					}
					break;
				case 28 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2226:5: ( ADD_SYM PARTITION_SYM LPAREN partition_definition RPAREN )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2226:5: ( ADD_SYM PARTITION_SYM LPAREN partition_definition RPAREN )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2226:7: ADD_SYM PARTITION_SYM LPAREN partition_definition RPAREN
					{
					ADD_SYM1551=(Token)match(input,ADD_SYM,FOLLOW_ADD_SYM_in_alter_table_specification30682); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ADD_SYM1551_tree = (CommonTree)adaptor.create(ADD_SYM1551);
					adaptor.addChild(root_0, ADD_SYM1551_tree);
					}

					PARTITION_SYM1552=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_alter_table_specification30684); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PARTITION_SYM1552_tree = (CommonTree)adaptor.create(PARTITION_SYM1552);
					adaptor.addChild(root_0, PARTITION_SYM1552_tree);
					}

					LPAREN1553=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alter_table_specification30686); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1553_tree = (CommonTree)adaptor.create(LPAREN1553);
					adaptor.addChild(root_0, LPAREN1553_tree);
					}

					pushFollow(FOLLOW_partition_definition_in_alter_table_specification30688);
					partition_definition1554=partition_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_definition1554.getTree());

					RPAREN1555=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alter_table_specification30690); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1555_tree = (CommonTree)adaptor.create(RPAREN1555);
					adaptor.addChild(root_0, RPAREN1555_tree);
					}

					}

					}
					break;
				case 29 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2227:5: ( DROP PARTITION_SYM partition_names )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2227:5: ( DROP PARTITION_SYM partition_names )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2227:7: DROP PARTITION_SYM partition_names
					{
					DROP1556=(Token)match(input,DROP,FOLLOW_DROP_in_alter_table_specification30700); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DROP1556_tree = (CommonTree)adaptor.create(DROP1556);
					adaptor.addChild(root_0, DROP1556_tree);
					}

					PARTITION_SYM1557=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_alter_table_specification30702); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PARTITION_SYM1557_tree = (CommonTree)adaptor.create(PARTITION_SYM1557);
					adaptor.addChild(root_0, PARTITION_SYM1557_tree);
					}

					pushFollow(FOLLOW_partition_names_in_alter_table_specification30704);
					partition_names1558=partition_names();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_names1558.getTree());

					}

					}
					break;
				case 30 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2228:5: ( TRUNCATE PARTITION_SYM ( partition_names | ALL ) )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2228:5: ( TRUNCATE PARTITION_SYM ( partition_names | ALL ) )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2228:7: TRUNCATE PARTITION_SYM ( partition_names | ALL )
					{
					TRUNCATE1559=(Token)match(input,TRUNCATE,FOLLOW_TRUNCATE_in_alter_table_specification30714); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TRUNCATE1559_tree = (CommonTree)adaptor.create(TRUNCATE1559);
					adaptor.addChild(root_0, TRUNCATE1559_tree);
					}

					PARTITION_SYM1560=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_alter_table_specification30716); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PARTITION_SYM1560_tree = (CommonTree)adaptor.create(PARTITION_SYM1560);
					adaptor.addChild(root_0, PARTITION_SYM1560_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2228:30: ( partition_names | ALL )
					int alt542=2;
					int LA542_0 = input.LA(1);
					if ( (LA542_0==ID) ) {
						alt542=1;
					}
					else if ( (LA542_0==ALL) ) {
						alt542=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 542, 0, input);
						throw nvae;
					}

					switch (alt542) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2228:31: partition_names
							{
							pushFollow(FOLLOW_partition_names_in_alter_table_specification30719);
							partition_names1561=partition_names();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_names1561.getTree());

							}
							break;
						case 2 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2228:49: ALL
							{
							ALL1562=(Token)match(input,ALL,FOLLOW_ALL_in_alter_table_specification30723); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ALL1562_tree = (CommonTree)adaptor.create(ALL1562);
							adaptor.addChild(root_0, ALL1562_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 31 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2229:5: ( COALESCE PARTITION_SYM INTEGER_NUM )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2229:5: ( COALESCE PARTITION_SYM INTEGER_NUM )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2229:7: COALESCE PARTITION_SYM INTEGER_NUM
					{
					COALESCE1563=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_alter_table_specification30734); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COALESCE1563_tree = (CommonTree)adaptor.create(COALESCE1563);
					adaptor.addChild(root_0, COALESCE1563_tree);
					}

					PARTITION_SYM1564=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_alter_table_specification30736); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PARTITION_SYM1564_tree = (CommonTree)adaptor.create(PARTITION_SYM1564);
					adaptor.addChild(root_0, PARTITION_SYM1564_tree);
					}

					INTEGER_NUM1565=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_alter_table_specification30738); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM1565_tree = (CommonTree)adaptor.create(INTEGER_NUM1565);
					adaptor.addChild(root_0, INTEGER_NUM1565_tree);
					}

					}

					}
					break;
				case 32 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2230:5: ( REORGANIZE_SYM PARTITION_SYM partition_names INTO LPAREN partition_definition ( COMMA partition_definition )* RPAREN )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2230:5: ( REORGANIZE_SYM PARTITION_SYM partition_names INTO LPAREN partition_definition ( COMMA partition_definition )* RPAREN )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2230:7: REORGANIZE_SYM PARTITION_SYM partition_names INTO LPAREN partition_definition ( COMMA partition_definition )* RPAREN
					{
					REORGANIZE_SYM1566=(Token)match(input,REORGANIZE_SYM,FOLLOW_REORGANIZE_SYM_in_alter_table_specification30748); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					REORGANIZE_SYM1566_tree = (CommonTree)adaptor.create(REORGANIZE_SYM1566);
					adaptor.addChild(root_0, REORGANIZE_SYM1566_tree);
					}

					PARTITION_SYM1567=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_alter_table_specification30750); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PARTITION_SYM1567_tree = (CommonTree)adaptor.create(PARTITION_SYM1567);
					adaptor.addChild(root_0, PARTITION_SYM1567_tree);
					}

					pushFollow(FOLLOW_partition_names_in_alter_table_specification30752);
					partition_names1568=partition_names();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_names1568.getTree());

					INTO1569=(Token)match(input,INTO,FOLLOW_INTO_in_alter_table_specification30754); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTO1569_tree = (CommonTree)adaptor.create(INTO1569);
					adaptor.addChild(root_0, INTO1569_tree);
					}

					LPAREN1570=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alter_table_specification30756); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1570_tree = (CommonTree)adaptor.create(LPAREN1570);
					adaptor.addChild(root_0, LPAREN1570_tree);
					}

					pushFollow(FOLLOW_partition_definition_in_alter_table_specification30758);
					partition_definition1571=partition_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_definition1571.getTree());

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2230:85: ( COMMA partition_definition )*
					loop543:
					while (true) {
						int alt543=2;
						int LA543_0 = input.LA(1);
						if ( (LA543_0==COMMA) ) {
							alt543=1;
						}

						switch (alt543) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2230:86: COMMA partition_definition
							{
							COMMA1572=(Token)match(input,COMMA,FOLLOW_COMMA_in_alter_table_specification30761); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA1572_tree = (CommonTree)adaptor.create(COMMA1572);
							adaptor.addChild(root_0, COMMA1572_tree);
							}

							pushFollow(FOLLOW_partition_definition_in_alter_table_specification30763);
							partition_definition1573=partition_definition();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_definition1573.getTree());

							}
							break;

						default :
							break loop543;
						}
					}

					RPAREN1574=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alter_table_specification30767); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1574_tree = (CommonTree)adaptor.create(RPAREN1574);
					adaptor.addChild(root_0, RPAREN1574_tree);
					}

					}

					}
					break;
				case 33 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2231:5: ( EXCHANGE_SYM PARTITION_SYM partition_name WITH TABLE table_name )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2231:5: ( EXCHANGE_SYM PARTITION_SYM partition_name WITH TABLE table_name )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2231:7: EXCHANGE_SYM PARTITION_SYM partition_name WITH TABLE table_name
					{
					EXCHANGE_SYM1575=(Token)match(input,EXCHANGE_SYM,FOLLOW_EXCHANGE_SYM_in_alter_table_specification30777); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXCHANGE_SYM1575_tree = (CommonTree)adaptor.create(EXCHANGE_SYM1575);
					adaptor.addChild(root_0, EXCHANGE_SYM1575_tree);
					}

					PARTITION_SYM1576=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_alter_table_specification30779); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PARTITION_SYM1576_tree = (CommonTree)adaptor.create(PARTITION_SYM1576);
					adaptor.addChild(root_0, PARTITION_SYM1576_tree);
					}

					pushFollow(FOLLOW_partition_name_in_alter_table_specification30781);
					partition_name1577=partition_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_name1577.getTree());

					WITH1578=(Token)match(input,WITH,FOLLOW_WITH_in_alter_table_specification30783); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					WITH1578_tree = (CommonTree)adaptor.create(WITH1578);
					adaptor.addChild(root_0, WITH1578_tree);
					}

					TABLE1579=(Token)match(input,TABLE,FOLLOW_TABLE_in_alter_table_specification30785); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TABLE1579_tree = (CommonTree)adaptor.create(TABLE1579);
					adaptor.addChild(root_0, TABLE1579_tree);
					}

					pushFollow(FOLLOW_table_name_in_alter_table_specification30787);
					table_name1580=table_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1580.getTree());

					}

					}
					break;
				case 34 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2232:5: ( ANALYZE_SYM PARTITION_SYM ( partition_names | ALL ) )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2232:5: ( ANALYZE_SYM PARTITION_SYM ( partition_names | ALL ) )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2232:7: ANALYZE_SYM PARTITION_SYM ( partition_names | ALL )
					{
					ANALYZE_SYM1581=(Token)match(input,ANALYZE_SYM,FOLLOW_ANALYZE_SYM_in_alter_table_specification30797); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ANALYZE_SYM1581_tree = (CommonTree)adaptor.create(ANALYZE_SYM1581);
					adaptor.addChild(root_0, ANALYZE_SYM1581_tree);
					}

					PARTITION_SYM1582=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_alter_table_specification30799); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PARTITION_SYM1582_tree = (CommonTree)adaptor.create(PARTITION_SYM1582);
					adaptor.addChild(root_0, PARTITION_SYM1582_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2232:33: ( partition_names | ALL )
					int alt544=2;
					int LA544_0 = input.LA(1);
					if ( (LA544_0==ID) ) {
						alt544=1;
					}
					else if ( (LA544_0==ALL) ) {
						alt544=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 544, 0, input);
						throw nvae;
					}

					switch (alt544) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2232:34: partition_names
							{
							pushFollow(FOLLOW_partition_names_in_alter_table_specification30802);
							partition_names1583=partition_names();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_names1583.getTree());

							}
							break;
						case 2 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2232:52: ALL
							{
							ALL1584=(Token)match(input,ALL,FOLLOW_ALL_in_alter_table_specification30806); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ALL1584_tree = (CommonTree)adaptor.create(ALL1584);
							adaptor.addChild(root_0, ALL1584_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 35 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2233:5: ( CHECK_SYM PARTITION_SYM ( partition_names | ALL ) )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2233:5: ( CHECK_SYM PARTITION_SYM ( partition_names | ALL ) )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2233:7: CHECK_SYM PARTITION_SYM ( partition_names | ALL )
					{
					CHECK_SYM1585=(Token)match(input,CHECK_SYM,FOLLOW_CHECK_SYM_in_alter_table_specification30817); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CHECK_SYM1585_tree = (CommonTree)adaptor.create(CHECK_SYM1585);
					adaptor.addChild(root_0, CHECK_SYM1585_tree);
					}

					PARTITION_SYM1586=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_alter_table_specification30819); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PARTITION_SYM1586_tree = (CommonTree)adaptor.create(PARTITION_SYM1586);
					adaptor.addChild(root_0, PARTITION_SYM1586_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2233:31: ( partition_names | ALL )
					int alt545=2;
					int LA545_0 = input.LA(1);
					if ( (LA545_0==ID) ) {
						alt545=1;
					}
					else if ( (LA545_0==ALL) ) {
						alt545=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 545, 0, input);
						throw nvae;
					}

					switch (alt545) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2233:32: partition_names
							{
							pushFollow(FOLLOW_partition_names_in_alter_table_specification30822);
							partition_names1587=partition_names();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_names1587.getTree());

							}
							break;
						case 2 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2233:50: ALL
							{
							ALL1588=(Token)match(input,ALL,FOLLOW_ALL_in_alter_table_specification30826); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ALL1588_tree = (CommonTree)adaptor.create(ALL1588);
							adaptor.addChild(root_0, ALL1588_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 36 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2234:5: ( OPTIMIZE PARTITION_SYM ( partition_names | ALL ) )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2234:5: ( OPTIMIZE PARTITION_SYM ( partition_names | ALL ) )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2234:7: OPTIMIZE PARTITION_SYM ( partition_names | ALL )
					{
					OPTIMIZE1589=(Token)match(input,OPTIMIZE,FOLLOW_OPTIMIZE_in_alter_table_specification30837); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					OPTIMIZE1589_tree = (CommonTree)adaptor.create(OPTIMIZE1589);
					adaptor.addChild(root_0, OPTIMIZE1589_tree);
					}

					PARTITION_SYM1590=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_alter_table_specification30839); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PARTITION_SYM1590_tree = (CommonTree)adaptor.create(PARTITION_SYM1590);
					adaptor.addChild(root_0, PARTITION_SYM1590_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2234:30: ( partition_names | ALL )
					int alt546=2;
					int LA546_0 = input.LA(1);
					if ( (LA546_0==ID) ) {
						alt546=1;
					}
					else if ( (LA546_0==ALL) ) {
						alt546=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 546, 0, input);
						throw nvae;
					}

					switch (alt546) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2234:31: partition_names
							{
							pushFollow(FOLLOW_partition_names_in_alter_table_specification30842);
							partition_names1591=partition_names();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_names1591.getTree());

							}
							break;
						case 2 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2234:49: ALL
							{
							ALL1592=(Token)match(input,ALL,FOLLOW_ALL_in_alter_table_specification30846); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ALL1592_tree = (CommonTree)adaptor.create(ALL1592);
							adaptor.addChild(root_0, ALL1592_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 37 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2235:5: ( REBUILD_SYM PARTITION_SYM ( partition_names | ALL ) )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2235:5: ( REBUILD_SYM PARTITION_SYM ( partition_names | ALL ) )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2235:7: REBUILD_SYM PARTITION_SYM ( partition_names | ALL )
					{
					REBUILD_SYM1593=(Token)match(input,REBUILD_SYM,FOLLOW_REBUILD_SYM_in_alter_table_specification30857); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					REBUILD_SYM1593_tree = (CommonTree)adaptor.create(REBUILD_SYM1593);
					adaptor.addChild(root_0, REBUILD_SYM1593_tree);
					}

					PARTITION_SYM1594=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_alter_table_specification30859); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PARTITION_SYM1594_tree = (CommonTree)adaptor.create(PARTITION_SYM1594);
					adaptor.addChild(root_0, PARTITION_SYM1594_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2235:33: ( partition_names | ALL )
					int alt547=2;
					int LA547_0 = input.LA(1);
					if ( (LA547_0==ID) ) {
						alt547=1;
					}
					else if ( (LA547_0==ALL) ) {
						alt547=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 547, 0, input);
						throw nvae;
					}

					switch (alt547) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2235:34: partition_names
							{
							pushFollow(FOLLOW_partition_names_in_alter_table_specification30862);
							partition_names1595=partition_names();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_names1595.getTree());

							}
							break;
						case 2 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2235:52: ALL
							{
							ALL1596=(Token)match(input,ALL,FOLLOW_ALL_in_alter_table_specification30866); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ALL1596_tree = (CommonTree)adaptor.create(ALL1596);
							adaptor.addChild(root_0, ALL1596_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 38 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2236:5: ( REPAIR PARTITION_SYM ( partition_names | ALL ) )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2236:5: ( REPAIR PARTITION_SYM ( partition_names | ALL ) )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2236:7: REPAIR PARTITION_SYM ( partition_names | ALL )
					{
					REPAIR1597=(Token)match(input,REPAIR,FOLLOW_REPAIR_in_alter_table_specification30877); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					REPAIR1597_tree = (CommonTree)adaptor.create(REPAIR1597);
					adaptor.addChild(root_0, REPAIR1597_tree);
					}

					PARTITION_SYM1598=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_alter_table_specification30879); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PARTITION_SYM1598_tree = (CommonTree)adaptor.create(PARTITION_SYM1598);
					adaptor.addChild(root_0, PARTITION_SYM1598_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2236:28: ( partition_names | ALL )
					int alt548=2;
					int LA548_0 = input.LA(1);
					if ( (LA548_0==ID) ) {
						alt548=1;
					}
					else if ( (LA548_0==ALL) ) {
						alt548=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 548, 0, input);
						throw nvae;
					}

					switch (alt548) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2236:29: partition_names
							{
							pushFollow(FOLLOW_partition_names_in_alter_table_specification30882);
							partition_names1599=partition_names();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_names1599.getTree());

							}
							break;
						case 2 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2236:47: ALL
							{
							ALL1600=(Token)match(input,ALL,FOLLOW_ALL_in_alter_table_specification30886); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ALL1600_tree = (CommonTree)adaptor.create(ALL1600);
							adaptor.addChild(root_0, ALL1600_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 39 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2237:5: ( REMOVE_SYM PARTITIONING_SYM )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2237:5: ( REMOVE_SYM PARTITIONING_SYM )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2237:7: REMOVE_SYM PARTITIONING_SYM
					{
					REMOVE_SYM1601=(Token)match(input,REMOVE_SYM,FOLLOW_REMOVE_SYM_in_alter_table_specification30897); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					REMOVE_SYM1601_tree = (CommonTree)adaptor.create(REMOVE_SYM1601);
					adaptor.addChild(root_0, REMOVE_SYM1601_tree);
					}

					PARTITIONING_SYM1602=(Token)match(input,PARTITIONING_SYM,FOLLOW_PARTITIONING_SYM_in_alter_table_specification30899); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PARTITIONING_SYM1602_tree = (CommonTree)adaptor.create(PARTITIONING_SYM1602);
					adaptor.addChild(root_0, PARTITIONING_SYM1602_tree);
					}

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_table_specification"


	public static class index_column_names_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "index_column_names"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2239:1: index_column_names : index_column_name ( COMMA index_column_name )* ;
	public final SQLParser.index_column_names_return index_column_names() throws RecognitionException {
		SQLParser.index_column_names_return retval = new SQLParser.index_column_names_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA1604=null;
		ParserRuleReturnScope index_column_name1603 =null;
		ParserRuleReturnScope index_column_name1605 =null;

		CommonTree COMMA1604_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2239:19: ( index_column_name ( COMMA index_column_name )* )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2240:3: index_column_name ( COMMA index_column_name )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_index_column_name_in_index_column_names30910);
			index_column_name1603=index_column_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name1603.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2240:21: ( COMMA index_column_name )*
			loop550:
			while (true) {
				int alt550=2;
				int LA550_0 = input.LA(1);
				if ( (LA550_0==COMMA) ) {
					alt550=1;
				}

				switch (alt550) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2240:22: COMMA index_column_name
					{
					COMMA1604=(Token)match(input,COMMA,FOLLOW_COMMA_in_index_column_names30913); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA1604_tree = (CommonTree)adaptor.create(COMMA1604);
					adaptor.addChild(root_0, COMMA1604_tree);
					}

					pushFollow(FOLLOW_index_column_name_in_index_column_names30915);
					index_column_name1605=index_column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name1605.getTree());

					}
					break;

				default :
					break loop550;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "index_column_names"


	public static class index_type_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "index_type"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2241:1: index_type : USING_SYM ( BTREE_SYM | HASH_SYM ) ;
	public final SQLParser.index_type_return index_type() throws RecognitionException {
		SQLParser.index_type_return retval = new SQLParser.index_type_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token USING_SYM1606=null;
		Token set1607=null;

		CommonTree USING_SYM1606_tree=null;
		CommonTree set1607_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2241:11: ( USING_SYM ( BTREE_SYM | HASH_SYM ) )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2242:3: USING_SYM ( BTREE_SYM | HASH_SYM )
			{
			root_0 = (CommonTree)adaptor.nil();


			USING_SYM1606=(Token)match(input,USING_SYM,FOLLOW_USING_SYM_in_index_type30925); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			USING_SYM1606_tree = (CommonTree)adaptor.create(USING_SYM1606);
			adaptor.addChild(root_0, USING_SYM1606_tree);
			}

			set1607=input.LT(1);
			if ( input.LA(1)==BTREE_SYM||input.LA(1)==HASH_SYM ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set1607));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "index_type"


	public static class index_option_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "index_option"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2244:1: index_option : ( ( KEY_BLOCK_SIZE ( EQ_SYM )? INTEGER_NUM ) | index_type | ( WITH PARSER_SYM parser_name ) | ( COMMENT_SYM TEXT_STRING ) );
	public final SQLParser.index_option_return index_option() throws RecognitionException {
		SQLParser.index_option_return retval = new SQLParser.index_option_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KEY_BLOCK_SIZE1608=null;
		Token EQ_SYM1609=null;
		Token INTEGER_NUM1610=null;
		Token WITH1612=null;
		Token PARSER_SYM1613=null;
		Token COMMENT_SYM1615=null;
		Token TEXT_STRING1616=null;
		ParserRuleReturnScope index_type1611 =null;
		ParserRuleReturnScope parser_name1614 =null;

		CommonTree KEY_BLOCK_SIZE1608_tree=null;
		CommonTree EQ_SYM1609_tree=null;
		CommonTree INTEGER_NUM1610_tree=null;
		CommonTree WITH1612_tree=null;
		CommonTree PARSER_SYM1613_tree=null;
		CommonTree COMMENT_SYM1615_tree=null;
		CommonTree TEXT_STRING1616_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2244:13: ( ( KEY_BLOCK_SIZE ( EQ_SYM )? INTEGER_NUM ) | index_type | ( WITH PARSER_SYM parser_name ) | ( COMMENT_SYM TEXT_STRING ) )
			int alt552=4;
			switch ( input.LA(1) ) {
			case KEY_BLOCK_SIZE:
				{
				alt552=1;
				}
				break;
			case USING_SYM:
				{
				alt552=2;
				}
				break;
			case WITH:
				{
				alt552=3;
				}
				break;
			case COMMENT_SYM:
				{
				alt552=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 552, 0, input);
				throw nvae;
			}
			switch (alt552) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2245:5: ( KEY_BLOCK_SIZE ( EQ_SYM )? INTEGER_NUM )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2245:5: ( KEY_BLOCK_SIZE ( EQ_SYM )? INTEGER_NUM )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2245:7: KEY_BLOCK_SIZE ( EQ_SYM )? INTEGER_NUM
					{
					KEY_BLOCK_SIZE1608=(Token)match(input,KEY_BLOCK_SIZE,FOLLOW_KEY_BLOCK_SIZE_in_index_option30946); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KEY_BLOCK_SIZE1608_tree = (CommonTree)adaptor.create(KEY_BLOCK_SIZE1608);
					adaptor.addChild(root_0, KEY_BLOCK_SIZE1608_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2245:22: ( EQ_SYM )?
					int alt551=2;
					int LA551_0 = input.LA(1);
					if ( (LA551_0==EQ_SYM) ) {
						alt551=1;
					}
					switch (alt551) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2245:23: EQ_SYM
							{
							EQ_SYM1609=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_index_option30949); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1609_tree = (CommonTree)adaptor.create(EQ_SYM1609);
							adaptor.addChild(root_0, EQ_SYM1609_tree);
							}

							}
							break;

					}

					INTEGER_NUM1610=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_index_option30953); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM1610_tree = (CommonTree)adaptor.create(INTEGER_NUM1610);
					adaptor.addChild(root_0, INTEGER_NUM1610_tree);
					}

					}

					}
					break;
				case 2 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2246:5: index_type
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_index_type_in_index_option30961);
					index_type1611=index_type();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_type1611.getTree());

					}
					break;
				case 3 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2247:5: ( WITH PARSER_SYM parser_name )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2247:5: ( WITH PARSER_SYM parser_name )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2247:7: WITH PARSER_SYM parser_name
					{
					WITH1612=(Token)match(input,WITH,FOLLOW_WITH_in_index_option30969); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					WITH1612_tree = (CommonTree)adaptor.create(WITH1612);
					adaptor.addChild(root_0, WITH1612_tree);
					}

					PARSER_SYM1613=(Token)match(input,PARSER_SYM,FOLLOW_PARSER_SYM_in_index_option30971); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PARSER_SYM1613_tree = (CommonTree)adaptor.create(PARSER_SYM1613);
					adaptor.addChild(root_0, PARSER_SYM1613_tree);
					}

					pushFollow(FOLLOW_parser_name_in_index_option30973);
					parser_name1614=parser_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, parser_name1614.getTree());

					}

					}
					break;
				case 4 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2248:5: ( COMMENT_SYM TEXT_STRING )
					{
					root_0 = (CommonTree)adaptor.nil();


					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2248:5: ( COMMENT_SYM TEXT_STRING )
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2248:7: COMMENT_SYM TEXT_STRING
					{
					COMMENT_SYM1615=(Token)match(input,COMMENT_SYM,FOLLOW_COMMENT_SYM_in_index_option30983); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMENT_SYM1615_tree = (CommonTree)adaptor.create(COMMENT_SYM1615);
					adaptor.addChild(root_0, COMMENT_SYM1615_tree);
					}

					TEXT_STRING1616=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_index_option30985); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING1616_tree = (CommonTree)adaptor.create(TEXT_STRING1616);
					adaptor.addChild(root_0, TEXT_STRING1616_tree);
					}

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "index_option"


	public static class column_definitions_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "column_definitions"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2250:1: column_definitions : column_name column_definition ( COMMA column_name column_definition )* ;
	public final SQLParser.column_definitions_return column_definitions() throws RecognitionException {
		SQLParser.column_definitions_return retval = new SQLParser.column_definitions_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA1619=null;
		ParserRuleReturnScope column_name1617 =null;
		ParserRuleReturnScope column_definition1618 =null;
		ParserRuleReturnScope column_name1620 =null;
		ParserRuleReturnScope column_definition1621 =null;

		CommonTree COMMA1619_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2250:19: ( column_name column_definition ( COMMA column_name column_definition )* )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2251:3: column_name column_definition ( COMMA column_name column_definition )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_column_name_in_column_definitions30996);
			column_name1617=column_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1617.getTree());

			pushFollow(FOLLOW_column_definition_in_column_definitions30998);
			column_definition1618=column_definition();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, column_definition1618.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2251:33: ( COMMA column_name column_definition )*
			loop553:
			while (true) {
				int alt553=2;
				int LA553_0 = input.LA(1);
				if ( (LA553_0==COMMA) ) {
					alt553=1;
				}

				switch (alt553) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2251:34: COMMA column_name column_definition
					{
					COMMA1619=(Token)match(input,COMMA,FOLLOW_COMMA_in_column_definitions31001); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA1619_tree = (CommonTree)adaptor.create(COMMA1619);
					adaptor.addChild(root_0, COMMA1619_tree);
					}

					pushFollow(FOLLOW_column_name_in_column_definitions31003);
					column_name1620=column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1620.getTree());

					pushFollow(FOLLOW_column_definition_in_column_definitions31005);
					column_definition1621=column_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_definition1621.getTree());

					}
					break;

				default :
					break loop553;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "column_definitions"


	public static class rename_table_statement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "rename_table_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2256:1: rename_table_statement : RENAME TABLE table_name TO_SYM table_name ( COMMA table_name TO_SYM table_name )* ;
	public final SQLParser.rename_table_statement_return rename_table_statement() throws RecognitionException {
		SQLParser.rename_table_statement_return retval = new SQLParser.rename_table_statement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token RENAME1622=null;
		Token TABLE1623=null;
		Token TO_SYM1625=null;
		Token COMMA1627=null;
		Token TO_SYM1629=null;
		ParserRuleReturnScope table_name1624 =null;
		ParserRuleReturnScope table_name1626 =null;
		ParserRuleReturnScope table_name1628 =null;
		ParserRuleReturnScope table_name1630 =null;

		CommonTree RENAME1622_tree=null;
		CommonTree TABLE1623_tree=null;
		CommonTree TO_SYM1625_tree=null;
		CommonTree COMMA1627_tree=null;
		CommonTree TO_SYM1629_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2256:23: ( RENAME TABLE table_name TO_SYM table_name ( COMMA table_name TO_SYM table_name )* )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2257:3: RENAME TABLE table_name TO_SYM table_name ( COMMA table_name TO_SYM table_name )*
			{
			root_0 = (CommonTree)adaptor.nil();


			RENAME1622=(Token)match(input,RENAME,FOLLOW_RENAME_in_rename_table_statement31019); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RENAME1622_tree = (CommonTree)adaptor.create(RENAME1622);
			adaptor.addChild(root_0, RENAME1622_tree);
			}

			TABLE1623=(Token)match(input,TABLE,FOLLOW_TABLE_in_rename_table_statement31021); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			TABLE1623_tree = (CommonTree)adaptor.create(TABLE1623);
			adaptor.addChild(root_0, TABLE1623_tree);
			}

			pushFollow(FOLLOW_table_name_in_rename_table_statement31026);
			table_name1624=table_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1624.getTree());

			TO_SYM1625=(Token)match(input,TO_SYM,FOLLOW_TO_SYM_in_rename_table_statement31028); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			TO_SYM1625_tree = (CommonTree)adaptor.create(TO_SYM1625);
			adaptor.addChild(root_0, TO_SYM1625_tree);
			}

			pushFollow(FOLLOW_table_name_in_rename_table_statement31030);
			table_name1626=table_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1626.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2259:3: ( COMMA table_name TO_SYM table_name )*
			loop554:
			while (true) {
				int alt554=2;
				int LA554_0 = input.LA(1);
				if ( (LA554_0==COMMA) ) {
					int LA554_2 = input.LA(2);
					if ( (LA554_2==ID) ) {
						alt554=1;
					}

				}

				switch (alt554) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2259:4: COMMA table_name TO_SYM table_name
					{
					COMMA1627=(Token)match(input,COMMA,FOLLOW_COMMA_in_rename_table_statement31035); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA1627_tree = (CommonTree)adaptor.create(COMMA1627);
					adaptor.addChild(root_0, COMMA1627_tree);
					}

					pushFollow(FOLLOW_table_name_in_rename_table_statement31037);
					table_name1628=table_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1628.getTree());

					TO_SYM1629=(Token)match(input,TO_SYM,FOLLOW_TO_SYM_in_rename_table_statement31039); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TO_SYM1629_tree = (CommonTree)adaptor.create(TO_SYM1629);
					adaptor.addChild(root_0, TO_SYM1629_tree);
					}

					pushFollow(FOLLOW_table_name_in_rename_table_statement31041);
					table_name1630=table_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1630.getTree());

					}
					break;

				default :
					break loop554;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "rename_table_statement"


	public static class drop_table_statement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "drop_table_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2264:1: drop_table_statement : DROP ( TEMPORARY )? TABLE ( IF EXISTS )? table_name ( COMMA table_name )* ( RESTRICT | CASCADE )? ;
	public final SQLParser.drop_table_statement_return drop_table_statement() throws RecognitionException {
		SQLParser.drop_table_statement_return retval = new SQLParser.drop_table_statement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token DROP1631=null;
		Token TEMPORARY1632=null;
		Token TABLE1633=null;
		Token IF1634=null;
		Token EXISTS1635=null;
		Token COMMA1637=null;
		Token set1639=null;
		ParserRuleReturnScope table_name1636 =null;
		ParserRuleReturnScope table_name1638 =null;

		CommonTree DROP1631_tree=null;
		CommonTree TEMPORARY1632_tree=null;
		CommonTree TABLE1633_tree=null;
		CommonTree IF1634_tree=null;
		CommonTree EXISTS1635_tree=null;
		CommonTree COMMA1637_tree=null;
		CommonTree set1639_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2264:21: ( DROP ( TEMPORARY )? TABLE ( IF EXISTS )? table_name ( COMMA table_name )* ( RESTRICT | CASCADE )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2265:3: DROP ( TEMPORARY )? TABLE ( IF EXISTS )? table_name ( COMMA table_name )* ( RESTRICT | CASCADE )?
			{
			root_0 = (CommonTree)adaptor.nil();


			DROP1631=(Token)match(input,DROP,FOLLOW_DROP_in_drop_table_statement31055); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DROP1631_tree = (CommonTree)adaptor.create(DROP1631);
			adaptor.addChild(root_0, DROP1631_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2265:8: ( TEMPORARY )?
			int alt555=2;
			int LA555_0 = input.LA(1);
			if ( (LA555_0==TEMPORARY) ) {
				alt555=1;
			}
			switch (alt555) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2265:9: TEMPORARY
					{
					TEMPORARY1632=(Token)match(input,TEMPORARY,FOLLOW_TEMPORARY_in_drop_table_statement31058); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEMPORARY1632_tree = (CommonTree)adaptor.create(TEMPORARY1632);
					adaptor.addChild(root_0, TEMPORARY1632_tree);
					}

					}
					break;

			}

			TABLE1633=(Token)match(input,TABLE,FOLLOW_TABLE_in_drop_table_statement31062); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			TABLE1633_tree = (CommonTree)adaptor.create(TABLE1633);
			adaptor.addChild(root_0, TABLE1633_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2265:27: ( IF EXISTS )?
			int alt556=2;
			int LA556_0 = input.LA(1);
			if ( (LA556_0==IF) ) {
				alt556=1;
			}
			switch (alt556) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2265:28: IF EXISTS
					{
					IF1634=(Token)match(input,IF,FOLLOW_IF_in_drop_table_statement31065); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IF1634_tree = (CommonTree)adaptor.create(IF1634);
					adaptor.addChild(root_0, IF1634_tree);
					}

					EXISTS1635=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_drop_table_statement31067); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXISTS1635_tree = (CommonTree)adaptor.create(EXISTS1635);
					adaptor.addChild(root_0, EXISTS1635_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_table_name_in_drop_table_statement31073);
			table_name1636=table_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1636.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2266:14: ( COMMA table_name )*
			loop557:
			while (true) {
				int alt557=2;
				int LA557_0 = input.LA(1);
				if ( (LA557_0==COMMA) ) {
					int LA557_2 = input.LA(2);
					if ( (LA557_2==ID) ) {
						alt557=1;
					}

				}

				switch (alt557) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2266:15: COMMA table_name
					{
					COMMA1637=(Token)match(input,COMMA,FOLLOW_COMMA_in_drop_table_statement31076); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA1637_tree = (CommonTree)adaptor.create(COMMA1637);
					adaptor.addChild(root_0, COMMA1637_tree);
					}

					pushFollow(FOLLOW_table_name_in_drop_table_statement31078);
					table_name1638=table_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1638.getTree());

					}
					break;

				default :
					break loop557;
				}
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2267:3: ( RESTRICT | CASCADE )?
			int alt558=2;
			int LA558_0 = input.LA(1);
			if ( (LA558_0==CASCADE||LA558_0==RESTRICT) ) {
				alt558=1;
			}
			switch (alt558) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
					{
					set1639=input.LT(1);
					if ( input.LA(1)==CASCADE||input.LA(1)==RESTRICT ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set1639));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_table_statement"


	public static class truncate_table_statement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "truncate_table_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2272:1: truncate_table_statement : TRUNCATE ( TABLE )? table_name ;
	public final SQLParser.truncate_table_statement_return truncate_table_statement() throws RecognitionException {
		SQLParser.truncate_table_statement_return retval = new SQLParser.truncate_table_statement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token TRUNCATE1640=null;
		Token TABLE1641=null;
		ParserRuleReturnScope table_name1642 =null;

		CommonTree TRUNCATE1640_tree=null;
		CommonTree TABLE1641_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2272:25: ( TRUNCATE ( TABLE )? table_name )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2273:3: TRUNCATE ( TABLE )? table_name
			{
			root_0 = (CommonTree)adaptor.nil();


			TRUNCATE1640=(Token)match(input,TRUNCATE,FOLLOW_TRUNCATE_in_truncate_table_statement31103); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			TRUNCATE1640_tree = (CommonTree)adaptor.create(TRUNCATE1640);
			adaptor.addChild(root_0, TRUNCATE1640_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2273:12: ( TABLE )?
			int alt559=2;
			int LA559_0 = input.LA(1);
			if ( (LA559_0==TABLE) ) {
				alt559=1;
			}
			switch (alt559) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2273:13: TABLE
					{
					TABLE1641=(Token)match(input,TABLE,FOLLOW_TABLE_in_truncate_table_statement31106); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TABLE1641_tree = (CommonTree)adaptor.create(TABLE1641);
					adaptor.addChild(root_0, TABLE1641_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_table_name_in_truncate_table_statement31110);
			table_name1642=table_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1642.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "truncate_table_statement"


	public static class create_view_statement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "create_view_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2298:1: create_view_statement : CREATE ( OR_SYM REPLACE )? create_view_body ;
	public final SQLParser.create_view_statement_return create_view_statement() throws RecognitionException {
		SQLParser.create_view_statement_return retval = new SQLParser.create_view_statement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token CREATE1643=null;
		Token OR_SYM1644=null;
		Token REPLACE1645=null;
		ParserRuleReturnScope create_view_body1646 =null;

		CommonTree CREATE1643_tree=null;
		CommonTree OR_SYM1644_tree=null;
		CommonTree REPLACE1645_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2298:22: ( CREATE ( OR_SYM REPLACE )? create_view_body )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2299:3: CREATE ( OR_SYM REPLACE )? create_view_body
			{
			root_0 = (CommonTree)adaptor.nil();


			CREATE1643=(Token)match(input,CREATE,FOLLOW_CREATE_in_create_view_statement31131); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			CREATE1643_tree = (CommonTree)adaptor.create(CREATE1643);
			adaptor.addChild(root_0, CREATE1643_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2299:10: ( OR_SYM REPLACE )?
			int alt560=2;
			int LA560_0 = input.LA(1);
			if ( (LA560_0==OR_SYM) ) {
				alt560=1;
			}
			switch (alt560) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2299:11: OR_SYM REPLACE
					{
					OR_SYM1644=(Token)match(input,OR_SYM,FOLLOW_OR_SYM_in_create_view_statement31134); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					OR_SYM1644_tree = (CommonTree)adaptor.create(OR_SYM1644);
					adaptor.addChild(root_0, OR_SYM1644_tree);
					}

					REPLACE1645=(Token)match(input,REPLACE,FOLLOW_REPLACE_in_create_view_statement31136); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					REPLACE1645_tree = (CommonTree)adaptor.create(REPLACE1645);
					adaptor.addChild(root_0, REPLACE1645_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_create_view_body_in_create_view_statement31142);
			create_view_body1646=create_view_body();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, create_view_body1646.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_view_statement"


	public static class create_view_body_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "create_view_body"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2302:1: create_view_body : ( ALGORITHM_SYM EQ_SYM ( UNDEFINED_SYM | MERGE_SYM | TEMPTABLE_SYM ) )? ( DEFINER EQ_SYM ( user_name | CURRENT_USER ) )? ( SQL_SYM SECURITY_SYM ( DEFINER | INVOKER_SYM ) )? VIEW_SYM view_name ( LPAREN column_list RPAREN )? AS_SYM select_statement ( WITH ( CASCADED | LOCAL_SYM )? CHECK_SYM OPTION )? ;
	public final SQLParser.create_view_body_return create_view_body() throws RecognitionException {
		SQLParser.create_view_body_return retval = new SQLParser.create_view_body_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token ALGORITHM_SYM1647=null;
		Token EQ_SYM1648=null;
		Token set1649=null;
		Token DEFINER1650=null;
		Token EQ_SYM1651=null;
		Token CURRENT_USER1653=null;
		Token SQL_SYM1654=null;
		Token SECURITY_SYM1655=null;
		Token set1656=null;
		Token VIEW_SYM1657=null;
		Token LPAREN1659=null;
		Token RPAREN1661=null;
		Token AS_SYM1662=null;
		Token WITH1664=null;
		Token set1665=null;
		Token CHECK_SYM1666=null;
		Token OPTION1667=null;
		ParserRuleReturnScope user_name1652 =null;
		ParserRuleReturnScope view_name1658 =null;
		ParserRuleReturnScope column_list1660 =null;
		ParserRuleReturnScope select_statement1663 =null;

		CommonTree ALGORITHM_SYM1647_tree=null;
		CommonTree EQ_SYM1648_tree=null;
		CommonTree set1649_tree=null;
		CommonTree DEFINER1650_tree=null;
		CommonTree EQ_SYM1651_tree=null;
		CommonTree CURRENT_USER1653_tree=null;
		CommonTree SQL_SYM1654_tree=null;
		CommonTree SECURITY_SYM1655_tree=null;
		CommonTree set1656_tree=null;
		CommonTree VIEW_SYM1657_tree=null;
		CommonTree LPAREN1659_tree=null;
		CommonTree RPAREN1661_tree=null;
		CommonTree AS_SYM1662_tree=null;
		CommonTree WITH1664_tree=null;
		CommonTree set1665_tree=null;
		CommonTree CHECK_SYM1666_tree=null;
		CommonTree OPTION1667_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2302:17: ( ( ALGORITHM_SYM EQ_SYM ( UNDEFINED_SYM | MERGE_SYM | TEMPTABLE_SYM ) )? ( DEFINER EQ_SYM ( user_name | CURRENT_USER ) )? ( SQL_SYM SECURITY_SYM ( DEFINER | INVOKER_SYM ) )? VIEW_SYM view_name ( LPAREN column_list RPAREN )? AS_SYM select_statement ( WITH ( CASCADED | LOCAL_SYM )? CHECK_SYM OPTION )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2303:3: ( ALGORITHM_SYM EQ_SYM ( UNDEFINED_SYM | MERGE_SYM | TEMPTABLE_SYM ) )? ( DEFINER EQ_SYM ( user_name | CURRENT_USER ) )? ( SQL_SYM SECURITY_SYM ( DEFINER | INVOKER_SYM ) )? VIEW_SYM view_name ( LPAREN column_list RPAREN )? AS_SYM select_statement ( WITH ( CASCADED | LOCAL_SYM )? CHECK_SYM OPTION )?
			{
			root_0 = (CommonTree)adaptor.nil();


			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2303:3: ( ALGORITHM_SYM EQ_SYM ( UNDEFINED_SYM | MERGE_SYM | TEMPTABLE_SYM ) )?
			int alt561=2;
			int LA561_0 = input.LA(1);
			if ( (LA561_0==ALGORITHM_SYM) ) {
				alt561=1;
			}
			switch (alt561) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2303:4: ALGORITHM_SYM EQ_SYM ( UNDEFINED_SYM | MERGE_SYM | TEMPTABLE_SYM )
					{
					ALGORITHM_SYM1647=(Token)match(input,ALGORITHM_SYM,FOLLOW_ALGORITHM_SYM_in_create_view_body31152); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ALGORITHM_SYM1647_tree = (CommonTree)adaptor.create(ALGORITHM_SYM1647);
					adaptor.addChild(root_0, ALGORITHM_SYM1647_tree);
					}

					EQ_SYM1648=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_create_view_body31154); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EQ_SYM1648_tree = (CommonTree)adaptor.create(EQ_SYM1648);
					adaptor.addChild(root_0, EQ_SYM1648_tree);
					}

					set1649=input.LT(1);
					if ( input.LA(1)==MERGE_SYM||input.LA(1)==TEMPTABLE_SYM||input.LA(1)==UNDEFINED_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set1649));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2304:3: ( DEFINER EQ_SYM ( user_name | CURRENT_USER ) )?
			int alt563=2;
			int LA563_0 = input.LA(1);
			if ( (LA563_0==DEFINER) ) {
				alt563=1;
			}
			switch (alt563) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2304:4: DEFINER EQ_SYM ( user_name | CURRENT_USER )
					{
					DEFINER1650=(Token)match(input,DEFINER,FOLLOW_DEFINER_in_create_view_body31173); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DEFINER1650_tree = (CommonTree)adaptor.create(DEFINER1650);
					adaptor.addChild(root_0, DEFINER1650_tree);
					}

					EQ_SYM1651=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_create_view_body31175); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EQ_SYM1651_tree = (CommonTree)adaptor.create(EQ_SYM1651);
					adaptor.addChild(root_0, EQ_SYM1651_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2304:19: ( user_name | CURRENT_USER )
					int alt562=2;
					int LA562_0 = input.LA(1);
					if ( (LA562_0==ID) ) {
						alt562=1;
					}
					else if ( (LA562_0==CURRENT_USER) ) {
						alt562=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 562, 0, input);
						throw nvae;
					}

					switch (alt562) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2304:20: user_name
							{
							pushFollow(FOLLOW_user_name_in_create_view_body31178);
							user_name1652=user_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, user_name1652.getTree());

							}
							break;
						case 2 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2304:32: CURRENT_USER
							{
							CURRENT_USER1653=(Token)match(input,CURRENT_USER,FOLLOW_CURRENT_USER_in_create_view_body31182); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CURRENT_USER1653_tree = (CommonTree)adaptor.create(CURRENT_USER1653);
							adaptor.addChild(root_0, CURRENT_USER1653_tree);
							}

							}
							break;

					}

					}
					break;

			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2305:3: ( SQL_SYM SECURITY_SYM ( DEFINER | INVOKER_SYM ) )?
			int alt564=2;
			int LA564_0 = input.LA(1);
			if ( (LA564_0==SQL_SYM) ) {
				alt564=1;
			}
			switch (alt564) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2305:4: SQL_SYM SECURITY_SYM ( DEFINER | INVOKER_SYM )
					{
					SQL_SYM1654=(Token)match(input,SQL_SYM,FOLLOW_SQL_SYM_in_create_view_body31191); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SQL_SYM1654_tree = (CommonTree)adaptor.create(SQL_SYM1654);
					adaptor.addChild(root_0, SQL_SYM1654_tree);
					}

					SECURITY_SYM1655=(Token)match(input,SECURITY_SYM,FOLLOW_SECURITY_SYM_in_create_view_body31193); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SECURITY_SYM1655_tree = (CommonTree)adaptor.create(SECURITY_SYM1655);
					adaptor.addChild(root_0, SECURITY_SYM1655_tree);
					}

					set1656=input.LT(1);
					if ( input.LA(1)==DEFINER||input.LA(1)==INVOKER_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set1656));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			VIEW_SYM1657=(Token)match(input,VIEW_SYM,FOLLOW_VIEW_SYM_in_create_view_body31209); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			VIEW_SYM1657_tree = (CommonTree)adaptor.create(VIEW_SYM1657);
			adaptor.addChild(root_0, VIEW_SYM1657_tree);
			}

			pushFollow(FOLLOW_view_name_in_create_view_body31211);
			view_name1658=view_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, view_name1658.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2306:22: ( LPAREN column_list RPAREN )?
			int alt565=2;
			int LA565_0 = input.LA(1);
			if ( (LA565_0==LPAREN) ) {
				alt565=1;
			}
			switch (alt565) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2306:23: LPAREN column_list RPAREN
					{
					LPAREN1659=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_create_view_body31214); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1659_tree = (CommonTree)adaptor.create(LPAREN1659);
					adaptor.addChild(root_0, LPAREN1659_tree);
					}

					pushFollow(FOLLOW_column_list_in_create_view_body31216);
					column_list1660=column_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_list1660.getTree());

					RPAREN1661=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_create_view_body31218); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1661_tree = (CommonTree)adaptor.create(RPAREN1661);
					adaptor.addChild(root_0, RPAREN1661_tree);
					}

					}
					break;

			}

			AS_SYM1662=(Token)match(input,AS_SYM,FOLLOW_AS_SYM_in_create_view_body31224); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			AS_SYM1662_tree = (CommonTree)adaptor.create(AS_SYM1662);
			adaptor.addChild(root_0, AS_SYM1662_tree);
			}

			pushFollow(FOLLOW_select_statement_in_create_view_body31226);
			select_statement1663=select_statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement1663.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2308:3: ( WITH ( CASCADED | LOCAL_SYM )? CHECK_SYM OPTION )?
			int alt567=2;
			int LA567_0 = input.LA(1);
			if ( (LA567_0==WITH) ) {
				alt567=1;
			}
			switch (alt567) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2308:4: WITH ( CASCADED | LOCAL_SYM )? CHECK_SYM OPTION
					{
					WITH1664=(Token)match(input,WITH,FOLLOW_WITH_in_create_view_body31231); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					WITH1664_tree = (CommonTree)adaptor.create(WITH1664);
					adaptor.addChild(root_0, WITH1664_tree);
					}

					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2308:9: ( CASCADED | LOCAL_SYM )?
					int alt566=2;
					int LA566_0 = input.LA(1);
					if ( (LA566_0==CASCADED||LA566_0==LOCAL_SYM) ) {
						alt566=1;
					}
					switch (alt566) {
						case 1 :
							// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
							{
							set1665=input.LT(1);
							if ( input.LA(1)==CASCADED||input.LA(1)==LOCAL_SYM ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set1665));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					CHECK_SYM1666=(Token)match(input,CHECK_SYM,FOLLOW_CHECK_SYM_in_create_view_body31242); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CHECK_SYM1666_tree = (CommonTree)adaptor.create(CHECK_SYM1666);
					adaptor.addChild(root_0, CHECK_SYM1666_tree);
					}

					OPTION1667=(Token)match(input,OPTION,FOLLOW_OPTION_in_create_view_body31244); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					OPTION1667_tree = (CommonTree)adaptor.create(OPTION1667);
					adaptor.addChild(root_0, OPTION1667_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_view_body"


	public static class alter_view_statement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alter_view_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2313:1: alter_view_statement : ALTER create_view_body ;
	public final SQLParser.alter_view_statement_return alter_view_statement() throws RecognitionException {
		SQLParser.alter_view_statement_return retval = new SQLParser.alter_view_statement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token ALTER1668=null;
		ParserRuleReturnScope create_view_body1669 =null;

		CommonTree ALTER1668_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2313:21: ( ALTER create_view_body )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2314:3: ALTER create_view_body
			{
			root_0 = (CommonTree)adaptor.nil();


			ALTER1668=(Token)match(input,ALTER,FOLLOW_ALTER_in_alter_view_statement31258); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			ALTER1668_tree = (CommonTree)adaptor.create(ALTER1668);
			adaptor.addChild(root_0, ALTER1668_tree);
			}

			pushFollow(FOLLOW_create_view_body_in_alter_view_statement31262);
			create_view_body1669=create_view_body();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, create_view_body1669.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_view_statement"


	public static class drop_view_statement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "drop_view_statement"
	// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2320:1: drop_view_statement : DROP VIEW_SYM ( IF EXISTS )? view_name ( COMMA view_name )* ( RESTRICT | CASCADE )? ;
	public final SQLParser.drop_view_statement_return drop_view_statement() throws RecognitionException {
		SQLParser.drop_view_statement_return retval = new SQLParser.drop_view_statement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token DROP1670=null;
		Token VIEW_SYM1671=null;
		Token IF1672=null;
		Token EXISTS1673=null;
		Token COMMA1675=null;
		Token set1677=null;
		ParserRuleReturnScope view_name1674 =null;
		ParserRuleReturnScope view_name1676 =null;

		CommonTree DROP1670_tree=null;
		CommonTree VIEW_SYM1671_tree=null;
		CommonTree IF1672_tree=null;
		CommonTree EXISTS1673_tree=null;
		CommonTree COMMA1675_tree=null;
		CommonTree set1677_tree=null;

		try {
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2320:20: ( DROP VIEW_SYM ( IF EXISTS )? view_name ( COMMA view_name )* ( RESTRICT | CASCADE )? )
			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2321:3: DROP VIEW_SYM ( IF EXISTS )? view_name ( COMMA view_name )* ( RESTRICT | CASCADE )?
			{
			root_0 = (CommonTree)adaptor.nil();


			DROP1670=(Token)match(input,DROP,FOLLOW_DROP_in_drop_view_statement31274); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DROP1670_tree = (CommonTree)adaptor.create(DROP1670);
			adaptor.addChild(root_0, DROP1670_tree);
			}

			VIEW_SYM1671=(Token)match(input,VIEW_SYM,FOLLOW_VIEW_SYM_in_drop_view_statement31276); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			VIEW_SYM1671_tree = (CommonTree)adaptor.create(VIEW_SYM1671);
			adaptor.addChild(root_0, VIEW_SYM1671_tree);
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2321:17: ( IF EXISTS )?
			int alt568=2;
			int LA568_0 = input.LA(1);
			if ( (LA568_0==IF) ) {
				alt568=1;
			}
			switch (alt568) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2321:18: IF EXISTS
					{
					IF1672=(Token)match(input,IF,FOLLOW_IF_in_drop_view_statement31279); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IF1672_tree = (CommonTree)adaptor.create(IF1672);
					adaptor.addChild(root_0, IF1672_tree);
					}

					EXISTS1673=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_drop_view_statement31281); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXISTS1673_tree = (CommonTree)adaptor.create(EXISTS1673);
					adaptor.addChild(root_0, EXISTS1673_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_view_name_in_drop_view_statement31287);
			view_name1674=view_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, view_name1674.getTree());

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2322:13: ( COMMA view_name )*
			loop569:
			while (true) {
				int alt569=2;
				int LA569_0 = input.LA(1);
				if ( (LA569_0==COMMA) ) {
					int LA569_2 = input.LA(2);
					if ( (LA569_2==ID) ) {
						alt569=1;
					}

				}

				switch (alt569) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2322:14: COMMA view_name
					{
					COMMA1675=(Token)match(input,COMMA,FOLLOW_COMMA_in_drop_view_statement31290); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA1675_tree = (CommonTree)adaptor.create(COMMA1675);
					adaptor.addChild(root_0, COMMA1675_tree);
					}

					pushFollow(FOLLOW_view_name_in_drop_view_statement31292);
					view_name1676=view_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, view_name1676.getTree());

					}
					break;

				default :
					break loop569;
				}
			}

			// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2323:3: ( RESTRICT | CASCADE )?
			int alt570=2;
			int LA570_0 = input.LA(1);
			if ( (LA570_0==CASCADE||LA570_0==RESTRICT) ) {
				alt570=1;
			}
			switch (alt570) {
				case 1 :
					// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
					{
					set1677=input.LT(1);
					if ( input.LA(1)==CASCADE||input.LA(1)==RESTRICT ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set1677));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_view_statement"

	// $ANTLR start synpred54_SQL
	public final void synpred54_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:978:3: ( ( IN_SYM NATURAL LANGUAGE MODE_SYM ) )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:978:3: ( IN_SYM NATURAL LANGUAGE MODE_SYM )
		{
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:978:3: ( IN_SYM NATURAL LANGUAGE MODE_SYM )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:978:4: IN_SYM NATURAL LANGUAGE MODE_SYM
		{
		match(input,IN_SYM,FOLLOW_IN_SYM_in_synpred54_SQL20719); if (state.failed) return;

		match(input,NATURAL,FOLLOW_NATURAL_in_synpred54_SQL20721); if (state.failed) return;

		match(input,LANGUAGE,FOLLOW_LANGUAGE_in_synpred54_SQL20723); if (state.failed) return;

		match(input,MODE_SYM,FOLLOW_MODE_SYM_in_synpred54_SQL20725); if (state.failed) return;

		}

		}

	}
	// $ANTLR end synpred54_SQL

	// $ANTLR start synpred55_SQL
	public final void synpred55_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:979:5: ( ( IN_SYM NATURAL LANGUAGE MODE_SYM WITH QUERY_SYM EXPANSION_SYM ) )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:979:5: ( IN_SYM NATURAL LANGUAGE MODE_SYM WITH QUERY_SYM EXPANSION_SYM )
		{
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:979:5: ( IN_SYM NATURAL LANGUAGE MODE_SYM WITH QUERY_SYM EXPANSION_SYM )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:979:6: IN_SYM NATURAL LANGUAGE MODE_SYM WITH QUERY_SYM EXPANSION_SYM
		{
		match(input,IN_SYM,FOLLOW_IN_SYM_in_synpred55_SQL20733); if (state.failed) return;

		match(input,NATURAL,FOLLOW_NATURAL_in_synpred55_SQL20735); if (state.failed) return;

		match(input,LANGUAGE,FOLLOW_LANGUAGE_in_synpred55_SQL20737); if (state.failed) return;

		match(input,MODE_SYM,FOLLOW_MODE_SYM_in_synpred55_SQL20739); if (state.failed) return;

		match(input,WITH,FOLLOW_WITH_in_synpred55_SQL20741); if (state.failed) return;

		match(input,QUERY_SYM,FOLLOW_QUERY_SYM_in_synpred55_SQL20743); if (state.failed) return;

		match(input,EXPANSION_SYM,FOLLOW_EXPANSION_SYM_in_synpred55_SQL20745); if (state.failed) return;

		}

		}

	}
	// $ANTLR end synpred55_SQL

	// $ANTLR start synpred87_SQL
	public final void synpred87_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1039:5: ( char_functions )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1039:5: char_functions
		{
		pushFollow(FOLLOW_char_functions_in_synpred87_SQL21058);
		char_functions();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred87_SQL

	// $ANTLR start synpred268_SQL
	public final void synpred268_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1240:27: ( OR_SYM exp_factor1 )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1240:27: OR_SYM exp_factor1
		{
		match(input,OR_SYM,FOLLOW_OR_SYM_in_synpred268_SQL22490); if (state.failed) return;

		pushFollow(FOLLOW_exp_factor1_in_synpred268_SQL22492);
		exp_factor1();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred268_SQL

	// $ANTLR start synpred269_SQL
	public final void synpred269_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1241:29: ( XOR exp_factor2 )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1241:29: XOR exp_factor2
		{
		match(input,XOR,FOLLOW_XOR_in_synpred269_SQL22507); if (state.failed) return;

		pushFollow(FOLLOW_exp_factor2_in_synpred269_SQL22509);
		exp_factor2();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred269_SQL

	// $ANTLR start synpred270_SQL
	public final void synpred270_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1242:29: ( AND_SYM exp_factor3 )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1242:29: AND_SYM exp_factor3
		{
		match(input,AND_SYM,FOLLOW_AND_SYM_in_synpred270_SQL22524); if (state.failed) return;

		pushFollow(FOLLOW_exp_factor3_in_synpred270_SQL22526);
		exp_factor3();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred270_SQL

	// $ANTLR start synpred271_SQL
	public final void synpred271_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1243:16: ( NOT_SYM )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1243:16: NOT_SYM
		{
		match(input,NOT_SYM,FOLLOW_NOT_SYM_in_synpred271_SQL22538); if (state.failed) return;

		}

	}
	// $ANTLR end synpred271_SQL

	// $ANTLR start synpred274_SQL
	public final void synpred274_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1244:30: ( IS_SYM ( NOT_SYM )? ( boolean_literal | NULL_SYM ) )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1244:30: IS_SYM ( NOT_SYM )? ( boolean_literal | NULL_SYM )
		{
		match(input,IS_SYM,FOLLOW_IS_SYM_in_synpred274_SQL22554); if (state.failed) return;

		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1244:37: ( NOT_SYM )?
		int alt577=2;
		int LA577_0 = input.LA(1);
		if ( (LA577_0==NOT_SYM) ) {
			alt577=1;
		}
		switch (alt577) {
			case 1 :
				// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1244:38: NOT_SYM
				{
				match(input,NOT_SYM,FOLLOW_NOT_SYM_in_synpred274_SQL22557); if (state.failed) return;

				}
				break;

		}

		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1244:48: ( boolean_literal | NULL_SYM )
		int alt578=2;
		int LA578_0 = input.LA(1);
		if ( (LA578_0==FALSE_SYM||LA578_0==TRUE_SYM) ) {
			alt578=1;
		}
		else if ( (LA578_0==NULL_SYM) ) {
			alt578=2;
		}

		else {
			if (state.backtracking>0) {state.failed=true; return;}
			NoViableAltException nvae =
				new NoViableAltException("", 578, 0, input);
			throw nvae;
		}

		switch (alt578) {
			case 1 :
				// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1244:49: boolean_literal
				{
				pushFollow(FOLLOW_boolean_literal_in_synpred274_SQL22562);
				boolean_literal();
				state._fsp--;
				if (state.failed) return;

				}
				break;
			case 2 :
				// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1244:65: NULL_SYM
				{
				match(input,NULL_SYM,FOLLOW_NULL_SYM_in_synpred274_SQL22564); if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred274_SQL

	// $ANTLR start synpred275_SQL
	public final void synpred275_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1246:5: ( ( predicate relational_op predicate ) )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1246:5: ( predicate relational_op predicate )
		{
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1246:5: ( predicate relational_op predicate )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1246:7: predicate relational_op predicate
		{
		pushFollow(FOLLOW_predicate_in_synpred275_SQL22581);
		predicate();
		state._fsp--;
		if (state.failed) return;

		pushFollow(FOLLOW_relational_op_in_synpred275_SQL22583);
		relational_op();
		state._fsp--;
		if (state.failed) return;

		pushFollow(FOLLOW_predicate_in_synpred275_SQL22585);
		predicate();
		state._fsp--;
		if (state.failed) return;

		}

		}

	}
	// $ANTLR end synpred275_SQL

	// $ANTLR start synpred278_SQL
	public final void synpred278_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1247:5: ( ( predicate relational_op ( ALL | ANY )? subquery ) )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1247:5: ( predicate relational_op ( ALL | ANY )? subquery )
		{
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1247:5: ( predicate relational_op ( ALL | ANY )? subquery )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1247:7: predicate relational_op ( ALL | ANY )? subquery
		{
		pushFollow(FOLLOW_predicate_in_synpred278_SQL22596);
		predicate();
		state._fsp--;
		if (state.failed) return;

		pushFollow(FOLLOW_relational_op_in_synpred278_SQL22598);
		relational_op();
		state._fsp--;
		if (state.failed) return;

		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1247:31: ( ALL | ANY )?
		int alt579=2;
		int LA579_0 = input.LA(1);
		if ( (LA579_0==ALL||LA579_0==ANY) ) {
			alt579=1;
		}
		switch (alt579) {
			case 1 :
				// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:
				{
				if ( input.LA(1)==ALL||input.LA(1)==ANY ) {
					input.consume();
					state.errorRecovery=false;
					state.failed=false;
				}
				else {
					if (state.backtracking>0) {state.failed=true; return;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					throw mse;
				}
				}
				break;

		}

		pushFollow(FOLLOW_subquery_in_synpred278_SQL22611);
		subquery();
		state._fsp--;
		if (state.failed) return;

		}

		}

	}
	// $ANTLR end synpred278_SQL

	// $ANTLR start synpred280_SQL
	public final void synpred280_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1248:5: ( ( ( NOT_SYM )? EXISTS subquery ) )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1248:5: ( ( NOT_SYM )? EXISTS subquery )
		{
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1248:5: ( ( NOT_SYM )? EXISTS subquery )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1248:7: ( NOT_SYM )? EXISTS subquery
		{
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1248:7: ( NOT_SYM )?
		int alt580=2;
		int LA580_0 = input.LA(1);
		if ( (LA580_0==NOT_SYM) ) {
			alt580=1;
		}
		switch (alt580) {
			case 1 :
				// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1248:7: NOT_SYM
				{
				match(input,NOT_SYM,FOLLOW_NOT_SYM_in_synpred280_SQL22621); if (state.failed) return;

				}
				break;

		}

		match(input,EXISTS,FOLLOW_EXISTS_in_synpred280_SQL22624); if (state.failed) return;

		pushFollow(FOLLOW_subquery_in_synpred280_SQL22626);
		subquery();
		state._fsp--;
		if (state.failed) return;

		}

		}

	}
	// $ANTLR end synpred280_SQL

	// $ANTLR start synpred283_SQL
	public final void synpred283_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1252:5: ( ( bit_expr ( NOT_SYM )? IN_SYM ( subquery | expression_list ) ) )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1252:5: ( bit_expr ( NOT_SYM )? IN_SYM ( subquery | expression_list ) )
		{
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1252:5: ( bit_expr ( NOT_SYM )? IN_SYM ( subquery | expression_list ) )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1252:7: bit_expr ( NOT_SYM )? IN_SYM ( subquery | expression_list )
		{
		pushFollow(FOLLOW_bit_expr_in_synpred283_SQL22648);
		bit_expr();
		state._fsp--;
		if (state.failed) return;

		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1252:16: ( NOT_SYM )?
		int alt581=2;
		int LA581_0 = input.LA(1);
		if ( (LA581_0==NOT_SYM) ) {
			alt581=1;
		}
		switch (alt581) {
			case 1 :
				// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1252:17: NOT_SYM
				{
				match(input,NOT_SYM,FOLLOW_NOT_SYM_in_synpred283_SQL22651); if (state.failed) return;

				}
				break;

		}

		match(input,IN_SYM,FOLLOW_IN_SYM_in_synpred283_SQL22655); if (state.failed) return;

		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1252:34: ( subquery | expression_list )
		int alt582=2;
		int LA582_0 = input.LA(1);
		if ( (LA582_0==LPAREN) ) {
			int LA582_1 = input.LA(2);
			if ( (LA582_1==SELECT) ) {
				alt582=1;
			}
			else if ( (LA582_1==ABS||LA582_1==ACOS||(LA582_1 >= ADDDATE && LA582_1 <= ADDTIME)||(LA582_1 >= AES_DECRYPT && LA582_1 <= AES_ENCRYPT)||LA582_1==ASCII_SYM||LA582_1==ASIN||(LA582_1 >= ATAN && LA582_1 <= ATAN2)||LA582_1==AVG||LA582_1==BENCHMARK||(LA582_1 >= BIN && LA582_1 <= BINARY)||(LA582_1 >= BIT_AND && LA582_1 <= BIT_OR)||LA582_1==BIT_XOR||(LA582_1 >= CASE_SYM && LA582_1 <= CEILING)||LA582_1==CHAR||(LA582_1 >= CHARSET && LA582_1 <= CHAR_LENGTH)||LA582_1==COERCIBILITY||LA582_1==COLLATION||(LA582_1 >= CONCAT && LA582_1 <= CONCAT_WS)||LA582_1==CONNECTION_ID||(LA582_1 >= CONV && LA582_1 <= CONVERT_TZ)||(LA582_1 >= COS && LA582_1 <= COUNT)||LA582_1==CRC32||LA582_1==CURDATE||LA582_1==CURRENT_USER||LA582_1==CURTIME||LA582_1==DATABASE||LA582_1==DATEDIFF||(LA582_1 >= DATE_ADD && LA582_1 <= DAYOFYEAR)||(LA582_1 >= DECODE && LA582_1 <= DEFAULT)||LA582_1==DEGREES||(LA582_1 >= DES_DECRYPT && LA582_1 <= DES_ENCRYPT)||LA582_1==ELT||(LA582_1 >= ENCODE && LA582_1 <= ENCRYPT)||LA582_1==EXISTS||LA582_1==EXP||LA582_1==EXPORT_SET||LA582_1==EXTRACT||LA582_1==FALSE_SYM||LA582_1==FIELD||LA582_1==FIND_IN_SET||LA582_1==FLOOR||LA582_1==FORMAT||LA582_1==FOUND_ROWS||(LA582_1 >= FROM_BASE64 && LA582_1 <= FROM_UNIXTIME)||(LA582_1 >= GET_FORMAT && LA582_1 <= GET_LOCK)||LA582_1==GROUP_CONCAT||(LA582_1 >= HEX && LA582_1 <= HEX_DIGIT)||LA582_1==HOUR||LA582_1==ID||(LA582_1 >= IF && LA582_1 <= IFNULL)||(LA582_1 >= INET_ATON && LA582_1 <= INET_NTOA)||LA582_1==INSERT||(LA582_1 >= INSTR && LA582_1 <= INTEGER_NUM)||LA582_1==INTERVAL_SYM||LA582_1==IS_FREE_LOCK||LA582_1==IS_USED_LOCK||(LA582_1 >= LAST_DAY && LA582_1 <= LAST_INSERT_ID)||(LA582_1 >= LEFT && LA582_1 <= LENGTH)||LA582_1==LN||LA582_1==LOAD_FILE||LA582_1==LOCATE||(LA582_1 >= LOG && LA582_1 <= LOG2)||LA582_1==LOWER||(LA582_1 >= LPAD && LA582_1 <= LPAREN)||LA582_1==LTRIM||(LA582_1 >= MAKEDATE && LA582_1 <= MAKE_SET)||LA582_1==MASTER_POS_WAIT||LA582_1==MATCH||LA582_1==MAX_SYM||LA582_1==MD5||(LA582_1 >= MICROSECOND && LA582_1 <= MID)||(LA582_1 >= MINUS && LA582_1 <= MINUTE)||LA582_1==MIN_SYM||LA582_1==MOD||(LA582_1 >= MONTH && LA582_1 <= MONTHNAME)||LA582_1==NAME_CONST||LA582_1==NEGATION||(LA582_1 >= NOT_SYM && LA582_1 <= NOW)||LA582_1==NULL_SYM||LA582_1==OCT||LA582_1==OLD_PASSWORD||LA582_1==ORD||(LA582_1 >= PASSWORD && LA582_1 <= PERIOD_DIFF)||LA582_1==PI||LA582_1==PLUS||(LA582_1 >= POW && LA582_1 <= POWER)||LA582_1==QUARTER||LA582_1==QUOTE||(LA582_1 >= RADIANS && LA582_1 <= RAND)||LA582_1==REAL_NUMBER||LA582_1==RELEASE_LOCK||LA582_1==REPEAT||LA582_1==REPLACE||LA582_1==REVERSE||LA582_1==RIGHT||LA582_1==ROUND||(LA582_1 >= ROW_SYM && LA582_1 <= RPAD)||LA582_1==RTRIM||(LA582_1 >= SCHEMA && LA582_1 <= SECOND)||LA582_1==SEC_TO_TIME||LA582_1==SESSION_USER||LA582_1==SIGN||LA582_1==SIN||LA582_1==SLEEP||LA582_1==SOUNDEX||LA582_1==SPACE||LA582_1==SQRT||(LA582_1 >= STD && LA582_1 <= STDDEV_SAMP)||LA582_1==STRCMP||LA582_1==STR_TO_DATE||(LA582_1 >= SUBSTRING && LA582_1 <= SUM)||(LA582_1 >= SYSDATE && LA582_1 <= SYSTEM_USER)||LA582_1==TAN||LA582_1==TEXT_STRING||(LA582_1 >= TIMEDIFF && LA582_1 <= TIME_TO_SEC)||(LA582_1 >= TO_BASE64 && LA582_1 <= TO_SECONDS)||(LA582_1 >= TRIM && LA582_1 <= TRUNCATE)||LA582_1==UNHEX||LA582_1==UNIX_TIMESTAMP||LA582_1==UPPER||(LA582_1 >= USER && LA582_1 <= USER_VAR)||(LA582_1 >= UTC_DATE && LA582_1 <= UTC_TIMESTAMP)||LA582_1==UUID||LA582_1==VALUES||LA582_1==VARIANCE||(LA582_1 >= VAR_POP && LA582_1 <= VERSION_SYM)||(LA582_1 >= WEEK && LA582_1 <= WEIGHT_STRING)||(LA582_1 >= YEAR && LA582_1 <= YEARWEEK)) ) {
				alt582=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				int nvaeMark = input.mark();
				try {
					input.consume();
					NoViableAltException nvae =
						new NoViableAltException("", 582, 1, input);
					throw nvae;
				} finally {
					input.rewind(nvaeMark);
				}
			}

		}

		else {
			if (state.backtracking>0) {state.failed=true; return;}
			NoViableAltException nvae =
				new NoViableAltException("", 582, 0, input);
			throw nvae;
		}

		switch (alt582) {
			case 1 :
				// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1252:35: subquery
				{
				pushFollow(FOLLOW_subquery_in_synpred283_SQL22658);
				subquery();
				state._fsp--;
				if (state.failed) return;

				}
				break;
			case 2 :
				// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1252:46: expression_list
				{
				pushFollow(FOLLOW_expression_list_in_synpred283_SQL22662);
				expression_list();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

		}

	}
	// $ANTLR end synpred283_SQL

	// $ANTLR start synpred285_SQL
	public final void synpred285_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1253:5: ( ( bit_expr ( NOT_SYM )? BETWEEN bit_expr AND_SYM predicate ) )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1253:5: ( bit_expr ( NOT_SYM )? BETWEEN bit_expr AND_SYM predicate )
		{
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1253:5: ( bit_expr ( NOT_SYM )? BETWEEN bit_expr AND_SYM predicate )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1253:7: bit_expr ( NOT_SYM )? BETWEEN bit_expr AND_SYM predicate
		{
		pushFollow(FOLLOW_bit_expr_in_synpred285_SQL22673);
		bit_expr();
		state._fsp--;
		if (state.failed) return;

		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1253:16: ( NOT_SYM )?
		int alt583=2;
		int LA583_0 = input.LA(1);
		if ( (LA583_0==NOT_SYM) ) {
			alt583=1;
		}
		switch (alt583) {
			case 1 :
				// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1253:17: NOT_SYM
				{
				match(input,NOT_SYM,FOLLOW_NOT_SYM_in_synpred285_SQL22676); if (state.failed) return;

				}
				break;

		}

		match(input,BETWEEN,FOLLOW_BETWEEN_in_synpred285_SQL22680); if (state.failed) return;

		pushFollow(FOLLOW_bit_expr_in_synpred285_SQL22682);
		bit_expr();
		state._fsp--;
		if (state.failed) return;

		match(input,AND_SYM,FOLLOW_AND_SYM_in_synpred285_SQL22684); if (state.failed) return;

		pushFollow(FOLLOW_predicate_in_synpred285_SQL22686);
		predicate();
		state._fsp--;
		if (state.failed) return;

		}

		}

	}
	// $ANTLR end synpred285_SQL

	// $ANTLR start synpred286_SQL
	public final void synpred286_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1254:5: ( ( bit_expr SOUNDS_SYM LIKE_SYM bit_expr ) )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1254:5: ( bit_expr SOUNDS_SYM LIKE_SYM bit_expr )
		{
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1254:5: ( bit_expr SOUNDS_SYM LIKE_SYM bit_expr )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1254:7: bit_expr SOUNDS_SYM LIKE_SYM bit_expr
		{
		pushFollow(FOLLOW_bit_expr_in_synpred286_SQL22697);
		bit_expr();
		state._fsp--;
		if (state.failed) return;

		match(input,SOUNDS_SYM,FOLLOW_SOUNDS_SYM_in_synpred286_SQL22699); if (state.failed) return;

		match(input,LIKE_SYM,FOLLOW_LIKE_SYM_in_synpred286_SQL22701); if (state.failed) return;

		pushFollow(FOLLOW_bit_expr_in_synpred286_SQL22703);
		bit_expr();
		state._fsp--;
		if (state.failed) return;

		}

		}

	}
	// $ANTLR end synpred286_SQL

	// $ANTLR start synpred288_SQL
	public final void synpred288_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1255:49: ( ESCAPE_SYM simple_expr )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1255:49: ESCAPE_SYM simple_expr
		{
		match(input,ESCAPE_SYM,FOLLOW_ESCAPE_SYM_in_synpred288_SQL22726); if (state.failed) return;

		pushFollow(FOLLOW_simple_expr_in_synpred288_SQL22728);
		simple_expr();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred288_SQL

	// $ANTLR start synpred289_SQL
	public final void synpred289_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1255:5: ( ( bit_expr ( NOT_SYM )? LIKE_SYM simple_expr ( ESCAPE_SYM simple_expr )? ) )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1255:5: ( bit_expr ( NOT_SYM )? LIKE_SYM simple_expr ( ESCAPE_SYM simple_expr )? )
		{
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1255:5: ( bit_expr ( NOT_SYM )? LIKE_SYM simple_expr ( ESCAPE_SYM simple_expr )? )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1255:7: bit_expr ( NOT_SYM )? LIKE_SYM simple_expr ( ESCAPE_SYM simple_expr )?
		{
		pushFollow(FOLLOW_bit_expr_in_synpred289_SQL22714);
		bit_expr();
		state._fsp--;
		if (state.failed) return;

		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1255:16: ( NOT_SYM )?
		int alt584=2;
		int LA584_0 = input.LA(1);
		if ( (LA584_0==NOT_SYM) ) {
			alt584=1;
		}
		switch (alt584) {
			case 1 :
				// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1255:17: NOT_SYM
				{
				match(input,NOT_SYM,FOLLOW_NOT_SYM_in_synpred289_SQL22717); if (state.failed) return;

				}
				break;

		}

		match(input,LIKE_SYM,FOLLOW_LIKE_SYM_in_synpred289_SQL22721); if (state.failed) return;

		pushFollow(FOLLOW_simple_expr_in_synpred289_SQL22723);
		simple_expr();
		state._fsp--;
		if (state.failed) return;

		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1255:48: ( ESCAPE_SYM simple_expr )?
		int alt585=2;
		int LA585_0 = input.LA(1);
		if ( (LA585_0==ESCAPE_SYM) ) {
			alt585=1;
		}
		switch (alt585) {
			case 1 :
				// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1255:49: ESCAPE_SYM simple_expr
				{
				match(input,ESCAPE_SYM,FOLLOW_ESCAPE_SYM_in_synpred289_SQL22726); if (state.failed) return;

				pushFollow(FOLLOW_simple_expr_in_synpred289_SQL22728);
				simple_expr();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

		}

	}
	// $ANTLR end synpred289_SQL

	// $ANTLR start synpred291_SQL
	public final void synpred291_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1256:5: ( ( bit_expr ( NOT_SYM )? REGEXP bit_expr ) )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1256:5: ( bit_expr ( NOT_SYM )? REGEXP bit_expr )
		{
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1256:5: ( bit_expr ( NOT_SYM )? REGEXP bit_expr )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1256:7: bit_expr ( NOT_SYM )? REGEXP bit_expr
		{
		pushFollow(FOLLOW_bit_expr_in_synpred291_SQL22740);
		bit_expr();
		state._fsp--;
		if (state.failed) return;

		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1256:16: ( NOT_SYM )?
		int alt586=2;
		int LA586_0 = input.LA(1);
		if ( (LA586_0==NOT_SYM) ) {
			alt586=1;
		}
		switch (alt586) {
			case 1 :
				// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1256:17: NOT_SYM
				{
				match(input,NOT_SYM,FOLLOW_NOT_SYM_in_synpred291_SQL22743); if (state.failed) return;

				}
				break;

		}

		match(input,REGEXP,FOLLOW_REGEXP_in_synpred291_SQL22747); if (state.failed) return;

		pushFollow(FOLLOW_bit_expr_in_synpred291_SQL22749);
		bit_expr();
		state._fsp--;
		if (state.failed) return;

		}

		}

	}
	// $ANTLR end synpred291_SQL

	// $ANTLR start synpred292_SQL
	public final void synpred292_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1260:13: ( VERTBAR factor1 )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1260:13: VERTBAR factor1
		{
		match(input,VERTBAR,FOLLOW_VERTBAR_in_synpred292_SQL22777); if (state.failed) return;

		pushFollow(FOLLOW_factor1_in_synpred292_SQL22779);
		factor1();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred292_SQL

	// $ANTLR start synpred293_SQL
	public final void synpred293_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1262:13: ( BITAND factor2 )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1262:13: BITAND factor2
		{
		match(input,BITAND,FOLLOW_BITAND_in_synpred293_SQL22795); if (state.failed) return;

		pushFollow(FOLLOW_factor2_in_synpred293_SQL22797);
		factor2();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred293_SQL

	// $ANTLR start synpred295_SQL
	public final void synpred295_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1264:13: ( ( SHIFT_LEFT | SHIFT_RIGHT ) factor3 )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1264:13: ( SHIFT_LEFT | SHIFT_RIGHT ) factor3
		{
		if ( (input.LA(1) >= SHIFT_LEFT && input.LA(1) <= SHIFT_RIGHT) ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		pushFollow(FOLLOW_factor3_in_synpred295_SQL22819);
		factor3();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred295_SQL

	// $ANTLR start synpred297_SQL
	public final void synpred297_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1266:13: ( ( PLUS | MINUS ) factor4 )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1266:13: ( PLUS | MINUS ) factor4
		{
		if ( input.LA(1)==MINUS||input.LA(1)==PLUS ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		pushFollow(FOLLOW_factor4_in_synpred297_SQL22841);
		factor4();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred297_SQL

	// $ANTLR start synpred301_SQL
	public final void synpred301_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1268:13: ( ( ASTERISK | DIVIDE | MOD_SYM | POWER_OP ) factor5 )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1268:13: ( ASTERISK | DIVIDE | MOD_SYM | POWER_OP ) factor5
		{
		if ( input.LA(1)==ASTERISK||input.LA(1)==DIVIDE||input.LA(1)==MOD_SYM||input.LA(1)==POWER_OP ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		pushFollow(FOLLOW_factor5_in_synpred301_SQL22867);
		factor5();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred301_SQL

	// $ANTLR start synpred303_SQL
	public final void synpred303_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1270:13: ( ( PLUS | MINUS ) interval_expr )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1270:13: ( PLUS | MINUS ) interval_expr
		{
		if ( input.LA(1)==MINUS||input.LA(1)==PLUS ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		pushFollow(FOLLOW_interval_expr_in_synpred303_SQL22889);
		interval_expr();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred303_SQL

	// $ANTLR start synpred307_SQL
	public final void synpred307_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1272:3: ( ( PLUS | MINUS | NEGATION | BINARY ) simple_expr )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1272:3: ( PLUS | MINUS | NEGATION | BINARY ) simple_expr
		{
		if ( input.LA(1)==BINARY||input.LA(1)==MINUS||input.LA(1)==NEGATION||input.LA(1)==PLUS ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		pushFollow(FOLLOW_simple_expr_in_synpred307_SQL22917);
		simple_expr();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred307_SQL

	// $ANTLR start synpred324_SQL
	public final void synpred324_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1296:5: ( ( CONVERT_SYM LPAREN expression COMMA cast_data_type RPAREN ) )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1296:5: ( CONVERT_SYM LPAREN expression COMMA cast_data_type RPAREN )
		{
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1296:5: ( CONVERT_SYM LPAREN expression COMMA cast_data_type RPAREN )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1296:8: CONVERT_SYM LPAREN expression COMMA cast_data_type RPAREN
		{
		match(input,CONVERT_SYM,FOLLOW_CONVERT_SYM_in_synpred324_SQL23092); if (state.failed) return;

		match(input,LPAREN,FOLLOW_LPAREN_in_synpred324_SQL23094); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred324_SQL23096);
		expression();
		state._fsp--;
		if (state.failed) return;

		match(input,COMMA,FOLLOW_COMMA_in_synpred324_SQL23098); if (state.failed) return;

		pushFollow(FOLLOW_cast_data_type_in_synpred324_SQL23100);
		cast_data_type();
		state._fsp--;
		if (state.failed) return;

		match(input,RPAREN,FOLLOW_RPAREN_in_synpred324_SQL23102); if (state.failed) return;

		}

		}

	}
	// $ANTLR end synpred324_SQL

	// $ANTLR start synpred325_SQL
	public final void synpred325_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1297:5: ( ( CONVERT_SYM LPAREN expression USING_SYM transcoding_name RPAREN ) )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1297:5: ( CONVERT_SYM LPAREN expression USING_SYM transcoding_name RPAREN )
		{
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1297:5: ( CONVERT_SYM LPAREN expression USING_SYM transcoding_name RPAREN )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1297:8: CONVERT_SYM LPAREN expression USING_SYM transcoding_name RPAREN
		{
		match(input,CONVERT_SYM,FOLLOW_CONVERT_SYM_in_synpred325_SQL23114); if (state.failed) return;

		match(input,LPAREN,FOLLOW_LPAREN_in_synpred325_SQL23116); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred325_SQL23118);
		expression();
		state._fsp--;
		if (state.failed) return;

		match(input,USING_SYM,FOLLOW_USING_SYM_in_synpred325_SQL23120); if (state.failed) return;

		pushFollow(FOLLOW_transcoding_name_in_synpred325_SQL23122);
		transcoding_name();
		state._fsp--;
		if (state.failed) return;

		match(input,RPAREN,FOLLOW_RPAREN_in_synpred325_SQL23124); if (state.failed) return;

		}

		}

	}
	// $ANTLR end synpred325_SQL

	// $ANTLR start synpred335_SQL
	public final void synpred335_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1318:66: ( search_modifier )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1318:66: search_modifier
		{
		pushFollow(FOLLOW_search_modifier_in_synpred335_SQL23340);
		search_modifier();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred335_SQL

	// $ANTLR start synpred340_SQL
	public final void synpred340_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1341:3: ( table_factor1 )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1341:3: table_factor1
		{
		pushFollow(FOLLOW_table_factor1_in_synpred340_SQL23450);
		table_factor1();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred340_SQL

	// $ANTLR start synpred343_SQL
	public final void synpred343_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1344:64: ( join_condition )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1344:64: join_condition
		{
		pushFollow(FOLLOW_join_condition_in_synpred343_SQL23484);
		join_condition();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred343_SQL

	// $ANTLR start synpred345_SQL
	public final void synpred345_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1347:48: ( ON expression )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1347:48: ON expression
		{
		match(input,ON,FOLLOW_ON_in_synpred345_SQL23511); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred345_SQL23513);
		expression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred345_SQL

	// $ANTLR start synpred349_SQL
	public final void synpred349_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1350:20: ( ( LEFT | RIGHT ) ( OUTER )? JOIN_SYM table_factor4 join_condition )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1350:20: ( LEFT | RIGHT ) ( OUTER )? JOIN_SYM table_factor4 join_condition
		{
		if ( input.LA(1)==LEFT||input.LA(1)==RIGHT ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1350:33: ( OUTER )?
		int alt597=2;
		int LA597_0 = input.LA(1);
		if ( (LA597_0==OUTER) ) {
			alt597=1;
		}
		switch (alt597) {
			case 1 :
				// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1350:34: OUTER
				{
				match(input,OUTER,FOLLOW_OUTER_in_synpred349_SQL23540); if (state.failed) return;

				}
				break;

		}

		match(input,JOIN_SYM,FOLLOW_JOIN_SYM_in_synpred349_SQL23544); if (state.failed) return;

		pushFollow(FOLLOW_table_factor4_in_synpred349_SQL23548);
		table_factor4();
		state._fsp--;
		if (state.failed) return;

		pushFollow(FOLLOW_join_condition_in_synpred349_SQL23550);
		join_condition();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred349_SQL

	// $ANTLR start synpred354_SQL
	public final void synpred354_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1356:19: ( partition_clause )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1356:19: partition_clause
		{
		pushFollow(FOLLOW_partition_clause_in_synpred354_SQL23609);
		partition_clause();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred354_SQL

	// $ANTLR start synpred373_SQL
	public final void synpred373_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1392:4: ( SEMI )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1392:4: SEMI
		{
		match(input,SEMI,FOLLOW_SEMI_in_synpred373_SQL23904); if (state.failed) return;

		}

	}
	// $ANTLR end synpred373_SQL

	// $ANTLR start synpred425_SQL
	public final void synpred425_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1519:15: ( column_spec )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1519:15: column_spec
		{
		pushFollow(FOLLOW_column_spec_in_synpred425_SQL24460);
		column_spec();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred425_SQL

	// $ANTLR start synpred426_SQL
	public final void synpred426_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1519:29: ( INTEGER_NUM )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1519:29: INTEGER_NUM
		{
		match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_synpred426_SQL24464); if (state.failed) return;

		}

	}
	// $ANTLR end synpred426_SQL

	// $ANTLR start synpred432_SQL
	public final void synpred432_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1537:26: ( COMMA displayed_column )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1537:26: COMMA displayed_column
		{
		match(input,COMMA,FOLLOW_COMMA_in_synpred432_SQL24585); if (state.failed) return;

		pushFollow(FOLLOW_displayed_column_in_synpred432_SQL24589);
		displayed_column();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred432_SQL

	// $ANTLR start synpred438_SQL
	public final void synpred438_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1556:3: ( ( column_spec ( alias )? ) )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1556:3: ( column_spec ( alias )? )
		{
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1556:3: ( column_spec ( alias )? )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1556:5: column_spec ( alias )?
		{
		pushFollow(FOLLOW_column_spec_in_synpred438_SQL24685);
		column_spec();
		state._fsp--;
		if (state.failed) return;

		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1556:17: ( alias )?
		int alt613=2;
		int LA613_0 = input.LA(1);
		if ( (LA613_0==AS_SYM||LA613_0==ID) ) {
			alt613=1;
		}
		switch (alt613) {
			case 1 :
				// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1556:18: alias
				{
				pushFollow(FOLLOW_alias_in_synpred438_SQL24688);
				alias();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

		}

	}
	// $ANTLR end synpred438_SQL

	// $ANTLR start synpred469_SQL
	public final void synpred469_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1616:29: ( bit_expr )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1616:29: bit_expr
		{
		pushFollow(FOLLOW_bit_expr_in_synpred469_SQL25039);
		bit_expr();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred469_SQL

	// $ANTLR start synpred470_SQL
	public final void synpred470_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1616:55: ( bit_expr )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1616:55: bit_expr
		{
		pushFollow(FOLLOW_bit_expr_in_synpred470_SQL25048);
		bit_expr();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred470_SQL

	// $ANTLR start synpred474_SQL
	public final void synpred474_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1624:41: ( expression )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1624:41: expression
		{
		pushFollow(FOLLOW_expression_in_synpred474_SQL25109);
		expression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred474_SQL

	// $ANTLR start synpred477_SQL
	public final void synpred477_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1641:3: ( single_table_update_statement )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1641:3: single_table_update_statement
		{
		pushFollow(FOLLOW_single_table_update_statement_in_synpred477_SQL25161);
		single_table_update_statement();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred477_SQL

	// $ANTLR start synpred489_SQL
	public final void synpred489_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1675:26: ( COMMA root_statement )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:1675:26: COMMA root_statement
		{
		match(input,COMMA,FOLLOW_COMMA_in_synpred489_SQL25305); if (state.failed) return;

		pushFollow(FOLLOW_root_statement_in_synpred489_SQL25307);
		root_statement();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred489_SQL

	// $ANTLR start synpred858_SQL
	public final void synpred858_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2108:17: ( ( COMMA )? table_option )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2108:17: ( COMMA )? table_option
		{
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2108:17: ( COMMA )?
		int alt786=2;
		int LA786_0 = input.LA(1);
		if ( (LA786_0==COMMA) ) {
			alt786=1;
		}
		switch (alt786) {
			case 1 :
				// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2108:19: COMMA
				{
				match(input,COMMA,FOLLOW_COMMA_in_synpred858_SQL28895); if (state.failed) return;

				}
				break;

		}

		pushFollow(FOLLOW_table_option_in_synpred858_SQL28900);
		table_option();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred858_SQL

	// $ANTLR start synpred963_SQL
	public final void synpred963_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2195:5: ( table_options )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2195:5: table_options
		{
		pushFollow(FOLLOW_table_options_in_synpred963_SQL29994);
		table_options();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred963_SQL

	// $ANTLR start synpred1042_SQL
	public final void synpred1042_SQL_fragment() throws RecognitionException {
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2222:5: ( ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ( COLLATE_SYM ( EQ_SYM )? collation_name )? ) )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2222:5: ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ( COLLATE_SYM ( EQ_SYM )? collation_name )? )
		{
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2222:5: ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ( COLLATE_SYM ( EQ_SYM )? collation_name )? )
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2222:7: ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ( COLLATE_SYM ( EQ_SYM )? collation_name )?
		{
		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2222:7: ( DEFAULT )?
		int alt879=2;
		int LA879_0 = input.LA(1);
		if ( (LA879_0==DEFAULT) ) {
			alt879=1;
		}
		switch (alt879) {
			case 1 :
				// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2222:8: DEFAULT
				{
				match(input,DEFAULT,FOLLOW_DEFAULT_in_synpred1042_SQL30613); if (state.failed) return;

				}
				break;

		}

		match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_synpred1042_SQL30617); if (state.failed) return;

		match(input,SET_SYM,FOLLOW_SET_SYM_in_synpred1042_SQL30619); if (state.failed) return;

		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2222:40: ( EQ_SYM )?
		int alt880=2;
		int LA880_0 = input.LA(1);
		if ( (LA880_0==EQ_SYM) ) {
			alt880=1;
		}
		switch (alt880) {
			case 1 :
				// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2222:41: EQ_SYM
				{
				match(input,EQ_SYM,FOLLOW_EQ_SYM_in_synpred1042_SQL30622); if (state.failed) return;

				}
				break;

		}

		pushFollow(FOLLOW_charset_name_in_synpred1042_SQL30626);
		charset_name();
		state._fsp--;
		if (state.failed) return;

		// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2222:63: ( COLLATE_SYM ( EQ_SYM )? collation_name )?
		int alt882=2;
		int LA882_0 = input.LA(1);
		if ( (LA882_0==COLLATE_SYM) ) {
			alt882=1;
		}
		switch (alt882) {
			case 1 :
				// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2222:64: COLLATE_SYM ( EQ_SYM )? collation_name
				{
				match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_synpred1042_SQL30629); if (state.failed) return;

				// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2222:76: ( EQ_SYM )?
				int alt881=2;
				int LA881_0 = input.LA(1);
				if ( (LA881_0==EQ_SYM) ) {
					alt881=1;
				}
				switch (alt881) {
					case 1 :
						// E:\\workspace\\repository\\git\\mars\\plugins\\com.seekon.mars.sqlscript.parser\\src\\SQL.g:2222:77: EQ_SYM
						{
						match(input,EQ_SYM,FOLLOW_EQ_SYM_in_synpred1042_SQL30632); if (state.failed) return;

						}
						break;

				}

				pushFollow(FOLLOW_collation_name_in_synpred1042_SQL30636);
				collation_name();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

		}

	}
	// $ANTLR end synpred1042_SQL

	// Delegated rules

	public final boolean synpred325_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred325_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred303_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred303_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred289_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred289_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred54_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred54_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred288_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred288_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred292_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred292_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred291_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred291_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred432_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred432_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred340_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred340_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred270_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred270_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred307_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred307_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred474_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred474_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred335_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred335_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred489_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred489_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred373_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred373_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred963_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred963_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred278_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred278_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred274_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred274_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred301_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred301_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred280_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred280_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred345_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred345_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred268_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred268_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred293_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred293_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred349_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred349_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred354_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred354_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred343_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred343_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred269_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred269_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred324_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred324_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred426_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred426_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred286_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred286_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred477_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred477_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred295_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred295_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred438_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred438_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred425_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred425_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred271_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred271_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred469_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred469_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred470_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred470_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred275_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred275_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred55_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred55_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred1042_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred1042_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred285_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred285_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred297_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred297_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred283_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred283_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred87_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred87_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred858_SQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred858_SQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}


	protected DFA66 dfa66 = new DFA66(this);
	protected DFA131 dfa131 = new DFA131(this);
	protected DFA201 dfa201 = new DFA201(this);
	protected DFA426 dfa426 = new DFA426(this);
	static final String DFA66_eotS =
		"\12\uffff";
	static final String DFA66_eofS =
		"\1\2\11\uffff";
	static final String DFA66_minS =
		"\1\36\1\u0178\1\uffff\1\u011e\1\137\1\u011e\1\0\1\137\1\uffff\1\0";
	static final String DFA66_maxS =
		"\1\u02fa\1\u0178\1\uffff\1\u011e\1\u023a\1\u011e\1\0\1\u023a\1\uffff\1"+
		"\0";
	static final String DFA66_acceptS =
		"\2\uffff\1\2\5\uffff\1\1\1\uffff";
	static final String DFA66_specialS =
		"\6\uffff\1\1\2\uffff\1\0}>";
	static final String[] DFA66_transitionS = {
			"\1\2\100\uffff\1\2\46\uffff\1\2\150\uffff\1\2\2\uffff\1\2\27\uffff\1"+
			"\2\4\uffff\1\2\16\uffff\1\2\3\uffff\1\2\7\uffff\1\2\7\uffff\1\2\17\uffff"+
			"\1\2\27\uffff\1\2\5\uffff\1\2\11\uffff\1\2\121\uffff\1\2\24\uffff\1\2"+
			"\10\uffff\1\2\15\uffff\1\1\110\uffff\1\2\10\uffff\1\2\13\uffff\1\2\7"+
			"\uffff\1\2\62\uffff\1\2\104\uffff\1\2\21\uffff\2\2\35\uffff\1\2\2\uffff"+
			"\1\2",
			"\1\3",
			"",
			"\1\4",
			"\1\5\u01da\uffff\1\6",
			"\1\7",
			"\1\uffff",
			"\1\5\u01da\uffff\1\11",
			"",
			"\1\uffff"
	};

	static final short[] DFA66_eot = DFA.unpackEncodedString(DFA66_eotS);
	static final short[] DFA66_eof = DFA.unpackEncodedString(DFA66_eofS);
	static final char[] DFA66_min = DFA.unpackEncodedStringToUnsignedChars(DFA66_minS);
	static final char[] DFA66_max = DFA.unpackEncodedStringToUnsignedChars(DFA66_maxS);
	static final short[] DFA66_accept = DFA.unpackEncodedString(DFA66_acceptS);
	static final short[] DFA66_special = DFA.unpackEncodedString(DFA66_specialS);
	static final short[][] DFA66_transition;

	static {
		int numStates = DFA66_transitionS.length;
		DFA66_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA66_transition[i] = DFA.unpackEncodedString(DFA66_transitionS[i]);
		}
	}

	protected class DFA66 extends DFA {

		public DFA66(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 66;
			this.eot = DFA66_eot;
			this.eof = DFA66_eof;
			this.min = DFA66_min;
			this.max = DFA66_max;
			this.accept = DFA66_accept;
			this.special = DFA66_special;
			this.transition = DFA66_transition;
		}
		@Override
		public String getDescription() {
			return "1356:18: ( partition_clause )?";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA66_9 = input.LA(1);
						 
						int index66_9 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred354_SQL()) ) {s = 8;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index66_9);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA66_6 = input.LA(1);
						 
						int index66_6 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred354_SQL()) ) {s = 8;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index66_6);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 66, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA131_eotS =
		"\36\uffff";
	static final String DFA131_eofS =
		"\36\uffff";
	static final String DFA131_minS =
		"\1\u012e\1\u0115\3\u011e\1\u00b7\1\u011e\1\u0178\1\u011e\3\uffff\1\u0178"+
		"\1\u011e\2\137\2\u011e\1\u0245\1\u011e\1\u0178\3\137\2\u011e\2\137\1\u011e"+
		"\1\137";
	static final String DFA131_maxS =
		"\1\u012e\1\u0176\2\u0135\1\u011e\1\u02e4\1\u011e\1\u0178\1\u011e\3\uffff"+
		"\1\u02e4\1\u011e\2\u023a\2\u011e\1\u02e4\1\u011e\1\u02e4\3\u023a\2\u011e"+
		"\2\u023a\1\u011e\1\u023a";
	static final String DFA131_acceptS =
		"\11\uffff\1\1\1\2\1\3\22\uffff";
	static final String DFA131_specialS =
		"\36\uffff}>";
	static final String[] DFA131_transitionS = {
			"\1\1",
			"\1\2\10\uffff\1\5\3\uffff\1\3\22\uffff\1\4\100\uffff\1\2",
			"\1\5\3\uffff\1\3\22\uffff\1\4",
			"\1\5\26\uffff\1\4",
			"\1\5",
			"\1\6\u00c0\uffff\1\10\157\uffff\1\7\134\uffff\1\13\10\uffff\1\12\u0094"+
			"\uffff\2\11",
			"\1\14",
			"\1\15",
			"\1\16",
			"",
			"",
			"",
			"\1\10\157\uffff\1\7\134\uffff\1\13\10\uffff\1\12\u0094\uffff\2\11",
			"\1\17",
			"\1\21\127\uffff\1\20\u0182\uffff\1\22",
			"\1\23\u01da\uffff\1\24",
			"\1\25",
			"\1\26",
			"\1\13\u009d\uffff\2\11",
			"\1\27",
			"\1\10\u00cc\uffff\1\13\10\uffff\1\12\u0094\uffff\2\11",
			"\1\21\127\uffff\1\30\u0182\uffff\1\22",
			"\1\21\127\uffff\1\31\u0182\uffff\1\22",
			"\1\23\u01da\uffff\1\24",
			"\1\32",
			"\1\33",
			"\1\21\u01da\uffff\1\22",
			"\1\21\127\uffff\1\34\u0182\uffff\1\22",
			"\1\35",
			"\1\21\u01da\uffff\1\22"
	};

	static final short[] DFA131_eot = DFA.unpackEncodedString(DFA131_eotS);
	static final short[] DFA131_eof = DFA.unpackEncodedString(DFA131_eofS);
	static final char[] DFA131_min = DFA.unpackEncodedStringToUnsignedChars(DFA131_minS);
	static final char[] DFA131_max = DFA.unpackEncodedStringToUnsignedChars(DFA131_maxS);
	static final short[] DFA131_accept = DFA.unpackEncodedString(DFA131_acceptS);
	static final short[] DFA131_special = DFA.unpackEncodedString(DFA131_specialS);
	static final short[][] DFA131_transition;

	static {
		int numStates = DFA131_transitionS.length;
		DFA131_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA131_transition[i] = DFA.unpackEncodedString(DFA131_transitionS[i]);
		}
	}

	protected class DFA131 extends DFA {

		public DFA131(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 131;
			this.eot = DFA131_eot;
			this.eof = DFA131_eof;
			this.min = DFA131_min;
			this.max = DFA131_max;
			this.accept = DFA131_accept;
			this.special = DFA131_special;
			this.transition = DFA131_transition;
		}
		@Override
		public String getDescription() {
			return "1595:1: insert_statements : ( insert_statement1 | insert_statement2 | insert_statement3 );";
		}
	}

	static final String DFA201_eotS =
		"\21\uffff";
	static final String DFA201_eofS =
		"\21\uffff";
	static final String DFA201_minS =
		"\1\u0178\1\u011e\3\uffff\1\137\2\u011e\1\u0245\2\137\2\u011e\2\137\1\u011e"+
		"\1\137";
	static final String DFA201_maxS =
		"\1\u02e4\1\u011e\3\uffff\1\u023a\2\u011e\1\u02e4\2\u023a\2\u011e\2\u023a"+
		"\1\u011e\1\u023a";
	static final String DFA201_acceptS =
		"\2\uffff\1\1\1\2\1\3\14\uffff";
	static final String DFA201_specialS =
		"\21\uffff}>";
	static final String[] DFA201_transitionS = {
			"\1\1\u00cc\uffff\1\4\10\uffff\1\3\u0094\uffff\2\2",
			"\1\5",
			"",
			"",
			"",
			"\1\7\127\uffff\1\6\u0182\uffff\1\10",
			"\1\11",
			"\1\12",
			"\1\4\u009d\uffff\2\2",
			"\1\7\127\uffff\1\13\u0182\uffff\1\10",
			"\1\7\127\uffff\1\14\u0182\uffff\1\10",
			"\1\15",
			"\1\16",
			"\1\7\u01da\uffff\1\10",
			"\1\7\127\uffff\1\17\u0182\uffff\1\10",
			"\1\20",
			"\1\7\u01da\uffff\1\10"
	};

	static final short[] DFA201_eot = DFA.unpackEncodedString(DFA201_eotS);
	static final short[] DFA201_eof = DFA.unpackEncodedString(DFA201_eofS);
	static final char[] DFA201_min = DFA.unpackEncodedStringToUnsignedChars(DFA201_minS);
	static final char[] DFA201_max = DFA.unpackEncodedStringToUnsignedChars(DFA201_maxS);
	static final short[] DFA201_accept = DFA.unpackEncodedString(DFA201_acceptS);
	static final short[] DFA201_special = DFA.unpackEncodedString(DFA201_specialS);
	static final short[][] DFA201_transition;

	static {
		int numStates = DFA201_transitionS.length;
		DFA201_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA201_transition[i] = DFA.unpackEncodedString(DFA201_transitionS[i]);
		}
	}

	protected class DFA201 extends DFA {

		public DFA201(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 201;
			this.eot = DFA201_eot;
			this.eof = DFA201_eof;
			this.min = DFA201_min;
			this.max = DFA201_max;
			this.accept = DFA201_accept;
			this.special = DFA201_special;
			this.transition = DFA201_transition;
		}
		@Override
		public String getDescription() {
			return "1767:3: ( replace_statement1 | replace_statement2 | replace_statement3 )";
		}
	}

	static final String DFA426_eotS =
		"\140\uffff";
	static final String DFA426_eofS =
		"\1\1\137\uffff";
	static final String DFA426_minS =
		"\1\44\1\uffff\1\12\1\uffff\3\u00cd\1\116\1\u024e\4\u00cd\1\u00b0\1\u00cd"+
		"\1\u00b0\4\u00cd\1\u00a5\1\u00cd\1\143\2\u00a5\1\u00cd\1\u011e\1\0\1\u0132"+
		"\1\0\1\u0132\1\0\1\27\1\u0132\1\0\1\u011e\1\0\1\u029c\1\0\1\u029c\1\0"+
		"\1\u00cd\1\u0132\1\0\1\u00cd\1\u00ea\1\0\1\u0132\1\0\1\u0132\1\0\1\u0132"+
		"\1\0\1\u00a5\1\0\1\u029c\1\0\1\143\1\0\1\u00a5\1\0\1\u00a5\1\0\1\u0178"+
		"\1\u011e\3\0\1\27\5\0\1\u029c\2\0\1\u029c\12\0\1\137\3\0\1\u011e\1\0\1"+
		"\137\1\0";
	static final String DFA426_maxS =
		"\1\u02c6\1\uffff\1\u02cd\1\uffff\1\u011e\2\u0132\1\131\1\u024e\1\u0132"+
		"\1\u011e\2\u029c\1\u00b0\1\u0132\1\u00b0\1\u01c6\4\u0132\1\u029c\1\u0217"+
		"\2\u0132\1\u0178\1\u011e\1\0\1\u0132\1\0\1\u0132\1\0\1\u02e0\1\u0132\1"+
		"\0\1\u011e\1\0\1\u029c\1\0\1\u029c\1\0\1\u029c\1\u0132\1\0\1\u029c\1\u01c6"+
		"\1\0\1\u0132\1\0\1\u0132\1\0\1\u0132\1\0\1\u0132\1\0\1\u029c\1\0\1\u0217"+
		"\1\0\1\u0132\1\0\1\u0132\1\0\1\u0178\1\u011e\3\0\1\u02e0\5\0\1\u029c\2"+
		"\0\1\u029c\12\0\1\u023a\3\0\1\u011e\1\0\1\u023a\1\0";
	static final String DFA426_acceptS =
		"\1\uffff\1\2\1\uffff\1\1\134\uffff";
	static final String DFA426_specialS =
		"\33\uffff\1\1\1\uffff\1\25\1\uffff\1\23\2\uffff\1\11\1\uffff\1\33\1\uffff"+
		"\1\3\1\uffff\1\17\2\uffff\1\7\2\uffff\1\51\1\uffff\1\45\1\uffff\1\27\1"+
		"\uffff\1\15\1\uffff\1\50\1\uffff\1\31\1\uffff\1\13\1\uffff\1\37\1\uffff"+
		"\1\35\2\uffff\1\0\1\24\1\22\1\uffff\1\5\1\10\1\32\1\2\1\16\1\uffff\1\43"+
		"\1\6\1\uffff\1\21\1\47\1\44\1\26\1\14\1\46\1\30\1\12\1\36\1\34\1\uffff"+
		"\1\4\1\42\1\20\1\uffff\1\41\1\uffff\1\40}>";
	static final String[] DFA426_transitionS = {
			"\1\3\1\uffff\1\3\47\uffff\1\3\2\uffff\1\3\7\uffff\1\3\5\uffff\1\2\1\3"+
			"\13\uffff\1\3\43\uffff\1\3\24\uffff\1\3\3\uffff\1\3\41\uffff\1\3\131"+
			"\uffff\1\3\11\uffff\1\3\26\uffff\1\3\117\uffff\1\3\22\uffff\1\3\67\uffff"+
			"\1\3\6\uffff\1\1\1\3\115\uffff\1\3\15\uffff\2\1\61\uffff\2\3\114\uffff"+
			"\1\3",
			"",
			"\1\1\5\uffff\1\1\2\uffff\2\1\17\uffff\1\5\1\uffff\1\6\34\uffff\1\1\7"+
			"\uffff\1\1\2\uffff\1\10\2\uffff\1\11\1\1\3\uffff\1\1\2\uffff\1\12\6\uffff"+
			"\1\13\13\uffff\1\14\7\uffff\1\1\17\uffff\1\1\13\uffff\1\15\24\uffff\1"+
			"\7\3\uffff\1\16\1\1\6\uffff\2\1\6\uffff\2\1\11\uffff\1\1\6\uffff\1\4"+
			"\12\uffff\1\1\30\uffff\1\1\35\uffff\1\1\25\uffff\1\1\1\uffff\1\17\10"+
			"\uffff\1\1\1\20\26\uffff\1\21\37\uffff\1\1\3\uffff\1\1\53\uffff\1\22"+
			"\22\uffff\1\23\5\uffff\1\1\45\uffff\1\1\4\uffff\1\1\6\uffff\1\24\7\uffff"+
			"\1\25\51\uffff\1\1\13\uffff\4\1\2\uffff\1\1\21\uffff\1\26\15\uffff\1"+
			"\1\14\uffff\1\1\45\uffff\1\27\1\30\74\uffff\1\1\17\uffff\1\31\6\uffff"+
			"\1\1",
			"",
			"\1\32\120\uffff\1\33",
			"\1\34\144\uffff\1\35",
			"\1\36\144\uffff\1\37",
			"\1\10\12\uffff\1\12",
			"\1\40",
			"\1\41\144\uffff\1\42",
			"\1\43\120\uffff\1\44",
			"\1\45\u01ce\uffff\1\46",
			"\1\47\u01ce\uffff\1\50",
			"\1\51",
			"\1\52\144\uffff\1\53",
			"\1\54",
			"\1\55\34\uffff\1\56\144\uffff\1\56\166\uffff\1\56",
			"\1\57\144\uffff\1\60",
			"\1\61\144\uffff\1\62",
			"\1\63\144\uffff\1\64",
			"\1\66\47\uffff\1\65\144\uffff\1\66",
			"\1\67\u01ce\uffff\1\70",
			"\1\72\2\uffff\1\72\76\uffff\1\72\30\uffff\1\72\16\uffff\1\71\35\uffff"+
			"\1\72\u012b\uffff\1\72",
			"\1\74\47\uffff\1\73\144\uffff\1\74",
			"\1\76\47\uffff\1\75\144\uffff\1\76",
			"\1\77\u00aa\uffff\1\100",
			"\1\101",
			"\1\uffff",
			"\1\102",
			"\1\uffff",
			"\1\103",
			"\1\uffff",
			"\1\105\2\uffff\1\105\22\uffff\1\105\2\uffff\1\105\111\uffff\10\105\37"+
			"\uffff\1\105\53\uffff\1\104\3\uffff\2\105\52\uffff\2\105\2\uffff\1\105"+
			"\6\uffff\1\105\7\uffff\1\105\13\uffff\1\105\47\uffff\1\105\4\uffff\2"+
			"\105\5\uffff\1\105\2\uffff\3\105\46\uffff\2\105\u00dc\uffff\1\105\64"+
			"\uffff\1\105\32\uffff\1\105\17\uffff\2\105\44\uffff\1\105",
			"\1\106",
			"\1\uffff",
			"\1\107",
			"\1\uffff",
			"\1\110",
			"\1\uffff",
			"\1\111",
			"\1\uffff",
			"\1\112\u01ce\uffff\1\113",
			"\1\114",
			"\1\uffff",
			"\1\115\u01ce\uffff\1\116",
			"\1\117\144\uffff\1\117\166\uffff\1\117",
			"\1\uffff",
			"\1\120",
			"\1\uffff",
			"\1\121",
			"\1\uffff",
			"\1\122",
			"\1\uffff",
			"\1\123\u008c\uffff\1\123",
			"\1\uffff",
			"\1\124",
			"\1\uffff",
			"\1\125\2\uffff\1\125\76\uffff\1\125\30\uffff\1\125\54\uffff\1\125\u012b"+
			"\uffff\1\125",
			"\1\uffff",
			"\1\126\u008c\uffff\1\126",
			"\1\uffff",
			"\1\127\u008c\uffff\1\127",
			"\1\uffff",
			"\1\100",
			"\1\130",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\131\2\uffff\1\131\22\uffff\1\131\2\uffff\1\131\111\uffff\10\131\37"+
			"\uffff\1\131\57\uffff\2\131\52\uffff\2\131\2\uffff\1\131\6\uffff\1\131"+
			"\7\uffff\1\131\13\uffff\1\131\47\uffff\1\131\4\uffff\2\131\5\uffff\1"+
			"\131\2\uffff\3\131\46\uffff\2\131\u00dc\uffff\1\131\64\uffff\1\131\32"+
			"\uffff\1\131\17\uffff\2\131\44\uffff\1\131",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\132",
			"\1\uffff",
			"\1\uffff",
			"\1\133",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\134\u01da\uffff\1\135",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\136",
			"\1\uffff",
			"\1\134\u01da\uffff\1\137",
			"\1\uffff"
	};

	static final short[] DFA426_eot = DFA.unpackEncodedString(DFA426_eotS);
	static final short[] DFA426_eof = DFA.unpackEncodedString(DFA426_eofS);
	static final char[] DFA426_min = DFA.unpackEncodedStringToUnsignedChars(DFA426_minS);
	static final char[] DFA426_max = DFA.unpackEncodedStringToUnsignedChars(DFA426_maxS);
	static final short[] DFA426_accept = DFA.unpackEncodedString(DFA426_acceptS);
	static final short[] DFA426_special = DFA.unpackEncodedString(DFA426_specialS);
	static final short[][] DFA426_transition;

	static {
		int numStates = DFA426_transitionS.length;
		DFA426_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA426_transition[i] = DFA.unpackEncodedString(DFA426_transitionS[i]);
		}
	}

	protected class DFA426 extends DFA {

		public DFA426(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 426;
			this.eot = DFA426_eot;
			this.eof = DFA426_eof;
			this.min = DFA426_min;
			this.max = DFA426_max;
			this.accept = DFA426_accept;
			this.special = DFA426_special;
			this.transition = DFA426_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 2108:16: ( ( COMMA )? table_option )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA426_65 = input.LA(1);
						 
						int index426_65 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_65);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA426_27 = input.LA(1);
						 
						int index426_27 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_27);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA426_72 = input.LA(1);
						 
						int index426_72 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_72);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA426_38 = input.LA(1);
						 
						int index426_38 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_38);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA426_89 = input.LA(1);
						 
						int index426_89 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_89);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA426_69 = input.LA(1);
						 
						int index426_69 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_69);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA426_76 = input.LA(1);
						 
						int index426_76 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_76);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA426_43 = input.LA(1);
						 
						int index426_43 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_43);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA426_70 = input.LA(1);
						 
						int index426_70 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_70);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA426_34 = input.LA(1);
						 
						int index426_34 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_34);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA426_85 = input.LA(1);
						 
						int index426_85 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_85);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA426_58 = input.LA(1);
						 
						int index426_58 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_58);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA426_82 = input.LA(1);
						 
						int index426_82 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_82);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA426_52 = input.LA(1);
						 
						int index426_52 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_52);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA426_73 = input.LA(1);
						 
						int index426_73 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_73);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA426_40 = input.LA(1);
						 
						int index426_40 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_40);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA426_91 = input.LA(1);
						 
						int index426_91 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_91);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA426_78 = input.LA(1);
						 
						int index426_78 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_78);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA426_67 = input.LA(1);
						 
						int index426_67 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_67);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA426_31 = input.LA(1);
						 
						int index426_31 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_31);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA426_66 = input.LA(1);
						 
						int index426_66 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_66);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA426_29 = input.LA(1);
						 
						int index426_29 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_29);
						if ( s>=0 ) return s;
						break;

					case 22 : 
						int LA426_81 = input.LA(1);
						 
						int index426_81 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_81);
						if ( s>=0 ) return s;
						break;

					case 23 : 
						int LA426_50 = input.LA(1);
						 
						int index426_50 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_50);
						if ( s>=0 ) return s;
						break;

					case 24 : 
						int LA426_84 = input.LA(1);
						 
						int index426_84 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_84);
						if ( s>=0 ) return s;
						break;

					case 25 : 
						int LA426_56 = input.LA(1);
						 
						int index426_56 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_56);
						if ( s>=0 ) return s;
						break;

					case 26 : 
						int LA426_71 = input.LA(1);
						 
						int index426_71 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_71);
						if ( s>=0 ) return s;
						break;

					case 27 : 
						int LA426_36 = input.LA(1);
						 
						int index426_36 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_36);
						if ( s>=0 ) return s;
						break;

					case 28 : 
						int LA426_87 = input.LA(1);
						 
						int index426_87 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_87);
						if ( s>=0 ) return s;
						break;

					case 29 : 
						int LA426_62 = input.LA(1);
						 
						int index426_62 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_62);
						if ( s>=0 ) return s;
						break;

					case 30 : 
						int LA426_86 = input.LA(1);
						 
						int index426_86 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_86);
						if ( s>=0 ) return s;
						break;

					case 31 : 
						int LA426_60 = input.LA(1);
						 
						int index426_60 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_60);
						if ( s>=0 ) return s;
						break;

					case 32 : 
						int LA426_95 = input.LA(1);
						 
						int index426_95 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_95);
						if ( s>=0 ) return s;
						break;

					case 33 : 
						int LA426_93 = input.LA(1);
						 
						int index426_93 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_93);
						if ( s>=0 ) return s;
						break;

					case 34 : 
						int LA426_90 = input.LA(1);
						 
						int index426_90 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_90);
						if ( s>=0 ) return s;
						break;

					case 35 : 
						int LA426_75 = input.LA(1);
						 
						int index426_75 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_75);
						if ( s>=0 ) return s;
						break;

					case 36 : 
						int LA426_80 = input.LA(1);
						 
						int index426_80 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_80);
						if ( s>=0 ) return s;
						break;

					case 37 : 
						int LA426_48 = input.LA(1);
						 
						int index426_48 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_48);
						if ( s>=0 ) return s;
						break;

					case 38 : 
						int LA426_83 = input.LA(1);
						 
						int index426_83 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_83);
						if ( s>=0 ) return s;
						break;

					case 39 : 
						int LA426_79 = input.LA(1);
						 
						int index426_79 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_79);
						if ( s>=0 ) return s;
						break;

					case 40 : 
						int LA426_54 = input.LA(1);
						 
						int index426_54 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_54);
						if ( s>=0 ) return s;
						break;

					case 41 : 
						int LA426_46 = input.LA(1);
						 
						int index426_46 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_SQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_46);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 426, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	public static final BitSet FOLLOW_BINARY_in_cast_data_type20627 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_cast_data_type20630 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CHAR_in_cast_data_type20639 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_cast_data_type20642 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DATE_SYM_in_cast_data_type20651 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DATETIME_in_cast_data_type20657 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DECIMAL_SYM_in_cast_data_type20664 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_cast_data_type20668 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_cast_data_type20671 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_cast_data_type20673 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SIGNED_SYM_in_cast_data_type20684 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_INTEGER_SYM_in_cast_data_type20687 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIME_SYM_in_cast_data_type20695 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_UNSIGNED_SYM_in_cast_data_type20701 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_INTEGER_SYM_in_cast_data_type20704 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IN_SYM_in_search_modifier20719 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_NATURAL_in_search_modifier20721 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_LANGUAGE_in_search_modifier20723 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_MODE_SYM_in_search_modifier20725 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IN_SYM_in_search_modifier20733 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_NATURAL_in_search_modifier20735 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_LANGUAGE_in_search_modifier20737 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_MODE_SYM_in_search_modifier20739 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_WITH_in_search_modifier20741 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_QUERY_SYM_in_search_modifier20743 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_EXPANSION_SYM_in_search_modifier20745 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IN_SYM_in_search_modifier20753 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_BOOLEAN_SYM_in_search_modifier20755 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_MODE_SYM_in_search_modifier20757 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WITH_in_search_modifier20765 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_QUERY_SYM_in_search_modifier20767 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_EXPANSION_SYM_in_search_modifier20769 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TEXT_STRING_in_string_literal20938 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_number_literal20956 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_HEX_DIGIT_in_hex_literal20973 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BIT_NUM_in_bit_literal20994 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_string_literal_in_literal_value21012 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_number_literal_in_literal_value21016 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_hex_literal_in_literal_value21020 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_boolean_literal_in_literal_value21024 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_literal_in_literal_value21028 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NULL_SYM_in_literal_value21032 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_number_functions_in_functionList21051 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_char_functions_in_functionList21058 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_time_functions_in_functionList21065 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_other_functions_in_functionList21071 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_schema_name22151 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_table_name22169 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_engine_name22186 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_column_name22203 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_view_name22220 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_parser_name22237 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_index_name22255 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_partition_name22273 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_partition_logical_name22289 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_constraint_symbol_name22305 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_foreign_key_symbol_name22320 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_collation_name22338 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_event_name22356 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_user_name22373 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_function_name22390 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_procedure_name22408 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_server_name22425 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_wrapper_name22443 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AS_SYM_in_alias22462 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_ID_in_alias22469 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exp_factor1_in_expression22486 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_OR_SYM_in_expression22490 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_exp_factor1_in_expression22492 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_exp_factor2_in_exp_factor122503 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_XOR_in_exp_factor122507 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_exp_factor2_in_exp_factor122509 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_exp_factor3_in_exp_factor222520 = new BitSet(new long[]{0x0000000000200002L});
	public static final BitSet FOLLOW_AND_SYM_in_exp_factor222524 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_exp_factor3_in_exp_factor222526 = new BitSet(new long[]{0x0000000000200002L});
	public static final BitSet FOLLOW_NOT_SYM_in_exp_factor322538 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_exp_factor4_in_exp_factor322542 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bool_primary_in_exp_factor422550 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_IS_SYM_in_exp_factor422554 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_NOT_SYM_in_exp_factor422557 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_boolean_literal_in_exp_factor422562 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NULL_SYM_in_exp_factor422564 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_predicate_in_bool_primary22581 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000804L,0x0200000020000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_relational_op_in_bool_primary22583 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_predicate_in_bool_primary22585 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_predicate_in_bool_primary22596 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000804L,0x0200000020000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_relational_op_in_bool_primary22598 = new BitSet(new long[]{0x0000000000420000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_subquery_in_bool_primary22611 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOT_SYM_in_bool_primary22621 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_EXISTS_in_bool_primary22624 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_subquery_in_bool_primary22626 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_predicate_in_bool_primary22634 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_expr_in_predicate22648 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_NOT_SYM_in_predicate22651 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_IN_SYM_in_predicate22655 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_subquery_in_predicate22658 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_list_in_predicate22662 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_expr_in_predicate22673 = new BitSet(new long[]{0x0000100000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_NOT_SYM_in_predicate22676 = new BitSet(new long[]{0x0000100000000000L});
	public static final BitSet FOLLOW_BETWEEN_in_predicate22680 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_predicate22682 = new BitSet(new long[]{0x0000000000200000L});
	public static final BitSet FOLLOW_AND_SYM_in_predicate22684 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_predicate_in_predicate22686 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_expr_in_predicate22697 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_SOUNDS_SYM_in_predicate22699 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_LIKE_SYM_in_predicate22701 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_predicate22703 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_expr_in_predicate22714 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_NOT_SYM_in_predicate22717 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_LIKE_SYM_in_predicate22721 = new BitSet(new long[]{0x0178882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x0206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_simple_expr_in_predicate22723 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_ESCAPE_SYM_in_predicate22726 = new BitSet(new long[]{0x0178882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x0206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_simple_expr_in_predicate22728 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_expr_in_predicate22740 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000002000000L});
	public static final BitSet FOLLOW_NOT_SYM_in_predicate22743 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_REGEXP_in_predicate22747 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_predicate22749 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_expr_in_predicate22760 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_factor1_in_bit_expr22773 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_VERTBAR_in_bit_expr22777 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_factor1_in_bit_expr22779 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_factor2_in_factor122791 = new BitSet(new long[]{0x0004000000000002L});
	public static final BitSet FOLLOW_BITAND_in_factor122795 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_factor2_in_factor122797 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_factor3_in_factor222809 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000000C0000L});
	public static final BitSet FOLLOW_set_in_factor222813 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_factor3_in_factor222819 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_factor4_in_factor322831 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_set_in_factor322835 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_factor4_in_factor322841 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_factor5_in_factor422853 = new BitSet(new long[]{0x0000000020000002L,0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_set_in_factor422857 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_factor5_in_factor422867 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_factor6_in_factor522879 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_set_in_factor522883 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_interval_expr_in_factor522889 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_factor622901 = new BitSet(new long[]{0x0178882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x0206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_simple_expr_in_factor622917 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simple_expr_in_factor622923 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simple_expr_in_factor722932 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_COLLATE_SYM_in_factor722935 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000060000L});
	public static final BitSet FOLLOW_collation_names_in_factor722937 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_literal_value_in_simple_expr22947 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_column_spec_in_simple_expr22954 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_function_call_in_simple_expr22960 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_USER_VAR_in_simple_expr22969 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_list_in_simple_expr22975 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ROW_SYM_in_simple_expr22982 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_expression_list_in_simple_expr22984 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subquery_in_simple_expr22991 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXISTS_in_simple_expr22997 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_subquery_in_simple_expr22999 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_match_against_statement_in_simple_expr23008 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_case_when_statement_in_simple_expr23014 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_interval_expr_in_simple_expr23020 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_functionList_in_function_call23036 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_function_call23040 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1712802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_function_call23043 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_function_call23046 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_function_call23048 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_function_call23054 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CAST_SYM_in_function_call23070 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_function_call23072 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_function_call23074 = new BitSet(new long[]{0x0000000040000000L});
	public static final BitSet FOLLOW_AS_SYM_in_function_call23076 = new BitSet(new long[]{0x0001000000000000L,0x0000000000002000L,0x0000000400440000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0000002000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_cast_data_type_in_function_call23078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_function_call23080 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CONVERT_SYM_in_function_call23092 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_function_call23094 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_function_call23096 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_function_call23098 = new BitSet(new long[]{0x0001000000000000L,0x0000000000002000L,0x0000000400440000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0000002000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_cast_data_type_in_function_call23100 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_function_call23102 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CONVERT_SYM_in_function_call23114 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_function_call23116 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_function_call23118 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_USING_SYM_in_function_call23120 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_transcoding_name_in_function_call23122 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_function_call23124 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_group_functions_in_function_call23136 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_function_call23138 = new BitSet(new long[]{0x01798821B4021B50L,0x03B809800501A3C0L,0x001030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_function_call23155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_function_call23157 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_case_when_statement1_in_case_when_statement23176 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_case_when_statement2_in_case_when_statement23180 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CASE_SYM_in_case_when_statement123195 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_WHEN_SYM_in_case_when_statement123207 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_case_when_statement123209 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_THEN_SYM_in_case_when_statement123211 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_case_when_statement123213 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000202L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_ELSE_SYM_in_case_when_statement123228 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_case_when_statement123230 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_END_SYM_in_case_when_statement123243 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CASE_SYM_in_case_when_statement223258 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_case_when_statement223260 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_WHEN_SYM_in_case_when_statement223272 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_case_when_statement223274 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_THEN_SYM_in_case_when_statement223276 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_case_when_statement223278 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000202L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_ELSE_SYM_in_case_when_statement223293 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_case_when_statement223295 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_END_SYM_in_case_when_statement223308 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MATCH_in_match_against_statement23320 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_spec_in_match_against_statement23323 = new BitSet(new long[]{0x0000000000004000L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_match_against_statement23326 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_spec_in_match_against_statement23328 = new BitSet(new long[]{0x0000000000004000L,0x0000000080000000L});
	public static final BitSet FOLLOW_AGAINST_in_match_against_statement23334 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_match_against_statement23337 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_search_modifier_in_match_against_statement23340 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_schema_name_in_column_spec23359 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_DOT_in_column_spec23361 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_column_spec23366 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_DOT_in_column_spec23368 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_name_in_column_spec23373 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_expression_list23383 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_expression_list23385 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_expression_list23389 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_expression_list23391 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_expression_list23396 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INTERVAL_SYM_in_interval_expr23406 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_interval_expr23408 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00000000F8000000L,0x0000000000000000L,0x000000000F000000L,0x0000000000000000L,0x000201C000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000006L,0x0000000000000000L,0x0004000000000000L,0x0000000000000050L});
	public static final BitSet FOLLOW_interval_unit_in_interval_expr23410 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_reference_in_table_references23432 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_table_references23436 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_table_reference_in_table_references23438 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_table_factor1_in_table_reference23450 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_atom_in_table_reference23454 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_factor2_in_table_factor123463 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000040000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_JOIN_SYM_in_table_factor123477 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_table_atom_in_table_factor123481 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_join_condition_in_table_factor123484 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_factor3_in_table_factor223499 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_STRAIGHT_JOIN_in_table_factor223504 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_table_atom_in_table_factor223508 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_ON_in_table_factor223511 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_table_factor223513 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_factor4_in_table_factor323528 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_set_in_table_factor323533 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_OUTER_in_table_factor323540 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_JOIN_SYM_in_table_factor323544 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_table_factor4_in_table_factor323548 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_join_condition_in_table_factor323550 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_atom_in_table_factor423563 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_NATURAL_in_table_factor423568 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000004L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_set_in_table_factor423572 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_OUTER_in_table_factor423579 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_JOIN_SYM_in_table_factor423586 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_table_atom_in_table_factor423590 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_spec_in_table_atom23606 = new BitSet(new long[]{0x0000000040000002L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000440000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_partition_clause_in_table_atom23609 = new BitSet(new long[]{0x0000000040000002L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000440000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_alias_in_table_atom23614 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_index_hint_list_in_table_atom23619 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subquery_in_table_atom23631 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_alias_in_table_atom23633 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_table_atom23643 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_table_references_in_table_atom23645 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_table_atom23647 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OJ_SYM_in_table_atom23657 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_table_reference_in_table_atom23659 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_LEFT_in_table_atom23661 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_OUTER_in_table_atom23663 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_JOIN_SYM_in_table_atom23665 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_table_reference_in_table_atom23667 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_ON_in_table_atom23669 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_table_atom23671 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ON_in_join_condition23685 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_join_condition23689 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_USING_SYM_in_join_condition23695 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_column_list_in_join_condition23699 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_index_hint_in_index_hint_list23709 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_index_hint_list23712 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_index_hint_in_index_hint_list23714 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_set_in_index_options23725 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_FOR_SYM_in_index_options23736 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000004L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_JOIN_SYM_in_index_options23740 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ORDER_SYM_in_index_options23746 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_BY_SYM_in_index_options23748 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GROUP_SYM_in_index_options23754 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_BY_SYM_in_index_options23756 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_USE_SYM_in_index_hint23773 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_index_options_in_index_hint23778 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_index_hint23780 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_index_list_in_index_hint23783 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_index_hint23787 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IGNORE_SYM_in_index_hint23793 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_index_options_in_index_hint23795 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_index_hint23797 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_list_in_index_hint23799 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_index_hint23801 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FORCE_SYM_in_index_hint23807 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_index_options_in_index_hint23810 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_index_hint23812 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_list_in_index_hint23814 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_index_hint23816 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_index_name_in_index_list23825 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_index_list23828 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_name_in_index_list23830 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_PARTITION_SYM_in_partition_clause23841 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_partition_clause23843 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_partition_names_in_partition_clause23845 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_partition_clause23847 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_partition_name_in_partition_names23855 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_partition_names23858 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_partition_name_in_partition_names23860 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_SHIFT_LEFT_in_root_statement23879 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_SHIFT_RIGHT_in_root_statement23881 = new BitSet(new long[]{0x0000000000080000L,0x0000000000000008L,0x0600040000000010L,0x0000000000000000L,0x0000400000002000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002100000000L,0x0000000000000020L,0x0040000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_data_manipulation_statements_in_root_statement23891 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_data_definition_statements_in_root_statement23895 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_SEMI_in_root_statement23904 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_select_statement_in_data_manipulation_statements23918 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_delete_statements_in_data_manipulation_statements23924 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_insert_statements_in_data_manipulation_statements23930 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_update_statements_in_data_manipulation_statements23936 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_call_statement_in_data_manipulation_statements23943 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_do_statement_in_data_manipulation_statements23949 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_handler_statements_in_data_manipulation_statements23955 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_load_data_statement_in_data_manipulation_statements23961 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_load_xml_statement_in_data_manipulation_statements23967 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_replace_statement_in_data_manipulation_statements23973 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_database_statement_in_data_definition_statements23986 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_database_statements_in_data_definition_statements23992 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_database_statement_in_data_definition_statements23998 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_event_statement_in_data_definition_statements24007 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_event_statement_in_data_definition_statements24013 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_event_statement_in_data_definition_statements24019 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_server_statement_in_data_definition_statements24061 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_server_statement_in_data_definition_statements24067 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_server_statement_in_data_definition_statements24073 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_table_statement_in_data_definition_statements24082 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_table_statement_in_data_definition_statements24088 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_table_statement_in_data_definition_statements24094 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_view_statement_in_data_definition_statements24103 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_view_statement_in_data_definition_statements24109 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rename_table_statement_in_data_definition_statements24115 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_view_statement_in_data_definition_statements24121 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_truncate_table_statement_in_data_definition_statements24127 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_index_statement_in_data_definition_statements24136 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_index_statement_in_data_definition_statements24142 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_select_expression_in_select_statement24168 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_UNION_SYM_in_select_statement24173 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_ALL_in_select_statement24176 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_select_expression_in_select_statement24181 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_select_part_in_select_expression24195 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0024000000000000L,0x0004000000000000L,0x0000040100000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_from_part_in_select_expression24206 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0004000000008400L,0x0000040100000000L,0x0000000000000000L,0x0000010004000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_partition_clause_in_select_expression24214 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0004000000008400L,0x0000040100000000L,0x0000000000000000L,0x0000000004000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_where_clause_in_select_expression24225 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0004000000008400L,0x0000040100000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_groupby_clause_in_select_expression24237 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0004000000008000L,0x0000040100000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_having_clause_in_select_expression24248 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0004000000000000L,0x0000040100000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_orderby_clause_in_select_expression24266 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0004000000000000L,0x0000040100000000L});
	public static final BitSet FOLLOW_limit_clause_in_select_expression24275 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_FOR_SYM_in_select_expression24286 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_UPDATE_in_select_expression24288 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LOCK_in_select_expression24294 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_IN_SYM_in_select_expression24296 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_SHARE_SYM_in_select_expression24298 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_MODE_SYM_in_select_expression24300 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SELECT_in_select_part24315 = new BitSet(new long[]{0x01798821B4021B50L,0x03B809800501A3C0L,0x003030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3412C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7809F82412402013L,0x0070387F11060F16L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_HIGH_PRIORITY_in_select_part24343 = new BitSet(new long[]{0x01798821B4001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7809F82412402013L,0x0070387F11060F16L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_STRAIGHT_JOIN_in_select_part24350 = new BitSet(new long[]{0x01798821B4001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7809F82412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_SQL_SMALL_RESULT_in_select_part24357 = new BitSet(new long[]{0x01798821B4001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808F82412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_SQL_BIG_RESULT_in_select_part24362 = new BitSet(new long[]{0x01798821B4001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808F02412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_SQL_BUFFER_RESULT_in_select_part24367 = new BitSet(new long[]{0x01798821B4001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808E02412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_SQL_CALC_FOUND_ROWS_in_select_part24383 = new BitSet(new long[]{0x01798821B4001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_select_list_in_select_part24390 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FROM_in_from_part24400 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_table_references_in_from_part24404 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WHERE_in_where_clause24419 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_where_clause24423 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GROUP_SYM_in_groupby_clause24433 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_BY_SYM_in_groupby_clause24435 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_groupby_item_in_groupby_clause24439 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_groupby_clause24442 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_groupby_item_in_groupby_clause24444 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_WITH_in_groupby_clause24449 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_ROLLUP_SYM_in_groupby_clause24451 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_column_spec_in_groupby_item24460 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_groupby_item24464 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_expr_in_groupby_item24468 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_HAVING_in_having_clause24478 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_having_clause24480 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ORDER_SYM_in_orderby_clause24490 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_BY_SYM_in_orderby_clause24492 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_orderby_item_in_orderby_clause24496 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_orderby_clause24499 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_orderby_item_in_orderby_clause24501 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_groupby_item_in_orderby_item24510 = new BitSet(new long[]{0x0000000002000002L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_LIMIT_in_limit_clause24529 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_offset_in_limit_clause24533 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_limit_clause24535 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_row_count_in_limit_clause24539 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_row_count_in_limit_clause24545 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_OFFSET_SYM_in_limit_clause24547 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_offset_in_limit_clause24549 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_offset24559 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_row_count24567 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_displayed_column_in_select_list24581 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_select_list24585 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_displayed_column_in_select_list24589 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_ASTERISK_in_select_list24599 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_column_list24612 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_spec_in_column_list24614 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_column_list24617 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_spec_in_column_list24619 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_list24623 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_subquery24633 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_select_statement_in_subquery24635 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_subquery24637 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_schema_name_in_table_spec24649 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_DOT_in_table_spec24651 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_table_spec24656 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_spec_in_displayed_column24669 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_DOT_in_displayed_column24671 = new BitSet(new long[]{0x0000000020000000L});
	public static final BitSet FOLLOW_ASTERISK_in_displayed_column24673 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_column_spec_in_displayed_column24685 = new BitSet(new long[]{0x0000000040000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_alias_in_displayed_column24688 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_expr_in_displayed_column24703 = new BitSet(new long[]{0x0000000040000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_alias_in_displayed_column24706 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DELETE_SYM_in_delete_statements24727 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000440000000L,0x0040000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_LOW_PRIORITY_in_delete_statements24730 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000440000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_QUICK_in_delete_statements24735 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000440000000L});
	public static final BitSet FOLLOW_IGNORE_SYM_in_delete_statements24740 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_delete_single_table_statement_in_delete_statements24748 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_delete_multiple_table_statement1_in_delete_statements24752 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_delete_multiple_table_statement2_in_delete_statements24756 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FROM_in_delete_single_table_statement24767 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_spec_in_delete_single_table_statement24769 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000010004000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_partition_clause_in_delete_single_table_statement24774 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000004000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_where_clause_in_delete_single_table_statement24781 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_orderby_clause_in_delete_single_table_statement24788 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_limit_clause_in_delete_single_table_statement24795 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_spec_in_delete_multiple_table_statement124806 = new BitSet(new long[]{0x0000000000040000L,0x0000000080000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_ALL_FIELDS_in_delete_multiple_table_statement124809 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_COMMA_in_delete_multiple_table_statement124814 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_spec_in_delete_multiple_table_statement124816 = new BitSet(new long[]{0x0000000000040000L,0x0000000080000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_ALL_FIELDS_in_delete_multiple_table_statement124819 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_FROM_in_delete_multiple_table_statement124827 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_table_references_in_delete_multiple_table_statement124829 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_where_clause_in_delete_multiple_table_statement124834 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FROM_in_delete_multiple_table_statement224845 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_spec_in_delete_multiple_table_statement224847 = new BitSet(new long[]{0x0000000000040000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ALL_FIELDS_in_delete_multiple_table_statement224850 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_COMMA_in_delete_multiple_table_statement224855 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_spec_in_delete_multiple_table_statement224857 = new BitSet(new long[]{0x0000000000040000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ALL_FIELDS_in_delete_multiple_table_statement224860 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_USING_SYM_in_delete_multiple_table_statement224868 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_table_references_in_delete_multiple_table_statement224870 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_where_clause_in_delete_multiple_table_statement224875 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_insert_statement1_in_insert_statements24893 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_insert_statement2_in_insert_statements24897 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_insert_statement3_in_insert_statements24901 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INSERT_in_insert_header24911 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000440200000L,0x0040000000000000L});
	public static final BitSet FOLLOW_IGNORE_SYM_in_insert_header24923 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000040000000L});
	public static final BitSet FOLLOW_INTO_in_insert_header24930 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_spec_in_insert_header24934 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_partition_clause_in_insert_header24940 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ON_in_insert_subfix24952 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_DUPLICATE_SYM_in_insert_subfix24954 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_KEY_SYM_in_insert_subfix24956 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_UPDATE_in_insert_subfix24958 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_spec_in_insert_subfix24960 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_EQ_SYM_in_insert_subfix24962 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_insert_subfix24964 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_insert_subfix24967 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_spec_in_insert_subfix24969 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_EQ_SYM_in_insert_subfix24971 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_insert_subfix24973 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_insert_header_in_insert_statement124985 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001800000000L});
	public static final BitSet FOLLOW_column_list_in_insert_statement124990 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001800000000L});
	public static final BitSet FOLLOW_value_list_clause_in_insert_statement124997 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_insert_subfix_in_insert_statement125003 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_value_list_clause25014 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_column_value_list_in_value_list_clause25022 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_value_list_clause25025 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_column_value_list_in_value_list_clause25027 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_LPAREN_in_column_value_list25036 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_column_value_list25039 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_value_list25041 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_column_value_list25045 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_column_value_list25048 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_value_list25050 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_value_list25056 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_insert_header_in_insert_statement225066 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_set_columns_cluase_in_insert_statement225070 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_insert_subfix_in_insert_statement225076 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SET_SYM_in_set_columns_cluase25086 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_set_column_cluase_in_set_columns_cluase25088 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_set_columns_cluase25092 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_set_column_cluase_in_set_columns_cluase25094 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_column_spec_in_set_column_cluase25104 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_EQ_SYM_in_set_column_cluase25106 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_set_column_cluase25109 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_set_column_cluase25111 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_insert_header_in_insert_statement325122 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_column_list_in_insert_statement325127 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_select_expression_in_insert_statement325134 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_insert_subfix_in_insert_statement325140 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_single_table_update_statement_in_update_statements25161 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_multiple_table_update_statement_in_update_statements25165 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_UPDATE_in_single_table_update_statement25174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000440000000L,0x0140000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_LOW_PRIORITY_in_single_table_update_statement25177 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000440000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_IGNORE_SYM_in_single_table_update_statement25182 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_table_reference_in_single_table_update_statement25186 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_set_columns_cluase_in_single_table_update_statement25190 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000004000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_where_clause_in_single_table_update_statement25195 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_orderby_clause_in_single_table_update_statement25202 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_limit_clause_in_single_table_update_statement25209 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_UPDATE_in_multiple_table_update_statement25222 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000440000000L,0x0140000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_LOW_PRIORITY_in_multiple_table_update_statement25225 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000440000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_IGNORE_SYM_in_multiple_table_update_statement25230 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_table_references_in_multiple_table_update_statement25234 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_set_columns_cluase_in_multiple_table_update_statement25238 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_where_clause_in_multiple_table_update_statement25243 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CALL_SYM_in_call_statement25261 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_procedure_name_in_call_statement25263 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_call_statement25266 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1712802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_call_statement25270 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_call_statement25273 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_call_statement25275 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_call_statement25282 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DO_SYM_in_do_statement25300 = new BitSet(new long[]{0x0000000000080000L,0x0000000000000008L,0x0600040000000010L,0x0000000000000000L,0x0000400000002000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002100000000L,0x0000000000040020L,0x0040000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_root_statement_in_do_statement25302 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_do_statement25305 = new BitSet(new long[]{0x0000000000080000L,0x0000000000000008L,0x0600040000000010L,0x0000000000000000L,0x0000400000002000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002100000000L,0x0000000000040020L,0x0040000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_root_statement_in_do_statement25307 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_HANDLER_SYM_in_handler_statements25325 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_handler_statements25327 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L,0x0000000000008000L});
	public static final BitSet FOLLOW_open_handler_statement_in_handler_statements25332 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_handler_statement1_in_handler_statements25336 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_handler_statement2_in_handler_statements25340 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_handler_statement3_in_handler_statements25344 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_close_handler_statement_in_handler_statements25348 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OPEN_SYM_in_open_handler_statement25359 = new BitSet(new long[]{0x0000000040000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_alias_in_open_handler_statement25362 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_READ_SYM_in_handler_statement125374 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_name_in_handler_statement125376 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000804L,0x0200000020000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_relational_op_in_handler_statement125378 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_handler_statement125380 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_handler_statement125382 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_handler_statement125385 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_handler_statement125387 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_handler_statement125391 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_where_clause_in_handler_statement125396 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_limit_clause_in_handler_statement125401 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_READ_SYM_in_handler_statement225413 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_name_in_handler_statement225415 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0400000000000001L});
	public static final BitSet FOLLOW_set_in_handler_statement225417 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_where_clause_in_handler_statement225436 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_limit_clause_in_handler_statement225441 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_READ_SYM_in_handler_statement325453 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_set_in_handler_statement325455 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_where_clause_in_handler_statement325466 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_limit_clause_in_handler_statement325471 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLOSE_SYM_in_close_handler_statement25483 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LOAD_in_load_data_statement25500 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_DATA_SYM_in_load_data_statement25502 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0040010000000000L});
	public static final BitSet FOLLOW_LOCAL_SYM_in_load_data_statement25514 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_INFILE_in_load_data_statement25518 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_load_data_statement25520 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_INTO_in_load_data_statement25535 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_TABLE_in_load_data_statement25537 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_spec_in_load_data_statement25539 = new BitSet(new long[]{0x0000000000000002L,0x0000000010004000L,0x0000000000000000L,0x0000008000000000L,0x0000000400000000L,0x0100000400000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_partition_clause_in_load_data_statement25544 = new BitSet(new long[]{0x0000000000000002L,0x0000000010004000L,0x0000000000000000L,0x0000008000000000L,0x0000000400000000L,0x0100000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_load_data_statement25551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_load_data_statement25553 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_load_data_statement25555 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L,0x0000000000000000L,0x0000008000000000L,0x0000000400000000L,0x0100000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_set_in_load_data_statement25567 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000008020L,0x0000000400000000L,0x0100000400000000L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000004000L,0x0000000008000000L});
	public static final BitSet FOLLOW_TERMINATED_in_load_data_statement25580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_BY_SYM_in_load_data_statement25582 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_load_data_statement25584 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000008020L,0x0000000400000000L,0x0100000400000000L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_OPTIONALLY_in_load_data_statement25594 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_ENCLOSED_in_load_data_statement25598 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_BY_SYM_in_load_data_statement25600 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_load_data_statement25602 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L,0x0000000400000000L,0x0100000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ESCAPED_in_load_data_statement25611 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_BY_SYM_in_load_data_statement25613 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_load_data_statement25615 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0100000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LINES_in_load_data_statement25632 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000004000L,0x0000000008000000L});
	public static final BitSet FOLLOW_STARTING_in_load_data_statement25639 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_BY_SYM_in_load_data_statement25641 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_load_data_statement25643 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000008000000L});
	public static final BitSet FOLLOW_TERMINATED_in_load_data_statement25652 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_BY_SYM_in_load_data_statement25654 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_load_data_statement25656 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_IGNORE_SYM_in_load_data_statement25668 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_load_data_statement25670 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_set_in_load_data_statement25672 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LPAREN_in_load_data_statement25685 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_column_spec_in_load_data_statement25688 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_USER_VAR_in_load_data_statement25690 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_load_data_statement25694 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_column_spec_in_load_data_statement25697 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_USER_VAR_in_load_data_statement25699 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_load_data_statement25704 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_set_columns_cluase_in_load_data_statement25711 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LOAD_in_load_xml_statement25729 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_XML_SYM_in_load_xml_statement25731 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0040010000000000L});
	public static final BitSet FOLLOW_LOCAL_SYM_in_load_xml_statement25743 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_INFILE_in_load_xml_statement25747 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_load_xml_statement25749 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_INTO_in_load_xml_statement25764 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_TABLE_in_load_xml_statement25766 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_spec_in_load_xml_statement25768 = new BitSet(new long[]{0x0000000000000002L,0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0100000000000000L,0x0000000000000000L,0x0000010000000000L,0x0040000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_partition_clause_in_load_xml_statement25773 = new BitSet(new long[]{0x0000000000000002L,0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_load_xml_statement25780 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_load_xml_statement25782 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_load_xml_statement25784 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ROWS_SYM_in_load_xml_statement25791 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_IDENTIFIED_SYM_in_load_xml_statement25793 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_BY_SYM_in_load_xml_statement25795 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_load_xml_statement25797 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_IGNORE_SYM_in_load_xml_statement25804 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_load_xml_statement25806 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_set_in_load_xml_statement25808 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LPAREN_in_load_xml_statement25821 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_column_spec_in_load_xml_statement25824 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_USER_VAR_in_load_xml_statement25826 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_load_xml_statement25830 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_column_spec_in_load_xml_statement25833 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_USER_VAR_in_load_xml_statement25835 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_load_xml_statement25840 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_set_columns_cluase_in_load_xml_statement25847 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_replace_statement_header_in_replace_statement25865 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004020L,0x0000000000000000L,0x0000001800000000L});
	public static final BitSet FOLLOW_replace_statement1_in_replace_statement25871 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_replace_statement2_in_replace_statement25875 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_replace_statement3_in_replace_statement25879 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REPLACE_in_replace_statement_header25891 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0020000040000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_INTO_in_replace_statement_header25905 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_replace_statement_header25909 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_partition_clause_in_replace_statement_header25914 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_column_list_in_replace_statement125927 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001800000000L});
	public static final BitSet FOLLOW_value_list_clause_in_replace_statement125933 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_columns_cluase_in_replace_statement225943 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_column_list_in_replace_statement325954 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_select_statement_in_replace_statement325960 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CREATE_in_create_database_statement25977 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_set_in_create_database_statement25979 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000140000000L});
	public static final BitSet FOLLOW_IF_in_create_database_statement25988 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_NOT_SYM_in_create_database_statement25990 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_EXISTS_in_create_database_statement25992 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_schema_name_in_create_database_statement25996 = new BitSet(new long[]{0x0000000000000002L,0x0000000002004000L,0x0000002000000000L});
	public static final BitSet FOLLOW_create_specification_in_create_database_statement26002 = new BitSet(new long[]{0x0000000000000002L,0x0000000082004000L,0x0000002000000000L});
	public static final BitSet FOLLOW_COMMA_in_create_database_statement26005 = new BitSet(new long[]{0x0000000000000000L,0x0000000002004000L,0x0000002000000000L});
	public static final BitSet FOLLOW_create_specification_in_create_database_statement26007 = new BitSet(new long[]{0x0000000000000002L,0x0000000082004000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_create_specification26022 = new BitSet(new long[]{0x0000000000000000L,0x0000000002004000L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_create_specification26038 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_create_specification26040 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000062000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_create_specification26043 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_create_specification26047 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COLLATE_SYM_in_create_specification26065 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000040000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_create_specification26068 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_collation_name_in_create_specification26072 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_database_statement1_in_alter_database_statements26091 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_database_statement2_in_alter_database_statements26095 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALTER_in_alter_database_statement126104 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_set_in_alter_database_statement126106 = new BitSet(new long[]{0x0000000000000000L,0x0000000002004000L,0x0000002000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_schema_name_in_alter_database_statement126115 = new BitSet(new long[]{0x0000000000000000L,0x0000000002004000L,0x0000002000000000L});
	public static final BitSet FOLLOW_alter_database_specification_in_alter_database_statement126121 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALTER_in_alter_database_statement226130 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_set_in_alter_database_statement226132 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_schema_name_in_alter_database_statement226140 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_UPGRADE_SYM_in_alter_database_statement226144 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_DATA_SYM_in_alter_database_statement226146 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_DIRECTORY_SYM_in_alter_database_statement226148 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_NAME_SYM_in_alter_database_statement226150 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_alter_database_specification26160 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_alter_database_specification26164 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_alter_database_specification26166 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000062000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_alter_database_specification26169 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_alter_database_specification26173 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_alter_database_specification26183 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_COLLATE_SYM_in_alter_database_specification26187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000060000L});
	public static final BitSet FOLLOW_EQ_SYM_in_alter_database_specification26190 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000060000L});
	public static final BitSet FOLLOW_collation_names_in_alter_database_specification26194 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DROP_in_drop_database_statement26207 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_set_in_drop_database_statement26209 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000140000000L});
	public static final BitSet FOLLOW_IF_in_drop_database_statement26218 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_EXISTS_in_drop_database_statement26220 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_schema_name_in_drop_database_statement26224 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CREATE_in_create_event_statement26240 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_DEFINER_in_create_event_statement26245 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_EQ_SYM_in_create_event_statement26247 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_user_name_in_create_event_statement26251 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_CURRENT_USER_in_create_event_statement26255 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_EVENT_SYM_in_create_event_statement26263 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000140000000L});
	public static final BitSet FOLLOW_IF_in_create_event_statement26268 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_NOT_SYM_in_create_event_statement26270 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_EXISTS_in_create_event_statement26272 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_event_name_in_create_event_statement26278 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_ON_in_create_event_statement26282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_SCHEDULE_SYM_in_create_event_statement26284 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_schedule_definition_in_create_event_statement26286 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L,0x0202000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_ON_in_create_event_statement26291 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_COMPLETION_SYM_in_create_event_statement26293 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000010L});
	public static final BitSet FOLLOW_NOT_SYM_in_create_event_statement26296 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_PRESERVE_SYM_in_create_event_statement26300 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L,0x0202000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_ENABLE_SYM_in_create_event_statement26308 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_DISABLE_SYM_in_create_event_statement26312 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_DISABLE_SYM_in_create_event_statement26317 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_ON_in_create_event_statement26319 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_SLAVE_in_create_event_statement26321 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_COMMENT_SYM_in_create_event_statement26330 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_create_event_statement26332 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_do_statement_in_create_event_statement26338 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AT_SYM_in_schedule_definition26349 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_timestamp_in_schedule_definition26351 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_PLUS_in_schedule_definition26354 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_INTERVAL_SYM_in_schedule_definition26356 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_interval_in_schedule_definition26358 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_EVERY_SYM_in_schedule_definition26373 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_interval_in_schedule_definition26375 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_STARTS_SYM_in_schedule_definition26383 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_timestamp_in_schedule_definition26385 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_PLUS_in_schedule_definition26388 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_INTERVAL_SYM_in_schedule_definition26390 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_interval_in_schedule_definition26392 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_ENDS_SYM_in_schedule_definition26403 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_timestamp_in_schedule_definition26405 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_PLUS_in_schedule_definition26408 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_INTERVAL_SYM_in_schedule_definition26410 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_interval_in_schedule_definition26412 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_interval26426 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00000000E8000000L,0x0000000000000000L,0x000000000D000000L,0x0000000000000000L,0x0002014000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000002L,0x0000000000000000L,0x0004000000000000L,0x0000000000000050L});
	public static final BitSet FOLLOW_set_in_interval26428 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CURRENT_TIMESTAMP_in_timestamp26520 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALTER_in_alter_event_statement26539 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_DEFINER_in_alter_event_statement26544 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_EQ_SYM_in_alter_event_statement26546 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_user_name_in_alter_event_statement26550 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_CURRENT_USER_in_alter_event_statement26554 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_EVENT_SYM_in_alter_event_statement26562 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_event_name_in_alter_event_statement26564 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0202000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L,0x0000000100000000L});
	public static final BitSet FOLLOW_ON_in_alter_event_statement26569 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_SCHEDULE_SYM_in_alter_event_statement26571 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_schedule_definition_in_alter_event_statement26573 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0202000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L,0x0000000100000000L});
	public static final BitSet FOLLOW_ON_in_alter_event_statement26580 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_COMPLETION_SYM_in_alter_event_statement26582 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000010L});
	public static final BitSet FOLLOW_NOT_SYM_in_alter_event_statement26585 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_PRESERVE_SYM_in_alter_event_statement26589 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0202000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_RENAME_in_alter_event_statement26596 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_TO_SYM_in_alter_event_statement26598 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_event_name_in_alter_event_statement26600 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0202000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_ENABLE_SYM_in_alter_event_statement26608 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_DISABLE_SYM_in_alter_event_statement26612 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_DISABLE_SYM_in_alter_event_statement26617 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_ON_in_alter_event_statement26619 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_SLAVE_in_alter_event_statement26621 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_COMMENT_SYM_in_alter_event_statement26630 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_alter_event_statement26632 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_do_statement_in_alter_event_statement26639 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DROP_in_drop_event_statement26653 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_EVENT_SYM_in_drop_event_statement26655 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000140000000L});
	public static final BitSet FOLLOW_IF_in_drop_event_statement26658 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_EXISTS_in_drop_event_statement26660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_event_name_in_drop_event_statement26664 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CREATE_in_create_index_statement26687 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_INDEX_SYM_in_create_index_statement26698 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_name_in_create_index_statement26700 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_index_type_in_create_index_statement26705 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_ON_in_create_index_statement26711 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_create_index_statement26713 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_create_index_statement26715 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_create_index_statement26717 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_create_index_statement26720 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_create_index_statement26722 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_create_index_statement26726 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_algorithm_option_in_create_index_statement26731 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_lock_option_in_create_index_statement26735 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_ALGORITHM_SYM_in_algorithm_option26746 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000002000000000L,0x0000000000002000L,0x0000100000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_algorithm_option26749 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_set_in_algorithm_option26753 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LOCK_in_lock_option26768 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000802000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_EQ_SYM_in_lock_option26771 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_set_in_lock_option26775 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DROP_in_drop_index_statement26795 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_INDEX_SYM_in_drop_index_statement26797 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_name_in_drop_index_statement26799 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_ON_in_drop_index_statement26801 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_drop_index_statement26803 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_algorithm_option_in_drop_index_statement26808 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_lock_option_in_drop_index_statement26812 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_CREATE_in_create_server_statement26839 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_SERVER_SYM_in_create_server_statement26841 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_server_name_in_create_server_statement26843 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_FOREIGN_in_create_server_statement26847 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_DATA_SYM_in_create_server_statement26849 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_WRAPPER_SYM_in_create_server_statement26851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_wrapper_name_in_create_server_statement26853 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_OPTIONS_SYM_in_create_server_statement26857 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_create_server_statement26859 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000004000L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0008020080000000L,0x0400000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_create_server_option_in_create_server_statement26861 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_create_server_statement26864 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000004000L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0008020080000000L,0x0400000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_create_server_option_in_create_server_statement26866 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_create_server_statement26870 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_HOST_SYM_in_create_server_option26883 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_string_literal_in_create_server_option26885 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DATABASE_in_create_server_option26895 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_string_literal_in_create_server_option26897 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_USER_in_create_server_option26907 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_string_literal_in_create_server_option26909 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PASSWORD_in_create_server_option26919 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_string_literal_in_create_server_option26921 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SOCKET_SYM_in_create_server_option26931 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_string_literal_in_create_server_option26933 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OWNER_SYM_in_create_server_option26943 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_string_literal_in_create_server_option26945 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PORT_SYM_in_create_server_option26955 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_create_server_option26957 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALTER_in_alter_server_statement26971 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_SERVER_SYM_in_alter_server_statement26973 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_server_name_in_alter_server_statement26975 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_OPTIONS_SYM_in_alter_server_statement26979 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_alter_server_statement26981 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_alter_server_option_in_alter_server_statement26983 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_alter_server_statement26986 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_alter_server_option_in_alter_server_statement26988 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_alter_server_statement26992 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_USER_in_alter_server_option27002 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_set_in_alter_server_option27005 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DROP_in_drop_server_statement27021 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_SERVER_SYM_in_drop_server_statement27023 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000140000000L});
	public static final BitSet FOLLOW_IF_in_drop_server_statement27026 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_EXISTS_in_drop_server_statement27028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_server_name_in_drop_server_statement27032 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_table_statement1_in_create_table_statement27048 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_table_statement2_in_create_table_statement27052 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_table_statement3_in_create_table_statement27056 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CREATE_in_create_table_statement127068 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002100000L});
	public static final BitSet FOLLOW_TEMPORARY_in_create_table_statement127071 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_TABLE_in_create_table_statement127075 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000140000000L});
	public static final BitSet FOLLOW_IF_in_create_table_statement127078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_NOT_SYM_in_create_table_statement127080 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_EXISTS_in_create_table_statement127082 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_create_table_statement127086 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_create_table_statement127090 = new BitSet(new long[]{0x0000000000000000L,0x0000400000040000L,0x0000000000000000L,0x0401000000000000L,0x0000002040000000L,0x0000000000000080L,0x0000000000000000L,0x0800000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_create_definition_in_create_table_statement127092 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_create_table_statement127095 = new BitSet(new long[]{0x0000000000000000L,0x0000400000040000L,0x0000000000000000L,0x0401000000000000L,0x0000002040000000L,0x0000000000000080L,0x0000000000000000L,0x0800000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_create_definition_in_create_table_statement127097 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_create_table_statement127101 = new BitSet(new long[]{0x0000005000000002L,0x0000100102024000L,0x0000022000010000L,0x0000000000000800L,0x0000802000000000L,0x0000000000000040L,0x0000020000400000L,0x0000030200000000L,0x0080000000000000L,0x0300000000000020L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_table_options_in_create_table_statement127106 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_partition_options_in_create_table_statement127113 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_select_statement_in_create_table_statement127120 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CREATE_in_create_table_statement227132 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002100000L});
	public static final BitSet FOLLOW_TEMPORARY_in_create_table_statement227135 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_TABLE_in_create_table_statement227139 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000140000000L});
	public static final BitSet FOLLOW_IF_in_create_table_statement227142 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_NOT_SYM_in_create_table_statement227144 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_EXISTS_in_create_table_statement227146 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_create_table_statement227150 = new BitSet(new long[]{0x0000005000000000L,0x0000100102024000L,0x0000022000010000L,0x0000000000000800L,0x0000802000000000L,0x0000000000000040L,0x0000020000400000L,0x0000030200000000L,0x0080000000000000L,0x0300000000000020L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_table_options_in_create_table_statement227155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_partition_options_in_create_table_statement227162 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_select_statement_in_create_table_statement227168 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CREATE_in_create_table_statement327178 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002100000L});
	public static final BitSet FOLLOW_TEMPORARY_in_create_table_statement327181 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_TABLE_in_create_table_statement327185 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000140000000L});
	public static final BitSet FOLLOW_IF_in_create_table_statement327188 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_NOT_SYM_in_create_table_statement327190 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_EXISTS_in_create_table_statement327192 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_create_table_statement327196 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000080000000L});
	public static final BitSet FOLLOW_LIKE_SYM_in_create_table_statement327203 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_create_table_statement327205 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_create_table_statement327211 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_LIKE_SYM_in_create_table_statement327213 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_create_table_statement327215 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_create_table_statement327217 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_column_name_in_create_definition27235 = new BitSet(new long[]{0x0281400000000000L,0x0000000000002000L,0x0100000400440000L,0x0000100000001000L,0x0048000000000000L,0x0006000000000000L,0x0000000070000000L,0x0000000000000400L,0x0000000000020000L,0x0000000040004000L,0x000003A220000000L,0x0000006000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_column_definition_in_create_definition27237 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CONSTRAINT_in_create_definition27250 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_constraint_symbol_name_in_create_definition27253 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_PRIMARY_SYM_in_create_definition27259 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_KEY_SYM_in_create_definition27261 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_index_type_in_create_definition27264 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_create_definition27268 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_create_definition27270 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_create_definition27273 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_create_definition27275 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_create_definition27279 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_index_option_in_create_definition27282 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_set_in_create_definition27296 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_index_name_in_create_definition27303 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_index_type_in_create_definition27308 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_create_definition27312 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_create_definition27314 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_create_definition27317 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_create_definition27319 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_create_definition27323 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_index_option_in_create_definition27326 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_CONSTRAINT_in_create_definition27341 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_constraint_symbol_name_in_create_definition27344 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_UNIQUE_SYM_in_create_definition27350 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002040000000L,0x0100000000000080L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_index_name_in_create_definition27360 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_index_type_in_create_definition27365 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_create_definition27369 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_create_definition27371 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_create_definition27374 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_create_definition27376 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_create_definition27380 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_index_option_in_create_definition27383 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_set_in_create_definition27397 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002040000000L,0x0100000000000080L});
	public static final BitSet FOLLOW_index_name_in_create_definition27411 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_create_definition27415 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_create_definition27417 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_create_definition27420 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_create_definition27422 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_create_definition27426 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_index_option_in_create_definition27429 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_CONSTRAINT_in_create_definition27444 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_constraint_symbol_name_in_create_definition27447 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_FOREIGN_in_create_definition27453 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_KEY_SYM_in_create_definition27455 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_index_name_in_create_definition27458 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_create_definition27462 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_create_definition27464 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_create_definition27467 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_create_definition27469 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_create_definition27473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_reference_definition_in_create_definition27475 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CHECK_SYM_in_create_definition27487 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_create_definition27489 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_create_definition27491 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_create_definition27493 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_column_data_type_header_in_column_definition27506 = new BitSet(new long[]{0x0000001000000002L,0x0000000120000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000001000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_AUTO_INCREMENT_in_column_definition27511 = new BitSet(new long[]{0x0000000000000002L,0x0000000120000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000001000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_UNIQUE_SYM_in_column_definition27518 = new BitSet(new long[]{0x0000000000000002L,0x0000000120000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_KEY_SYM_in_column_definition27521 = new BitSet(new long[]{0x0000000000000002L,0x0000000120000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_PRIMARY_SYM_in_column_definition27529 = new BitSet(new long[]{0x0000000000000002L,0x0000000120000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_KEY_SYM_in_column_definition27532 = new BitSet(new long[]{0x0000000000000002L,0x0000000120000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_COMMENT_SYM_in_column_definition27543 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_column_definition27545 = new BitSet(new long[]{0x0000000000000002L,0x0000000020000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_COLUMN_FORMAT_in_column_definition27552 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000002000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_set_in_column_definition27554 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_reference_definition_in_column_definition27567 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOT_SYM_in_null_or_notnull27580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_NULL_SYM_in_null_or_notnull27582 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NULL_SYM_in_null_or_notnull27587 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BIT_SYM_in_column_data_type_header27602 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header27604 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header27606 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header27608 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header27613 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header27618 = new BitSet(new long[]{0x0020000000000000L});
	public static final BitSet FOLLOW_bit_literal_in_column_data_type_header27620 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TINYINT_in_column_data_type_header27634 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header27636 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header27638 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header27640 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_UNSIGNED_SYM_in_column_data_type_header27645 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_ZEROFILL_in_column_data_type_header27650 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header27655 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header27660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header27662 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SMALLINT_in_column_data_type_header27676 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header27678 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header27680 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header27682 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_UNSIGNED_SYM_in_column_data_type_header27687 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_ZEROFILL_in_column_data_type_header27692 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header27697 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header27702 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header27704 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MEDIUMINT_in_column_data_type_header27718 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header27720 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header27722 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header27724 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_UNSIGNED_SYM_in_column_data_type_header27729 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_ZEROFILL_in_column_data_type_header27734 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header27739 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header27744 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header27746 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INT_SYM_in_column_data_type_header27760 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header27762 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header27764 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header27766 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_UNSIGNED_SYM_in_column_data_type_header27771 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_ZEROFILL_in_column_data_type_header27776 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header27781 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header27786 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header27788 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INTEGER_SYM_in_column_data_type_header27802 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header27804 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header27806 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header27808 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_UNSIGNED_SYM_in_column_data_type_header27813 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_ZEROFILL_in_column_data_type_header27818 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header27823 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header27828 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header27830 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BIGINT_in_column_data_type_header27844 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header27846 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header27848 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header27850 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_UNSIGNED_SYM_in_column_data_type_header27855 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_ZEROFILL_in_column_data_type_header27860 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header27865 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header27870 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header27872 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REAL_in_column_data_type_header27886 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header27888 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header27890 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_column_data_type_header27892 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header27894 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header27896 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_UNSIGNED_SYM_in_column_data_type_header27901 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_ZEROFILL_in_column_data_type_header27906 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header27911 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header27916 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header27918 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOUBLE_SYM_in_column_data_type_header27932 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header27934 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header27936 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_column_data_type_header27938 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header27940 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header27942 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_UNSIGNED_SYM_in_column_data_type_header27947 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_ZEROFILL_in_column_data_type_header27952 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header27957 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header27962 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header27964 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FLOAT_SYM_in_column_data_type_header27978 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header27980 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header27982 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_column_data_type_header27984 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header27986 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header27988 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_UNSIGNED_SYM_in_column_data_type_header27993 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_ZEROFILL_in_column_data_type_header27998 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header28003 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header28008 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header28010 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DECIMAL_SYM_in_column_data_type_header28024 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header28026 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header28028 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_column_data_type_header28031 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header28033 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header28037 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_UNSIGNED_SYM_in_column_data_type_header28042 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_ZEROFILL_in_column_data_type_header28047 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header28052 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header28057 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header28059 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NUMERIC_SYM_in_column_data_type_header28073 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header28075 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header28077 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_column_data_type_header28080 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header28082 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header28086 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_UNSIGNED_SYM_in_column_data_type_header28091 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_ZEROFILL_in_column_data_type_header28096 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header28101 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header28106 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header28108 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DATE_SYM_in_column_data_type_header28122 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header28125 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header28130 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_column_data_type_header28132 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIME_SYM_in_column_data_type_header28146 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header28149 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header28154 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_column_data_type_header28156 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIMESTAMP_in_column_data_type_header28170 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header28173 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header28178 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_set_in_column_data_type_header28180 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DATETIME_in_column_data_type_header28198 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header28201 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header28206 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_set_in_column_data_type_header28208 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_YEAR_in_column_data_type_header28226 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header28229 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header28234 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_column_data_type_header28236 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CHAR_in_column_data_type_header28250 = new BitSet(new long[]{0x0000000000000002L,0x0000000002004000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header28255 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header28257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header28259 = new BitSet(new long[]{0x0000000000000002L,0x0000000002004000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_column_data_type_header28264 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_column_data_type_header28266 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_column_data_type_header28268 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_COLLATE_SYM_in_column_data_type_header28273 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_collation_name_in_column_data_type_header28275 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header28280 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header28285 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_column_data_type_header28287 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VARCHAR_in_column_data_type_header28301 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header28303 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header28305 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header28307 = new BitSet(new long[]{0x0000000000000002L,0x0000000002004000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_column_data_type_header28312 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_column_data_type_header28314 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_column_data_type_header28316 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_COLLATE_SYM_in_column_data_type_header28321 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_collation_name_in_column_data_type_header28323 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header28328 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header28333 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_column_data_type_header28335 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BINARY_in_column_data_type_header28349 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header28354 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header28356 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header28358 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header28363 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header28368 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_column_data_type_header28370 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VARBINARY_in_column_data_type_header28384 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header28386 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header28388 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header28390 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header28393 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header28398 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_column_data_type_header28400 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TINYBLOB_in_column_data_type_header28414 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header28417 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BLOB_SYM_in_column_data_type_header28431 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header28434 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MEDIUMBLOB_in_column_data_type_header28448 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header28451 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LONGBLOB_in_column_data_type_header28465 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header28468 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TINYTEXT_in_column_data_type_header28482 = new BitSet(new long[]{0x0001000000000002L,0x0000000002004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_BINARY_in_column_data_type_header28487 = new BitSet(new long[]{0x0000000000000002L,0x0000000002004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_column_data_type_header28492 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_column_data_type_header28494 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_column_data_type_header28496 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_COLLATE_SYM_in_column_data_type_header28501 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_collation_name_in_column_data_type_header28503 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header28508 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TEXT_SYM_in_column_data_type_header28522 = new BitSet(new long[]{0x0001000000000002L,0x0000000002004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_BINARY_in_column_data_type_header28527 = new BitSet(new long[]{0x0000000000000002L,0x0000000002004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_column_data_type_header28532 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_column_data_type_header28534 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_column_data_type_header28536 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_COLLATE_SYM_in_column_data_type_header28541 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_collation_name_in_column_data_type_header28543 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header28548 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MEDIUMTEXT_in_column_data_type_header28562 = new BitSet(new long[]{0x0001000000000002L,0x0000000002004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_BINARY_in_column_data_type_header28565 = new BitSet(new long[]{0x0000000000000002L,0x0000000002004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_column_data_type_header28570 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_column_data_type_header28572 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_column_data_type_header28574 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_COLLATE_SYM_in_column_data_type_header28579 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_collation_name_in_column_data_type_header28581 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header28586 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LONGTEXT_in_column_data_type_header28600 = new BitSet(new long[]{0x0001000000000002L,0x0000000002004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_BINARY_in_column_data_type_header28605 = new BitSet(new long[]{0x0000000000000002L,0x0000000002004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_column_data_type_header28610 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_column_data_type_header28612 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_column_data_type_header28614 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_COLLATE_SYM_in_column_data_type_header28619 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_collation_name_in_column_data_type_header28621 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header28626 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ENUM_in_column_data_type_header28640 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header28645 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_column_data_type_header28647 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_column_data_type_header28650 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_column_data_type_header28652 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header28656 = new BitSet(new long[]{0x0000000000000002L,0x0000000002004000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_column_data_type_header28659 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_column_data_type_header28661 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_column_data_type_header28663 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_COLLATE_SYM_in_column_data_type_header28668 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_collation_name_in_column_data_type_header28670 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header28675 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header28680 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_column_data_type_header28682 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SET_SYM_in_column_data_type_header28696 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header28698 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_column_data_type_header28700 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_column_data_type_header28703 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_column_data_type_header28705 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header28709 = new BitSet(new long[]{0x0000000000000002L,0x0000000002004000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_column_data_type_header28712 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_column_data_type_header28714 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_column_data_type_header28716 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_COLLATE_SYM_in_column_data_type_header28721 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_collation_name_in_column_data_type_header28723 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header28728 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header28733 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_column_data_type_header28735 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_column_name_in_index_column_name28753 = new BitSet(new long[]{0x0000000002000002L,0x0000000000000000L,0x0000080000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_index_column_name28756 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_index_column_name28758 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_index_column_name28760 = new BitSet(new long[]{0x0000000002000002L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_REFERENCES_in_reference_definition28781 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_reference_definition28783 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_reference_definition28785 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_reference_definition28787 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_reference_definition28790 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_reference_definition28792 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_reference_definition28796 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L,0x0000000000020000L});
	public static final BitSet FOLLOW_MATCH_in_reference_definition28803 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_FULL_in_reference_definition28805 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_MATCH_in_reference_definition28811 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_PARTIAL_in_reference_definition28813 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_MATCH_in_reference_definition28819 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_SIMPLE_SYM_in_reference_definition28821 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_ON_in_reference_definition28830 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_DELETE_SYM_in_reference_definition28832 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000080000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_reference_option_in_reference_definition28834 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_ON_in_reference_definition28841 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_UPDATE_in_reference_definition28843 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000080000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_reference_option_in_reference_definition28845 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RESTRICT_in_reference_option28857 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CASCADE_in_reference_option28863 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SET_SYM_in_reference_option28869 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_NULL_SYM_in_reference_option28871 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NO_SYM_in_reference_option28877 = new BitSet(new long[]{0x0000000000000080L});
	public static final BitSet FOLLOW_ACTION_in_reference_option28879 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_option_in_table_options28890 = new BitSet(new long[]{0x0000005000000002L,0x0000100182024000L,0x0000022000010000L,0x0000000000000800L,0x0000802000000000L,0x0000000000000040L,0x0000020000400000L,0x0000020200000000L,0x0080000000000000L,0x0300000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_COMMA_in_table_options28895 = new BitSet(new long[]{0x0000005000000000L,0x0000100102024000L,0x0000022000010000L,0x0000000000000800L,0x0000802000000000L,0x0000000000000040L,0x0000020000400000L,0x0000020200000000L,0x0080000000000000L,0x0300000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_table_option_in_table_options28900 = new BitSet(new long[]{0x0000005000000002L,0x0000100182024000L,0x0000022000010000L,0x0000000000000800L,0x0000802000000000L,0x0000000000000040L,0x0000020000400000L,0x0000020200000000L,0x0080000000000000L,0x0300000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_ENGINE_SYM_in_table_option28916 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000040000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option28919 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_engine_name_in_table_option28923 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AUTO_INCREMENT_in_table_option28935 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0004000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option28938 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_table_option28942 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AVG_ROW_LENGTH_in_table_option28954 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0004000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option28957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_table_option28961 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_table_option28974 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_table_option28978 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_table_option28980 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000062000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option28983 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_table_option28987 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CHECKSUM_SYM_in_table_option28999 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0004000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option29002 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_table_option29006 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_table_option29019 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_COLLATE_SYM_in_table_option29023 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000040000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option29026 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_collation_name_in_table_option29030 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COMMENT_SYM_in_table_option29042 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option29045 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_table_option29049 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CONNECTION_SYM_in_table_option29061 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option29064 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_table_option29068 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DATA_SYM_in_table_option29080 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_DIRECTORY_SYM_in_table_option29082 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option29085 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_table_option29089 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DELAY_KEY_WRITE_SYM_in_table_option29101 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0004000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option29104 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_table_option29108 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INDEX_SYM_in_table_option29120 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_DIRECTORY_SYM_in_table_option29122 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option29125 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_table_option29129 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INSERT_METHOD_in_table_option29141 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000002000L,0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option29144 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_set_in_table_option29148 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KEY_BLOCK_SIZE_in_table_option29172 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0004000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option29175 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_table_option29179 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MAX_ROWS_in_table_option29191 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0004000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option29194 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_table_option29198 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MIN_ROWS_in_table_option29210 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0004000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option29213 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_table_option29217 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PACK_KEYS_SYM_in_table_option29229 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000002000L,0x0004000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option29232 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_set_in_table_option29236 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PASSWORD_in_table_option29254 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option29257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_table_option29261 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ROW_FORMAT_SYM_in_table_option29273 = new BitSet(new long[]{0x0000000000000000L,0x0000004800000000L,0x4000002000000000L,0x0000080000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option29276 = new BitSet(new long[]{0x0000000000000000L,0x0000004800000000L,0x4000002000000000L,0x0000080000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_set_in_table_option29280 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STATS_AUTO_RECALC_in_table_option29304 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000002000L,0x0004000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option29307 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_set_in_table_option29311 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STATS_PERSISTENT_in_table_option29329 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000002000L,0x0004000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option29332 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_set_in_table_option29336 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_UNION_SYM_in_table_option29354 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option29357 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_table_option29361 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_table_option29363 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_table_option29366 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_table_option29368 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_table_option29372 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PARTITION_SYM_in_partition_options29385 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_BY_SYM_in_partition_options29387 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000001200000080L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_LINEAR_SYM_in_partition_options29403 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_HASH_SYM_in_partition_options29407 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_partition_options29409 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_partition_options29411 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_partition_options29413 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LINEAR_SYM_in_partition_options29426 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_KEY_SYM_in_partition_options29430 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_partition_options29432 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_column_list_in_partition_options29434 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_partition_options29436 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_RANGE_SYM_in_partition_options29448 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_partition_options29450 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_partition_options29452 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_partition_options29454 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_COLUMNS_SYM_in_partition_options29458 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_partition_options29460 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_column_list_in_partition_options29462 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_partition_options29464 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LIST_SYM_in_partition_options29477 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_partition_options29479 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_partition_options29481 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_partition_options29483 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_COLUMNS_SYM_in_partition_options29487 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_partition_options29489 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_column_list_in_partition_options29491 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_partition_options29493 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_PARTITIONS_SYM_in_partition_options29508 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_partition_options29510 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_SUBPARTITION_SYM_in_partition_options29525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_BY_SYM_in_partition_options29527 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000200000080L});
	public static final BitSet FOLLOW_LINEAR_SYM_in_partition_options29538 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_HASH_SYM_in_partition_options29542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_partition_options29544 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_partition_options29546 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_partition_options29548 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_LINEAR_SYM_in_partition_options29557 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_KEY_SYM_in_partition_options29561 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_partition_options29563 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_column_list_in_partition_options29565 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_partition_options29567 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_SUBPARTITIONS_SYM_in_partition_options29578 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_partition_options29580 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_partition_options29595 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_partition_definition_in_partition_options29597 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_partition_options29601 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_partition_definition_in_partition_options29604 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_partition_options29608 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PARTITION_SYM_in_partition_definition29620 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_partition_name_in_partition_definition29622 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000010000L,0x0000000000000800L,0x0000002000000000L,0x0100000000000000L,0x0000020000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L,0x0000000800000000L});
	public static final BitSet FOLLOW_VALUES_in_partition_definition29635 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_LESS_SYM_in_partition_definition29651 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_THAN_SYM_in_partition_definition29653 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_LPAREN_in_partition_definition29658 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_expression_list_in_partition_definition29660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_partition_definition29662 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000010000L,0x0000000000000800L,0x0000002000000000L,0x0100000000000000L,0x0000020000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_MAXVALUE_SYM_in_partition_definition29667 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000010000L,0x0000000000000800L,0x0000002000000000L,0x0100000000000000L,0x0000020000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_IN_SYM_in_partition_definition29688 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_partition_definition29690 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_expression_list_in_partition_definition29692 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_partition_definition29694 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000010000L,0x0000000000000800L,0x0000002000000000L,0x0100000000000000L,0x0000020000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_STORAGE_SYM_in_partition_definition29715 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_ENGINE_SYM_in_partition_definition29719 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000040000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_partition_definition29722 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_engine_name_in_partition_definition29726 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000010000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L,0x0000020000400000L});
	public static final BitSet FOLLOW_COMMENT_SYM_in_partition_definition29733 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_partition_definition29736 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_partition_definition29740 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000010000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L,0x0000020000400000L});
	public static final BitSet FOLLOW_DATA_SYM_in_partition_definition29748 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_DIRECTORY_SYM_in_partition_definition29750 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_partition_definition29753 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_partition_definition29757 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L,0x0000020000400000L});
	public static final BitSet FOLLOW_INDEX_SYM_in_partition_definition29764 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_DIRECTORY_SYM_in_partition_definition29766 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_partition_definition29769 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_partition_definition29773 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000020000400000L});
	public static final BitSet FOLLOW_MAX_ROWS_in_partition_definition29780 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0004000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_partition_definition29783 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_partition_definition29787 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_MIN_ROWS_in_partition_definition29794 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0004000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_partition_definition29797 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_partition_definition29801 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_partition_definition29808 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_subpartition_definition_in_partition_definition29810 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_partition_definition29813 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_subpartition_definition_in_partition_definition29816 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_partition_definition29820 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SUBPARTITION_SYM_in_subpartition_definition29832 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_partition_logical_name_in_subpartition_definition29834 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000010000L,0x0000000000000800L,0x0000002000000000L,0x0000000000000000L,0x0000020000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_STORAGE_SYM_in_subpartition_definition29840 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_ENGINE_SYM_in_subpartition_definition29844 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000040000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_subpartition_definition29847 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_engine_name_in_subpartition_definition29851 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000010000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000020000400000L});
	public static final BitSet FOLLOW_COMMENT_SYM_in_subpartition_definition29858 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_subpartition_definition29861 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_subpartition_definition29865 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000010000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000020000400000L});
	public static final BitSet FOLLOW_DATA_SYM_in_subpartition_definition29873 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_DIRECTORY_SYM_in_subpartition_definition29875 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_subpartition_definition29878 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_subpartition_definition29882 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000020000400000L});
	public static final BitSet FOLLOW_INDEX_SYM_in_subpartition_definition29889 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_DIRECTORY_SYM_in_subpartition_definition29891 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_subpartition_definition29894 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_subpartition_definition29898 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000400000L});
	public static final BitSet FOLLOW_MAX_ROWS_in_subpartition_definition29905 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0004000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_subpartition_definition29908 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_subpartition_definition29912 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_MIN_ROWS_in_subpartition_definition29919 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0004000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_subpartition_definition29922 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_subpartition_definition29926 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_length29938 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALTER_in_alter_table_statement29949 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_IGNORE_SYM_in_alter_table_statement29952 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_TABLE_in_alter_table_statement29956 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_alter_table_statement29958 = new BitSet(new long[]{0x0000005000190402L,0x0010100102464800L,0x0406022000010000L,0x0000800000400810L,0x0000802800000000L,0x0000040000000040L,0x0000820000400000L,0x0000030204200000L,0x0080000780080000L,0x0300000000000000L,0x0040000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_alter_table_specification_in_alter_table_statement29964 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_COMMA_in_alter_table_statement29967 = new BitSet(new long[]{0x0000005000190400L,0x0010100102464800L,0x0406022000010000L,0x0000800000400810L,0x0000802800000000L,0x0000040000000040L,0x0000820000400000L,0x0000020204200000L,0x0080000780080000L,0x0300000000000000L,0x0040000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_alter_table_specification_in_alter_table_statement29969 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_partition_options_in_alter_table_statement29980 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_options_in_alter_table_specification29994 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ADD_SYM_in_alter_table_specification30002 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_COLUMN_SYM_in_alter_table_specification30005 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_name_in_alter_table_specification30009 = new BitSet(new long[]{0x0281400000000000L,0x0000000000002000L,0x0100000400440000L,0x0000100000001000L,0x0048000000000000L,0x0006000000000000L,0x0000000070000000L,0x0000000000000400L,0x0000000000020000L,0x0000000040004000L,0x000003A220000000L,0x0000006000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_column_definition_in_alter_table_specification30011 = new BitSet(new long[]{0x0000000000002002L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_set_in_alter_table_specification30015 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_name_in_alter_table_specification30021 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ADD_SYM_in_alter_table_specification30034 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_COLUMN_SYM_in_alter_table_specification30037 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_alter_table_specification30041 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_definitions_in_alter_table_specification30043 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_alter_table_specification30045 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ADD_SYM_in_alter_table_specification30055 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_set_in_alter_table_specification30057 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_index_name_in_alter_table_specification30064 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_index_type_in_alter_table_specification30069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_alter_table_specification30073 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_names_in_alter_table_specification30075 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_alter_table_specification30077 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_index_option_in_alter_table_specification30080 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_ADD_SYM_in_alter_table_specification30092 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_CONSTRAINT_in_alter_table_specification30095 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_constraint_symbol_name_in_alter_table_specification30098 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_PRIMARY_SYM_in_alter_table_specification30104 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_KEY_SYM_in_alter_table_specification30106 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_index_type_in_alter_table_specification30109 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_alter_table_specification30113 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_names_in_alter_table_specification30115 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_alter_table_specification30117 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_index_option_in_alter_table_specification30120 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_ADD_SYM_in_alter_table_specification30142 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_CONSTRAINT_in_alter_table_specification30145 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_constraint_symbol_name_in_alter_table_specification30148 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_UNIQUE_SYM_in_alter_table_specification30154 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002040000000L,0x0100000000000080L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_index_name_in_alter_table_specification30164 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_index_type_in_alter_table_specification30174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_alter_table_specification30178 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_alter_table_specification30180 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_alter_table_specification30183 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_alter_table_specification30185 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_alter_table_specification30189 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_index_option_in_alter_table_specification30192 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_ADD_SYM_in_alter_table_specification30208 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_FULLTEXT_SYM_in_alter_table_specification30210 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002040000000L,0x0100000000000080L});
	public static final BitSet FOLLOW_index_name_in_alter_table_specification30220 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_alter_table_specification30224 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_names_in_alter_table_specification30226 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_alter_table_specification30228 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_index_option_in_alter_table_specification30231 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_ADD_SYM_in_alter_table_specification30243 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_SPATIAL_SYM_in_alter_table_specification30245 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002040000000L,0x0100000000000080L});
	public static final BitSet FOLLOW_index_name_in_alter_table_specification30255 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_alter_table_specification30259 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_names_in_alter_table_specification30261 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_alter_table_specification30263 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_index_option_in_alter_table_specification30266 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_ADD_SYM_in_alter_table_specification30278 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_CONSTRAINT_in_alter_table_specification30281 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_constraint_symbol_name_in_alter_table_specification30284 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_FOREIGN_in_alter_table_specification30290 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_KEY_SYM_in_alter_table_specification30292 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_index_name_in_alter_table_specification30295 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_alter_table_specification30299 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_names_in_alter_table_specification30301 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_alter_table_specification30303 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_reference_definition_in_alter_table_specification30305 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALGORITHM_SYM_in_alter_table_specification30315 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000002000000000L,0x0000000000002000L,0x0000100000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_alter_table_specification30318 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_set_in_alter_table_specification30322 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALTER_in_alter_table_specification30338 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_COLUMN_SYM_in_alter_table_specification30341 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_name_in_alter_table_specification30345 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_alter_table_specification30349 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_alter_table_specification30351 = new BitSet(new long[]{0x0020000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0004000000080000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000200L,0x0000000000040000L,0x0000000000000000L,0x0020000010000000L});
	public static final BitSet FOLLOW_literal_value_in_alter_table_specification30353 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DROP_in_alter_table_specification30359 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_alter_table_specification30361 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CHANGE_in_alter_table_specification30373 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_COLUMN_SYM_in_alter_table_specification30376 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_name_in_alter_table_specification30380 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_name_in_alter_table_specification30382 = new BitSet(new long[]{0x0281400000000000L,0x0000000000002000L,0x0100000400440000L,0x0000100000001000L,0x0048000000000000L,0x0006000000000000L,0x0000000070000000L,0x0000000000000400L,0x0000000000020000L,0x0000000040004000L,0x000003A220000000L,0x0000006000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_column_definition_in_alter_table_specification30384 = new BitSet(new long[]{0x0000000000002002L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_FIRST_SYM_in_alter_table_specification30387 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AFTER_SYM_in_alter_table_specification30389 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_name_in_alter_table_specification30391 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LOCK_in_alter_table_specification30403 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000802000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_EQ_SYM_in_alter_table_specification30406 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_set_in_alter_table_specification30410 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MODIFY_SYM_in_alter_table_specification30428 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_COLUMN_SYM_in_alter_table_specification30431 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_name_in_alter_table_specification30435 = new BitSet(new long[]{0x0281400000000000L,0x0000000000002000L,0x0100000400440000L,0x0000100000001000L,0x0048000000000000L,0x0006000000000000L,0x0000000070000000L,0x0000000000000400L,0x0000000000020000L,0x0000000040004000L,0x000003A220000000L,0x0000006000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_column_definition_in_alter_table_specification30437 = new BitSet(new long[]{0x0000000000002002L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_FIRST_SYM_in_alter_table_specification30440 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AFTER_SYM_in_alter_table_specification30444 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_name_in_alter_table_specification30446 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DROP_in_alter_table_specification30458 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_COLUMN_SYM_in_alter_table_specification30461 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_name_in_alter_table_specification30465 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DROP_in_alter_table_specification30475 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_PRIMARY_SYM_in_alter_table_specification30477 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_KEY_SYM_in_alter_table_specification30479 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DROP_in_alter_table_specification30489 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_set_in_alter_table_specification30491 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_name_in_alter_table_specification30497 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DROP_in_alter_table_specification30507 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_FOREIGN_in_alter_table_specification30509 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_KEY_SYM_in_alter_table_specification30511 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_foreign_key_symbol_name_in_alter_table_specification30513 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DISABLE_SYM_in_alter_table_specification30523 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_KEYS_in_alter_table_specification30525 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ENABLE_SYM_in_alter_table_specification30535 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_KEYS_in_alter_table_specification30537 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RENAME_in_alter_table_specification30547 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_table_name_in_alter_table_specification30556 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ORDER_SYM_in_alter_table_specification30566 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_BY_SYM_in_alter_table_specification30568 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_name_in_alter_table_specification30570 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_alter_table_specification30573 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_name_in_alter_table_specification30575 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_CONVERT_SYM_in_alter_table_specification30587 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_TO_SYM_in_alter_table_specification30589 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_alter_table_specification30591 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_alter_table_specification30593 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_alter_table_specification30595 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_COLLATE_SYM_in_alter_table_specification30598 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_collation_name_in_alter_table_specification30600 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_alter_table_specification30613 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_alter_table_specification30617 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_alter_table_specification30619 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000062000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_alter_table_specification30622 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_alter_table_specification30626 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_COLLATE_SYM_in_alter_table_specification30629 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000040000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_alter_table_specification30632 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_collation_name_in_alter_table_specification30636 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DISCARD_in_alter_table_specification30648 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_TABLESPACE_in_alter_table_specification30650 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IMPORT_in_alter_table_specification30660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_TABLESPACE_in_alter_table_specification30662 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FORCE_SYM_in_alter_table_specification30672 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ADD_SYM_in_alter_table_specification30682 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_PARTITION_SYM_in_alter_table_specification30684 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_alter_table_specification30686 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_partition_definition_in_alter_table_specification30688 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_alter_table_specification30690 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DROP_in_alter_table_specification30700 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_PARTITION_SYM_in_alter_table_specification30702 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_partition_names_in_alter_table_specification30704 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TRUNCATE_in_alter_table_specification30714 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_PARTITION_SYM_in_alter_table_specification30716 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_partition_names_in_alter_table_specification30719 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALL_in_alter_table_specification30723 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COALESCE_in_alter_table_specification30734 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_PARTITION_SYM_in_alter_table_specification30736 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_alter_table_specification30738 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REORGANIZE_SYM_in_alter_table_specification30748 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_PARTITION_SYM_in_alter_table_specification30750 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_partition_names_in_alter_table_specification30752 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_INTO_in_alter_table_specification30754 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_alter_table_specification30756 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_partition_definition_in_alter_table_specification30758 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_alter_table_specification30761 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_partition_definition_in_alter_table_specification30763 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_alter_table_specification30767 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXCHANGE_SYM_in_alter_table_specification30777 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_PARTITION_SYM_in_alter_table_specification30779 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_partition_name_in_alter_table_specification30781 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_WITH_in_alter_table_specification30783 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_TABLE_in_alter_table_specification30785 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_alter_table_specification30787 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ANALYZE_SYM_in_alter_table_specification30797 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_PARTITION_SYM_in_alter_table_specification30799 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_partition_names_in_alter_table_specification30802 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALL_in_alter_table_specification30806 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CHECK_SYM_in_alter_table_specification30817 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_PARTITION_SYM_in_alter_table_specification30819 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_partition_names_in_alter_table_specification30822 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALL_in_alter_table_specification30826 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OPTIMIZE_in_alter_table_specification30837 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_PARTITION_SYM_in_alter_table_specification30839 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_partition_names_in_alter_table_specification30842 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALL_in_alter_table_specification30846 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REBUILD_SYM_in_alter_table_specification30857 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_PARTITION_SYM_in_alter_table_specification30859 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_partition_names_in_alter_table_specification30862 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALL_in_alter_table_specification30866 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REPAIR_in_alter_table_specification30877 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_PARTITION_SYM_in_alter_table_specification30879 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_partition_names_in_alter_table_specification30882 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALL_in_alter_table_specification30886 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REMOVE_SYM_in_alter_table_specification30897 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_PARTITIONING_SYM_in_alter_table_specification30899 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_index_column_name_in_index_column_names30910 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_index_column_names30913 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_index_column_names30915 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_USING_SYM_in_index_type30925 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_set_in_index_type30927 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KEY_BLOCK_SIZE_in_index_option30946 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0004000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_index_option30949 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_index_option30953 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_index_type_in_index_option30961 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WITH_in_index_option30969 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_PARSER_SYM_in_index_option30971 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_parser_name_in_index_option30973 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COMMENT_SYM_in_index_option30983 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_index_option30985 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_column_name_in_column_definitions30996 = new BitSet(new long[]{0x0281400000000000L,0x0000000000002000L,0x0100000400440000L,0x0000100000001000L,0x0048000000000000L,0x0006000000000000L,0x0000000070000000L,0x0000000000000400L,0x0000000000020000L,0x0000000040004000L,0x000003A220000000L,0x0000006000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_column_definition_in_column_definitions30998 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_column_definitions31001 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_name_in_column_definitions31003 = new BitSet(new long[]{0x0281400000000000L,0x0000000000002000L,0x0100000400440000L,0x0000100000001000L,0x0048000000000000L,0x0006000000000000L,0x0000000070000000L,0x0000000000000400L,0x0000000000020000L,0x0000000040004000L,0x000003A220000000L,0x0000006000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_column_definition_in_column_definitions31005 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_RENAME_in_rename_table_statement31019 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_TABLE_in_rename_table_statement31021 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_rename_table_statement31026 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_TO_SYM_in_rename_table_statement31028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_rename_table_statement31030 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_rename_table_statement31035 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_rename_table_statement31037 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_TO_SYM_in_rename_table_statement31039 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_rename_table_statement31041 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_DROP_in_drop_table_statement31055 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002100000L});
	public static final BitSet FOLLOW_TEMPORARY_in_drop_table_statement31058 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_TABLE_in_drop_table_statement31062 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000140000000L});
	public static final BitSet FOLLOW_IF_in_drop_table_statement31065 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_EXISTS_in_drop_table_statement31067 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_drop_table_statement31073 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_COMMA_in_drop_table_statement31076 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_drop_table_statement31078 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_TRUNCATE_in_truncate_table_statement31103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_TABLE_in_truncate_table_statement31106 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_truncate_table_statement31110 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CREATE_in_create_view_statement31131 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_OR_SYM_in_create_view_statement31134 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_REPLACE_in_create_view_statement31136 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_create_view_body_in_create_view_statement31142 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALGORITHM_SYM_in_create_view_body31152 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_EQ_SYM_in_create_view_body31154 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000004000000L});
	public static final BitSet FOLLOW_set_in_create_view_body31156 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_DEFINER_in_create_view_body31173 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_EQ_SYM_in_create_view_body31175 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_user_name_in_create_view_body31178 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_CURRENT_USER_in_create_view_body31182 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_SQL_SYM_in_create_view_body31191 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SECURITY_SYM_in_create_view_body31193 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_set_in_create_view_body31195 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_VIEW_SYM_in_create_view_body31209 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_view_name_in_create_view_body31211 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_create_view_body31214 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_column_list_in_create_view_body31216 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_create_view_body31218 = new BitSet(new long[]{0x0000000040000000L});
	public static final BitSet FOLLOW_AS_SYM_in_create_view_body31224 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_select_statement_in_create_view_body31226 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_WITH_in_create_view_body31231 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_CHECK_SYM_in_create_view_body31242 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_OPTION_in_create_view_body31244 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALTER_in_alter_view_statement31258 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_create_view_body_in_alter_view_statement31262 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DROP_in_drop_view_statement31274 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_VIEW_SYM_in_drop_view_statement31276 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000140000000L});
	public static final BitSet FOLLOW_IF_in_drop_view_statement31279 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_EXISTS_in_drop_view_statement31281 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_view_name_in_drop_view_statement31287 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_COMMA_in_drop_view_statement31290 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_view_name_in_drop_view_statement31292 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_IN_SYM_in_synpred54_SQL20719 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_NATURAL_in_synpred54_SQL20721 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_LANGUAGE_in_synpred54_SQL20723 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_MODE_SYM_in_synpred54_SQL20725 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IN_SYM_in_synpred55_SQL20733 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_NATURAL_in_synpred55_SQL20735 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_LANGUAGE_in_synpred55_SQL20737 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_MODE_SYM_in_synpred55_SQL20739 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_WITH_in_synpred55_SQL20741 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_QUERY_SYM_in_synpred55_SQL20743 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_EXPANSION_SYM_in_synpred55_SQL20745 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_char_functions_in_synpred87_SQL21058 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OR_SYM_in_synpred268_SQL22490 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_exp_factor1_in_synpred268_SQL22492 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_XOR_in_synpred269_SQL22507 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_exp_factor2_in_synpred269_SQL22509 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AND_SYM_in_synpred270_SQL22524 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_exp_factor3_in_synpred270_SQL22526 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOT_SYM_in_synpred271_SQL22538 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IS_SYM_in_synpred274_SQL22554 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_NOT_SYM_in_synpred274_SQL22557 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_boolean_literal_in_synpred274_SQL22562 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NULL_SYM_in_synpred274_SQL22564 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_predicate_in_synpred275_SQL22581 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000804L,0x0200000020000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_relational_op_in_synpred275_SQL22583 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_predicate_in_synpred275_SQL22585 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_predicate_in_synpred278_SQL22596 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000804L,0x0200000020000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_relational_op_in_synpred278_SQL22598 = new BitSet(new long[]{0x0000000000420000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_subquery_in_synpred278_SQL22611 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOT_SYM_in_synpred280_SQL22621 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_EXISTS_in_synpred280_SQL22624 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_subquery_in_synpred280_SQL22626 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_expr_in_synpred283_SQL22648 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_NOT_SYM_in_synpred283_SQL22651 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_IN_SYM_in_synpred283_SQL22655 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_subquery_in_synpred283_SQL22658 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_list_in_synpred283_SQL22662 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_expr_in_synpred285_SQL22673 = new BitSet(new long[]{0x0000100000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_NOT_SYM_in_synpred285_SQL22676 = new BitSet(new long[]{0x0000100000000000L});
	public static final BitSet FOLLOW_BETWEEN_in_synpred285_SQL22680 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_synpred285_SQL22682 = new BitSet(new long[]{0x0000000000200000L});
	public static final BitSet FOLLOW_AND_SYM_in_synpred285_SQL22684 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_predicate_in_synpred285_SQL22686 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_expr_in_synpred286_SQL22697 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_SOUNDS_SYM_in_synpred286_SQL22699 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_LIKE_SYM_in_synpred286_SQL22701 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_synpred286_SQL22703 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ESCAPE_SYM_in_synpred288_SQL22726 = new BitSet(new long[]{0x0178882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x0206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_simple_expr_in_synpred288_SQL22728 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_expr_in_synpred289_SQL22714 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_NOT_SYM_in_synpred289_SQL22717 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_LIKE_SYM_in_synpred289_SQL22721 = new BitSet(new long[]{0x0178882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x0206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_simple_expr_in_synpred289_SQL22723 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_ESCAPE_SYM_in_synpred289_SQL22726 = new BitSet(new long[]{0x0178882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x0206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_simple_expr_in_synpred289_SQL22728 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_expr_in_synpred291_SQL22740 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000002000000L});
	public static final BitSet FOLLOW_NOT_SYM_in_synpred291_SQL22743 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_REGEXP_in_synpred291_SQL22747 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_synpred291_SQL22749 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VERTBAR_in_synpred292_SQL22777 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_factor1_in_synpred292_SQL22779 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BITAND_in_synpred293_SQL22795 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_factor2_in_synpred293_SQL22797 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_synpred295_SQL22813 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_factor3_in_synpred295_SQL22819 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_synpred297_SQL22835 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_factor4_in_synpred297_SQL22841 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_synpred301_SQL22857 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_factor5_in_synpred301_SQL22867 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_synpred303_SQL22883 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_interval_expr_in_synpred303_SQL22889 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_synpred307_SQL22901 = new BitSet(new long[]{0x0178882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x0206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_simple_expr_in_synpred307_SQL22917 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CONVERT_SYM_in_synpred324_SQL23092 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_synpred324_SQL23094 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_synpred324_SQL23096 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_synpred324_SQL23098 = new BitSet(new long[]{0x0001000000000000L,0x0000000000002000L,0x0000000400440000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0000002000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_cast_data_type_in_synpred324_SQL23100 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_synpred324_SQL23102 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CONVERT_SYM_in_synpred325_SQL23114 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_synpred325_SQL23116 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_synpred325_SQL23118 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_USING_SYM_in_synpred325_SQL23120 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_transcoding_name_in_synpred325_SQL23122 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_synpred325_SQL23124 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_search_modifier_in_synpred335_SQL23340 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_factor1_in_synpred340_SQL23450 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_join_condition_in_synpred343_SQL23484 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ON_in_synpred345_SQL23511 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_synpred345_SQL23513 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_synpred349_SQL23533 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_OUTER_in_synpred349_SQL23540 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_JOIN_SYM_in_synpred349_SQL23544 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_table_factor4_in_synpred349_SQL23548 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_join_condition_in_synpred349_SQL23550 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_partition_clause_in_synpred354_SQL23609 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_synpred373_SQL23904 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_column_spec_in_synpred425_SQL24460 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_synpred426_SQL24464 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COMMA_in_synpred432_SQL24585 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_displayed_column_in_synpred432_SQL24589 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_column_spec_in_synpred438_SQL24685 = new BitSet(new long[]{0x0000000040000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_alias_in_synpred438_SQL24688 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_expr_in_synpred469_SQL25039 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_expr_in_synpred470_SQL25048 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_synpred474_SQL25109 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_single_table_update_statement_in_synpred477_SQL25161 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COMMA_in_synpred489_SQL25305 = new BitSet(new long[]{0x0000000000080000L,0x0000000000000008L,0x0600040000000010L,0x0000000000000000L,0x0000400000002000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002100000000L,0x0000000000040020L,0x0040000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_root_statement_in_synpred489_SQL25307 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COMMA_in_synpred858_SQL28895 = new BitSet(new long[]{0x0000005000000000L,0x0000100102024000L,0x0000022000010000L,0x0000000000000800L,0x0000802000000000L,0x0000000000000040L,0x0000020000400000L,0x0000020200000000L,0x0080000000000000L,0x0300000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_table_option_in_synpred858_SQL28900 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_options_in_synpred963_SQL29994 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_synpred1042_SQL30613 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_synpred1042_SQL30617 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_synpred1042_SQL30619 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000062000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_synpred1042_SQL30622 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_synpred1042_SQL30626 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_COLLATE_SYM_in_synpred1042_SQL30629 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000040000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_synpred1042_SQL30632 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_collation_name_in_synpred1042_SQL30636 = new BitSet(new long[]{0x0000000000000002L});
}
